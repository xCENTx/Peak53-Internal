#include "pch.h"
#include "Exploits.h"
using namespace SDK;

// fwd declare static member variables
bool							Exploits::m_init;
bool							Exploits::m_valid;
UEngine*						Exploits::pGEngine;
UGameEngine*					Exploits::pGGameEngine;
UWorld*							Exploits::pGWorld;
ULocalPlayer*					Exploits::pLocalPlayer;
APlayerController*				Exploits::pLocalController;
APawn*							Exploits::pLocalPawn;
ACharacter*						Exploits::pLocalCharacter;
AActor*							Exploits::pLocalActor;
APlayerCameraManager*			Exploits::pCamera;
APlayerState*					Exploits::pPlayerState;
UCharacterMovementComponent*	Exploits::pMovement;

Exploits::Exploits() { initialize(); }
Exploits::~Exploits() { m_init = false; }

bool Exploits::initialize()
{
	bool result = false;
	if (!m_init)
		return result;

	InitGObjects();
	pGEngine = UEngine::GetEngine();
	pGGameEngine = UGameEngine::GetEngine();
	pGWorld = UWorld::GetWorld();

	m_init = true;
	m_valid = true;
	return true;
}

void Exploits::shutdown()
{
	reset_player();
	m_init = false;
}

void Exploits::update()
{
	if (!m_init)
		return;

	UGameInstance* pGameInstance = pGWorld->OwningGameInstance;
	if (!pGameInstance)
	{
		reset_player();
		return;
	}

	ULocalPlayer* pULocal = pGameInstance->LocalPlayers[0];
	if (!pULocal)
	{
		reset_player();
		return;
	}
	
	APlayerController* pController = pULocal->PlayerController;
	if (!pController)
	{
		reset_player();
		return;
	}

	APawn* pPawn = pController->AcknowledgedPawn;
	if (!pPawn)
	{
		reset_player();
		return;
	}

	ACharacter* pCharacter = pController->Character;
	if (!pCharacter)
	{
		reset_player();
		return;
	}

	pLocalPlayer		= pULocal;
	pLocalController	= pController;
	pLocalPawn			= pPawn;
	pLocalCharacter		= pCharacter;
	pLocalActor			= static_cast<AActor*>(pPawn);
	pCamera				= pController->PlayerCameraManager;
	pPlayerState		= pPawn->PlayerState;
	pMovement			= pCharacter->CharacterMovement;
	m_valid				= true;
}

void Exploits::reset_player()
{
	pLocalPlayer = nullptr;
	pLocalController	= nullptr;
	pLocalPawn			= nullptr;
	pLocalCharacter		= nullptr;
	pLocalActor			= nullptr;
	pCamera				= nullptr;
	pPlayerState		= nullptr;
	pMovement			= nullptr;
	m_valid				= false;
}

void Exploits::e_tags()
{
	if (!pGWorld || !pPlayerState)
		return;


	bool local_is_dead = static_cast<ABP_SGKMasterCharacter_C*>(pLocalCharacter)->PawnIsDead;
	if (local_is_dead)
		return;

	ULevel* pLevel = pGWorld->PersistentLevel;
	if (!pLevel)
		return;

	TArray<AActor*> actor_array = pLevel->Actors;
	EPeak53Teams local_team_id = static_cast<APeak53PlayerState_C*>(pPlayerState)->PlayerTeam;
	for ( int i = 0; i < actor_array.Num(); i++)
	{
		if (!actor_array.IsValidIndex(i) || !actor_array[i])
			continue;

		AActor* pActor = actor_array[i];

		if (pActor == pLocalActor)
			continue;

		if (!pActor->IsA(APawn::StaticClass()))
			continue;

		if (!pActor->RootComponent)
			continue;

		auto entAPawn = static_cast<APawn*>(pActor);										
		if (!entAPawn) 
			continue;

		auto entACharacter = static_cast<ACharacter*>(entAPawn);
		if (!entACharacter) 
			continue;
		
		auto ATF_entACharacter = static_cast<ABP_SGKMasterCharacter_C*>(entACharacter);
		if (!ATF_entACharacter) 
			continue;

		auto entAPlayerState = static_cast<APlayerState*>(entAPawn->PlayerState);
		if (!entAPlayerState) 
			continue;

		if (!ATF_entACharacter->PawnIsDead)
			continue;

		if (ATF_entACharacter->CharacterTeam == local_team_id)
			continue;

		FVector2D screen2D;
		FVector worldPosition = pActor->RootComponent->RelativeLocation;
		if (pLocalController->ProjectWorldLocationToScreen(worldPosition, &screen2D, true))
			continue;

		ImVec2 screen = ImVec2(static_cast<float>(screen2D.X), static_cast<float>(screen2D.Y));
		ImGui::GetWindowDrawList()->AddText(screen, IM_COL32_WHITE, entAPlayerState->PlayerNamePrivate.ToString().c_str());
	}

}

void Exploits::set_fullbright(bool bToggleState)
{
	if (!pLocalPlayer)
		return;

	UGameViewportClient* pViewport = pLocalPlayer->ViewportClient;
	if (!pViewport)
		return;

	pViewport->mViewMode = bToggleState ? 1 : 3;
}