#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SGKMasterCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_Sockets_structs.hpp"
#include "S_ContainerDetails_structs.hpp"
#include "Peak53_classes.hpp"
#include "S_StartingWeaponItem_structs.hpp"
#include "Peak53Teams_structs.hpp"
#include "MeleeStand_structs.hpp"
#include "E_WorldActions_structs.hpp"
#include "E_Hitbox_structs.hpp"
#include "E_BodyMesh_structs.hpp"
#include "E_CameraType_structs.hpp"
#include "E_DamageType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SGKMasterCharacter.BP_SGKMasterCharacter_C
// 0x1300 (0x1C00 - 0x0900)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_SGKMasterCharacter_C : public APKCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0900(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       InspectCamera;                                     // 0x0908(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlagSM;                                            // 0x0910(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Distancer;                                         // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Back;                                              // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Front;                                             // 0x0928(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0930(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  ThermalPP;                                         // 0x0938(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMapIconComponent*                      MapIcon;                                           // 0x0940(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMapViewComponent*                      MapView;                                           // 0x0948(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDebugComponent_C*                      DebugComponent;                                    // 0x0950(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AntizeVOIPComponent_C*              BP_AntizeVOIPComponent;                            // 0x0958(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere;                                            // 0x0960(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       WidgetVoice;                                       // 0x0968(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CustomizationComponent_C*           BP_CustomizationComponent;                         // 0x0970(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          EnemyCollision;                                    // 0x0978(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ClimbBox;                                          // 0x0980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ThirdPersonAOnewSecondary;                         // 0x0988(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ThirdPersonAOnew;                                  // 0x0990(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       EnemyNearbyTrigger;                                // 0x0998(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BombSM;                                            // 0x09A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       PlayerInfo;                                        // 0x09A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ScopeAttachPoint;                                  // 0x09B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ThirdPersonElbowLeft;                              // 0x09B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ThirdPersonAimPoint;                               // 0x09C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FirstPersonAimPoint;                               // 0x09C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FirstPersonAO;                                     // 0x09D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ThirdPersonElbow;                                  // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ThirdPersonAO;                                     // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FirstPersonCamera;                                 // 0x09E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 FirstPersonArms;                                   // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 FirstPersonBody;                                   // 0x09F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ThrowPoint;                                        // 0x0A00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ADSSocket;                                         // 0x0A08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    CameraBoom;                                        // 0x0A10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterComponent_C*               BP_CharacterComponent;                             // 0x0A18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       ThirdPersonCamera;                                 // 0x0A20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_3_NewTrack_0_29E7AFB24FF891D553C7C3B1D415C64E; // 0x0A28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_3__Direction_29E7AFB24FF891D553C7C3B1D415C64E; // 0x0A2C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38DC[0x3];                                     // 0x0A2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_3;                                        // 0x0A30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_2_NewTrack_0_5600BF654D22EC683AB5D48E2DB8F349; // 0x0A38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_2__Direction_5600BF654D22EC683AB5D48E2DB8F349; // 0x0A3C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38DD[0x3];                                     // 0x0A3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x0A40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_NewTrack_0_CDD1A44049EB373AACCD08AD5BB4BCEB; // 0x0A48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_CDD1A44049EB373AACCD08AD5BB4BCEB; // 0x0A4C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38DE[0x3];                                     // 0x0A4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0A50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Lean_4C0B97FB48D365408F73FE89ABC89582;  // 0x0A58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_4C0B97FB48D365408F73FE89ABC89582; // 0x0A5C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38DF[0x3];                                     // 0x0A5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0A60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         SmoothInterp_NewTrack_0_D33A5A01495894FD0C08D5870FF5AA2A; // 0x0A68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SmoothInterp__Direction_D33A5A01495894FD0C08D5870FF5AA2A; // 0x0A6C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38E0[0x3];                                     // 0x0A6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SmoothInterp;                                      // 0x0A70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Prone__NewTrack_0_93D0A050451B6DC221E41CAC1268DDFB; // 0x0A78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Prone___Direction_93D0A050451B6DC221E41CAC1268DDFB; // 0x0A7C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38E1[0x3];                                     // 0x0A7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Prone_;                                            // 0x0A80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LookAtRotation;                                    // 0x0A88(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LastLookAtRotation;                                // 0x0A98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentCameraLean;                                 // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraArmStart;                                    // 0x0AB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38E2[0x8];                                     // 0x0AC8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FPCameraStartTrnsform;                             // 0x0AD0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CameraOffset;                                      // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldLean;                                        // 0x0B38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38E3[0x7];                                     // 0x0B39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LeanAlpha;                                         // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetCameraLean;                                  // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerInventory_C*                  PlayerInventory;                                   // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerBuildingComponent_C*          BuildingComponent;                                 // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_EquipmentInventory_C*               DeadInventory;                                     // 0x0B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         AttachedActors;                                    // 0x0B68(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FS_StartingWeaponItem>          StartingWeaponsChar;                               // 0x0B78(0x0010)(Edit, BlueprintVisible, Net)
	struct FS_ContainerDetails                    InventoryDetails;                                  // 0x0B88(0x0070)(Edit, BlueprintVisible, Net, ContainsInstancedReference, HasGetValueTypeHash)
	class USoundBase*                             Voiceline_Reload_Pistol;                           // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Voiceline_Reload_Rifle;                            // 0x0C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Voiceline_Shoot;                                   // 0x0C08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Voiceline_GrenadeThrow;                            // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             MiniMapTexture;                                    // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        MinimapOrthoLength;                                // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MinimapOffset;                                     // 0x0C28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPeak53Teams                                  CharacterTeam;                                     // 0x0C38(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38E4[0x7];                                     // 0x0C39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlayerInfoViewDistance;                            // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 NameForPlayerInfo;                                 // 0x0C48(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UWidgetComponent*                       W_PlayerInfo;                                      // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          PawnIsDead;                                        // 0x0C60(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38E5[0x7];                                     // 0x0C61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MyPhoto;                                           // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          OnLadder_;                                         // 0x0C70(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ADS_;                                              // 0x0C71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38E6[0x2];                                     // 0x0C72(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnemiesNearbyCount;                                // 0x0C74(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Headshot_Sound_Cue;                                // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Weapon_Swap_Cue;                                   // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Finished_1;                                        // 0x0C88(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanJump_;                                         // 0x0C89(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0C8A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwitchingItem;                                     // 0x0C8B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bProne_;                                           // 0x0C8C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38E7[0x3];                                     // 0x0C8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OriginalPosition;                                  // 0x0C90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PronePosition;                                     // 0x0CA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanProne_;                                        // 0x0CC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38E8[0x7];                                     // 0x0CC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ClimbableLadder_C*                  Ladder;                                            // 0x0CC8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsClimbingLadder_;                                 // 0x0CD0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38E9[0x7];                                     // 0x0CD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             VOIP_Activate_Sound_Cue;                           // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             VOIP_Deactivate_Sound_Cue;                         // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MaxProneSpeed;                                     // 0x0CE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_Walk_Speed;                                    // 0x0CEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCrouchSpeed;                                    // 0x0CF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDancing_;                                        // 0x0CF4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFiring_;                                         // 0x0CF5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLeanRight;                                        // 0x0CF6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38EA[0x1];                                     // 0x0CF7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                BombMontage;                                       // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnladder;                                        // 0x0D00(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38EB[0x7];                                     // 0x0D01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   DanceEmotions;                                     // 0x0D08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_MasterLadder_C*                     Ladder_Ref;                                        // 0x0D18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExitLadder;                                      // 0x0D20(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnterLadder;                                     // 0x0D21(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlantingClaymore;                                // 0x0D22(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBreaching;                                       // 0x0D23(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ProneShooting;                                     // 0x0D24(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOverlappingLadderBase;                           // 0x0D25(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStopClimbLadder;                                 // 0x0D26(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartClimbLadder;                                // 0x0D27(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsClimbingLadder;                                  // 0x0D28(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38EC[0x7];                                     // 0x0D29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   Normal_PP;                                         // 0x0D30(0x06E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FPostProcessSettings                   NightVision_PP;                                    // 0x1410(0x06E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_MasterLadder_C*                     MasterLadderRef;                                   // 0x1AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Night_Vision_Sound_Cue;                            // 0x1AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Thermal_Vision_Sound_Cue;                          // 0x1B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCompassHUD_C*                          CompassHUD;                                        // 0x1B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_MagnifiedScope_C*                   MagnifiedScope;                                    // 0x1B10(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          MagnifiedScopeDisabled;                            // 0x1B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38ED[0x7];                                     // 0x1B19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         ScopeClassesToCycle;                               // 0x1B20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         ScopeIndex;                                        // 0x1B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMeleeStand                                   MeleeStand;                                        // 0x1B34(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38EE[0x3];                                     // 0x1B35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SGKMasterCharacter_C*               Current_Victim;                                    // 0x1B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CanMelee;                                          // 0x1B40(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38EF[0x7];                                     // 0x1B41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_MeleeInteract_C*                    MeleeWidget;                                       // 0x1B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         UniqueId;                                          // 0x1B50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBehind;                                          // 0x1B54(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInFront;                                         // 0x1B55(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MeleeCooling;                                      // 0x1B56(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F0[0x1];                                     // 0x1B57(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   MeleeAttackAnimations;                             // 0x1B58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsKnife;                                           // 0x1B68(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F1[0x7];                                     // 0x1B69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   KnifeAttackAnimations;                             // 0x1B70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   KnifeVictimAnimations;                             // 0x1B80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   MeleeVictimAnimations;                             // 0x1B90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bPickupWeapon;                                     // 0x1BA0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F2[0x7];                                     // 0x1BA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MasterRangeWeapon_C*                PickupActor;                                       // 0x1BA8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CrouchIsOn;                                        // 0x1BB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MyReload;                                          // 0x1BB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PauseShot;                                         // 0x1BB2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PauseMovementWhileReloadProne;                     // 0x1BB3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bQuickSlot1Check;                                  // 0x1BB4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanUseScope;                                      // 0x1BB5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScopeTextureActive;                                // 0x1BB6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AimPressed;                                        // 0x1BB7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            RemoveWidget;                                      // 0x1BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar;                                            // 0x1BC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Svdcheck;                                          // 0x1BC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F3[0x6];                                     // 0x1BC2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AInteractableDoor_C*                    CanOpenDoor;                                       // 0x1BC8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoLadderOverlap;                                 // 0x1BD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UpLadderTransition;                                // 0x1BD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F4[0x6];                                     // 0x1BD2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABreachActor_C*                         BreachRef;                                         // 0x1BD8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DownLadderTransition;                              // 0x1BE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F5[0x7];                                     // 0x1BE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDoorWidget_C*                          DoorWidgetRef;                                     // 0x1BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bScopeCooldown;                                    // 0x1BF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EmoteCooldown_;                                    // 0x1BF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsEmoting_;                                       // 0x1BF2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInspectingWeapon_;                                // 0x1BF3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelectedGrenades;                                 // 0x1BF4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoWeapon;                                         // 0x1BF5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateScope();
	void AddToolsOnPickupMulticast();
	void AddToolsOnPickupServer();
	void ApplyWeapons();
	void AutoLadderDown();
	void AutoLadderUp();
	void BndEvt__BP_SGKMasterCharacter_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_SGKMasterCharacter_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_SGKMasterCharacter_EnemyCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_SGKMasterCharacter_EnemyNearbyTrigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_SGKMasterCharacter_EnemyNearbyTrigger_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BreachDestroyStartServer();
	void CameraSmooth();
	void CancelZoom();
	void CanStandUp_(bool* Yes);
	void CharRef(class ABP_SGKMasterCharacter_C** Param_CharRef);
	void CheckFFA(bool* FFA_);
	void Dancing(bool* CurrentlyPlanting);
	void ClientPossessed();
	void ClientPrimaryEquip();
	void ClientVisibilityIcon(const bool bNewVisible, bool Team);
	void DoLean(double Param_LeanAlpha);
	void DoorCheckWidget();
	void EmoteMulticast(class UAnimMontage* Montage);
	void EmoteServer(class UAnimMontage* Montage);
	void EnemyNear();
	void EquipNewPickupMulticast(const struct FS_InvItem& Inv_Item, class FName AmmoID);
	void EquipNewPickupServer(const struct FS_InvItem& Inv_Item, class FName AmmoID);
	void ExecuteUbergraph_BP_SGKMasterCharacter(int32 EntryPoint);
	void FindEnemyPlayerLogic();
	void FixScope();
	void Force();
	void FP_Left(bool Lean, double CameraLean, double ThirdPersonCameraOffset);
	void FP_Left_Stop();
	void FP_Right(bool Lean, double CameraLean, double ThirdPersonCameraOffset);
	void FP_Right_Stop();
	void GetHit();
	void HolsterOnLadder();
	void InpActEvt_ActivateVoIP_K2Node_InputActionEvent_27(const struct FKey& Key);
	void InpActEvt_ActivateVoIP_K2Node_InputActionEvent_28(const struct FKey& Key);
	void InpActEvt_Aim_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Aim_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_Emote_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Inspect_K2Node_InputActionEvent_24(const struct FKey& Key);
	void InpActEvt_Interact_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Lean_Left_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_Lean_Left_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_Lean_Right_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_Lean_Right_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_Melee_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_PickUpWeapon_K2Node_InputActionEvent_22(const struct FKey& Key);
	void InpActEvt_PlayerList_K2Node_InputActionEvent_29(const struct FKey& Key);
	void InpActEvt_Quick_Slot_1_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Quick_Slot_2_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Quick_Slot_3_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Quick_Slot_4_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_Reload_K2Node_InputActionEvent_23(const struct FKey& Key);
	void InpActEvt_Toggle_Fire_Mode_K2Node_InputActionEvent_20(const struct FKey& Key);
	void InpActEvt_Toggle_Night_Vision_K2Node_InputActionEvent_26(const struct FKey& Key);
	void InpActEvt_Toggle_Thermal_Vision_K2Node_InputActionEvent_25(const struct FKey& Key);
	void InpActEvt_ToggleFlashlight_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_ZoomIn_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_ZoomOut_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_6(float AxisValue);
	void InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_9(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0(float AxisValue);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_5(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_7(float AxisValue);
	void InpAxisEvt_TurnRate_K2Node_InputAxisEvent_8(float AxisValue);
	void InspectWeapon();
	void JumpRelease();
	void JumpStart();
	int32 KnifeRandomAnim(class UAnimMontage** Attack, class UAnimMontage** Victim);
	void LookAtTimer();
	void LookForEnemyPlayersTimer();
	void LookInput(float InputValue, bool bIsUpDown);
	void MC_PlayStartClimb();
	void MC_STOPClimbMontage();
	void MC_RotateName();
	void MCMeleeAttack(bool Param_CanMelee, class USkeletalMeshComponent* Param_Mesh, class ABP_SGKMasterCharacter_C* Param_Current_Victim, bool Param_IsKnife, int32 RandomAnim);
	void Melee_Attack();
	int32 MeleeRandomAnim(class UAnimMontage** Attack, class UAnimMontage** Victim);
	void MLC_SetPlayerMovementState(EMovementMode NewMovementMode);
	void MLT_PlayDance(class ACharacter* PlayerCharRef);
	void MSG_AVP_GetPlayerUsername(bool* Success_, class FText* Username);
	void MSG_AVP_GetVOIPComponent(class UBP_AntizeVOIPComponent_C** VOIPComponentRef);
	void MSG_AVP_GetWidgetVoice(class UWidgetComponent** WidgetVoiceRef);
	void Multicast_Headshot(class USoundBase* Sound);
	void Multicast_Sound_Event(class USoundBase* Sound);
	void MulticastSound(class USoundBase* Sound);
	void MulticastUnhideComponents(const TArray<class UPrimitiveComponent*>& Components);
	void NightVisionSound(class USoundBase* Sound);
	void OnBlendOut_1CC0354B467C77E899C3BDBA6AE56D12(class FName NotifyName);
	void OnBlendOut_23E727C546534505579F799796EEB159(class FName NotifyName);
	void OnBlendOut_318B430B40867C29F650DCB4D7661C6E(class FName NotifyName);
	void OnBlendOut_38C0D98845FA34BD485C89B116104332(class FName NotifyName);
	void OnBlendOut_733473994626AE51368C23969DF73B5B(class FName NotifyName);
	void OnBlendOut_D9FBC91E4D4DC11C91BDDFBA9AFC228E(class FName NotifyName);
	void OnBlendOut_DF29C02242B169F4D09139ABF3C43E04(class FName NotifyName);
	void OnBlendOut_F8CF650B422FEAEBF95341B8DB00D129(class FName NotifyName);
	void OnCompleted_1CC0354B467C77E899C3BDBA6AE56D12(class FName NotifyName);
	void OnCompleted_23E727C546534505579F799796EEB159(class FName NotifyName);
	void OnCompleted_318B430B40867C29F650DCB4D7661C6E(class FName NotifyName);
	void OnCompleted_38C0D98845FA34BD485C89B116104332(class FName NotifyName);
	void OnCompleted_733473994626AE51368C23969DF73B5B(class FName NotifyName);
	void OnCompleted_D9FBC91E4D4DC11C91BDDFBA9AFC228E(class FName NotifyName);
	void OnCompleted_DF29C02242B169F4D09139ABF3C43E04(class FName NotifyName);
	void OnCompleted_F8CF650B422FEAEBF95341B8DB00D129(class FName NotifyName);
	void OnEndAiming();
	void OnInterrupted_1CC0354B467C77E899C3BDBA6AE56D12(class FName NotifyName);
	void OnInterrupted_23E727C546534505579F799796EEB159(class FName NotifyName);
	void OnInterrupted_318B430B40867C29F650DCB4D7661C6E(class FName NotifyName);
	void OnInterrupted_38C0D98845FA34BD485C89B116104332(class FName NotifyName);
	void OnInterrupted_733473994626AE51368C23969DF73B5B(class FName NotifyName);
	void OnInterrupted_D9FBC91E4D4DC11C91BDDFBA9AFC228E(class FName NotifyName);
	void OnInterrupted_DF29C02242B169F4D09139ABF3C43E04(class FName NotifyName);
	void OnInterrupted_F8CF650B422FEAEBF95341B8DB00D129(class FName NotifyName);
	void OnLanded(const struct FHitResult& Hit);
	void OnNotifyBegin_1CC0354B467C77E899C3BDBA6AE56D12(class FName NotifyName);
	void OnNotifyBegin_23E727C546534505579F799796EEB159(class FName NotifyName);
	void OnNotifyBegin_318B430B40867C29F650DCB4D7661C6E(class FName NotifyName);
	void OnNotifyBegin_38C0D98845FA34BD485C89B116104332(class FName NotifyName);
	void OnNotifyBegin_733473994626AE51368C23969DF73B5B(class FName NotifyName);
	void OnNotifyBegin_D9FBC91E4D4DC11C91BDDFBA9AFC228E(class FName NotifyName);
	void OnNotifyBegin_DF29C02242B169F4D09139ABF3C43E04(class FName NotifyName);
	void OnNotifyBegin_F8CF650B422FEAEBF95341B8DB00D129(class FName NotifyName);
	void OnNotifyEnd_1CC0354B467C77E899C3BDBA6AE56D12(class FName NotifyName);
	void OnNotifyEnd_23E727C546534505579F799796EEB159(class FName NotifyName);
	void OnNotifyEnd_318B430B40867C29F650DCB4D7661C6E(class FName NotifyName);
	void OnNotifyEnd_38C0D98845FA34BD485C89B116104332(class FName NotifyName);
	void OnNotifyEnd_733473994626AE51368C23969DF73B5B(class FName NotifyName);
	void OnNotifyEnd_D9FBC91E4D4DC11C91BDDFBA9AFC228E(class FName NotifyName);
	void OnNotifyEnd_DF29C02242B169F4D09139ABF3C43E04(class FName NotifyName);
	void OnNotifyEnd_F8CF650B422FEAEBF95341B8DB00D129(class FName NotifyName);
	void OnRep_CanMelee();
	void OnRep_DownLadderTransition();
	void OnRep_Finished_1();
	void OnRep_isClimbingLadder();
	void OnRep_isStartClimbLadder();
	void OnRep_isStopClimbLadder();
	void OnRep_MagnifiedScope();
	void OnRep_UpLadderTransition();
	void OnStartAiming();
	void Peak_GetTeam(EPeak53Teams* Param_CharacterTeam);
	void PickUpWeapon(class FName ID, class FName AmmoID);
	void PickupWeaponMulticast(bool Param_bPickupWeapon, class ABP_MasterRangeWeapon_C* Param_PickupActor);
	void PickupWeaponServer(bool Param_bPickupWeapon, class ABP_MasterRangeWeapon_C* Param_PickupActor);
	void PlayDanceAnimation();
	void PlaySound(class USoundBase* Sound);
	void PreventSwitchingExploit();
	void PreventSwitchingExploitMC();
	void Prone___FinishedFunc();
	void Prone___UpdateFunc();
	void ProningMulticast(bool Param_bProne_);
	void ProningServer(bool Param_bProne_);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void ReloadScopeFix();
	void RestartMinimap();
	void S_RotateName();
	void SaveLoaded(class UBP_SGKSaveGame_C* SaveGame);
	void ServerKill();
	void ServerKillPlayer();
	void ServerSetArmLocation(const struct FVector& Loc);
	void ServerSetFPCam(const struct FVector& Loc);
	void ServerSetLookAtRotation(const struct FVector2D& Param_LookAtRotation);
	void ServerUpdateNewCharacterYaw();
	void SetBombVisibilityMC(bool bNewVisibility);
	void SetBombVisibilitySV(bool bNewVisibility);
	void SetBreachRefMulticast(class ABreachActor_C* Param_BreachRef);
	void SetBreachRefSv(class ABreachActor_C* Param_BreachRef);
	void SetCharacterTeam();
	void SetDoorMC(class AInteractableDoor_C* Param_CanOpenDoor);
	void SetDoorSv(class AInteractableDoor_C* Param_CanOpenDoor);
	void SetFlagVisMC(bool bNewVisibility);
	void SetFlagVisServer(bool bNewVisibility);
	void SetInfoVisibility(class ACharacter* Object);
	void SetLadder(class ABP_DynamicLadder_C* LadderRef);
	void SetLadderRef(class ABP_MasterLadder_C* LadderRef);
	void SetMeleeWidget();
	void SetPawnIsDead();
	void SetPlayerMovementState(EMovementMode NewMovementMode);
	void SetScope();
	void SetSGKActorMulticast(class ABP_MasterRangeWeapon_C* Target, class ABP_SGKMasterCharacter_C* Target2);
	void SetSgkActorServer(class ABP_MasterRangeWeapon_C* Pickup, class ABP_SGKMasterCharacter_C* SGK);
	void SGK_AllowInteraction(bool* AllowInteraction);
	void SGK_BleedDamage(int32 TickDamage, double TickTime, double BleedLength);
	void SGK_CharacterCamera(E_CameraType CameraType, class UCameraComponent** CurrentCamera, class USpringArmComponent** CurrentSpringArm);
	void SGK_CharacterSockets(E_Sockets Sockets, class USceneComponent** Component);
	void SGK_CodeCheck(const class FText& Code, bool* CodeAccepted);
	void SGK_CurrentHealth(int32* Health);
	void SGK_Damage(int32 BaseDamage, class AActor* EventInstigator, class AActor* DamageCauser, E_DamageType DamageType, E_Hitbox HitBox);
	bool SGK_DropItem(const struct FS_InvItem& InvItem, bool Dropped, bool Spawned, bool SaveLoaded);
	bool SGK_EndInteraction(class UBP_PlayerInventory_C* Param_PlayerInventory);
	void SGK_GetMesh(E_BodyMesh MeshType, class UPrimitiveComponent** Param_Mesh);
	void SGK_GetVerifiedPlayers(TArray<class FText>* VerifiedPlayers);
	void SGK_HideComponents(const TArray<class UPrimitiveComponent*>& Components);
	bool SGK_Interact(class UBP_PlayerInventory_C* Param_PlayerInventory, E_WorldActions Action);
	void SGK_InteractName(class FText* InteractName);
	void SGK_InvItem(bool* IsItem, struct FS_InvItem* InvItem);
	void SGK_ItemAmount(int32* Amount);
	void SGK_LeanLeft(bool Lean, double CameraLean, double ThirdPersonCameraOffset);
	void SGK_LeanRight(bool Lean, double CameraLean, double ThirdPersonCameraOffset);
	void SGK_LeanValues(double* Lean_Alpha, double* TargetCamera);
	void SGK_LookAtRotation(struct FVector2D* Param_LookAtRotation);
	void SGK_MaxHealth(int32* MaxHealth);
	void SGK_Mesh(class UPrimitiveComponent** Param_Mesh);
	void SGK_PlayerInProximity();
	void SGK_PlayerOutProximity();
	void SGK_PossibleActions(class UBP_PlayerInventory_C* Param_PlayerInventory, bool* ActionsFound, TArray<struct FS_WorldAction>* PossibleActions);
	bool SGK_SetCurrentHealth(int32 NewHealthAmount);
	void SGK_SetVerifiedPlayers(TArray<class FText>& VerifiedPlayers);
	void SGK_ShowHealthWidget(bool* ShowHealthWidget, class FText* HealthWidgetName);
	void SGK_TurnedOnEffect(bool TurnedOn);
	bool SGK_UpdateCode(const class FText& Code);
	bool SGK_VerifyPlayer(const class FText& Text);
	void ShowPlayerInfo(class ABP_SGKMasterCharacter_C* MyPawn, bool Show_);
	void ShowPlayerInfoForTeam();
	void SmoothInterp__FinishedFunc();
	void SmoothInterp__UpdateFunc();
	void Sound_Event(class USoundBase* Sound);
	void SRV_PlayDance(class ACharacter* PlayerCharRef);
	void SRV_SetPlayerMovementState(EMovementMode NewMovementMode);
	void SRVMeleeAttack(bool Param_CanMelee, class USkeletalMeshComponent* Param_Mesh, class ABP_SGKMasterCharacter_C* Param_Current_Victim, bool Param_IsKnife, int32 RandomAnim);
	void Start_Lean(bool Param_ShouldLean, double Param_TargetCameraLean, double Param_CameraOffset, bool Param_bLeanRight);
	void StartladderClimb(class ABP_MasterLadder_C* LadderRef);
	void StopLeftLean();
	void StopRightLean();
	void Svr_Ladder(bool Param_IsClimbingLadder, class ABP_ClimbableLadder_C* Param_Ladder, bool JumpOff);
	void SVR_PlayStartClimb();
	void Svr_STOPClimbMontage();
	void Svr_TeleoprtToTarget(class ABP_ClimbableLadder_C* Param_Ladder, bool OverlappedBase);
	void TemporaryPlug();
	void ThermalVision(bool On_);
	void ThermalVisionSound(class USoundBase* Sound);
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void Timeline_2__UpdateFunc();
	void Timeline_3__FinishedFunc();
	void Timeline_3__UpdateFunc();
	void UpdateEnemyNearbyCount(class UObject* Other_Actor, class UObject* Other_Comp, bool Add_To_Count);
	void UserConstructionScript();
	void VoIP_Activate_Sound(class USoundBase* Sound);
	void VoIP_Deactivate_Sound(class USoundBase* Sound);
	void Weapon_Swap_Sound(class USoundBase* Sound);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SGKMasterCharacter_C">();
	}
	static class ABP_SGKMasterCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SGKMasterCharacter_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_SGKMasterCharacter_C) == 0x000010, "Wrong alignment on ABP_SGKMasterCharacter_C");
static_assert(sizeof(ABP_SGKMasterCharacter_C) == 0x001C00, "Wrong size on ABP_SGKMasterCharacter_C");
static_assert(offsetof(ABP_SGKMasterCharacter_C, UberGraphFrame) == 0x000900, "Member 'ABP_SGKMasterCharacter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, InspectCamera) == 0x000908, "Member 'ABP_SGKMasterCharacter_C::InspectCamera' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, FlagSM) == 0x000910, "Member 'ABP_SGKMasterCharacter_C::FlagSM' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Distancer) == 0x000918, "Member 'ABP_SGKMasterCharacter_C::Distancer' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Back) == 0x000920, "Member 'ABP_SGKMasterCharacter_C::Back' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Front) == 0x000928, "Member 'ABP_SGKMasterCharacter_C::Front' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Box) == 0x000930, "Member 'ABP_SGKMasterCharacter_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ThermalPP) == 0x000938, "Member 'ABP_SGKMasterCharacter_C::ThermalPP' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MapIcon) == 0x000940, "Member 'ABP_SGKMasterCharacter_C::MapIcon' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MapView) == 0x000948, "Member 'ABP_SGKMasterCharacter_C::MapView' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, DebugComponent) == 0x000950, "Member 'ABP_SGKMasterCharacter_C::DebugComponent' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, BP_AntizeVOIPComponent) == 0x000958, "Member 'ABP_SGKMasterCharacter_C::BP_AntizeVOIPComponent' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Sphere) == 0x000960, "Member 'ABP_SGKMasterCharacter_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, WidgetVoice) == 0x000968, "Member 'ABP_SGKMasterCharacter_C::WidgetVoice' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, BP_CustomizationComponent) == 0x000970, "Member 'ABP_SGKMasterCharacter_C::BP_CustomizationComponent' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, EnemyCollision) == 0x000978, "Member 'ABP_SGKMasterCharacter_C::EnemyCollision' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ClimbBox) == 0x000980, "Member 'ABP_SGKMasterCharacter_C::ClimbBox' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ThirdPersonAOnewSecondary) == 0x000988, "Member 'ABP_SGKMasterCharacter_C::ThirdPersonAOnewSecondary' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ThirdPersonAOnew) == 0x000990, "Member 'ABP_SGKMasterCharacter_C::ThirdPersonAOnew' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, EnemyNearbyTrigger) == 0x000998, "Member 'ABP_SGKMasterCharacter_C::EnemyNearbyTrigger' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, BombSM) == 0x0009A0, "Member 'ABP_SGKMasterCharacter_C::BombSM' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, PlayerInfo) == 0x0009A8, "Member 'ABP_SGKMasterCharacter_C::PlayerInfo' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ScopeAttachPoint) == 0x0009B0, "Member 'ABP_SGKMasterCharacter_C::ScopeAttachPoint' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ThirdPersonElbowLeft) == 0x0009B8, "Member 'ABP_SGKMasterCharacter_C::ThirdPersonElbowLeft' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ThirdPersonAimPoint) == 0x0009C0, "Member 'ABP_SGKMasterCharacter_C::ThirdPersonAimPoint' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, FirstPersonAimPoint) == 0x0009C8, "Member 'ABP_SGKMasterCharacter_C::FirstPersonAimPoint' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, FirstPersonAO) == 0x0009D0, "Member 'ABP_SGKMasterCharacter_C::FirstPersonAO' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ThirdPersonElbow) == 0x0009D8, "Member 'ABP_SGKMasterCharacter_C::ThirdPersonElbow' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ThirdPersonAO) == 0x0009E0, "Member 'ABP_SGKMasterCharacter_C::ThirdPersonAO' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, FirstPersonCamera) == 0x0009E8, "Member 'ABP_SGKMasterCharacter_C::FirstPersonCamera' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, FirstPersonArms) == 0x0009F0, "Member 'ABP_SGKMasterCharacter_C::FirstPersonArms' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, FirstPersonBody) == 0x0009F8, "Member 'ABP_SGKMasterCharacter_C::FirstPersonBody' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ThrowPoint) == 0x000A00, "Member 'ABP_SGKMasterCharacter_C::ThrowPoint' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ADSSocket) == 0x000A08, "Member 'ABP_SGKMasterCharacter_C::ADSSocket' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, CameraBoom) == 0x000A10, "Member 'ABP_SGKMasterCharacter_C::CameraBoom' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, BP_CharacterComponent) == 0x000A18, "Member 'ABP_SGKMasterCharacter_C::BP_CharacterComponent' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ThirdPersonCamera) == 0x000A20, "Member 'ABP_SGKMasterCharacter_C::ThirdPersonCamera' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Timeline_3_NewTrack_0_29E7AFB24FF891D553C7C3B1D415C64E) == 0x000A28, "Member 'ABP_SGKMasterCharacter_C::Timeline_3_NewTrack_0_29E7AFB24FF891D553C7C3B1D415C64E' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Timeline_3__Direction_29E7AFB24FF891D553C7C3B1D415C64E) == 0x000A2C, "Member 'ABP_SGKMasterCharacter_C::Timeline_3__Direction_29E7AFB24FF891D553C7C3B1D415C64E' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Timeline_3) == 0x000A30, "Member 'ABP_SGKMasterCharacter_C::Timeline_3' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Timeline_2_NewTrack_0_5600BF654D22EC683AB5D48E2DB8F349) == 0x000A38, "Member 'ABP_SGKMasterCharacter_C::Timeline_2_NewTrack_0_5600BF654D22EC683AB5D48E2DB8F349' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Timeline_2__Direction_5600BF654D22EC683AB5D48E2DB8F349) == 0x000A3C, "Member 'ABP_SGKMasterCharacter_C::Timeline_2__Direction_5600BF654D22EC683AB5D48E2DB8F349' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Timeline_2) == 0x000A40, "Member 'ABP_SGKMasterCharacter_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Timeline_1_NewTrack_0_CDD1A44049EB373AACCD08AD5BB4BCEB) == 0x000A48, "Member 'ABP_SGKMasterCharacter_C::Timeline_1_NewTrack_0_CDD1A44049EB373AACCD08AD5BB4BCEB' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Timeline_1__Direction_CDD1A44049EB373AACCD08AD5BB4BCEB) == 0x000A4C, "Member 'ABP_SGKMasterCharacter_C::Timeline_1__Direction_CDD1A44049EB373AACCD08AD5BB4BCEB' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Timeline_1) == 0x000A50, "Member 'ABP_SGKMasterCharacter_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Timeline_0_Lean_4C0B97FB48D365408F73FE89ABC89582) == 0x000A58, "Member 'ABP_SGKMasterCharacter_C::Timeline_0_Lean_4C0B97FB48D365408F73FE89ABC89582' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Timeline_0__Direction_4C0B97FB48D365408F73FE89ABC89582) == 0x000A5C, "Member 'ABP_SGKMasterCharacter_C::Timeline_0__Direction_4C0B97FB48D365408F73FE89ABC89582' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Timeline_0) == 0x000A60, "Member 'ABP_SGKMasterCharacter_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, SmoothInterp_NewTrack_0_D33A5A01495894FD0C08D5870FF5AA2A) == 0x000A68, "Member 'ABP_SGKMasterCharacter_C::SmoothInterp_NewTrack_0_D33A5A01495894FD0C08D5870FF5AA2A' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, SmoothInterp__Direction_D33A5A01495894FD0C08D5870FF5AA2A) == 0x000A6C, "Member 'ABP_SGKMasterCharacter_C::SmoothInterp__Direction_D33A5A01495894FD0C08D5870FF5AA2A' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, SmoothInterp) == 0x000A70, "Member 'ABP_SGKMasterCharacter_C::SmoothInterp' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Prone__NewTrack_0_93D0A050451B6DC221E41CAC1268DDFB) == 0x000A78, "Member 'ABP_SGKMasterCharacter_C::Prone__NewTrack_0_93D0A050451B6DC221E41CAC1268DDFB' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Prone___Direction_93D0A050451B6DC221E41CAC1268DDFB) == 0x000A7C, "Member 'ABP_SGKMasterCharacter_C::Prone___Direction_93D0A050451B6DC221E41CAC1268DDFB' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Prone_) == 0x000A80, "Member 'ABP_SGKMasterCharacter_C::Prone_' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, LookAtRotation) == 0x000A88, "Member 'ABP_SGKMasterCharacter_C::LookAtRotation' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, LastLookAtRotation) == 0x000A98, "Member 'ABP_SGKMasterCharacter_C::LastLookAtRotation' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, CurrentCameraLean) == 0x000AA8, "Member 'ABP_SGKMasterCharacter_C::CurrentCameraLean' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, CameraArmStart) == 0x000AB0, "Member 'ABP_SGKMasterCharacter_C::CameraArmStart' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, FPCameraStartTrnsform) == 0x000AD0, "Member 'ABP_SGKMasterCharacter_C::FPCameraStartTrnsform' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, CameraOffset) == 0x000B30, "Member 'ABP_SGKMasterCharacter_C::CameraOffset' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ShouldLean) == 0x000B38, "Member 'ABP_SGKMasterCharacter_C::ShouldLean' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, LeanAlpha) == 0x000B40, "Member 'ABP_SGKMasterCharacter_C::LeanAlpha' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, TargetCameraLean) == 0x000B48, "Member 'ABP_SGKMasterCharacter_C::TargetCameraLean' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, PlayerInventory) == 0x000B50, "Member 'ABP_SGKMasterCharacter_C::PlayerInventory' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, BuildingComponent) == 0x000B58, "Member 'ABP_SGKMasterCharacter_C::BuildingComponent' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, DeadInventory) == 0x000B60, "Member 'ABP_SGKMasterCharacter_C::DeadInventory' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, AttachedActors) == 0x000B68, "Member 'ABP_SGKMasterCharacter_C::AttachedActors' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, StartingWeaponsChar) == 0x000B78, "Member 'ABP_SGKMasterCharacter_C::StartingWeaponsChar' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, InventoryDetails) == 0x000B88, "Member 'ABP_SGKMasterCharacter_C::InventoryDetails' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Voiceline_Reload_Pistol) == 0x000BF8, "Member 'ABP_SGKMasterCharacter_C::Voiceline_Reload_Pistol' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Voiceline_Reload_Rifle) == 0x000C00, "Member 'ABP_SGKMasterCharacter_C::Voiceline_Reload_Rifle' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Voiceline_Shoot) == 0x000C08, "Member 'ABP_SGKMasterCharacter_C::Voiceline_Shoot' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Voiceline_GrenadeThrow) == 0x000C10, "Member 'ABP_SGKMasterCharacter_C::Voiceline_GrenadeThrow' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MiniMapTexture) == 0x000C18, "Member 'ABP_SGKMasterCharacter_C::MiniMapTexture' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MinimapOrthoLength) == 0x000C20, "Member 'ABP_SGKMasterCharacter_C::MinimapOrthoLength' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MinimapOffset) == 0x000C28, "Member 'ABP_SGKMasterCharacter_C::MinimapOffset' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, CharacterTeam) == 0x000C38, "Member 'ABP_SGKMasterCharacter_C::CharacterTeam' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, PlayerInfoViewDistance) == 0x000C40, "Member 'ABP_SGKMasterCharacter_C::PlayerInfoViewDistance' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, NameForPlayerInfo) == 0x000C48, "Member 'ABP_SGKMasterCharacter_C::NameForPlayerInfo' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, W_PlayerInfo) == 0x000C58, "Member 'ABP_SGKMasterCharacter_C::W_PlayerInfo' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, PawnIsDead) == 0x000C60, "Member 'ABP_SGKMasterCharacter_C::PawnIsDead' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MyPhoto) == 0x000C68, "Member 'ABP_SGKMasterCharacter_C::MyPhoto' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, OnLadder_) == 0x000C70, "Member 'ABP_SGKMasterCharacter_C::OnLadder_' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ADS_) == 0x000C71, "Member 'ABP_SGKMasterCharacter_C::ADS_' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, EnemiesNearbyCount) == 0x000C74, "Member 'ABP_SGKMasterCharacter_C::EnemiesNearbyCount' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Headshot_Sound_Cue) == 0x000C78, "Member 'ABP_SGKMasterCharacter_C::Headshot_Sound_Cue' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Weapon_Swap_Cue) == 0x000C80, "Member 'ABP_SGKMasterCharacter_C::Weapon_Swap_Cue' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Finished_1) == 0x000C88, "Member 'ABP_SGKMasterCharacter_C::Finished_1' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, bCanJump_) == 0x000C89, "Member 'ABP_SGKMasterCharacter_C::bCanJump_' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Active) == 0x000C8A, "Member 'ABP_SGKMasterCharacter_C::Active' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, SwitchingItem) == 0x000C8B, "Member 'ABP_SGKMasterCharacter_C::SwitchingItem' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, bProne_) == 0x000C8C, "Member 'ABP_SGKMasterCharacter_C::bProne_' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, OriginalPosition) == 0x000C90, "Member 'ABP_SGKMasterCharacter_C::OriginalPosition' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, PronePosition) == 0x000CA8, "Member 'ABP_SGKMasterCharacter_C::PronePosition' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, bCanProne_) == 0x000CC0, "Member 'ABP_SGKMasterCharacter_C::bCanProne_' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Ladder) == 0x000CC8, "Member 'ABP_SGKMasterCharacter_C::Ladder' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsClimbingLadder_) == 0x000CD0, "Member 'ABP_SGKMasterCharacter_C::IsClimbingLadder_' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, VOIP_Activate_Sound_Cue) == 0x000CD8, "Member 'ABP_SGKMasterCharacter_C::VOIP_Activate_Sound_Cue' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, VOIP_Deactivate_Sound_Cue) == 0x000CE0, "Member 'ABP_SGKMasterCharacter_C::VOIP_Deactivate_Sound_Cue' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MaxProneSpeed) == 0x000CE8, "Member 'ABP_SGKMasterCharacter_C::MaxProneSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Max_Walk_Speed) == 0x000CEC, "Member 'ABP_SGKMasterCharacter_C::Max_Walk_Speed' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MaxCrouchSpeed) == 0x000CF0, "Member 'ABP_SGKMasterCharacter_C::MaxCrouchSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsDancing_) == 0x000CF4, "Member 'ABP_SGKMasterCharacter_C::IsDancing_' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsFiring_) == 0x000CF5, "Member 'ABP_SGKMasterCharacter_C::IsFiring_' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, bLeanRight) == 0x000CF6, "Member 'ABP_SGKMasterCharacter_C::bLeanRight' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, BombMontage) == 0x000CF8, "Member 'ABP_SGKMasterCharacter_C::BombMontage' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsOnladder) == 0x000D00, "Member 'ABP_SGKMasterCharacter_C::IsOnladder' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, DanceEmotions) == 0x000D08, "Member 'ABP_SGKMasterCharacter_C::DanceEmotions' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Ladder_Ref) == 0x000D18, "Member 'ABP_SGKMasterCharacter_C::Ladder_Ref' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsExitLadder) == 0x000D20, "Member 'ABP_SGKMasterCharacter_C::IsExitLadder' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsEnterLadder) == 0x000D21, "Member 'ABP_SGKMasterCharacter_C::IsEnterLadder' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsPlantingClaymore) == 0x000D22, "Member 'ABP_SGKMasterCharacter_C::IsPlantingClaymore' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsBreaching) == 0x000D23, "Member 'ABP_SGKMasterCharacter_C::IsBreaching' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ProneShooting) == 0x000D24, "Member 'ABP_SGKMasterCharacter_C::ProneShooting' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsOverlappingLadderBase) == 0x000D25, "Member 'ABP_SGKMasterCharacter_C::IsOverlappingLadderBase' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsStopClimbLadder) == 0x000D26, "Member 'ABP_SGKMasterCharacter_C::IsStopClimbLadder' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsStartClimbLadder) == 0x000D27, "Member 'ABP_SGKMasterCharacter_C::IsStartClimbLadder' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsClimbingLadder) == 0x000D28, "Member 'ABP_SGKMasterCharacter_C::IsClimbingLadder' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Normal_PP) == 0x000D30, "Member 'ABP_SGKMasterCharacter_C::Normal_PP' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, NightVision_PP) == 0x001410, "Member 'ABP_SGKMasterCharacter_C::NightVision_PP' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MasterLadderRef) == 0x001AF0, "Member 'ABP_SGKMasterCharacter_C::MasterLadderRef' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Night_Vision_Sound_Cue) == 0x001AF8, "Member 'ABP_SGKMasterCharacter_C::Night_Vision_Sound_Cue' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Thermal_Vision_Sound_Cue) == 0x001B00, "Member 'ABP_SGKMasterCharacter_C::Thermal_Vision_Sound_Cue' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, CompassHUD) == 0x001B08, "Member 'ABP_SGKMasterCharacter_C::CompassHUD' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MagnifiedScope) == 0x001B10, "Member 'ABP_SGKMasterCharacter_C::MagnifiedScope' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MagnifiedScopeDisabled) == 0x001B18, "Member 'ABP_SGKMasterCharacter_C::MagnifiedScopeDisabled' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ScopeClassesToCycle) == 0x001B20, "Member 'ABP_SGKMasterCharacter_C::ScopeClassesToCycle' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ScopeIndex) == 0x001B30, "Member 'ABP_SGKMasterCharacter_C::ScopeIndex' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MeleeStand) == 0x001B34, "Member 'ABP_SGKMasterCharacter_C::MeleeStand' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Current_Victim) == 0x001B38, "Member 'ABP_SGKMasterCharacter_C::Current_Victim' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, CanMelee) == 0x001B40, "Member 'ABP_SGKMasterCharacter_C::CanMelee' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MeleeWidget) == 0x001B48, "Member 'ABP_SGKMasterCharacter_C::MeleeWidget' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, UniqueId) == 0x001B50, "Member 'ABP_SGKMasterCharacter_C::UniqueId' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsBehind) == 0x001B54, "Member 'ABP_SGKMasterCharacter_C::IsBehind' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsInFront) == 0x001B55, "Member 'ABP_SGKMasterCharacter_C::IsInFront' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MeleeCooling) == 0x001B56, "Member 'ABP_SGKMasterCharacter_C::MeleeCooling' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MeleeAttackAnimations) == 0x001B58, "Member 'ABP_SGKMasterCharacter_C::MeleeAttackAnimations' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, IsKnife) == 0x001B68, "Member 'ABP_SGKMasterCharacter_C::IsKnife' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, KnifeAttackAnimations) == 0x001B70, "Member 'ABP_SGKMasterCharacter_C::KnifeAttackAnimations' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, KnifeVictimAnimations) == 0x001B80, "Member 'ABP_SGKMasterCharacter_C::KnifeVictimAnimations' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MeleeVictimAnimations) == 0x001B90, "Member 'ABP_SGKMasterCharacter_C::MeleeVictimAnimations' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, bPickupWeapon) == 0x001BA0, "Member 'ABP_SGKMasterCharacter_C::bPickupWeapon' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, PickupActor) == 0x001BA8, "Member 'ABP_SGKMasterCharacter_C::PickupActor' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, CrouchIsOn) == 0x001BB0, "Member 'ABP_SGKMasterCharacter_C::CrouchIsOn' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, MyReload) == 0x001BB1, "Member 'ABP_SGKMasterCharacter_C::MyReload' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, PauseShot) == 0x001BB2, "Member 'ABP_SGKMasterCharacter_C::PauseShot' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, PauseMovementWhileReloadProne) == 0x001BB3, "Member 'ABP_SGKMasterCharacter_C::PauseMovementWhileReloadProne' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, bQuickSlot1Check) == 0x001BB4, "Member 'ABP_SGKMasterCharacter_C::bQuickSlot1Check' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, bCanUseScope) == 0x001BB5, "Member 'ABP_SGKMasterCharacter_C::bCanUseScope' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, ScopeTextureActive) == 0x001BB6, "Member 'ABP_SGKMasterCharacter_C::ScopeTextureActive' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, AimPressed) == 0x001BB7, "Member 'ABP_SGKMasterCharacter_C::AimPressed' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, RemoveWidget) == 0x001BB8, "Member 'ABP_SGKMasterCharacter_C::RemoveWidget' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, NewVar) == 0x001BC0, "Member 'ABP_SGKMasterCharacter_C::NewVar' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, Svdcheck) == 0x001BC1, "Member 'ABP_SGKMasterCharacter_C::Svdcheck' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, CanOpenDoor) == 0x001BC8, "Member 'ABP_SGKMasterCharacter_C::CanOpenDoor' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, AutoLadderOverlap) == 0x001BD0, "Member 'ABP_SGKMasterCharacter_C::AutoLadderOverlap' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, UpLadderTransition) == 0x001BD1, "Member 'ABP_SGKMasterCharacter_C::UpLadderTransition' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, BreachRef) == 0x001BD8, "Member 'ABP_SGKMasterCharacter_C::BreachRef' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, DownLadderTransition) == 0x001BE0, "Member 'ABP_SGKMasterCharacter_C::DownLadderTransition' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, DoorWidgetRef) == 0x001BE8, "Member 'ABP_SGKMasterCharacter_C::DoorWidgetRef' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, bScopeCooldown) == 0x001BF0, "Member 'ABP_SGKMasterCharacter_C::bScopeCooldown' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, EmoteCooldown_) == 0x001BF1, "Member 'ABP_SGKMasterCharacter_C::EmoteCooldown_' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, bIsEmoting_) == 0x001BF2, "Member 'ABP_SGKMasterCharacter_C::bIsEmoting_' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, bInspectingWeapon_) == 0x001BF3, "Member 'ABP_SGKMasterCharacter_C::bInspectingWeapon_' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, bSelectedGrenades) == 0x001BF4, "Member 'ABP_SGKMasterCharacter_C::bSelectedGrenades' has a wrong offset!");
static_assert(offsetof(ABP_SGKMasterCharacter_C, bNoWeapon) == 0x001BF5, "Member 'ABP_SGKMasterCharacter_C::bNoWeapon' has a wrong offset!");

}

