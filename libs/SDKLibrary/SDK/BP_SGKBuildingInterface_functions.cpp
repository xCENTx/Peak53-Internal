#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SGKBuildingInterface

#include "Basic.hpp"

#include "BP_SGKBuildingInterface_classes.hpp"
#include "BP_SGKBuildingInterface_parameters.hpp"


namespace SDK
{

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK AddMultipleOwners
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>                     Owners                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBP_SGKBuildingInterface_C::SGK_AddMultipleOwners(TArray<class FText>& Owners)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK AddMultipleOwners");

	Params::BP_SGKBuildingInterface_C_SGK_AddMultipleOwners Parms{};

	Parms.Owners = std::move(Owners);

	UObject::ProcessEvent(Func, &Parms);

	Owners = std::move(Parms.Owners);

	return Parms.ReturnValue;
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK AddOwner
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBP_SGKBuildingInterface_C::SGK_AddOwner(const class FText& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK AddOwner");

	Params::BP_SGKBuildingInterface_C_SGK_AddOwner Parms{};

	Parms.PlayerName = std::move(PlayerName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK BPBuildCollision
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UPrimitiveComponent*>      Collision                                              (Parm, OutParm, ContainsInstancedReference)

void IBP_SGKBuildingInterface_C::SGK_BPBuildCollision(TArray<class UPrimitiveComponent*>* Collision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK BPBuildCollision");

	Params::BP_SGKBuildingInterface_C_SGK_BPBuildCollision Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Collision != nullptr)
		*Collision = std::move(Parms.Collision);
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK BPGrids
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UBP_GridComponent_C*>      Grids                                                  (Parm, OutParm, ContainsInstancedReference)

void IBP_SGKBuildingInterface_C::SGK_BPGrids(TArray<class UBP_GridComponent_C*>* Grids)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK BPGrids");

	Params::BP_SGKBuildingInterface_C_SGK_BPGrids Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Grids != nullptr)
		*Grids = std::move(Parms.Grids);
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK BuildingOptions
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_PlayerInventory_C*            PlayerInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBP_SGKBuildingInterface_C::SGK_BuildingOptions(class UBP_PlayerInventory_C* PlayerInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK BuildingOptions");

	Params::BP_SGKBuildingInterface_C_SGK_BuildingOptions Parms{};

	Parms.PlayerInventory = PlayerInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK BuildPart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDataTableRowHandle              BuildPart                                              (Parm, OutParm, NoDestructor)

void IBP_SGKBuildingInterface_C::SGK_BuildPart(struct FDataTableRowHandle* BuildPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK BuildPart");

	Params::BP_SGKBuildingInterface_C_SGK_BuildPart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BuildPart != nullptr)
		*BuildPart = std::move(Parms.BuildPart);
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK BuildPartPlaced
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_PlayerInventory_C*            PlayerInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    FromSaveGame                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBP_SGKBuildingInterface_C::SGK_BuildPartPlaced(class UBP_PlayerInventory_C* PlayerInventory, bool FromSaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK BuildPartPlaced");

	Params::BP_SGKBuildingInterface_C_SGK_BuildPartPlaced Parms{};

	Parms.PlayerInventory = PlayerInventory;
	Parms.FromSaveGame = FromSaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK BuildPartType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BuildType                             Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBP_SGKBuildingInterface_C::SGK_BuildPartType(E_BuildType* Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK BuildPartType");

	Params::BP_SGKBuildingInterface_C_SGK_BuildPartType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK ClearOwners
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBP_SGKBuildingInterface_C::SGK_ClearOwners()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK ClearOwners");

	Params::BP_SGKBuildingInterface_C_SGK_ClearOwners Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK DeleteBuildPart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_PlayerBuildingComponent_C*    PlayerBuildingComponent                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ForceDestroy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBP_SGKBuildingInterface_C::SGK_DeleteBuildPart(class UBP_PlayerBuildingComponent_C* PlayerBuildingComponent, bool ForceDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK DeleteBuildPart");

	Params::BP_SGKBuildingInterface_C_SGK_DeleteBuildPart Parms{};

	Parms.PlayerBuildingComponent = PlayerBuildingComponent;
	Parms.ForceDestroy = ForceDestroy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK IsOwner
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsOwner                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBP_SGKBuildingInterface_C::SGK_IsOwner(const class FText& PlayerName, bool* IsOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK IsOwner");

	Params::BP_SGKBuildingInterface_C_SGK_IsOwner Parms{};

	Parms.PlayerName = std::move(PlayerName);

	UObject::ProcessEvent(Func, &Parms);

	if (IsOwner != nullptr)
		*IsOwner = Parms.IsOwner;
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK IsPendingDestroy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPendingDestroy                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBP_SGKBuildingInterface_C::SGK_IsPendingDestroy(bool* IsPendingDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK IsPendingDestroy");

	Params::BP_SGKBuildingInterface_C_SGK_IsPendingDestroy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPendingDestroy != nullptr)
		*IsPendingDestroy = Parms.IsPendingDestroy;
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK IsPlaced
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaced                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBP_SGKBuildingInterface_C::SGK_IsPlaced(bool* IsPlaced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK IsPlaced");

	Params::BP_SGKBuildingInterface_C_SGK_IsPlaced Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlaced != nullptr)
		*IsPlaced = Parms.IsPlaced;
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK LoadExtraData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBP_SGKBuildingInterface_C::SGK_LoadExtraData(class UBP_SGKSaveGame_C* SaveGame, int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK LoadExtraData");

	Params::BP_SGKBuildingInterface_C_SGK_LoadExtraData Parms{};

	Parms.SaveGame = SaveGame;
	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK Preview
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Preview                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBP_SGKBuildingInterface_C::SGK_Preview(bool Preview)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK Preview");

	Params::BP_SGKBuildingInterface_C_SGK_Preview Parms{};

	Parms.Preview = Preview;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK SupportCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DestroyOnFail                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DirectSupportOnly                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Supported                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IndirectSupportOnly                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBP_SGKBuildingInterface_C::SGK_SupportCheck(bool DestroyOnFail, bool DirectSupportOnly, bool* Supported, bool* IndirectSupportOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK SupportCheck");

	Params::BP_SGKBuildingInterface_C_SGK_SupportCheck Parms{};

	Parms.DestroyOnFail = DestroyOnFail;
	Parms.DirectSupportOnly = DirectSupportOnly;

	UObject::ProcessEvent(Func, &Parms);

	if (Supported != nullptr)
		*Supported = Parms.Supported;

	if (IndirectSupportOnly != nullptr)
		*IndirectSupportOnly = Parms.IndirectSupportOnly;
}


// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK Upgrade
// (Public, BlueprintCallable, BlueprintEvent)

void IBP_SGKBuildingInterface_C::SGK_Upgrade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKBuildingInterface_C", "SGK Upgrade");

	UObject::ProcessEvent(Func, nullptr);
}

}

