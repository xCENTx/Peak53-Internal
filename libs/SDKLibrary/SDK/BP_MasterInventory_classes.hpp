#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterInventory

#include "Basic.hpp"

#include "S_CraftingQueue_structs.hpp"
#include "E_AttachmentType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_SpawnSettings_structs.hpp"
#include "S_InvSlot_structs.hpp"
#include "S_CraftingDetails_structs.hpp"
#include "S_ContainerDetails_structs.hpp"
#include "E_RecipeCategory_structs.hpp"
#include "E_InventoryRestrictionType_structs.hpp"
#include "E_Sounds_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterInventory.BP_MasterInventory_C
// 0x01F0 (0x0290 - 0x00A0)
class UBP_MasterInventory_C : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UBP_PlayerInventory_C*>          UsingPlayers;                                      // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        CurrentWeight;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemCount;                                         // 0x00C0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47A4[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_CraftingQueue>               CraftingQueue;                                     // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   NewCraftingRecipe;                                 // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CraftingAmount;                                    // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ListingFound;                                      // 0x00E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47A5[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_CraftingQueue                       FoundCraftingListing;                              // 0x00E8(0x0014)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Crafting;                                          // 0x00FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47A6[0x3];                                     // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_CraftingQueue                       FinishCraftingListing;                             // 0x0100(0x0014)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NewRecipe;                                         // 0x0114(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentCraftingRecipe;                             // 0x011C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47A7[0x4];                                     // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CraftingTimer;                                     // 0x0128(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockCrafting;                                     // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47A8[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SGKSaveGame_C*                      UMISaveGame;                                       // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_SaveSystem_C*                       SaveSystem;                                        // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SaveLoaded;                                        // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasRandomItemsSpawned;                             // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47A9[0x6];                                     // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_InvSlot>                     Inventory;                                         // 0x0150(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UBP_MasterInventory_C*                  ParentInventory;                                   // 0x0160(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             UpdateWeightUI;                                    // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FS_ContainerDetails                    InventoryDetails;                                  // 0x0178(0x0070)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class UBP_MasterInventory_C*                  EquippedInventory;                                 // 0x01E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FS_CraftingDetails                     CraftingDetails;                                   // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47AA[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CraftingRequiredActorCheckSize;                    // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugCraftingActorCheckSize;                       // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47AB[0x7];                                     // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_SpawnSettings                       RandomItemSpawning;                                // 0x0208(0x0070)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          UseDestructionBag;                                 // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldSpawnBag;                                    // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47AC[0x6];                                     // 0x027A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DecayMultiplier;                                   // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_BP_MasterInventory_C;                        // 0x0288(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddItem(const struct FS_InvItem& Item, bool StackSearch, bool ShowNotifications, bool* RemainingItem, struct FS_InvItem* RemainingInvItem, struct FS_InvSlotID* NewItemSlot);
	void AddItemWeight(const struct FS_InvItem& Item, int32 Amount, bool AddAll, bool AddToParent, class UBP_MasterInventory_C* Stop_Inventory);
	void AddPanelToUsingPlayers();
	void AddStartingItems(bool* Return);
	void AddUsingPlayer(class UBP_PlayerInventory_C* Player_Inv);
	void AddWeight(double Weight, bool AddToParent, class UBP_MasterInventory_C* Stop_Inventory);
	void AddWeightCheck(double ItemWeight, bool CheckParent, class UBP_MasterInventory_C* ParentIgnore, bool* CanAdd, int32* Param_ItemCount);
	void AllItems(TArray<struct FS_InvSlot>* RootSlots);
	void AttemptToAddItemAmount(const struct FS_InvSlot& InvSlot, int32 AddAmount, bool* Remainder, int32* RemainderAmount);
	bool AttemptToAddWeight(const struct FS_InvItem& Item, int32 Amount, bool UseAllWeight, bool CheckOnly);
	void CancelCraftingRecipe(const struct FS_CraftingQueue& CraftingListing);
	void ChangeItemCount(int32 Amount, bool Add);
	void CheckCraftingRequirements(class FName Recipe, int32 Amount);
	void CheckFreeSlotCount(int32* FreeSlots);
	void CheckItemSpawn();
	void CheckRecipeCost(class FName Recipe, int32 Amount, bool RemoveItems, bool* CanCraft);
	void ClearInventory();
	void ClearInventoryItems();
	void ClearParentInventory();
	void ClearUsingPlayers();
	void ClientClearInventory();
	void ClientUpdateInventory(const TArray<struct FS_InvSlot>& Param_Inventory);
	void CloseOtherPlayerTabs(class UBP_PlayerInventory_C* Player);
	void ConstructItemSpawnList(TArray<struct FS_SpawnerList>* SpawnList);
	void ConstructSlots();
	void ContainerRestrictionCheck(class FName ItemId, bool* Can_Add);
	void CraftingError();
	void CraftItem(class FName Recipe, int32 Amount);
	void CreateNewCraftingListing(class FName Recipe, int32 Amount, struct FS_CraftingQueue* Output);
	void CreateNotificationInChild(const struct FS_NotificationDetails& NotificationDetails);
	void DecreaseItemDurability(const struct FS_InvSlot& InvSlot, double DecreaseAmount);
	void DecreaseWeaponDurability(const struct FS_WeaponSlot& WeaponSlot, double DecreaseAmount);
	void DestroyContainingInventories();
	void EmptyInventory(bool DestroyItems, class UBP_MasterInventory_C* NewItemInventory);
	void ExecuteUbergraph_BP_MasterInventory(int32 EntryPoint);
	bool FindCraftingListing(class FName Recipe, struct FS_CraftingQueue* CraftingListing);
	void FindEmptySlots(bool AllowRotation, class FName ItemId, bool Param_WeightCheck, int32 WeightCheckAmount, bool* SpaceFound, bool* Rotated, TArray<struct FS_InvSlot>* FoundSlots);
	void FindFreeStackSpace(const struct FS_InvItem& InvItem, class UBP_MasterInventory_C* StopInv, bool* Reaminder, struct FS_InvItem* ReaminderInvItem);
	void FindItemWithUseAmountLeft(TArray<class FName>& ItemIDs, bool* FoundItem, struct FS_InvSlot* ItemSlot);
	void FindKeyItem(class FName KeyCode, bool* Found);
	void FindNotFullUseAmountItems(TArray<class FName>& ItemIDs, bool* FoundItem, struct FS_InvSlot* ItemSlot);
	void FinishedCraftingTimer(class FName Recipe, int32 Amount);
	void InGameLoadComponentData(class UBP_SGKSaveGame_C* Save);
	void InitializeComponentSaveSystem();
	void IsItemInParentInv(const struct FS_InvSlot& StartInvSlot, const struct FS_InvSlot& EndInvSlot, bool* IsInInv);
	void ItemDecay();
	void ItemLimitCheck(int32 Param_ItemCount, bool* AllowAdd, int32* AddCount, int32* Remaining);
	void LoadComponent(class UBP_SGKSaveGame_C* SaveGame);
	void LoadComponentData(class UBP_SGKSaveGame_C* SaveGame, bool* LoadComplete);
	void LoadInventoryData(const struct FS_StorageSave& S_StorageSave);
	void LoadSavedInventory(TArray<struct FS_InvSaveSlot>& LoadedInventory, TArray<struct FS_OtherInvSaves>& OtherInv);
	void MulticastForceItemCount(int32 Param_ItemCount);
	void MulticastSetDetails(const struct FS_ContainerDetails& Details);
	void OnRep_CurrentWeight();
	void OnRep_ItemCount();
	void OwnerDestroyed(class AActor* DestroyedActor);
	void ParentWeightCheck(double AdditionalWeight, class UBP_MasterInventory_C* ParentIgnore, bool* CanAdd, int32* CurrentCount);
	void ReceiveBeginPlay();
	void RemainingFreeWeight(double* Param_RemainingFreeWeight);
	void RemainingItemCount(int32* RemainingItemLimit);
	void RemoveItem(const struct FS_InvSlot& InvSlot, bool RemoveWeight, bool RemoveInvAmount, bool SpecialSlot);
	void RemoveItemAmount(const struct FS_InvSlot& InvSlot, int32 Amount, bool SpecialSlot, bool* ItemRemoved);
	void RemoveItemWeight(const struct FS_InvItem& Item, int32 Amount, bool RemoveAll, bool RemoveParentWeight, class UBP_MasterInventory_C* MasterInventory);
	void RemoveUsingPlayer(class UBP_PlayerInventory_C* Player_Inv);
	void RemoveWeight(double Weight, bool RemoveParentWeight, class UBP_MasterInventory_C* StopInventory);
	void ReplaceUsingPlayers(TArray<class UBP_PlayerInventory_C*>& Players);
	void ReplicateContainingInventories(bool Replicate);
	bool RequiredActorCraftingCheck(class FName Recipe);
	void ResetCraftingTimer();
	void SaveComponentData(class UBP_SGKSaveGame_C* SaveGame);
	void SearchForItem(const struct FDataTableRowHandle& Item, int32 Amount, bool RemoveItems, bool* ItemFound, struct FS_InvSlot* InvSlot);
	void ServerAddClientCraftingListing(const struct FS_CraftingQueue& NewQueueListing, class UBP_MasterInventory_C* CraftingInventory);
	void ServerAddItem(const struct FS_InvItem& Item);
	void ServerCancelCraftingListing(const struct FS_CraftingQueue& CancelQueue);
	void ServerCreateNewListingCheck(class FName RecipeName, int32 Amount);
	void ServerEmptyInventory(class UBP_MasterInventory_C* StartInventory);
	void ServerForceRootItemUpdate();
	void ServerSpawnDestructionBag();
	void ServerStartClientListingTimer(class FName CraftingRecipe, class UBP_MasterInventory_C* CraftingInventory);
	void ServerUpdateClientCraftingListing(const struct FS_CraftingQueue& NewQueueListing, class UBP_MasterInventory_C* CraftingInventory);
	void ServerUpdateItemSlots(class UBP_PlayerInventory_C* PlayerInventory);
	void ServerUpdateRootItems();
	void SetItemAmount(const struct FS_InvSlot& InvSlot, int32 SetAmount, bool ChangeCount, bool Special);
	void SetNewSlotItem(const struct FS_InvSlot& RootSlot, const struct FS_InvItem& NewItem, bool SpecialSlot);
	void SGK_AllowStartingItems(bool* AllowStartingItems);
	void SGK_DestroyWeaponAttachments();
	void SGK_ItemMovedInInventory();
	void SGK_ItemSound(class FName ItemId, E_Sounds SoundType);
	void SGK_LoadWeaponAttachments(bool Visible);
	void SGK_RemoveAdditionalChecks(const struct FS_InvSlot& InvSlot);
	void SGK_RemoveAttachment(E_AttachmentType Attachment);
	void SGK_SelfItem(struct FS_InvItem* SelfItem);
	void SGK_ShowAttachments();
	void SGK_SpawnOverflowItems(const struct FS_InvItem& InvItem);
	void SGK_ToggleComponent();
	void SGK_UpdateAllAttachments();
	void SGK_UpdateCharacterYaw(class APawn* Pawn);
	void SGK_UpdateSpecialSlot(const struct FS_InvSlot& InvSlot);
	void SGKSave(class UBP_SGKSaveGame_C* Save);
	void SpawnDestructionBag();
	void SpawnItemAtLocation(const struct FTransform& Transform, const struct FS_InvItem& InvItem);
	void SpawnItems();
	void StartItemEquipment();
	void TotalItemAmount(const struct FS_InvItem& InvItem, int32* TotalAmount);
	void UpdateAllPlayersRootItems(bool FullUpdate);
	void UpdateCraftingListing(const struct FS_CraftingQueue& CraftingListing, int32 AdditionalAmount, struct FS_CraftingQueue* Output);
	void UpdateCraftingTimes();
	void UpdateInvSlots(TArray<struct FS_InvSlot>& InvSlots, const struct FS_InvItem& InvItem, TArray<struct FS_InvSlot>* UpdatedSlots);
	void UpdateItemInventory();
	void UpdateParentInventory(class UBP_MasterInventory_C* Param_Inventory);
	void UpdateSlotOnUsingPlayers(const struct FS_InvSlot& InvSlot, int32 Height, int32 Width, bool Was_Rotated);
	void UpdateWeightUI__DelegateSignature();
	void WeightCheck(const struct FS_InvItem& Item, int32 Amount, bool UseAllWeight, bool CheckParent, class UBP_MasterInventory_C* IgnoreParent, bool* ExceedsMaxWeight);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterInventory_C">();
	}
	static class UBP_MasterInventory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MasterInventory_C>();
	}
};
static_assert(alignof(UBP_MasterInventory_C) == 0x000008, "Wrong alignment on UBP_MasterInventory_C");
static_assert(sizeof(UBP_MasterInventory_C) == 0x000290, "Wrong size on UBP_MasterInventory_C");
static_assert(offsetof(UBP_MasterInventory_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_MasterInventory_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, UsingPlayers) == 0x0000A8, "Member 'UBP_MasterInventory_C::UsingPlayers' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, CurrentWeight) == 0x0000B8, "Member 'UBP_MasterInventory_C::CurrentWeight' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, ItemCount) == 0x0000C0, "Member 'UBP_MasterInventory_C::ItemCount' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, CraftingQueue) == 0x0000C8, "Member 'UBP_MasterInventory_C::CraftingQueue' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, NewCraftingRecipe) == 0x0000D8, "Member 'UBP_MasterInventory_C::NewCraftingRecipe' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, CraftingAmount) == 0x0000E0, "Member 'UBP_MasterInventory_C::CraftingAmount' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, ListingFound) == 0x0000E4, "Member 'UBP_MasterInventory_C::ListingFound' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, FoundCraftingListing) == 0x0000E8, "Member 'UBP_MasterInventory_C::FoundCraftingListing' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, Crafting) == 0x0000FC, "Member 'UBP_MasterInventory_C::Crafting' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, FinishCraftingListing) == 0x000100, "Member 'UBP_MasterInventory_C::FinishCraftingListing' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, NewRecipe) == 0x000114, "Member 'UBP_MasterInventory_C::NewRecipe' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, CurrentCraftingRecipe) == 0x00011C, "Member 'UBP_MasterInventory_C::CurrentCraftingRecipe' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, CraftingTimer) == 0x000128, "Member 'UBP_MasterInventory_C::CraftingTimer' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, BlockCrafting) == 0x000130, "Member 'UBP_MasterInventory_C::BlockCrafting' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, UMISaveGame) == 0x000138, "Member 'UBP_MasterInventory_C::UMISaveGame' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, SaveSystem) == 0x000140, "Member 'UBP_MasterInventory_C::SaveSystem' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, SaveLoaded) == 0x000148, "Member 'UBP_MasterInventory_C::SaveLoaded' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, HasRandomItemsSpawned) == 0x000149, "Member 'UBP_MasterInventory_C::HasRandomItemsSpawned' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, Inventory) == 0x000150, "Member 'UBP_MasterInventory_C::Inventory' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, ParentInventory) == 0x000160, "Member 'UBP_MasterInventory_C::ParentInventory' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, UpdateWeightUI) == 0x000168, "Member 'UBP_MasterInventory_C::UpdateWeightUI' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, InventoryDetails) == 0x000178, "Member 'UBP_MasterInventory_C::InventoryDetails' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, EquippedInventory) == 0x0001E8, "Member 'UBP_MasterInventory_C::EquippedInventory' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, CraftingDetails) == 0x0001F0, "Member 'UBP_MasterInventory_C::CraftingDetails' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, CraftingRequiredActorCheckSize) == 0x0001F8, "Member 'UBP_MasterInventory_C::CraftingRequiredActorCheckSize' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, DebugCraftingActorCheckSize) == 0x000200, "Member 'UBP_MasterInventory_C::DebugCraftingActorCheckSize' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, RandomItemSpawning) == 0x000208, "Member 'UBP_MasterInventory_C::RandomItemSpawning' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, UseDestructionBag) == 0x000278, "Member 'UBP_MasterInventory_C::UseDestructionBag' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, ShouldSpawnBag) == 0x000279, "Member 'UBP_MasterInventory_C::ShouldSpawnBag' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, DecayMultiplier) == 0x000280, "Member 'UBP_MasterInventory_C::DecayMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_MasterInventory_C, Index_BP_MasterInventory_C) == 0x000288, "Member 'UBP_MasterInventory_C::Index_BP_MasterInventory_C' has a wrong offset!");

}

