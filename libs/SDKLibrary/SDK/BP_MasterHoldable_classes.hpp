#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterHoldable

#include "Basic.hpp"

#include "E_AttachmentType_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_HoldableAnims_structs.hpp"
#include "E_AimOffset_structs.hpp"
#include "E_AnimationState_structs.hpp"
#include "S_AimOffsets_structs.hpp"
#include "S_FirstPersonArmsAnims_structs.hpp"
#include "E_CharacterState_structs.hpp"
#include "Peak53_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterHoldable.BP_MasterHoldable_C
// 0x0320 (0x06B0 - 0x0390)
class ABP_MasterHoldable_C : public APKHoldable
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0390(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        AttachPoint;                                       // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   HoldSocket;                                        // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseHoldableAnimations;                             // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31FD[0x7];                                     // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_HoldableAnims>               ThirdPersonAnimations;                             // 0x03B8(0x0010)(Edit, BlueprintVisible)
	E_AimOffset                                   AimOffsetType;                                     // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31FE[0x7];                                     // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_AimOffsets                          StandardAimOffsets;                                // 0x03D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugHandIK;                                       // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRightHandIK;                                    // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseLeftHandIK;                                     // 0x03EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31FF[0x1];                                     // 0x03EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LeftHandIKSocket;                                  // 0x03EC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3200[0x4];                                     // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             SGKCharacter;                                      // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             OwningCharacter;                                   // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Sway;                                              // 0x0408(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UBP_PlayerInventory_C*                  PlayerInventory;                                   // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSway;                                           // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3201[0x7];                                     // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SwaySpeed;                                         // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSway;                                           // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StandardSway;                                      // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowLeaning;                                      // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3202[0x7];                                     // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CharacterLean;                                     // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CameraLean;                                        // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeanThirdPersonCameraOffset;                       // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowLeaningInStandardStance;                      // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowLeaningInCombatStance;                        // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseClippingChecks;                                 // 0x046A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseClippingCheckInStandardStance;                  // 0x046B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3203[0x4];                                     // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ClippingDistance;                                  // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ClippingRadius;                                    // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ClippingRotation;                                  // 0x0480(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBP_CharacterComponent_C*               CharacterComponent;                                // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        DurabilityCostPerUse;                              // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseHoldableMovementSpeeds;                         // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3204[0x7];                                     // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_CharacterState, double>                MovementSpeeds;                                    // 0x04B0(0x0050)(Edit, BlueprintVisible)
	bool                                          AllowStanceChange;                                 // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AnimationState                              DefaultStance;                                     // 0x0501(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3205[0x2];                                     // 0x0502(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SecondaryLeftHandIKSocket;                         // 0x0504(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanUseSpecialAO;                                   // 0x050C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3206[0x3];                                     // 0x050D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Spine1SpecialAO;                                   // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spine2SpecialAO;                                   // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spine3SpecialAO;                                   // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HeadSpecialAO;                                     // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_FirstPersonArmsAnims>        FirstPersonArmsAnimations;                         // 0x0530(0x0010)(Edit, BlueprintVisible)
	bool                                          UseLeftHandIKWhenSprinting;                        // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3207[0xF];                                     // 0x0541(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FirstPersonIK;                                     // 0x0550(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ThirdPersonIK;                                     // 0x05B0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ElbowIK;                                           // 0x0610(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentSocket;                                     // 0x0628(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          UseHoldableCameraShake;                            // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3208[0x7];                                     // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 IdleCameraShake;                                   // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WalkCameraShake;                                   // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SprintCameraShake;                                 // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 AimedCameraShake;                                  // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 AimedWalkCameraShake;                              // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeftElbowIK;                                       // 0x0660(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TurnLeft;                                          // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TurnRight;                                         // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TurnLeftCrouch;                                    // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TurnRightCrouch;                                   // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          TickEnabled;                                       // 0x0698(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3209[0x7];                                     // 0x0699(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           EquipAnim;                                         // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           UnequipAnim;                                       // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateHoldableSway();
	void CharacterFalling();
	void CharacterSprinting(bool Sprinting);
	void ClientNewWeapon();
	void ExecuteUbergraph_BP_MasterHoldable(int32 EntryPoint);
	bool LeanCheck();
	void MulticastAttach();
	void NewOwner(class AActor* Param_Owner, class FName Param_CurrentSocket);
	void OnRep_CurrentSocket();
	void OnRep_TickEnabled();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SGK_Aimed(bool* Aimed);
	void SGK_AttachNewAttachment(class ABP_MasterAttachment_C* Attachment, const struct FS_InvItem& InvItem, E_AttachmentType AttachmentType);
	void SGK_ChamberWeaponAmmo();
	void SGK_Character();
	void SGK_ClientPrimaryAction(bool KeyDown);
	void SGK_ClientReloadChecks();
	void SGK_ClientSecondaryAction(bool KeyDown);
	void SGK_ClientToggleBuildMenu(bool Open);
	void SGK_HoldableMesh(class UPrimitiveComponent** Mesh);
	void SGK_HoldableRemoved();
	void SGK_HoldableSkeletalMesh(class USkeletalMeshComponent** SkelMeshComp);
	void SGK_MeleeCollisionToggle(bool TraceOn);
	void SGK_NewHeld(bool Held);
	void SGK_ResetHoldable();
	void SGK_ServerPrimaryAction(bool KeyDown);
	void SGK_ServerSecondaryAction(bool KeyDown);
	void SGK_ShowNewAttachment();
	void SGK_SpawnAttachment(class UClass* Attachment);
	void SGK_ToggleFireMode();

	void GetLookSensitivityMultiplier(double* Multiplier) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterHoldable_C">();
	}
	static class ABP_MasterHoldable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MasterHoldable_C>();
	}
};
static_assert(alignof(ABP_MasterHoldable_C) == 0x000010, "Wrong alignment on ABP_MasterHoldable_C");
static_assert(sizeof(ABP_MasterHoldable_C) == 0x0006B0, "Wrong size on ABP_MasterHoldable_C");
static_assert(offsetof(ABP_MasterHoldable_C, UberGraphFrame) == 0x000390, "Member 'ABP_MasterHoldable_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, AttachPoint) == 0x000398, "Member 'ABP_MasterHoldable_C::AttachPoint' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, DefaultSceneRoot) == 0x0003A0, "Member 'ABP_MasterHoldable_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, HoldSocket) == 0x0003A8, "Member 'ABP_MasterHoldable_C::HoldSocket' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, UseHoldableAnimations) == 0x0003B0, "Member 'ABP_MasterHoldable_C::UseHoldableAnimations' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, ThirdPersonAnimations) == 0x0003B8, "Member 'ABP_MasterHoldable_C::ThirdPersonAnimations' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, AimOffsetType) == 0x0003C8, "Member 'ABP_MasterHoldable_C::AimOffsetType' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, StandardAimOffsets) == 0x0003D0, "Member 'ABP_MasterHoldable_C::StandardAimOffsets' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, DebugHandIK) == 0x0003E8, "Member 'ABP_MasterHoldable_C::DebugHandIK' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, UseRightHandIK) == 0x0003E9, "Member 'ABP_MasterHoldable_C::UseRightHandIK' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, UseLeftHandIK) == 0x0003EA, "Member 'ABP_MasterHoldable_C::UseLeftHandIK' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, LeftHandIKSocket) == 0x0003EC, "Member 'ABP_MasterHoldable_C::LeftHandIKSocket' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, SGKCharacter) == 0x0003F8, "Member 'ABP_MasterHoldable_C::SGKCharacter' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, OwningCharacter) == 0x000400, "Member 'ABP_MasterHoldable_C::OwningCharacter' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, Sway) == 0x000408, "Member 'ABP_MasterHoldable_C::Sway' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, PlayerInventory) == 0x000420, "Member 'ABP_MasterHoldable_C::PlayerInventory' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, UseSway) == 0x000428, "Member 'ABP_MasterHoldable_C::UseSway' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, SwaySpeed) == 0x000430, "Member 'ABP_MasterHoldable_C::SwaySpeed' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, MaxSway) == 0x000438, "Member 'ABP_MasterHoldable_C::MaxSway' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, StandardSway) == 0x000440, "Member 'ABP_MasterHoldable_C::StandardSway' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, AllowLeaning) == 0x000448, "Member 'ABP_MasterHoldable_C::AllowLeaning' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, CharacterLean) == 0x000450, "Member 'ABP_MasterHoldable_C::CharacterLean' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, CameraLean) == 0x000458, "Member 'ABP_MasterHoldable_C::CameraLean' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, LeanThirdPersonCameraOffset) == 0x000460, "Member 'ABP_MasterHoldable_C::LeanThirdPersonCameraOffset' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, AllowLeaningInStandardStance) == 0x000468, "Member 'ABP_MasterHoldable_C::AllowLeaningInStandardStance' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, AllowLeaningInCombatStance) == 0x000469, "Member 'ABP_MasterHoldable_C::AllowLeaningInCombatStance' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, UseClippingChecks) == 0x00046A, "Member 'ABP_MasterHoldable_C::UseClippingChecks' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, UseClippingCheckInStandardStance) == 0x00046B, "Member 'ABP_MasterHoldable_C::UseClippingCheckInStandardStance' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, ClippingDistance) == 0x000470, "Member 'ABP_MasterHoldable_C::ClippingDistance' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, ClippingRadius) == 0x000478, "Member 'ABP_MasterHoldable_C::ClippingRadius' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, ClippingRotation) == 0x000480, "Member 'ABP_MasterHoldable_C::ClippingRotation' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, CharacterComponent) == 0x000498, "Member 'ABP_MasterHoldable_C::CharacterComponent' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, DurabilityCostPerUse) == 0x0004A0, "Member 'ABP_MasterHoldable_C::DurabilityCostPerUse' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, UseHoldableMovementSpeeds) == 0x0004A8, "Member 'ABP_MasterHoldable_C::UseHoldableMovementSpeeds' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, MovementSpeeds) == 0x0004B0, "Member 'ABP_MasterHoldable_C::MovementSpeeds' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, AllowStanceChange) == 0x000500, "Member 'ABP_MasterHoldable_C::AllowStanceChange' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, DefaultStance) == 0x000501, "Member 'ABP_MasterHoldable_C::DefaultStance' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, SecondaryLeftHandIKSocket) == 0x000504, "Member 'ABP_MasterHoldable_C::SecondaryLeftHandIKSocket' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, CanUseSpecialAO) == 0x00050C, "Member 'ABP_MasterHoldable_C::CanUseSpecialAO' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, Spine1SpecialAO) == 0x000510, "Member 'ABP_MasterHoldable_C::Spine1SpecialAO' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, Spine2SpecialAO) == 0x000518, "Member 'ABP_MasterHoldable_C::Spine2SpecialAO' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, Spine3SpecialAO) == 0x000520, "Member 'ABP_MasterHoldable_C::Spine3SpecialAO' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, HeadSpecialAO) == 0x000528, "Member 'ABP_MasterHoldable_C::HeadSpecialAO' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, FirstPersonArmsAnimations) == 0x000530, "Member 'ABP_MasterHoldable_C::FirstPersonArmsAnimations' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, UseLeftHandIKWhenSprinting) == 0x000540, "Member 'ABP_MasterHoldable_C::UseLeftHandIKWhenSprinting' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, FirstPersonIK) == 0x000550, "Member 'ABP_MasterHoldable_C::FirstPersonIK' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, ThirdPersonIK) == 0x0005B0, "Member 'ABP_MasterHoldable_C::ThirdPersonIK' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, ElbowIK) == 0x000610, "Member 'ABP_MasterHoldable_C::ElbowIK' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, CurrentSocket) == 0x000628, "Member 'ABP_MasterHoldable_C::CurrentSocket' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, UseHoldableCameraShake) == 0x000630, "Member 'ABP_MasterHoldable_C::UseHoldableCameraShake' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, IdleCameraShake) == 0x000638, "Member 'ABP_MasterHoldable_C::IdleCameraShake' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, WalkCameraShake) == 0x000640, "Member 'ABP_MasterHoldable_C::WalkCameraShake' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, SprintCameraShake) == 0x000648, "Member 'ABP_MasterHoldable_C::SprintCameraShake' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, AimedCameraShake) == 0x000650, "Member 'ABP_MasterHoldable_C::AimedCameraShake' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, AimedWalkCameraShake) == 0x000658, "Member 'ABP_MasterHoldable_C::AimedWalkCameraShake' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, LeftElbowIK) == 0x000660, "Member 'ABP_MasterHoldable_C::LeftElbowIK' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, TurnLeft) == 0x000678, "Member 'ABP_MasterHoldable_C::TurnLeft' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, TurnRight) == 0x000680, "Member 'ABP_MasterHoldable_C::TurnRight' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, TurnLeftCrouch) == 0x000688, "Member 'ABP_MasterHoldable_C::TurnLeftCrouch' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, TurnRightCrouch) == 0x000690, "Member 'ABP_MasterHoldable_C::TurnRightCrouch' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, TickEnabled) == 0x000698, "Member 'ABP_MasterHoldable_C::TickEnabled' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, EquipAnim) == 0x0006A0, "Member 'ABP_MasterHoldable_C::EquipAnim' has a wrong offset!");
static_assert(offsetof(ABP_MasterHoldable_C, UnequipAnim) == 0x0006A8, "Member 'ABP_MasterHoldable_C::UnequipAnim' has a wrong offset!");

}

