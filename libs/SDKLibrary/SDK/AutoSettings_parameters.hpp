#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AutoSettings

#include "Basic.hpp"

#include "AutoSettings_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function AutoSettings.AutoSettingWidget.ApplySettingValue
// 0x0018 (0x0018 - 0x0000)
struct AutoSettingWidget_ApplySettingValue final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveIfPossible;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ACE[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoSettingWidget_ApplySettingValue) == 0x000008, "Wrong alignment on AutoSettingWidget_ApplySettingValue");
static_assert(sizeof(AutoSettingWidget_ApplySettingValue) == 0x000018, "Wrong size on AutoSettingWidget_ApplySettingValue");
static_assert(offsetof(AutoSettingWidget_ApplySettingValue, Value) == 0x000000, "Member 'AutoSettingWidget_ApplySettingValue::Value' has a wrong offset!");
static_assert(offsetof(AutoSettingWidget_ApplySettingValue, bSaveIfPossible) == 0x000010, "Member 'AutoSettingWidget_ApplySettingValue::bSaveIfPossible' has a wrong offset!");

// Function AutoSettings.AutoSettingWidget.UpdateSelection
// 0x0010 (0x0010 - 0x0000)
struct AutoSettingWidget_UpdateSelection final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingWidget_UpdateSelection) == 0x000008, "Wrong alignment on AutoSettingWidget_UpdateSelection");
static_assert(sizeof(AutoSettingWidget_UpdateSelection) == 0x000010, "Wrong size on AutoSettingWidget_UpdateSelection");
static_assert(offsetof(AutoSettingWidget_UpdateSelection, Value) == 0x000000, "Member 'AutoSettingWidget_UpdateSelection::Value' has a wrong offset!");

// Function AutoSettings.AutoSettingWidget.HasUnappliedChange
// 0x0001 (0x0001 - 0x0000)
struct AutoSettingWidget_HasUnappliedChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingWidget_HasUnappliedChange) == 0x000001, "Wrong alignment on AutoSettingWidget_HasUnappliedChange");
static_assert(sizeof(AutoSettingWidget_HasUnappliedChange) == 0x000001, "Wrong size on AutoSettingWidget_HasUnappliedChange");
static_assert(offsetof(AutoSettingWidget_HasUnappliedChange, ReturnValue) == 0x000000, "Member 'AutoSettingWidget_HasUnappliedChange::ReturnValue' has a wrong offset!");

// Function AutoSettings.AutoSettingWidget.HasUnsavedChange
// 0x0001 (0x0001 - 0x0000)
struct AutoSettingWidget_HasUnsavedChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingWidget_HasUnsavedChange) == 0x000001, "Wrong alignment on AutoSettingWidget_HasUnsavedChange");
static_assert(sizeof(AutoSettingWidget_HasUnsavedChange) == 0x000001, "Wrong size on AutoSettingWidget_HasUnsavedChange");
static_assert(offsetof(AutoSettingWidget_HasUnsavedChange, ReturnValue) == 0x000000, "Member 'AutoSettingWidget_HasUnsavedChange::ReturnValue' has a wrong offset!");

// Function AutoSettings.ToggleSetting.ToggleStateUpdated
// 0x0001 (0x0001 - 0x0000)
struct ToggleSetting_ToggleStateUpdated final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleSetting_ToggleStateUpdated) == 0x000001, "Wrong alignment on ToggleSetting_ToggleStateUpdated");
static_assert(sizeof(ToggleSetting_ToggleStateUpdated) == 0x000001, "Wrong size on ToggleSetting_ToggleStateUpdated");
static_assert(offsetof(ToggleSetting_ToggleStateUpdated, State) == 0x000000, "Member 'ToggleSetting_ToggleStateUpdated::State' has a wrong offset!");

// Function AutoSettings.ToggleSetting.UpdateToggleState
// 0x0001 (0x0001 - 0x0000)
struct ToggleSetting_UpdateToggleState final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleSetting_UpdateToggleState) == 0x000001, "Wrong alignment on ToggleSetting_UpdateToggleState");
static_assert(sizeof(ToggleSetting_UpdateToggleState) == 0x000001, "Wrong size on ToggleSetting_UpdateToggleState");
static_assert(offsetof(ToggleSetting_UpdateToggleState, State) == 0x000000, "Member 'ToggleSetting_UpdateToggleState::State' has a wrong offset!");

// Function AutoSettings.CheckBoxSetting.CheckBoxStateChanged
// 0x0001 (0x0001 - 0x0000)
struct CheckBoxSetting_CheckBoxStateChanged final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckBoxSetting_CheckBoxStateChanged) == 0x000001, "Wrong alignment on CheckBoxSetting_CheckBoxStateChanged");
static_assert(sizeof(CheckBoxSetting_CheckBoxStateChanged) == 0x000001, "Wrong size on CheckBoxSetting_CheckBoxStateChanged");
static_assert(offsetof(CheckBoxSetting_CheckBoxStateChanged, IsChecked) == 0x000000, "Member 'CheckBoxSetting_CheckBoxStateChanged::IsChecked' has a wrong offset!");

// Function AutoSettings.SelectSetting.UpdateOptions
// 0x0010 (0x0010 - 0x0000)
struct SelectSetting_UpdateOptions final
{
public:
	TArray<struct FSettingOption>                 InOptions;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectSetting_UpdateOptions) == 0x000008, "Wrong alignment on SelectSetting_UpdateOptions");
static_assert(sizeof(SelectSetting_UpdateOptions) == 0x000010, "Wrong size on SelectSetting_UpdateOptions");
static_assert(offsetof(SelectSetting_UpdateOptions, InOptions) == 0x000000, "Member 'SelectSetting_UpdateOptions::InOptions' has a wrong offset!");

// Function AutoSettings.ComboBoxSetting.ComboBoxSelectionChanged
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxSetting_ComboBoxSelectionChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD0[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComboBoxSetting_ComboBoxSelectionChanged) == 0x000008, "Wrong alignment on ComboBoxSetting_ComboBoxSelectionChanged");
static_assert(sizeof(ComboBoxSetting_ComboBoxSelectionChanged) == 0x000018, "Wrong size on ComboBoxSetting_ComboBoxSelectionChanged");
static_assert(offsetof(ComboBoxSetting_ComboBoxSelectionChanged, SelectedItem) == 0x000000, "Member 'ComboBoxSetting_ComboBoxSelectionChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(ComboBoxSetting_ComboBoxSelectionChanged, SelectionType) == 0x000010, "Member 'ComboBoxSetting_ComboBoxSelectionChanged::SelectionType' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.GetBoolCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_GetBoolCVar final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD1[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsoleUtils_GetBoolCVar) == 0x000004, "Wrong alignment on ConsoleUtils_GetBoolCVar");
static_assert(sizeof(ConsoleUtils_GetBoolCVar) == 0x00000C, "Wrong size on ConsoleUtils_GetBoolCVar");
static_assert(offsetof(ConsoleUtils_GetBoolCVar, Param_Name) == 0x000000, "Member 'ConsoleUtils_GetBoolCVar::Param_Name' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_GetBoolCVar, ReturnValue) == 0x000008, "Member 'ConsoleUtils_GetBoolCVar::ReturnValue' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.GetFloatCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_GetFloatCVar final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_GetFloatCVar) == 0x000004, "Wrong alignment on ConsoleUtils_GetFloatCVar");
static_assert(sizeof(ConsoleUtils_GetFloatCVar) == 0x00000C, "Wrong size on ConsoleUtils_GetFloatCVar");
static_assert(offsetof(ConsoleUtils_GetFloatCVar, Param_Name) == 0x000000, "Member 'ConsoleUtils_GetFloatCVar::Param_Name' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_GetFloatCVar, ReturnValue) == 0x000008, "Member 'ConsoleUtils_GetFloatCVar::ReturnValue' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.GetIntCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_GetIntCVar final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_GetIntCVar) == 0x000004, "Wrong alignment on ConsoleUtils_GetIntCVar");
static_assert(sizeof(ConsoleUtils_GetIntCVar) == 0x00000C, "Wrong size on ConsoleUtils_GetIntCVar");
static_assert(offsetof(ConsoleUtils_GetIntCVar, Param_Name) == 0x000000, "Member 'ConsoleUtils_GetIntCVar::Param_Name' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_GetIntCVar, ReturnValue) == 0x000008, "Member 'ConsoleUtils_GetIntCVar::ReturnValue' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.GetStringCVar
// 0x0018 (0x0018 - 0x0000)
struct ConsoleUtils_GetStringCVar final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_GetStringCVar) == 0x000008, "Wrong alignment on ConsoleUtils_GetStringCVar");
static_assert(sizeof(ConsoleUtils_GetStringCVar) == 0x000018, "Wrong size on ConsoleUtils_GetStringCVar");
static_assert(offsetof(ConsoleUtils_GetStringCVar, Param_Name) == 0x000000, "Member 'ConsoleUtils_GetStringCVar::Param_Name' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_GetStringCVar, ReturnValue) == 0x000008, "Member 'ConsoleUtils_GetStringCVar::ReturnValue' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.IsCVarRegistered
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_IsCVarRegistered final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD2[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsoleUtils_IsCVarRegistered) == 0x000004, "Wrong alignment on ConsoleUtils_IsCVarRegistered");
static_assert(sizeof(ConsoleUtils_IsCVarRegistered) == 0x00000C, "Wrong size on ConsoleUtils_IsCVarRegistered");
static_assert(offsetof(ConsoleUtils_IsCVarRegistered, Param_Name) == 0x000000, "Member 'ConsoleUtils_IsCVarRegistered::Param_Name' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_IsCVarRegistered, ReturnValue) == 0x000008, "Member 'ConsoleUtils_IsCVarRegistered::ReturnValue' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.SetBoolCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_SetBoolCVar final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD3[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsoleUtils_SetBoolCVar) == 0x000004, "Wrong alignment on ConsoleUtils_SetBoolCVar");
static_assert(sizeof(ConsoleUtils_SetBoolCVar) == 0x00000C, "Wrong size on ConsoleUtils_SetBoolCVar");
static_assert(offsetof(ConsoleUtils_SetBoolCVar, Param_Name) == 0x000000, "Member 'ConsoleUtils_SetBoolCVar::Param_Name' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_SetBoolCVar, Value) == 0x000008, "Member 'ConsoleUtils_SetBoolCVar::Value' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.SetFloatCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_SetFloatCVar final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_SetFloatCVar) == 0x000004, "Wrong alignment on ConsoleUtils_SetFloatCVar");
static_assert(sizeof(ConsoleUtils_SetFloatCVar) == 0x00000C, "Wrong size on ConsoleUtils_SetFloatCVar");
static_assert(offsetof(ConsoleUtils_SetFloatCVar, Param_Name) == 0x000000, "Member 'ConsoleUtils_SetFloatCVar::Param_Name' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_SetFloatCVar, Value) == 0x000008, "Member 'ConsoleUtils_SetFloatCVar::Value' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.SetIntCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_SetIntCVar final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_SetIntCVar) == 0x000004, "Wrong alignment on ConsoleUtils_SetIntCVar");
static_assert(sizeof(ConsoleUtils_SetIntCVar) == 0x00000C, "Wrong size on ConsoleUtils_SetIntCVar");
static_assert(offsetof(ConsoleUtils_SetIntCVar, Param_Name) == 0x000000, "Member 'ConsoleUtils_SetIntCVar::Param_Name' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_SetIntCVar, Value) == 0x000008, "Member 'ConsoleUtils_SetIntCVar::Value' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.SetStringCVar
// 0x0018 (0x0018 - 0x0000)
struct ConsoleUtils_SetStringCVar final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_SetStringCVar) == 0x000008, "Wrong alignment on ConsoleUtils_SetStringCVar");
static_assert(sizeof(ConsoleUtils_SetStringCVar) == 0x000018, "Wrong size on ConsoleUtils_SetStringCVar");
static_assert(offsetof(ConsoleUtils_SetStringCVar, Param_Name) == 0x000000, "Member 'ConsoleUtils_SetStringCVar::Param_Name' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_SetStringCVar, Value) == 0x000008, "Member 'ConsoleUtils_SetStringCVar::Value' has a wrong offset!");

// Function AutoSettings.CVarChangeListenerManager.AddBoolCVarCallbackStatic
// 0x001C (0x001C - 0x0000)
struct CVarChangeListenerManager_AddBoolCVarCallbackStatic final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool NewValue)>                ChangedCallback;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD5[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CVarChangeListenerManager_AddBoolCVarCallbackStatic) == 0x000004, "Wrong alignment on CVarChangeListenerManager_AddBoolCVarCallbackStatic");
static_assert(sizeof(CVarChangeListenerManager_AddBoolCVarCallbackStatic) == 0x00001C, "Wrong size on CVarChangeListenerManager_AddBoolCVarCallbackStatic");
static_assert(offsetof(CVarChangeListenerManager_AddBoolCVarCallbackStatic, Param_Name) == 0x000000, "Member 'CVarChangeListenerManager_AddBoolCVarCallbackStatic::Param_Name' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddBoolCVarCallbackStatic, ChangedCallback) == 0x000008, "Member 'CVarChangeListenerManager_AddBoolCVarCallbackStatic::ChangedCallback' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddBoolCVarCallbackStatic, CallbackImmediately) == 0x000018, "Member 'CVarChangeListenerManager_AddBoolCVarCallbackStatic::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.CVarChangeListenerManager.AddFloatCVarCallbackStatic
// 0x001C (0x001C - 0x0000)
struct CVarChangeListenerManager_AddFloatCVarCallbackStatic final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float NewValue)>               ChangedCallback;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD6[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CVarChangeListenerManager_AddFloatCVarCallbackStatic) == 0x000004, "Wrong alignment on CVarChangeListenerManager_AddFloatCVarCallbackStatic");
static_assert(sizeof(CVarChangeListenerManager_AddFloatCVarCallbackStatic) == 0x00001C, "Wrong size on CVarChangeListenerManager_AddFloatCVarCallbackStatic");
static_assert(offsetof(CVarChangeListenerManager_AddFloatCVarCallbackStatic, Param_Name) == 0x000000, "Member 'CVarChangeListenerManager_AddFloatCVarCallbackStatic::Param_Name' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddFloatCVarCallbackStatic, ChangedCallback) == 0x000008, "Member 'CVarChangeListenerManager_AddFloatCVarCallbackStatic::ChangedCallback' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddFloatCVarCallbackStatic, CallbackImmediately) == 0x000018, "Member 'CVarChangeListenerManager_AddFloatCVarCallbackStatic::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.CVarChangeListenerManager.AddIntCVarCallbackStatic
// 0x001C (0x001C - 0x0000)
struct CVarChangeListenerManager_AddIntCVarCallbackStatic final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 NewValue)>               ChangedCallback;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD7[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CVarChangeListenerManager_AddIntCVarCallbackStatic) == 0x000004, "Wrong alignment on CVarChangeListenerManager_AddIntCVarCallbackStatic");
static_assert(sizeof(CVarChangeListenerManager_AddIntCVarCallbackStatic) == 0x00001C, "Wrong size on CVarChangeListenerManager_AddIntCVarCallbackStatic");
static_assert(offsetof(CVarChangeListenerManager_AddIntCVarCallbackStatic, Param_Name) == 0x000000, "Member 'CVarChangeListenerManager_AddIntCVarCallbackStatic::Param_Name' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddIntCVarCallbackStatic, ChangedCallback) == 0x000008, "Member 'CVarChangeListenerManager_AddIntCVarCallbackStatic::ChangedCallback' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddIntCVarCallbackStatic, CallbackImmediately) == 0x000018, "Member 'CVarChangeListenerManager_AddIntCVarCallbackStatic::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.CVarChangeListenerManager.AddStringCVarCallbackStatic
// 0x001C (0x001C - 0x0000)
struct CVarChangeListenerManager_AddStringCVarCallbackStatic final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& NewValue)> ChangedCallback;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD8[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CVarChangeListenerManager_AddStringCVarCallbackStatic) == 0x000004, "Wrong alignment on CVarChangeListenerManager_AddStringCVarCallbackStatic");
static_assert(sizeof(CVarChangeListenerManager_AddStringCVarCallbackStatic) == 0x00001C, "Wrong size on CVarChangeListenerManager_AddStringCVarCallbackStatic");
static_assert(offsetof(CVarChangeListenerManager_AddStringCVarCallbackStatic, Param_Name) == 0x000000, "Member 'CVarChangeListenerManager_AddStringCVarCallbackStatic::Param_Name' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddStringCVarCallbackStatic, ChangedCallback) == 0x000008, "Member 'CVarChangeListenerManager_AddStringCVarCallbackStatic::ChangedCallback' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddStringCVarCallbackStatic, CallbackImmediately) == 0x000018, "Member 'CVarChangeListenerManager_AddStringCVarCallbackStatic::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.SliderSetting.OnSliderValueUpdated
// 0x0008 (0x0008 - 0x0000)
struct SliderSetting_OnSliderValueUpdated final
{
public:
	float                                         NormalizedValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RawValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderSetting_OnSliderValueUpdated) == 0x000004, "Wrong alignment on SliderSetting_OnSliderValueUpdated");
static_assert(sizeof(SliderSetting_OnSliderValueUpdated) == 0x000008, "Wrong size on SliderSetting_OnSliderValueUpdated");
static_assert(offsetof(SliderSetting_OnSliderValueUpdated, NormalizedValue) == 0x000000, "Member 'SliderSetting_OnSliderValueUpdated::NormalizedValue' has a wrong offset!");
static_assert(offsetof(SliderSetting_OnSliderValueUpdated, RawValue) == 0x000004, "Member 'SliderSetting_OnSliderValueUpdated::RawValue' has a wrong offset!");

// Function AutoSettings.SliderSetting.SliderValueUpdated
// 0x0004 (0x0004 - 0x0000)
struct SliderSetting_SliderValueUpdated final
{
public:
	float                                         NormalizedValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderSetting_SliderValueUpdated) == 0x000004, "Wrong alignment on SliderSetting_SliderValueUpdated");
static_assert(sizeof(SliderSetting_SliderValueUpdated) == 0x000004, "Wrong size on SliderSetting_SliderValueUpdated");
static_assert(offsetof(SliderSetting_SliderValueUpdated, NormalizedValue) == 0x000000, "Member 'SliderSetting_SliderValueUpdated::NormalizedValue' has a wrong offset!");

// Function AutoSettings.SliderSetting.UpdateSliderValue
// 0x0008 (0x0008 - 0x0000)
struct SliderSetting_UpdateSliderValue final
{
public:
	float                                         NormalizedValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RawValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderSetting_UpdateSliderValue) == 0x000004, "Wrong alignment on SliderSetting_UpdateSliderValue");
static_assert(sizeof(SliderSetting_UpdateSliderValue) == 0x000008, "Wrong size on SliderSetting_UpdateSliderValue");
static_assert(offsetof(SliderSetting_UpdateSliderValue, NormalizedValue) == 0x000000, "Member 'SliderSetting_UpdateSliderValue::NormalizedValue' has a wrong offset!");
static_assert(offsetof(SliderSetting_UpdateSliderValue, RawValue) == 0x000004, "Member 'SliderSetting_UpdateSliderValue::RawValue' has a wrong offset!");

// Function AutoSettings.SliderSetting.ClampRawValue
// 0x0008 (0x0008 - 0x0000)
struct SliderSetting_ClampRawValue final
{
public:
	float                                         RawValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderSetting_ClampRawValue) == 0x000004, "Wrong alignment on SliderSetting_ClampRawValue");
static_assert(sizeof(SliderSetting_ClampRawValue) == 0x000008, "Wrong size on SliderSetting_ClampRawValue");
static_assert(offsetof(SliderSetting_ClampRawValue, RawValue) == 0x000000, "Member 'SliderSetting_ClampRawValue::RawValue' has a wrong offset!");
static_assert(offsetof(SliderSetting_ClampRawValue, ReturnValue) == 0x000004, "Member 'SliderSetting_ClampRawValue::ReturnValue' has a wrong offset!");

// Function AutoSettings.SliderSetting.NormalizedValueToRaw
// 0x0008 (0x0008 - 0x0000)
struct SliderSetting_NormalizedValueToRaw final
{
public:
	float                                         NormalizedValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderSetting_NormalizedValueToRaw) == 0x000004, "Wrong alignment on SliderSetting_NormalizedValueToRaw");
static_assert(sizeof(SliderSetting_NormalizedValueToRaw) == 0x000008, "Wrong size on SliderSetting_NormalizedValueToRaw");
static_assert(offsetof(SliderSetting_NormalizedValueToRaw, NormalizedValue) == 0x000000, "Member 'SliderSetting_NormalizedValueToRaw::NormalizedValue' has a wrong offset!");
static_assert(offsetof(SliderSetting_NormalizedValueToRaw, ReturnValue) == 0x000004, "Member 'SliderSetting_NormalizedValueToRaw::ReturnValue' has a wrong offset!");

// Function AutoSettings.SliderSetting.RawValueToNormalized
// 0x0008 (0x0008 - 0x0000)
struct SliderSetting_RawValueToNormalized final
{
public:
	float                                         RawValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderSetting_RawValueToNormalized) == 0x000004, "Wrong alignment on SliderSetting_RawValueToNormalized");
static_assert(sizeof(SliderSetting_RawValueToNormalized) == 0x000008, "Wrong size on SliderSetting_RawValueToNormalized");
static_assert(offsetof(SliderSetting_RawValueToNormalized, RawValue) == 0x000000, "Member 'SliderSetting_RawValueToNormalized::RawValue' has a wrong offset!");
static_assert(offsetof(SliderSetting_RawValueToNormalized, ReturnValue) == 0x000004, "Member 'SliderSetting_RawValueToNormalized::ReturnValue' has a wrong offset!");

// Function AutoSettings.SliderSetting.ShouldSaveCurrentValue
// 0x0001 (0x0001 - 0x0000)
struct SliderSetting_ShouldSaveCurrentValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderSetting_ShouldSaveCurrentValue) == 0x000001, "Wrong alignment on SliderSetting_ShouldSaveCurrentValue");
static_assert(sizeof(SliderSetting_ShouldSaveCurrentValue) == 0x000001, "Wrong size on SliderSetting_ShouldSaveCurrentValue");
static_assert(offsetof(SliderSetting_ShouldSaveCurrentValue, ReturnValue) == 0x000000, "Member 'SliderSetting_ShouldSaveCurrentValue::ReturnValue' has a wrong offset!");

// Function AutoSettings.NativeSliderSetting.SliderValueChanged
// 0x0004 (0x0004 - 0x0000)
struct NativeSliderSetting_SliderValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NativeSliderSetting_SliderValueChanged) == 0x000004, "Wrong alignment on NativeSliderSetting_SliderValueChanged");
static_assert(sizeof(NativeSliderSetting_SliderValueChanged) == 0x000004, "Wrong size on NativeSliderSetting_SliderValueChanged");
static_assert(offsetof(NativeSliderSetting_SliderValueChanged, NewValue) == 0x000000, "Member 'NativeSliderSetting_SliderValueChanged::NewValue' has a wrong offset!");

// Function AutoSettings.RadioButton.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct RadioButton_SetLabel final
{
public:
	class FText                                   InLabel;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetLabel) == 0x000008, "Wrong alignment on RadioButton_SetLabel");
static_assert(sizeof(RadioButton_SetLabel) == 0x000018, "Wrong size on RadioButton_SetLabel");
static_assert(offsetof(RadioButton_SetLabel, InLabel) == 0x000000, "Member 'RadioButton_SetLabel::InLabel' has a wrong offset!");

// Function AutoSettings.RadioButton.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct RadioButton_SetSelected final
{
public:
	bool                                          InSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetSelected) == 0x000001, "Wrong alignment on RadioButton_SetSelected");
static_assert(sizeof(RadioButton_SetSelected) == 0x000001, "Wrong size on RadioButton_SetSelected");
static_assert(offsetof(RadioButton_SetSelected, InSelected) == 0x000000, "Member 'RadioButton_SetSelected::InSelected' has a wrong offset!");

// Function AutoSettings.RadioButton.SetValue
// 0x0010 (0x0010 - 0x0000)
struct RadioButton_SetValue final
{
public:
	class FString                                 InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetValue) == 0x000008, "Wrong alignment on RadioButton_SetValue");
static_assert(sizeof(RadioButton_SetValue) == 0x000010, "Wrong size on RadioButton_SetValue");
static_assert(offsetof(RadioButton_SetValue, InValue) == 0x000000, "Member 'RadioButton_SetValue::InValue' has a wrong offset!");

// Function AutoSettings.RadioButton.UpdateLabel
// 0x0018 (0x0018 - 0x0000)
struct RadioButton_UpdateLabel final
{
public:
	class FText                                   InLabel;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_UpdateLabel) == 0x000008, "Wrong alignment on RadioButton_UpdateLabel");
static_assert(sizeof(RadioButton_UpdateLabel) == 0x000018, "Wrong size on RadioButton_UpdateLabel");
static_assert(offsetof(RadioButton_UpdateLabel, InLabel) == 0x000000, "Member 'RadioButton_UpdateLabel::InLabel' has a wrong offset!");

// Function AutoSettings.RadioButton.UpdateSelected
// 0x0001 (0x0001 - 0x0000)
struct RadioButton_UpdateSelected final
{
public:
	bool                                          InSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_UpdateSelected) == 0x000001, "Wrong alignment on RadioButton_UpdateSelected");
static_assert(sizeof(RadioButton_UpdateSelected) == 0x000001, "Wrong size on RadioButton_UpdateSelected");
static_assert(offsetof(RadioButton_UpdateSelected, InSelected) == 0x000000, "Member 'RadioButton_UpdateSelected::InSelected' has a wrong offset!");

// Function AutoSettings.RadioButton.GetLabel
// 0x0018 (0x0018 - 0x0000)
struct RadioButton_GetLabel final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_GetLabel) == 0x000008, "Wrong alignment on RadioButton_GetLabel");
static_assert(sizeof(RadioButton_GetLabel) == 0x000018, "Wrong size on RadioButton_GetLabel");
static_assert(offsetof(RadioButton_GetLabel, ReturnValue) == 0x000000, "Member 'RadioButton_GetLabel::ReturnValue' has a wrong offset!");

// Function AutoSettings.RadioButton.GetSelected
// 0x0001 (0x0001 - 0x0000)
struct RadioButton_GetSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_GetSelected) == 0x000001, "Wrong alignment on RadioButton_GetSelected");
static_assert(sizeof(RadioButton_GetSelected) == 0x000001, "Wrong size on RadioButton_GetSelected");
static_assert(offsetof(RadioButton_GetSelected, ReturnValue) == 0x000000, "Member 'RadioButton_GetSelected::ReturnValue' has a wrong offset!");

// Function AutoSettings.RadioButton.GetValue
// 0x0010 (0x0010 - 0x0000)
struct RadioButton_GetValue final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_GetValue) == 0x000008, "Wrong alignment on RadioButton_GetValue");
static_assert(sizeof(RadioButton_GetValue) == 0x000010, "Wrong size on RadioButton_GetValue");
static_assert(offsetof(RadioButton_GetValue, ReturnValue) == 0x000000, "Member 'RadioButton_GetValue::ReturnValue' has a wrong offset!");

// Function AutoSettings.RadioSelect.ButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct RadioSelect_ButtonSelected final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioSelect_ButtonSelected) == 0x000008, "Wrong alignment on RadioSelect_ButtonSelected");
static_assert(sizeof(RadioSelect_ButtonSelected) == 0x000010, "Wrong size on RadioSelect_ButtonSelected");
static_assert(offsetof(RadioSelect_ButtonSelected, Value) == 0x000000, "Member 'RadioSelect_ButtonSelected::Value' has a wrong offset!");

// Function AutoSettings.RadioSelect.OnButtonCreated
// 0x0010 (0x0010 - 0x0000)
struct RadioSelect_OnButtonCreated final
{
public:
	class URadioButton*                           Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelSlot*                             NewSlot;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioSelect_OnButtonCreated) == 0x000008, "Wrong alignment on RadioSelect_OnButtonCreated");
static_assert(sizeof(RadioSelect_OnButtonCreated) == 0x000010, "Wrong size on RadioSelect_OnButtonCreated");
static_assert(offsetof(RadioSelect_OnButtonCreated, Button) == 0x000000, "Member 'RadioSelect_OnButtonCreated::Button' has a wrong offset!");
static_assert(offsetof(RadioSelect_OnButtonCreated, NewSlot) == 0x000008, "Member 'RadioSelect_OnButtonCreated::NewSlot' has a wrong offset!");

// Function AutoSettings.RadioSelect.Select
// 0x0010 (0x0010 - 0x0000)
struct RadioSelect_Select final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioSelect_Select) == 0x000008, "Wrong alignment on RadioSelect_Select");
static_assert(sizeof(RadioSelect_Select) == 0x000010, "Wrong size on RadioSelect_Select");
static_assert(offsetof(RadioSelect_Select, Value) == 0x000000, "Member 'RadioSelect_Select::Value' has a wrong offset!");

// Function AutoSettings.RadioSelect.SetOptions
// 0x0010 (0x0010 - 0x0000)
struct RadioSelect_SetOptions final
{
public:
	TArray<struct FSettingOption>                 InOptions;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioSelect_SetOptions) == 0x000008, "Wrong alignment on RadioSelect_SetOptions");
static_assert(sizeof(RadioSelect_SetOptions) == 0x000010, "Wrong size on RadioSelect_SetOptions");
static_assert(offsetof(RadioSelect_SetOptions, InOptions) == 0x000000, "Member 'RadioSelect_SetOptions::InOptions' has a wrong offset!");

// Function AutoSettings.RadioSelect.GetOptions
// 0x0010 (0x0010 - 0x0000)
struct RadioSelect_GetOptions final
{
public:
	TArray<struct FSettingOption>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioSelect_GetOptions) == 0x000008, "Wrong alignment on RadioSelect_GetOptions");
static_assert(sizeof(RadioSelect_GetOptions) == 0x000010, "Wrong size on RadioSelect_GetOptions");
static_assert(offsetof(RadioSelect_GetOptions, ReturnValue) == 0x000000, "Member 'RadioSelect_GetOptions::ReturnValue' has a wrong offset!");

// Function AutoSettings.RadioSelect.GetRadioButtonWidgets
// 0x0010 (0x0010 - 0x0000)
struct RadioSelect_GetRadioButtonWidgets final
{
public:
	TArray<class URadioButton*>                   ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioSelect_GetRadioButtonWidgets) == 0x000008, "Wrong alignment on RadioSelect_GetRadioButtonWidgets");
static_assert(sizeof(RadioSelect_GetRadioButtonWidgets) == 0x000010, "Wrong size on RadioSelect_GetRadioButtonWidgets");
static_assert(offsetof(RadioSelect_GetRadioButtonWidgets, ReturnValue) == 0x000000, "Member 'RadioSelect_GetRadioButtonWidgets::ReturnValue' has a wrong offset!");

// Function AutoSettings.RadioSelectSetting.RadioSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct RadioSelectSetting_RadioSelectionChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioSelectSetting_RadioSelectionChanged) == 0x000008, "Wrong alignment on RadioSelectSetting_RadioSelectionChanged");
static_assert(sizeof(RadioSelectSetting_RadioSelectionChanged) == 0x000010, "Wrong size on RadioSelectSetting_RadioSelectionChanged");
static_assert(offsetof(RadioSelectSetting_RadioSelectionChanged, Value) == 0x000000, "Member 'RadioSelectSetting_RadioSelectionChanged::Value' has a wrong offset!");

// Function AutoSettings.SettingOptionFactory.ConstructOptions
// 0x0010 (0x0010 - 0x0000)
struct SettingOptionFactory_ConstructOptions final
{
public:
	TArray<struct FSettingOption>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingOptionFactory_ConstructOptions) == 0x000008, "Wrong alignment on SettingOptionFactory_ConstructOptions");
static_assert(sizeof(SettingOptionFactory_ConstructOptions) == 0x000010, "Wrong size on SettingOptionFactory_ConstructOptions");
static_assert(offsetof(SettingOptionFactory_ConstructOptions, ReturnValue) == 0x000000, "Member 'SettingOptionFactory_ConstructOptions::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingValueMask.MaskValue
// 0x0020 (0x0020 - 0x0000)
struct SettingValueMask_MaskValue final
{
public:
	class FString                                 ConsoleValue;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingValueMask_MaskValue) == 0x000008, "Wrong alignment on SettingValueMask_MaskValue");
static_assert(sizeof(SettingValueMask_MaskValue) == 0x000020, "Wrong size on SettingValueMask_MaskValue");
static_assert(offsetof(SettingValueMask_MaskValue, ConsoleValue) == 0x000000, "Member 'SettingValueMask_MaskValue::ConsoleValue' has a wrong offset!");
static_assert(offsetof(SettingValueMask_MaskValue, ReturnValue) == 0x000010, "Member 'SettingValueMask_MaskValue::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingValueMask.RecombineValues
// 0x0030 (0x0030 - 0x0000)
struct SettingValueMask_RecombineValues final
{
public:
	class FString                                 SettingValue;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConsoleValue;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingValueMask_RecombineValues) == 0x000008, "Wrong alignment on SettingValueMask_RecombineValues");
static_assert(sizeof(SettingValueMask_RecombineValues) == 0x000030, "Wrong size on SettingValueMask_RecombineValues");
static_assert(offsetof(SettingValueMask_RecombineValues, SettingValue) == 0x000000, "Member 'SettingValueMask_RecombineValues::SettingValue' has a wrong offset!");
static_assert(offsetof(SettingValueMask_RecombineValues, ConsoleValue) == 0x000010, "Member 'SettingValueMask_RecombineValues::ConsoleValue' has a wrong offset!");
static_assert(offsetof(SettingValueMask_RecombineValues, ReturnValue) == 0x000020, "Member 'SettingValueMask_RecombineValues::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingContainerUtils.ApplyChildSettings
// 0x0010 (0x0010 - 0x0000)
struct SettingContainerUtils_ApplyChildSettings final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingContainerUtils_ApplyChildSettings) == 0x000008, "Wrong alignment on SettingContainerUtils_ApplyChildSettings");
static_assert(sizeof(SettingContainerUtils_ApplyChildSettings) == 0x000010, "Wrong size on SettingContainerUtils_ApplyChildSettings");
static_assert(offsetof(SettingContainerUtils_ApplyChildSettings, UserWidget) == 0x000000, "Member 'SettingContainerUtils_ApplyChildSettings::UserWidget' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_ApplyChildSettings, Parent) == 0x000008, "Member 'SettingContainerUtils_ApplyChildSettings::Parent' has a wrong offset!");

// Function AutoSettings.SettingContainerUtils.CancelChildSettings
// 0x0010 (0x0010 - 0x0000)
struct SettingContainerUtils_CancelChildSettings final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingContainerUtils_CancelChildSettings) == 0x000008, "Wrong alignment on SettingContainerUtils_CancelChildSettings");
static_assert(sizeof(SettingContainerUtils_CancelChildSettings) == 0x000010, "Wrong size on SettingContainerUtils_CancelChildSettings");
static_assert(offsetof(SettingContainerUtils_CancelChildSettings, UserWidget) == 0x000000, "Member 'SettingContainerUtils_CancelChildSettings::UserWidget' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_CancelChildSettings, Parent) == 0x000008, "Member 'SettingContainerUtils_CancelChildSettings::Parent' has a wrong offset!");

// Function AutoSettings.SettingContainerUtils.DoesAnyChildSettingHaveUnappliedChange
// 0x0018 (0x0018 - 0x0000)
struct SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ADB[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange) == 0x000008, "Wrong alignment on SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange");
static_assert(sizeof(SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange) == 0x000018, "Wrong size on SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange");
static_assert(offsetof(SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange, UserWidget) == 0x000000, "Member 'SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange::UserWidget' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange, Parent) == 0x000008, "Member 'SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange::Parent' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange, ReturnValue) == 0x000010, "Member 'SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingContainerUtils.DoesAnyChildSettingHaveUnsavedChange
// 0x0018 (0x0018 - 0x0000)
struct SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ADC[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange) == 0x000008, "Wrong alignment on SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange");
static_assert(sizeof(SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange) == 0x000018, "Wrong size on SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange");
static_assert(offsetof(SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange, UserWidget) == 0x000000, "Member 'SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange::UserWidget' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange, Parent) == 0x000008, "Member 'SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange::Parent' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange, ReturnValue) == 0x000010, "Member 'SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingContainerUtils.GetChildSettings
// 0x0020 (0x0020 - 0x0000)
struct SettingContainerUtils_GetChildSettings final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAutoSettingWidget*>             ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingContainerUtils_GetChildSettings) == 0x000008, "Wrong alignment on SettingContainerUtils_GetChildSettings");
static_assert(sizeof(SettingContainerUtils_GetChildSettings) == 0x000020, "Wrong size on SettingContainerUtils_GetChildSettings");
static_assert(offsetof(SettingContainerUtils_GetChildSettings, UserWidget) == 0x000000, "Member 'SettingContainerUtils_GetChildSettings::UserWidget' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_GetChildSettings, Parent) == 0x000008, "Member 'SettingContainerUtils_GetChildSettings::Parent' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_GetChildSettings, ReturnValue) == 0x000010, "Member 'SettingContainerUtils_GetChildSettings::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingContainerUtils.SaveChildSettings
// 0x0010 (0x0010 - 0x0000)
struct SettingContainerUtils_SaveChildSettings final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingContainerUtils_SaveChildSettings) == 0x000008, "Wrong alignment on SettingContainerUtils_SaveChildSettings");
static_assert(sizeof(SettingContainerUtils_SaveChildSettings) == 0x000010, "Wrong size on SettingContainerUtils_SaveChildSettings");
static_assert(offsetof(SettingContainerUtils_SaveChildSettings, UserWidget) == 0x000000, "Member 'SettingContainerUtils_SaveChildSettings::UserWidget' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_SaveChildSettings, Parent) == 0x000008, "Member 'SettingContainerUtils_SaveChildSettings::Parent' has a wrong offset!");

// Function AutoSettings.SettingsManager.ApplySettingStatic
// 0x0038 (0x0038 - 0x0000)
struct SettingsManager_ApplySettingStatic final
{
public:
	struct FAutoSettingData                       SettingData;                                       // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_ApplySettingStatic) == 0x000008, "Wrong alignment on SettingsManager_ApplySettingStatic");
static_assert(sizeof(SettingsManager_ApplySettingStatic) == 0x000038, "Wrong size on SettingsManager_ApplySettingStatic");
static_assert(offsetof(SettingsManager_ApplySettingStatic, SettingData) == 0x000000, "Member 'SettingsManager_ApplySettingStatic::SettingData' has a wrong offset!");

// Function AutoSettings.SettingsManager.AutoDetectSettingsStatic
// 0x000C (0x000C - 0x0000)
struct SettingsManager_AutoDetectSettingsStatic final
{
public:
	int32                                         WorkScale;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CPUMultiplier;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GPUMultiplier;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_AutoDetectSettingsStatic) == 0x000004, "Wrong alignment on SettingsManager_AutoDetectSettingsStatic");
static_assert(sizeof(SettingsManager_AutoDetectSettingsStatic) == 0x00000C, "Wrong size on SettingsManager_AutoDetectSettingsStatic");
static_assert(offsetof(SettingsManager_AutoDetectSettingsStatic, WorkScale) == 0x000000, "Member 'SettingsManager_AutoDetectSettingsStatic::WorkScale' has a wrong offset!");
static_assert(offsetof(SettingsManager_AutoDetectSettingsStatic, CPUMultiplier) == 0x000004, "Member 'SettingsManager_AutoDetectSettingsStatic::CPUMultiplier' has a wrong offset!");
static_assert(offsetof(SettingsManager_AutoDetectSettingsStatic, GPUMultiplier) == 0x000008, "Member 'SettingsManager_AutoDetectSettingsStatic::GPUMultiplier' has a wrong offset!");

// Function AutoSettings.SettingsManager.GetValue
// 0x0020 (0x0020 - 0x0000)
struct SettingsManager_GetValue final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreferConfigValue;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ADD[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_GetValue) == 0x000008, "Wrong alignment on SettingsManager_GetValue");
static_assert(sizeof(SettingsManager_GetValue) == 0x000020, "Wrong size on SettingsManager_GetValue");
static_assert(offsetof(SettingsManager_GetValue, Key) == 0x000000, "Member 'SettingsManager_GetValue::Key' has a wrong offset!");
static_assert(offsetof(SettingsManager_GetValue, bPreferConfigValue) == 0x000008, "Member 'SettingsManager_GetValue::bPreferConfigValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_GetValue, ReturnValue) == 0x000010, "Member 'SettingsManager_GetValue::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterBoolCVarSetting
// 0x0020 (0x0020 - 0x0000)
struct SettingsManager_RegisterBoolCVarSetting final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultValue;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ADE[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_RegisterBoolCVarSetting) == 0x000008, "Wrong alignment on SettingsManager_RegisterBoolCVarSetting");
static_assert(sizeof(SettingsManager_RegisterBoolCVarSetting) == 0x000020, "Wrong size on SettingsManager_RegisterBoolCVarSetting");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSetting, Param_Name) == 0x000000, "Member 'SettingsManager_RegisterBoolCVarSetting::Param_Name' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSetting, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterBoolCVarSetting::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSetting, Help) == 0x000010, "Member 'SettingsManager_RegisterBoolCVarSetting::Help' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterBoolCVarSettingWithCallback
// 0x0038 (0x0038 - 0x0000)
struct SettingsManager_RegisterBoolCVarSettingWithCallback final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultValue;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ADF[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool NewValue)>                ChangedCallback;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE0[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingsManager_RegisterBoolCVarSettingWithCallback) == 0x000008, "Wrong alignment on SettingsManager_RegisterBoolCVarSettingWithCallback");
static_assert(sizeof(SettingsManager_RegisterBoolCVarSettingWithCallback) == 0x000038, "Wrong size on SettingsManager_RegisterBoolCVarSettingWithCallback");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSettingWithCallback, Param_Name) == 0x000000, "Member 'SettingsManager_RegisterBoolCVarSettingWithCallback::Param_Name' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSettingWithCallback, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterBoolCVarSettingWithCallback::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSettingWithCallback, Help) == 0x000010, "Member 'SettingsManager_RegisterBoolCVarSettingWithCallback::Help' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSettingWithCallback, ChangedCallback) == 0x000020, "Member 'SettingsManager_RegisterBoolCVarSettingWithCallback::ChangedCallback' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSettingWithCallback, CallbackImmediately) == 0x000030, "Member 'SettingsManager_RegisterBoolCVarSettingWithCallback::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterFloatCVarSetting
// 0x0020 (0x0020 - 0x0000)
struct SettingsManager_RegisterFloatCVarSetting final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_RegisterFloatCVarSetting) == 0x000008, "Wrong alignment on SettingsManager_RegisterFloatCVarSetting");
static_assert(sizeof(SettingsManager_RegisterFloatCVarSetting) == 0x000020, "Wrong size on SettingsManager_RegisterFloatCVarSetting");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSetting, Param_Name) == 0x000000, "Member 'SettingsManager_RegisterFloatCVarSetting::Param_Name' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSetting, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterFloatCVarSetting::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSetting, Help) == 0x000010, "Member 'SettingsManager_RegisterFloatCVarSetting::Help' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterFloatCVarSettingWithCallback
// 0x0038 (0x0038 - 0x0000)
struct SettingsManager_RegisterFloatCVarSettingWithCallback final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE2[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float NewValue)>               ChangedCallback;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE3[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingsManager_RegisterFloatCVarSettingWithCallback) == 0x000008, "Wrong alignment on SettingsManager_RegisterFloatCVarSettingWithCallback");
static_assert(sizeof(SettingsManager_RegisterFloatCVarSettingWithCallback) == 0x000038, "Wrong size on SettingsManager_RegisterFloatCVarSettingWithCallback");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSettingWithCallback, Param_Name) == 0x000000, "Member 'SettingsManager_RegisterFloatCVarSettingWithCallback::Param_Name' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSettingWithCallback, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterFloatCVarSettingWithCallback::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSettingWithCallback, Help) == 0x000010, "Member 'SettingsManager_RegisterFloatCVarSettingWithCallback::Help' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSettingWithCallback, ChangedCallback) == 0x000020, "Member 'SettingsManager_RegisterFloatCVarSettingWithCallback::ChangedCallback' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSettingWithCallback, CallbackImmediately) == 0x000030, "Member 'SettingsManager_RegisterFloatCVarSettingWithCallback::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterIntCVarSetting
// 0x0020 (0x0020 - 0x0000)
struct SettingsManager_RegisterIntCVarSetting final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE4[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_RegisterIntCVarSetting) == 0x000008, "Wrong alignment on SettingsManager_RegisterIntCVarSetting");
static_assert(sizeof(SettingsManager_RegisterIntCVarSetting) == 0x000020, "Wrong size on SettingsManager_RegisterIntCVarSetting");
static_assert(offsetof(SettingsManager_RegisterIntCVarSetting, Param_Name) == 0x000000, "Member 'SettingsManager_RegisterIntCVarSetting::Param_Name' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterIntCVarSetting, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterIntCVarSetting::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterIntCVarSetting, Help) == 0x000010, "Member 'SettingsManager_RegisterIntCVarSetting::Help' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterIntCVarSettingWithCallback
// 0x0038 (0x0038 - 0x0000)
struct SettingsManager_RegisterIntCVarSettingWithCallback final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE5[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 NewValue)>               ChangedCallback;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE6[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingsManager_RegisterIntCVarSettingWithCallback) == 0x000008, "Wrong alignment on SettingsManager_RegisterIntCVarSettingWithCallback");
static_assert(sizeof(SettingsManager_RegisterIntCVarSettingWithCallback) == 0x000038, "Wrong size on SettingsManager_RegisterIntCVarSettingWithCallback");
static_assert(offsetof(SettingsManager_RegisterIntCVarSettingWithCallback, Param_Name) == 0x000000, "Member 'SettingsManager_RegisterIntCVarSettingWithCallback::Param_Name' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterIntCVarSettingWithCallback, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterIntCVarSettingWithCallback::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterIntCVarSettingWithCallback, Help) == 0x000010, "Member 'SettingsManager_RegisterIntCVarSettingWithCallback::Help' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterIntCVarSettingWithCallback, ChangedCallback) == 0x000020, "Member 'SettingsManager_RegisterIntCVarSettingWithCallback::ChangedCallback' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterIntCVarSettingWithCallback, CallbackImmediately) == 0x000030, "Member 'SettingsManager_RegisterIntCVarSettingWithCallback::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterStringCVarSetting
// 0x0028 (0x0028 - 0x0000)
struct SettingsManager_RegisterStringCVarSetting final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Help;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_RegisterStringCVarSetting) == 0x000008, "Wrong alignment on SettingsManager_RegisterStringCVarSetting");
static_assert(sizeof(SettingsManager_RegisterStringCVarSetting) == 0x000028, "Wrong size on SettingsManager_RegisterStringCVarSetting");
static_assert(offsetof(SettingsManager_RegisterStringCVarSetting, Param_Name) == 0x000000, "Member 'SettingsManager_RegisterStringCVarSetting::Param_Name' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterStringCVarSetting, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterStringCVarSetting::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterStringCVarSetting, Help) == 0x000018, "Member 'SettingsManager_RegisterStringCVarSetting::Help' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterStringCVarSettingWithCallback
// 0x0040 (0x0040 - 0x0000)
struct SettingsManager_RegisterStringCVarSettingWithCallback final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Help;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& NewValue)> ChangedCallback;                                   // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE7[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingsManager_RegisterStringCVarSettingWithCallback) == 0x000008, "Wrong alignment on SettingsManager_RegisterStringCVarSettingWithCallback");
static_assert(sizeof(SettingsManager_RegisterStringCVarSettingWithCallback) == 0x000040, "Wrong size on SettingsManager_RegisterStringCVarSettingWithCallback");
static_assert(offsetof(SettingsManager_RegisterStringCVarSettingWithCallback, Param_Name) == 0x000000, "Member 'SettingsManager_RegisterStringCVarSettingWithCallback::Param_Name' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterStringCVarSettingWithCallback, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterStringCVarSettingWithCallback::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterStringCVarSettingWithCallback, Help) == 0x000018, "Member 'SettingsManager_RegisterStringCVarSettingWithCallback::Help' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterStringCVarSettingWithCallback, ChangedCallback) == 0x000028, "Member 'SettingsManager_RegisterStringCVarSettingWithCallback::ChangedCallback' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterStringCVarSettingWithCallback, CallbackImmediately) == 0x000038, "Member 'SettingsManager_RegisterStringCVarSettingWithCallback::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.SettingsManager.SaveSettingStatic
// 0x0038 (0x0038 - 0x0000)
struct SettingsManager_SaveSettingStatic final
{
public:
	struct FAutoSettingData                       SettingData;                                       // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_SaveSettingStatic) == 0x000008, "Wrong alignment on SettingsManager_SaveSettingStatic");
static_assert(sizeof(SettingsManager_SaveSettingStatic) == 0x000038, "Wrong size on SettingsManager_SaveSettingStatic");
static_assert(offsetof(SettingsManager_SaveSettingStatic, SettingData) == 0x000000, "Member 'SettingsManager_SaveSettingStatic::SettingData' has a wrong offset!");

// Function AutoSettings.Spinner.OnSelectionChanged
// 0x0028 (0x0028 - 0x0000)
struct Spinner_OnSelectionChanged final
{
public:
	struct FSettingOption                         SelectedOption;                                    // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spinner_OnSelectionChanged) == 0x000008, "Wrong alignment on Spinner_OnSelectionChanged");
static_assert(sizeof(Spinner_OnSelectionChanged) == 0x000028, "Wrong size on Spinner_OnSelectionChanged");
static_assert(offsetof(Spinner_OnSelectionChanged, SelectedOption) == 0x000000, "Member 'Spinner_OnSelectionChanged::SelectedOption' has a wrong offset!");

// Function AutoSettings.Spinner.SelectIndex
// 0x0004 (0x0004 - 0x0000)
struct Spinner_SelectIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spinner_SelectIndex) == 0x000004, "Wrong alignment on Spinner_SelectIndex");
static_assert(sizeof(Spinner_SelectIndex) == 0x000004, "Wrong size on Spinner_SelectIndex");
static_assert(offsetof(Spinner_SelectIndex, Param_Index) == 0x000000, "Member 'Spinner_SelectIndex::Param_Index' has a wrong offset!");

// Function AutoSettings.Spinner.SelectValue
// 0x0010 (0x0010 - 0x0000)
struct Spinner_SelectValue final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spinner_SelectValue) == 0x000008, "Wrong alignment on Spinner_SelectValue");
static_assert(sizeof(Spinner_SelectValue) == 0x000010, "Wrong size on Spinner_SelectValue");
static_assert(offsetof(Spinner_SelectValue, Value) == 0x000000, "Member 'Spinner_SelectValue::Value' has a wrong offset!");

// Function AutoSettings.Spinner.GetCurrentIndex
// 0x0004 (0x0004 - 0x0000)
struct Spinner_GetCurrentIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spinner_GetCurrentIndex) == 0x000004, "Wrong alignment on Spinner_GetCurrentIndex");
static_assert(sizeof(Spinner_GetCurrentIndex) == 0x000004, "Wrong size on Spinner_GetCurrentIndex");
static_assert(offsetof(Spinner_GetCurrentIndex, ReturnValue) == 0x000000, "Member 'Spinner_GetCurrentIndex::ReturnValue' has a wrong offset!");

// Function AutoSettings.Spinner.GetCurrentOption
// 0x0028 (0x0028 - 0x0000)
struct Spinner_GetCurrentOption final
{
public:
	struct FSettingOption                         ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spinner_GetCurrentOption) == 0x000008, "Wrong alignment on Spinner_GetCurrentOption");
static_assert(sizeof(Spinner_GetCurrentOption) == 0x000028, "Wrong size on Spinner_GetCurrentOption");
static_assert(offsetof(Spinner_GetCurrentOption, ReturnValue) == 0x000000, "Member 'Spinner_GetCurrentOption::ReturnValue' has a wrong offset!");

// Function AutoSettings.Spinner.HasValidNext
// 0x0001 (0x0001 - 0x0000)
struct Spinner_HasValidNext final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spinner_HasValidNext) == 0x000001, "Wrong alignment on Spinner_HasValidNext");
static_assert(sizeof(Spinner_HasValidNext) == 0x000001, "Wrong size on Spinner_HasValidNext");
static_assert(offsetof(Spinner_HasValidNext, ReturnValue) == 0x000000, "Member 'Spinner_HasValidNext::ReturnValue' has a wrong offset!");

// Function AutoSettings.Spinner.HasValidPrevious
// 0x0001 (0x0001 - 0x0000)
struct Spinner_HasValidPrevious final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spinner_HasValidPrevious) == 0x000001, "Wrong alignment on Spinner_HasValidPrevious");
static_assert(sizeof(Spinner_HasValidPrevious) == 0x000001, "Wrong size on Spinner_HasValidPrevious");
static_assert(offsetof(Spinner_HasValidPrevious, ReturnValue) == 0x000000, "Member 'Spinner_HasValidPrevious::ReturnValue' has a wrong offset!");

// Function AutoSettings.SpinnerSetting.SpinnerSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct SpinnerSetting_SpinnerSelectionChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinnerSetting_SpinnerSelectionChanged) == 0x000008, "Wrong alignment on SpinnerSetting_SpinnerSelectionChanged");
static_assert(sizeof(SpinnerSetting_SpinnerSelectionChanged) == 0x000010, "Wrong size on SpinnerSetting_SpinnerSelectionChanged");
static_assert(offsetof(SpinnerSetting_SpinnerSelectionChanged, Value) == 0x000000, "Member 'SpinnerSetting_SpinnerSelectionChanged::Value' has a wrong offset!");

}

