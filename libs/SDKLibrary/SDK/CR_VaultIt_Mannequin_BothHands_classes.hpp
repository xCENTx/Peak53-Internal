#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CR_VaultIt_Mannequin_BothHands

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "RigVM_classes.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "PBIK_structs.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass CR_VaultIt_Mannequin_BothHands.CR_VaultIt_Mannequin_BothHands_C
// 0x0030 (0x0590 - 0x0560)
class UCR_VaultIt_Mannequin_BothHands_C final : public UControlRig
{
public:
	struct FVector                                RightHandLocation;                                 // 0x0560(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeftHandLocation;                                  // 0x0578(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CR_VaultIt_Mannequin_BothHands_C">();
	}
	static class UCR_VaultIt_Mannequin_BothHands_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCR_VaultIt_Mannequin_BothHands_C>();
	}
};
static_assert(alignof(UCR_VaultIt_Mannequin_BothHands_C) == 0x000008, "Wrong alignment on UCR_VaultIt_Mannequin_BothHands_C");
static_assert(sizeof(UCR_VaultIt_Mannequin_BothHands_C) == 0x000590, "Wrong size on UCR_VaultIt_Mannequin_BothHands_C");
static_assert(offsetof(UCR_VaultIt_Mannequin_BothHands_C, RightHandLocation) == 0x000560, "Member 'UCR_VaultIt_Mannequin_BothHands_C::RightHandLocation' has a wrong offset!");
static_assert(offsetof(UCR_VaultIt_Mannequin_BothHands_C, LeftHandLocation) == 0x000578, "Member 'UCR_VaultIt_Mannequin_BothHands_C::LeftHandLocation' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass CR_VaultIt_Mannequin_BothHands.RigVMMemory_Literal
// 0x0070 (0x0098 - 0x0028)
class CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	class FName                                   RigVMModel___PBIK_Root__Const;                     // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPBIKEffector>                  RigVMModel___PBIK_Effectors__Const;                // 0x0030(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___RigUnit_GetTransform_Item__Const;     // 0x0040(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EBoneGetterSetterMode                         RigVMModel___RigUnit_GetTransform_Space__Const;    // 0x004C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         RigVMModel___RigUnit_GetTransform_bInitial__Const : 1; // 0x004D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_33C1[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___RigUnit_GetTransform_1_Item__Const;   // 0x0050(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C2[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPBIKBoneSetting>               RigVMModel___PBIK_BoneSettings__Const;             // 0x0060(0x0010)(Edit, EditConst, NonTransactional)
	TArray<class FName>                           RigVMModel___PBIK_ExcludedBones__Const;            // 0x0070(0x0010)(Edit, EditConst, NonTransactional)
	struct FPBIKSolverSettings                    RigVMModel___PBIK_Settings__Const;                 // 0x0080(0x0010)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FPBIKDebug                             RigVMModel___PBIK_Debug__Const;                    // 0x0090(0x0008)(Edit, EditConst, NonTransactional, NoDestructor)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass CR_VaultIt_Mannequin_BothHands.RigVMMemory_Literal", true>();
	}
	static class CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal>();
	}
};
static_assert(alignof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal) == 0x000008, "Wrong alignment on CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal");
static_assert(sizeof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal) == 0x000098, "Wrong size on CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal, RigVMModel___PBIK_Root__Const) == 0x000028, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal::RigVMModel___PBIK_Root__Const' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal, RigVMModel___PBIK_Effectors__Const) == 0x000030, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal::RigVMModel___PBIK_Effectors__Const' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_Item__Const) == 0x000040, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_Space__Const) == 0x00004C, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_Space__Const' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_1_Item__Const) == 0x000050, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_1_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal, RigVMModel___PBIK_BoneSettings__Const) == 0x000060, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal::RigVMModel___PBIK_BoneSettings__Const' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal, RigVMModel___PBIK_ExcludedBones__Const) == 0x000070, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal::RigVMModel___PBIK_ExcludedBones__Const' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal, RigVMModel___PBIK_Settings__Const) == 0x000080, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal::RigVMModel___PBIK_Settings__Const' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal, RigVMModel___PBIK_Debug__Const) == 0x000090, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Literal::RigVMModel___PBIK_Debug__Const' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass CR_VaultIt_Mannequin_BothHands.RigVMMemory_Work
// 0x01B8 (0x01E0 - 0x0028)
class CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	struct FControlRigExecuteContext              ExecuteContext_;                                   // 0x0028(0x0038)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_Transform;       // 0x0060(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_CachedIndex;     // 0x00C0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_Global;           // 0x00D0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C3[0x8];                                     // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_Transform;     // 0x00F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_CachedIndex;   // 0x0150(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_1_Global;         // 0x0160(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPBIKEffector>                  RigVMModel___PBIK_Effectors__IO;                   // 0x0178(0x0010)(Edit, EditConst, NonTransactional)
	TArray<TArray<int32>>                         RigVMModel___PBIK_EffectorSolverIndices;           // 0x0188(0x0010)(Edit, EditConst, NonTransactional)
	TArray<TArray<int32>>                         RigVMModel___PBIK_BoneSettingToSolverBoneIndex;    // 0x0198(0x0010)(Edit, EditConst, NonTransactional)
	TArray<TArray<int32>>                         RigVMModel___PBIK_SolverBoneToElementIndex;        // 0x01A8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FPBIKSolver>                    RigVMModel___PBIK_Solver;                          // 0x01B8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<uint8>                                 RigVMModel___PBIK_bNeedsInit;                      // 0x01C8(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass CR_VaultIt_Mannequin_BothHands.RigVMMemory_Work", true>();
	}
	static class CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work>();
	}
};
static_assert(alignof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work) == 0x000010, "Wrong alignment on CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work");
static_assert(sizeof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work) == 0x0001E0, "Wrong size on CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work, ExecuteContext_) == 0x000028, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work::ExecuteContext_' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_Transform) == 0x000060, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_CachedIndex) == 0x0000C0, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_Global) == 0x0000D0, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_Global' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_Transform) == 0x0000F0, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_CachedIndex) == 0x000150, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_1_Global) == 0x000160, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_1_Global' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work, RigVMModel___PBIK_Effectors__IO) == 0x000178, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work::RigVMModel___PBIK_Effectors__IO' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work, RigVMModel___PBIK_EffectorSolverIndices) == 0x000188, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work::RigVMModel___PBIK_EffectorSolverIndices' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work, RigVMModel___PBIK_BoneSettingToSolverBoneIndex) == 0x000198, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work::RigVMModel___PBIK_BoneSettingToSolverBoneIndex' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work, RigVMModel___PBIK_SolverBoneToElementIndex) == 0x0001A8, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work::RigVMModel___PBIK_SolverBoneToElementIndex' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work, RigVMModel___PBIK_Solver) == 0x0001B8, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work::RigVMModel___PBIK_Solver' has a wrong offset!");
static_assert(offsetof(CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work, RigVMModel___PBIK_bNeedsInit) == 0x0001C8, "Member 'CR_VaultIt_Mannequin_BothHands::URigVMMemory_Work::RigVMModel___PBIK_bNeedsInit' has a wrong offset!");

}

