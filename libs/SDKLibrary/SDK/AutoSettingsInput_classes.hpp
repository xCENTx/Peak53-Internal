#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AutoSettingsInput

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "AutoSettingsInput_structs.hpp"
#include "InputCore_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class AutoSettingsInput.InputLabel
// 0x0030 (0x02A8 - 0x0278)
class UInputLabel : public UUserWidget
{
public:
	int32                                         MappingGroup;                                      // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KeyGroup;                                          // 0x027C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePlayerKeyGroup;                                // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AF6[0x3];                                     // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  IconTags;                                          // 0x0288(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void MappingsChanged(class APlayerController* Player);
	void UpdateLabel();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputLabel">();
	}
	static class UInputLabel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputLabel>();
	}
};
static_assert(alignof(UInputLabel) == 0x000008, "Wrong alignment on UInputLabel");
static_assert(sizeof(UInputLabel) == 0x0002A8, "Wrong size on UInputLabel");
static_assert(offsetof(UInputLabel, MappingGroup) == 0x000278, "Member 'UInputLabel::MappingGroup' has a wrong offset!");
static_assert(offsetof(UInputLabel, KeyGroup) == 0x00027C, "Member 'UInputLabel::KeyGroup' has a wrong offset!");
static_assert(offsetof(UInputLabel, bUsePlayerKeyGroup) == 0x000284, "Member 'UInputLabel::bUsePlayerKeyGroup' has a wrong offset!");
static_assert(offsetof(UInputLabel, IconTags) == 0x000288, "Member 'UInputLabel::IconTags' has a wrong offset!");

// Class AutoSettingsInput.ActionLabel
// 0x0068 (0x0310 - 0x02A8)
class UActionLabel : public UInputLabel
{
public:
	class FName                                   ActionName;                                        // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UKeyLabel>                  KeyLabelWidgetClass;                               // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWidget>                    KeySeparatorWidgetClass;                           // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelWidget*                           KeyContainer;                                      // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UKeyLabel*                              PrimaryKeyLabel;                                   // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UKeyLabel*                              ShiftLabel;                                        // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UKeyLabel*                              CtrlLabel;                                         // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UKeyLabel*                              AltLabel;                                          // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UKeyLabel*                              CmdLabel;                                          // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                ShiftSeparator;                                    // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                CtrlSeparator;                                     // 0x02F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                AltSeparator;                                      // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                CmdSeparator;                                      // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionLabel">();
	}
	static class UActionLabel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionLabel>();
	}
};
static_assert(alignof(UActionLabel) == 0x000008, "Wrong alignment on UActionLabel");
static_assert(sizeof(UActionLabel) == 0x000310, "Wrong size on UActionLabel");
static_assert(offsetof(UActionLabel, ActionName) == 0x0002A8, "Member 'UActionLabel::ActionName' has a wrong offset!");
static_assert(offsetof(UActionLabel, KeyLabelWidgetClass) == 0x0002B0, "Member 'UActionLabel::KeyLabelWidgetClass' has a wrong offset!");
static_assert(offsetof(UActionLabel, KeySeparatorWidgetClass) == 0x0002B8, "Member 'UActionLabel::KeySeparatorWidgetClass' has a wrong offset!");
static_assert(offsetof(UActionLabel, KeyContainer) == 0x0002C0, "Member 'UActionLabel::KeyContainer' has a wrong offset!");
static_assert(offsetof(UActionLabel, PrimaryKeyLabel) == 0x0002C8, "Member 'UActionLabel::PrimaryKeyLabel' has a wrong offset!");
static_assert(offsetof(UActionLabel, ShiftLabel) == 0x0002D0, "Member 'UActionLabel::ShiftLabel' has a wrong offset!");
static_assert(offsetof(UActionLabel, CtrlLabel) == 0x0002D8, "Member 'UActionLabel::CtrlLabel' has a wrong offset!");
static_assert(offsetof(UActionLabel, AltLabel) == 0x0002E0, "Member 'UActionLabel::AltLabel' has a wrong offset!");
static_assert(offsetof(UActionLabel, CmdLabel) == 0x0002E8, "Member 'UActionLabel::CmdLabel' has a wrong offset!");
static_assert(offsetof(UActionLabel, ShiftSeparator) == 0x0002F0, "Member 'UActionLabel::ShiftSeparator' has a wrong offset!");
static_assert(offsetof(UActionLabel, CtrlSeparator) == 0x0002F8, "Member 'UActionLabel::CtrlSeparator' has a wrong offset!");
static_assert(offsetof(UActionLabel, AltSeparator) == 0x000300, "Member 'UActionLabel::AltSeparator' has a wrong offset!");
static_assert(offsetof(UActionLabel, CmdSeparator) == 0x000308, "Member 'UActionLabel::CmdSeparator' has a wrong offset!");

// Class AutoSettingsInput.InputMapping
// 0x0038 (0x02B0 - 0x0278)
class UInputMapping : public UUserWidget
{
public:
	int32                                         MappingGroup;                                      // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           KeyGroup;                                          // 0x027C(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2AF7[0x4];                                     // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  IconTags;                                          // 0x0288(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UBindCaptureButton*                     BindCaptureButton;                                 // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BindChord(const struct FCapturedInput& CapturedInput);
	void ChordCaptured(const struct FCapturedInput& CapturedInput);
	void UpdateLabel();
	void UpdateMapping();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputMapping">();
	}
	static class UInputMapping* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputMapping>();
	}
};
static_assert(alignof(UInputMapping) == 0x000008, "Wrong alignment on UInputMapping");
static_assert(sizeof(UInputMapping) == 0x0002B0, "Wrong size on UInputMapping");
static_assert(offsetof(UInputMapping, MappingGroup) == 0x000278, "Member 'UInputMapping::MappingGroup' has a wrong offset!");
static_assert(offsetof(UInputMapping, KeyGroup) == 0x00027C, "Member 'UInputMapping::KeyGroup' has a wrong offset!");
static_assert(offsetof(UInputMapping, IconTags) == 0x000288, "Member 'UInputMapping::IconTags' has a wrong offset!");
static_assert(offsetof(UInputMapping, BindCaptureButton) == 0x0002A8, "Member 'UInputMapping::BindCaptureButton' has a wrong offset!");

// Class AutoSettingsInput.ActionMapping
// 0x0010 (0x02C0 - 0x02B0)
class UActionMapping : public UInputMapping
{
public:
	class FName                                   ActionName;                                        // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActionLabel*                           ActionLabel;                                       // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionMapping">();
	}
	static class UActionMapping* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionMapping>();
	}
};
static_assert(alignof(UActionMapping) == 0x000008, "Wrong alignment on UActionMapping");
static_assert(sizeof(UActionMapping) == 0x0002C0, "Wrong size on UActionMapping");
static_assert(offsetof(UActionMapping, ActionName) == 0x0002B0, "Member 'UActionMapping::ActionName' has a wrong offset!");
static_assert(offsetof(UActionMapping, ActionLabel) == 0x0002B8, "Member 'UActionMapping::ActionLabel' has a wrong offset!");

// Class AutoSettingsInput.AutoSettingsInputConfig
// 0x0150 (0x0188 - 0x0038)
class UAutoSettingsInputConfig : public UDeveloperSettings
{
public:
	uint8                                         Pad_2AF8[0x8];                                     // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAutoInitializePlayerInputOverrides;               // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowModifierKeys;                                 // 0x0041(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AF9[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ShiftModifierOverrideText;                         // 0x0048(0x0018)(Edit, Config, NativeAccessSpecifierPublic)
	class FText                                   CtrlModifierOverrideText;                          // 0x0060(0x0018)(Edit, Config, NativeAccessSpecifierPublic)
	class FText                                   AltModifierOverrideText;                           // 0x0078(0x0018)(Edit, Config, NativeAccessSpecifierPublic)
	class FText                                   CmdModifierOverrideText;                           // 0x0090(0x0018)(Edit, Config, NativeAccessSpecifierPublic)
	TArray<struct FInputMappingPreset>            InputPresets;                                      // 0x00A8(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          AllowMultipleBindingsPerKey;                       // 0x00B8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AFA[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMappingGroupLink>              MappingGroupLinks;                                 // 0x00C0(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           PreservedActions;                                  // 0x00D0(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           PreservedAxes;                                     // 0x00E0(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FKeyIconSet>                    KeyIconSets;                                       // 0x00F0(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FKeyFriendlyName>               KeyFriendlyNames;                                  // 0x0100(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FKeyGroup>                      KeyGroups;                                         // 0x0110(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           AllowedKeys;                                       // 0x0120(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           DisallowedKeys;                                    // 0x0130(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           BindingEscapeKeys;                                 // 0x0140(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	float                                         MouseMoveCaptureDistance;                          // 0x0150(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AFB[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAxisAssociation>               AxisAssociations;                                  // 0x0158(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           BlacklistedActions;                                // 0x0168(0x0010)(ZeroConstructor, Config, Deprecated, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           BlacklistedAxes;                                   // 0x0178(0x0010)(ZeroConstructor, Config, Deprecated, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutoSettingsInputConfig">();
	}
	static class UAutoSettingsInputConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutoSettingsInputConfig>();
	}
};
static_assert(alignof(UAutoSettingsInputConfig) == 0x000008, "Wrong alignment on UAutoSettingsInputConfig");
static_assert(sizeof(UAutoSettingsInputConfig) == 0x000188, "Wrong size on UAutoSettingsInputConfig");
static_assert(offsetof(UAutoSettingsInputConfig, bAutoInitializePlayerInputOverrides) == 0x000040, "Member 'UAutoSettingsInputConfig::bAutoInitializePlayerInputOverrides' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, AllowModifierKeys) == 0x000041, "Member 'UAutoSettingsInputConfig::AllowModifierKeys' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, ShiftModifierOverrideText) == 0x000048, "Member 'UAutoSettingsInputConfig::ShiftModifierOverrideText' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, CtrlModifierOverrideText) == 0x000060, "Member 'UAutoSettingsInputConfig::CtrlModifierOverrideText' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, AltModifierOverrideText) == 0x000078, "Member 'UAutoSettingsInputConfig::AltModifierOverrideText' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, CmdModifierOverrideText) == 0x000090, "Member 'UAutoSettingsInputConfig::CmdModifierOverrideText' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, InputPresets) == 0x0000A8, "Member 'UAutoSettingsInputConfig::InputPresets' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, AllowMultipleBindingsPerKey) == 0x0000B8, "Member 'UAutoSettingsInputConfig::AllowMultipleBindingsPerKey' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, MappingGroupLinks) == 0x0000C0, "Member 'UAutoSettingsInputConfig::MappingGroupLinks' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, PreservedActions) == 0x0000D0, "Member 'UAutoSettingsInputConfig::PreservedActions' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, PreservedAxes) == 0x0000E0, "Member 'UAutoSettingsInputConfig::PreservedAxes' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, KeyIconSets) == 0x0000F0, "Member 'UAutoSettingsInputConfig::KeyIconSets' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, KeyFriendlyNames) == 0x000100, "Member 'UAutoSettingsInputConfig::KeyFriendlyNames' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, KeyGroups) == 0x000110, "Member 'UAutoSettingsInputConfig::KeyGroups' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, AllowedKeys) == 0x000120, "Member 'UAutoSettingsInputConfig::AllowedKeys' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, DisallowedKeys) == 0x000130, "Member 'UAutoSettingsInputConfig::DisallowedKeys' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, BindingEscapeKeys) == 0x000140, "Member 'UAutoSettingsInputConfig::BindingEscapeKeys' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, MouseMoveCaptureDistance) == 0x000150, "Member 'UAutoSettingsInputConfig::MouseMoveCaptureDistance' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, AxisAssociations) == 0x000158, "Member 'UAutoSettingsInputConfig::AxisAssociations' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, BlacklistedActions) == 0x000168, "Member 'UAutoSettingsInputConfig::BlacklistedActions' has a wrong offset!");
static_assert(offsetof(UAutoSettingsInputConfig, BlacklistedAxes) == 0x000178, "Member 'UAutoSettingsInputConfig::BlacklistedAxes' has a wrong offset!");

// Class AutoSettingsInput.AutoSettingsInputConfigInterface
// 0x0000 (0x0028 - 0x0028)
class IAutoSettingsInputConfigInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutoSettingsInputConfigInterface">();
	}
	static class IAutoSettingsInputConfigInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAutoSettingsInputConfigInterface>();
	}
};
static_assert(alignof(IAutoSettingsInputConfigInterface) == 0x000008, "Wrong alignment on IAutoSettingsInputConfigInterface");
static_assert(sizeof(IAutoSettingsInputConfigInterface) == 0x000028, "Wrong size on IAutoSettingsInputConfigInterface");

// Class AutoSettingsInput.AutoSettingsInputProjectConfig
// 0x0000 (0x0188 - 0x0188)
class UAutoSettingsInputProjectConfig final : public UAutoSettingsInputConfig
{
public:
	static class FText GetKeyFriendlyNameStatic(const struct FKey& Key);
	static struct FGameplayTag GetKeyGroupStatic(const struct FKey& Key);
	static TArray<class UTexture*> LoadKeyIcons(const struct FGameplayTagContainer& KeyIconTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutoSettingsInputProjectConfig">();
	}
	static class UAutoSettingsInputProjectConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutoSettingsInputProjectConfig>();
	}
};
static_assert(alignof(UAutoSettingsInputProjectConfig) == 0x000008, "Wrong alignment on UAutoSettingsInputProjectConfig");
static_assert(sizeof(UAutoSettingsInputProjectConfig) == 0x000188, "Wrong size on UAutoSettingsInputProjectConfig");

// Class AutoSettingsInput.AutoSettingsInputSubsystem
// 0x0008 (0x0038 - 0x0030)
class UAutoSettingsInputSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_2AFC[0x8];                                     // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutoSettingsInputSubsystem">();
	}
	static class UAutoSettingsInputSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutoSettingsInputSubsystem>();
	}
};
static_assert(alignof(UAutoSettingsInputSubsystem) == 0x000008, "Wrong alignment on UAutoSettingsInputSubsystem");
static_assert(sizeof(UAutoSettingsInputSubsystem) == 0x000038, "Wrong size on UAutoSettingsInputSubsystem");

// Class AutoSettingsInput.AutoSettingsInputValidationSubsystem
// 0x0000 (0x0030 - 0x0030)
class UAutoSettingsInputValidationSubsystem final : public UGameInstanceSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutoSettingsInputValidationSubsystem">();
	}
	static class UAutoSettingsInputValidationSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutoSettingsInputValidationSubsystem>();
	}
};
static_assert(alignof(UAutoSettingsInputValidationSubsystem) == 0x000008, "Wrong alignment on UAutoSettingsInputValidationSubsystem");
static_assert(sizeof(UAutoSettingsInputValidationSubsystem) == 0x000030, "Wrong size on UAutoSettingsInputValidationSubsystem");

// Class AutoSettingsInput.AutoSettingsPlayer
// 0x0000 (0x0028 - 0x0028)
class IAutoSettingsPlayer final : public IInterface
{
public:
	void SaveInputMappings(const struct FPlayerInputMappings& InputMappings);

	struct FInputMappingPreset GetDefaultInputMappingPreset() const;
	bool GetInputMappings(struct FPlayerInputMappings* InputMappings) const;
	class FString GetUniquePlayerIdentifier() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutoSettingsPlayer">();
	}
	static class IAutoSettingsPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAutoSettingsPlayer>();
	}
};
static_assert(alignof(IAutoSettingsPlayer) == 0x000008, "Wrong alignment on IAutoSettingsPlayer");
static_assert(sizeof(IAutoSettingsPlayer) == 0x000028, "Wrong size on IAutoSettingsPlayer");

// Class AutoSettingsInput.AxisLabel
// 0x0018 (0x02C0 - 0x02A8)
class UAxisLabel : public UInputLabel
{
public:
	class FName                                   AxisName;                                          // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AFE[0x4];                                     // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UKeyLabel*                              KeyLabel;                                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AxisLabel">();
	}
	static class UAxisLabel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAxisLabel>();
	}
};
static_assert(alignof(UAxisLabel) == 0x000008, "Wrong alignment on UAxisLabel");
static_assert(sizeof(UAxisLabel) == 0x0002C0, "Wrong size on UAxisLabel");
static_assert(offsetof(UAxisLabel, AxisName) == 0x0002A8, "Member 'UAxisLabel::AxisName' has a wrong offset!");
static_assert(offsetof(UAxisLabel, Scale) == 0x0002B0, "Member 'UAxisLabel::Scale' has a wrong offset!");
static_assert(offsetof(UAxisLabel, KeyLabel) == 0x0002B8, "Member 'UAxisLabel::KeyLabel' has a wrong offset!");

// Class AutoSettingsInput.AxisMapping
// 0x0018 (0x02C8 - 0x02B0)
class UAxisMapping : public UInputMapping
{
public:
	class FName                                   AxisName;                                          // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AFF[0x4];                                     // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAxisLabel*                             AxisLabel;                                         // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AxisMapping">();
	}
	static class UAxisMapping* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAxisMapping>();
	}
};
static_assert(alignof(UAxisMapping) == 0x000008, "Wrong alignment on UAxisMapping");
static_assert(sizeof(UAxisMapping) == 0x0002C8, "Wrong size on UAxisMapping");
static_assert(offsetof(UAxisMapping, AxisName) == 0x0002B0, "Member 'UAxisMapping::AxisName' has a wrong offset!");
static_assert(offsetof(UAxisMapping, Scale) == 0x0002B8, "Member 'UAxisMapping::Scale' has a wrong offset!");
static_assert(offsetof(UAxisMapping, AxisLabel) == 0x0002C0, "Member 'UAxisMapping::AxisLabel' has a wrong offset!");

// Class AutoSettingsInput.BindCaptureButton
// 0x0030 (0x02A8 - 0x0278)
class UBindCaptureButton : public UUserWidget
{
public:
	struct FGameplayTag                           KeyGroup;                                          // 0x0278(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBindCapturePrompt>         BindCapturePromptClass;                            // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapturePromptZOrder;                               // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B00[0x14];                                    // 0x028C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class UBindCapturePrompt*                     Prompt;                                            // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ChordCaptured(const struct FCapturedInput& CapturedInput);
	void InitializePrompt(class UBindCapturePrompt* PromptWidget);
	class UBindCapturePrompt* StartCapture();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BindCaptureButton">();
	}
	static class UBindCaptureButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBindCaptureButton>();
	}
};
static_assert(alignof(UBindCaptureButton) == 0x000008, "Wrong alignment on UBindCaptureButton");
static_assert(sizeof(UBindCaptureButton) == 0x0002A8, "Wrong size on UBindCaptureButton");
static_assert(offsetof(UBindCaptureButton, KeyGroup) == 0x000278, "Member 'UBindCaptureButton::KeyGroup' has a wrong offset!");
static_assert(offsetof(UBindCaptureButton, BindCapturePromptClass) == 0x000280, "Member 'UBindCaptureButton::BindCapturePromptClass' has a wrong offset!");
static_assert(offsetof(UBindCaptureButton, CapturePromptZOrder) == 0x000288, "Member 'UBindCaptureButton::CapturePromptZOrder' has a wrong offset!");
static_assert(offsetof(UBindCaptureButton, Prompt) == 0x0002A0, "Member 'UBindCaptureButton::Prompt' has a wrong offset!");

// Class AutoSettingsInput.BindCapturePrompt
// 0x0068 (0x02E0 - 0x0278)
class UBindCapturePrompt : public UUserWidget
{
public:
	bool                                          bIgnoreGameViewportInputWhileCapturing;            // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestrictKeyGroup;                                 // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBindingCaptureMode                           CaptureMode;                                       // 0x027A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B01[0x1];                                     // 0x027B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           KeyGroup;                                          // 0x027C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B02[0x4];                                     // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChordCaptured;                                   // 0x0288(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChordRejected;                                   // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCapturePromptClosed;                             // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           KeysDown;                                          // 0x02B8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          PreviousIgnoreInput;                               // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B03[0x7];                                     // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              AccumulatedMouseDelta;                             // 0x02D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Cancel();
	bool IsKeyAllowed(const struct FKey& PrimaryKey);

	struct FGameplayTag GetKeyGroup() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BindCapturePrompt">();
	}
	static class UBindCapturePrompt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBindCapturePrompt>();
	}
};
static_assert(alignof(UBindCapturePrompt) == 0x000008, "Wrong alignment on UBindCapturePrompt");
static_assert(sizeof(UBindCapturePrompt) == 0x0002E0, "Wrong size on UBindCapturePrompt");
static_assert(offsetof(UBindCapturePrompt, bIgnoreGameViewportInputWhileCapturing) == 0x000278, "Member 'UBindCapturePrompt::bIgnoreGameViewportInputWhileCapturing' has a wrong offset!");
static_assert(offsetof(UBindCapturePrompt, bRestrictKeyGroup) == 0x000279, "Member 'UBindCapturePrompt::bRestrictKeyGroup' has a wrong offset!");
static_assert(offsetof(UBindCapturePrompt, CaptureMode) == 0x00027A, "Member 'UBindCapturePrompt::CaptureMode' has a wrong offset!");
static_assert(offsetof(UBindCapturePrompt, KeyGroup) == 0x00027C, "Member 'UBindCapturePrompt::KeyGroup' has a wrong offset!");
static_assert(offsetof(UBindCapturePrompt, OnChordCaptured) == 0x000288, "Member 'UBindCapturePrompt::OnChordCaptured' has a wrong offset!");
static_assert(offsetof(UBindCapturePrompt, OnChordRejected) == 0x000298, "Member 'UBindCapturePrompt::OnChordRejected' has a wrong offset!");
static_assert(offsetof(UBindCapturePrompt, OnCapturePromptClosed) == 0x0002A8, "Member 'UBindCapturePrompt::OnCapturePromptClosed' has a wrong offset!");
static_assert(offsetof(UBindCapturePrompt, KeysDown) == 0x0002B8, "Member 'UBindCapturePrompt::KeysDown' has a wrong offset!");
static_assert(offsetof(UBindCapturePrompt, PreviousIgnoreInput) == 0x0002C8, "Member 'UBindCapturePrompt::PreviousIgnoreInput' has a wrong offset!");
static_assert(offsetof(UBindCapturePrompt, AccumulatedMouseDelta) == 0x0002D0, "Member 'UBindCapturePrompt::AccumulatedMouseDelta' has a wrong offset!");

// Class AutoSettingsInput.GlobalKeyIconTagManager
// 0x0030 (0x0058 - 0x0028)
class UGlobalKeyIconTagManager final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnGlobalKeyIconTagsModified;                       // 0x0028(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GlobalKeyIconTags;                                 // 0x0038(0x0020)(NativeAccessSpecifierPrivate)

public:
	static class UTexture* GetIconForKey(const struct FKey& InKey, const struct FGameplayTagContainer& IconTags, float AxisScale);
	static void SetGlobalKeyIconTags(const struct FGameplayTagContainer& InGlobalIconTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GlobalKeyIconTagManager">();
	}
	static class UGlobalKeyIconTagManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalKeyIconTagManager>();
	}
};
static_assert(alignof(UGlobalKeyIconTagManager) == 0x000008, "Wrong alignment on UGlobalKeyIconTagManager");
static_assert(sizeof(UGlobalKeyIconTagManager) == 0x000058, "Wrong size on UGlobalKeyIconTagManager");
static_assert(offsetof(UGlobalKeyIconTagManager, OnGlobalKeyIconTagsModified) == 0x000028, "Member 'UGlobalKeyIconTagManager::OnGlobalKeyIconTagsModified' has a wrong offset!");
static_assert(offsetof(UGlobalKeyIconTagManager, GlobalKeyIconTags) == 0x000038, "Member 'UGlobalKeyIconTagManager::GlobalKeyIconTags' has a wrong offset!");

// Class AutoSettingsInput.InputMappingManager
// 0x0030 (0x0060 - 0x0030)
class UInputMappingManager final : public UEngineSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnMappingsChanged;                                 // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FPlayerInputMappings>           PlayerInputOverrides;                              // 0x0040(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<class APlayerController*>              RegisteredPlayerControllers;                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static void AddPlayerActionOverrideStatic(class APlayerController* Player, const struct FInputActionKeyMapping& NewMapping, int32 MappingGroup, bool bAnyKeyGroup);
	static void AddPlayerAxisOverrideStatic(class APlayerController* Player, const struct FInputAxisKeyMapping& NewMapping, int32 MappingGroup, bool bAnyKeyGroup);
	static TArray<struct FInputMappingPreset> GetDefaultInputPresets();
	static struct FInputActionKeyMapping GetPlayerActionMappingStatic(class APlayerController* Player, class FName ActionName, int32 MappingGroup);
	static struct FInputAxisKeyMapping GetPlayerAxisMappingStatic(class APlayerController* Player, class FName AxisName, float Scale, int32 MappingGroup);
	static struct FPlayerInputMappings GetPlayerInputMappingsStatic(class APlayerController* Player);
	static bool InitializePlayerInputOverridesStatic(class APlayerController* Player);
	static void SetPlayerInputPresetByTag(class APlayerController* Player, const struct FGameplayTag& PresetTag);
	static void SetPlayerInputPresetStatic(class APlayerController* Player, const struct FInputMappingPreset& Preset);
	static void SetPlayerKeyGroupStatic(class APlayerController* Player, const struct FGameplayTag& KeyGroup);

	void AddPlayerActionOverride(class APlayerController* Player, const struct FInputActionKeyMapping& NewMapping, int32 MappingGroup, bool bAnyKeyGroup);
	void AddPlayerAxisOverride(class APlayerController* Player, const struct FInputAxisKeyMapping& NewMapping, int32 MappingGroup, bool bAnyKeyGroup);
	void OnRegisteredPlayerControllerDestroyed(class AActor* DestroyedActor);

	struct FInputActionKeyMapping GetPlayerActionMapping(class APlayerController* Player, class FName ActionName, int32 MappingGroup, const struct FGameplayTag& KeyGroup, bool bUsePlayerKeyGroup) const;
	TArray<struct FInputActionKeyMapping> GetPlayerActionMappings(class APlayerController* Player, class FName ActionName, int32 MappingGroup, const struct FGameplayTag& KeyGroup, bool bUsePlayerKeyGroup) const;
	struct FInputAxisKeyMapping GetPlayerAxisMapping(class APlayerController* Player, class FName AxisName, float Scale, int32 MappingGroup, const struct FGameplayTag& KeyGroup, bool bUsePlayerKeyGroup) const;
	TArray<struct FInputAxisKeyMapping> GetPlayerAxisMappings(class APlayerController* Player, class FName AxisName, float Scale, int32 MappingGroup, const struct FGameplayTag& KeyGroup, bool bUsePlayerKeyGroup) const;
	void GetPlayerMappingsByKey(class APlayerController* Player, const struct FKey& Key, TArray<struct FInputActionKeyMapping>* Actions, TArray<struct FInputAxisKeyMapping>* Axes) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputMappingManager">();
	}
	static class UInputMappingManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputMappingManager>();
	}
};
static_assert(alignof(UInputMappingManager) == 0x000008, "Wrong alignment on UInputMappingManager");
static_assert(sizeof(UInputMappingManager) == 0x000060, "Wrong size on UInputMappingManager");
static_assert(offsetof(UInputMappingManager, OnMappingsChanged) == 0x000030, "Member 'UInputMappingManager::OnMappingsChanged' has a wrong offset!");
static_assert(offsetof(UInputMappingManager, PlayerInputOverrides) == 0x000040, "Member 'UInputMappingManager::PlayerInputOverrides' has a wrong offset!");
static_assert(offsetof(UInputMappingManager, RegisteredPlayerControllers) == 0x000050, "Member 'UInputMappingManager::RegisteredPlayerControllers' has a wrong offset!");

// Class AutoSettingsInput.KeyLabel
// 0x0070 (0x02E8 - 0x0278)
class UKeyLabel : public UUserWidget
{
public:
	class FText                                   KeyInvalidText;                                    // 0x0278(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   LabelOverride;                                     // 0x0290(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x02A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisScale;                                         // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B10[0x4];                                     // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  IconTags;                                          // 0x02C8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void OnGlobalKeyIconTagsModified();
	void UpdateKeyLabel();

	class FText GetDisplayName() const;
	ESlateVisibility GetDisplayNameVisibility() const;
	class UTexture* GetIcon() const;
	struct FSlateBrush GetIconBrush() const;
	ESlateVisibility GetIconVisibility() const;
	bool HasIcon() const;
	bool HasValidKey() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KeyLabel">();
	}
	static class UKeyLabel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeyLabel>();
	}
};
static_assert(alignof(UKeyLabel) == 0x000008, "Wrong alignment on UKeyLabel");
static_assert(sizeof(UKeyLabel) == 0x0002E8, "Wrong size on UKeyLabel");
static_assert(offsetof(UKeyLabel, KeyInvalidText) == 0x000278, "Member 'UKeyLabel::KeyInvalidText' has a wrong offset!");
static_assert(offsetof(UKeyLabel, LabelOverride) == 0x000290, "Member 'UKeyLabel::LabelOverride' has a wrong offset!");
static_assert(offsetof(UKeyLabel, Key) == 0x0002A8, "Member 'UKeyLabel::Key' has a wrong offset!");
static_assert(offsetof(UKeyLabel, AxisScale) == 0x0002C0, "Member 'UKeyLabel::AxisScale' has a wrong offset!");
static_assert(offsetof(UKeyLabel, IconTags) == 0x0002C8, "Member 'UKeyLabel::IconTags' has a wrong offset!");

}

