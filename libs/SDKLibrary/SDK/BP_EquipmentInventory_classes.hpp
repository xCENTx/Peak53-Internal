#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EquipmentInventory

#include "Basic.hpp"

#include "S_WeaponSlot_structs.hpp"
#include "S_EquipmentSlot_structs.hpp"
#include "E_Hitbox_structs.hpp"
#include "Engine_structs.hpp"
#include "E_EquipmentType_structs.hpp"
#include "S_StartingWeaponItem_structs.hpp"
#include "S_StartingEquipmentItem_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_MasterInventory_classes.hpp"
#include "E_WeaponSlots_structs.hpp"
#include "E_DamageType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EquipmentInventory.BP_EquipmentInventory_C
// 0x0438 (0x06C8 - 0x0290)
class UBP_EquipmentInventory_C : public UBP_MasterInventory_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_EquipmentInventory_C;            // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 AttachActor;                                       // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             OwningCharacter;                                   // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_EquipmentSlot                       TacticalRigEquipmentSlot;                          // 0x02A8(0x0048)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_EquipmentSlot                       GlovesEquipmentSlot;                               // 0x02F0(0x0048)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_EquipmentSlot                       ShirtEquipmentSlot;                                // 0x0338(0x0048)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_EquipmentSlot                       BackpackEquipmentSlot;                             // 0x0380(0x0048)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_EquipmentSlot                       PantsEquipmentSlot;                                // 0x03C8(0x0048)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_EquipmentSlot                       EyewearEquipmentSlot;                              // 0x0410(0x0048)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_EquipmentSlot                       ShoesEquipmentSlot;                                // 0x0458(0x0048)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_EquipmentSlot                       HelmetEquipmentSlot;                               // 0x04A0(0x0048)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_WeaponSlot                          SecondaryWeaponSlot;                               // 0x04E8(0x0050)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_WeaponSlot                          PrimaryWeaponSlot;                                 // 0x0538(0x0050)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<struct FS_StartingWeaponItem>          StartingWeapons;                                   // 0x0588(0x0010)(Edit, BlueprintVisible)
	bool                                          UseRandomStartingWeapons;                          // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTotalArmour;                                    // 0x0599(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5245[0x6];                                     // 0x059A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_Hitbox, E_EquipmentType>               EquipmentDamageMapping;                            // 0x05A0(0x0050)(Edit, BlueprintVisible)
	bool                                          CanDamageEffectEquipment;                          // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5246[0x7];                                     // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_StartingEquipmentItem>       StartingEquipment;                                 // 0x05F8(0x0010)(Edit, BlueprintVisible)
	bool                                          UseRandomStartingEquipment;                        // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5247[0x7];                                     // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDataTableRowHandle>            RandomStartingTacticalRig;                         // 0x0610(0x0010)(Edit, BlueprintVisible)
	TArray<struct FDataTableRowHandle>            RandomStartingGloves;                              // 0x0620(0x0010)(Edit, BlueprintVisible)
	TArray<struct FDataTableRowHandle>            RandomStartingShirt;                               // 0x0630(0x0010)(Edit, BlueprintVisible)
	TArray<struct FDataTableRowHandle>            RandomStartingBackpack;                            // 0x0640(0x0010)(Edit, BlueprintVisible)
	TArray<struct FDataTableRowHandle>            RandomStartingPants;                               // 0x0650(0x0010)(Edit, BlueprintVisible)
	TArray<struct FDataTableRowHandle>            RandomStartingEyewear;                             // 0x0660(0x0010)(Edit, BlueprintVisible)
	TArray<struct FDataTableRowHandle>            RandomStartingShoes;                               // 0x0670(0x0010)(Edit, BlueprintVisible)
	TArray<struct FDataTableRowHandle>            RandomStartingHelmet;                              // 0x0680(0x0010)(Edit, BlueprintVisible)
	TArray<struct FS_StartingWeaponItem>          RandomStartingPrimaryWeapon;                       // 0x0690(0x0010)(Edit, BlueprintVisible)
	TArray<struct FS_StartingWeaponItem>          RandomStartingSecondaryWeapon;                     // 0x06A0(0x0010)(Edit, BlueprintVisible)
	struct FVector                                ScopeLoc;                                          // 0x06B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddUserToEquipmentItems(class UBP_PlayerInventory_C* Player_Inv);
	void AllEquipmentActors(E_EquipmentType IgnoreSlot, TArray<class ABP_MasterClothingAttchment_C*>* Actors);
	void AllEquipmentItems(E_EquipmentType IgnoreSlot, TArray<struct FS_InvItem>* Items);
	void AllWeaponActors(TArray<class AActor*>* Actors);
	void ApplyRandomEquipment(const TArray<struct FDataTableRowHandle>& TargetArray, E_EquipmentType EquipmentType);
	void ApplyRandomWeapons(const TArray<struct FS_StartingWeaponItem>& TargetArray, E_WeaponSlots WeaponSlot);
	void ArmourDamageReduction(int32 Damage, E_DamageType DamageType, E_Hitbox HitBox, int32* FinalDamage);
	void CheckEquipmentSlot(E_EquipmentType EquipmentType, bool* SlotFull);
	void CheckIfCanEquip(const struct FS_InvItem& InvItem, bool* CanEquip, E_EquipmentType* FreeSlot);
	void DamageEquipment(int32 Damage, E_DamageType DamageType, E_Hitbox HitBox);
	void DecreaseEquipmentDurability(double DecreaseAmount, E_EquipmentType EquipmentSlot);
	void DestroyAttachedActors();
	void DestroyEquipmentItem(E_EquipmentType EquipmentSlot);
	void EquipItem(const struct FS_InvItem& InvItem, const struct FS_EquipmentSlotID& EquipmentSlotID, bool Force, bool Param_SaveLoaded, bool* ItemEquipped);
	void EquipmentInventoryReplication(bool Replicate);
	void EquipWeapon(const struct FS_InvItem& Inv_Item, const struct FS_WeaponSlotID& Weapon_Slot_ID, bool ClearQuickSlot, bool Force, bool* Return_Value);
	void ExecuteUbergraph_BP_EquipmentInventory(int32 EntryPoint);
	bool HasItemEquipped(class FName ItemId, struct FS_EquipmentSlot* EquipmentSlot);
	void HideComponentCheck(const class FString& Tag, E_EquipmentType Ignore, bool* Found);
	void HideEquipmentComponents(bool Hide, const struct FS_InvItem& InvItem, E_EquipmentType IgnoreSlot);
	void InitializeEquipmentInventory(class AActor* Param_OwningCharacter);
	void ItemDecay();
	void LoadComponentData(class UBP_SGKSaveGame_C* SaveGame, bool* LoadComplete);
	void LoadEquipmentData(const struct FS_EquipmentInvSave& StorageSave);
	void LoadInventoryData(const struct FS_StorageSave& S_StorageSave);
	void OnRep_BackpackEquipmentSlot();
	void OnRep_EyewearEquipmentSlot();
	void OnRep_GlovesEquipmentSlot();
	void OnRep_HelmetEquipmentSlot();
	void OnRep_PantsEquipmentSlot();
	void OnRep_PrimaryEquipmentSlot();
	void OnRep_SecondaryWeaponSlot();
	void OnRep_ShirtEquipmentSlot();
	void OnRep_ShoesEquipmentSlot();
	void OnRep_TacticalRigEquipmentSlot();
	void RandomStartingEquipment();
	void RandomStartingWeapons();
	void ReceiveBeginPlay();
	void RemoveUserToEquipmentItems(bool RemoveAll, class UBP_PlayerInventory_C* Player_Inv);
	void SaveComponentData(class UBP_SGKSaveGame_C* SaveGame);
	void SaveEquipmentData(class UBP_SGKSaveGame_C* SaveGame);
	void SearchEquipmentForEmptySlots(bool AllowRotation, class FName ItemId, E_EquipmentType IgnoreEquipment, bool Param_WeightCheck, int32 WeightCheckAmount, bool* SpaceFound, bool* Rotation, TArray<struct FS_InvSlot>* FoundSlots);
	struct FS_WeaponSlot SelectedWeaponSlot(E_WeaponSlots Weapon_Slot);
	struct FS_EquipmentSlot SelectEquipmentSlot(E_EquipmentType EquipmentSlot);
	void ServerAddUserToEquipmentItems(const class UBP_PlayerInventory_C*& PlayerInventory);
	void ServerRemoveUserToEquipmentItems(class UBP_PlayerInventory_C* PlayerInventory, bool RemoveAll);
	void ServerUpdateEquipmentSlot(const struct FS_EquipmentSlot& EquipmentSlot);
	void ServerUpdateWeaponSlot(const struct FS_WeaponSlot& Weapon_Slot);
	void SGK_AllowStartingItems(bool* AllowStartingItems);
	void SpawnDestructionBag();
	void SpawnEquipmentDestructionBag();
	void StartItemEquipment();
	void UpdateEquipmentSlotItem(const struct FS_InvItem& InvItem, const struct FS_EquipmentSlotID& EquipmentSlotID, class ABP_MasterClothingAttchment_C* EquipmentActor);
	void UpdateWeaponSlotItem(const struct FS_InvItem& InvItem, const struct FS_WeaponSlotID& Weapon_Slot_ID, class ABP_MasterHoldable_C* Holdable, int32 QuickSlot);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EquipmentInventory_C">();
	}
	static class UBP_EquipmentInventory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_EquipmentInventory_C>();
	}
};
static_assert(alignof(UBP_EquipmentInventory_C) == 0x000008, "Wrong alignment on UBP_EquipmentInventory_C");
static_assert(sizeof(UBP_EquipmentInventory_C) == 0x0006C8, "Wrong size on UBP_EquipmentInventory_C");
static_assert(offsetof(UBP_EquipmentInventory_C, UberGraphFrame_BP_EquipmentInventory_C) == 0x000290, "Member 'UBP_EquipmentInventory_C::UberGraphFrame_BP_EquipmentInventory_C' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, AttachActor) == 0x000298, "Member 'UBP_EquipmentInventory_C::AttachActor' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, OwningCharacter) == 0x0002A0, "Member 'UBP_EquipmentInventory_C::OwningCharacter' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, TacticalRigEquipmentSlot) == 0x0002A8, "Member 'UBP_EquipmentInventory_C::TacticalRigEquipmentSlot' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, GlovesEquipmentSlot) == 0x0002F0, "Member 'UBP_EquipmentInventory_C::GlovesEquipmentSlot' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, ShirtEquipmentSlot) == 0x000338, "Member 'UBP_EquipmentInventory_C::ShirtEquipmentSlot' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, BackpackEquipmentSlot) == 0x000380, "Member 'UBP_EquipmentInventory_C::BackpackEquipmentSlot' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, PantsEquipmentSlot) == 0x0003C8, "Member 'UBP_EquipmentInventory_C::PantsEquipmentSlot' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, EyewearEquipmentSlot) == 0x000410, "Member 'UBP_EquipmentInventory_C::EyewearEquipmentSlot' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, ShoesEquipmentSlot) == 0x000458, "Member 'UBP_EquipmentInventory_C::ShoesEquipmentSlot' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, HelmetEquipmentSlot) == 0x0004A0, "Member 'UBP_EquipmentInventory_C::HelmetEquipmentSlot' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, SecondaryWeaponSlot) == 0x0004E8, "Member 'UBP_EquipmentInventory_C::SecondaryWeaponSlot' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, PrimaryWeaponSlot) == 0x000538, "Member 'UBP_EquipmentInventory_C::PrimaryWeaponSlot' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, StartingWeapons) == 0x000588, "Member 'UBP_EquipmentInventory_C::StartingWeapons' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, UseRandomStartingWeapons) == 0x000598, "Member 'UBP_EquipmentInventory_C::UseRandomStartingWeapons' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, UseTotalArmour) == 0x000599, "Member 'UBP_EquipmentInventory_C::UseTotalArmour' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, EquipmentDamageMapping) == 0x0005A0, "Member 'UBP_EquipmentInventory_C::EquipmentDamageMapping' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, CanDamageEffectEquipment) == 0x0005F0, "Member 'UBP_EquipmentInventory_C::CanDamageEffectEquipment' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, StartingEquipment) == 0x0005F8, "Member 'UBP_EquipmentInventory_C::StartingEquipment' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, UseRandomStartingEquipment) == 0x000608, "Member 'UBP_EquipmentInventory_C::UseRandomStartingEquipment' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, RandomStartingTacticalRig) == 0x000610, "Member 'UBP_EquipmentInventory_C::RandomStartingTacticalRig' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, RandomStartingGloves) == 0x000620, "Member 'UBP_EquipmentInventory_C::RandomStartingGloves' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, RandomStartingShirt) == 0x000630, "Member 'UBP_EquipmentInventory_C::RandomStartingShirt' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, RandomStartingBackpack) == 0x000640, "Member 'UBP_EquipmentInventory_C::RandomStartingBackpack' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, RandomStartingPants) == 0x000650, "Member 'UBP_EquipmentInventory_C::RandomStartingPants' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, RandomStartingEyewear) == 0x000660, "Member 'UBP_EquipmentInventory_C::RandomStartingEyewear' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, RandomStartingShoes) == 0x000670, "Member 'UBP_EquipmentInventory_C::RandomStartingShoes' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, RandomStartingHelmet) == 0x000680, "Member 'UBP_EquipmentInventory_C::RandomStartingHelmet' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, RandomStartingPrimaryWeapon) == 0x000690, "Member 'UBP_EquipmentInventory_C::RandomStartingPrimaryWeapon' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, RandomStartingSecondaryWeapon) == 0x0006A0, "Member 'UBP_EquipmentInventory_C::RandomStartingSecondaryWeapon' has a wrong offset!");
static_assert(offsetof(UBP_EquipmentInventory_C, ScopeLoc) == 0x0006B0, "Member 'UBP_EquipmentInventory_C::ScopeLoc' has a wrong offset!");

}

