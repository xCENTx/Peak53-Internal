#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Minimap

#include "Basic.hpp"

#include "Minimap_classes.hpp"
#include "Minimap_parameters.hpp"


namespace SDK
{

// Function Minimap.Minimap_C.AddMapBackground
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMapBackground*                   MapBackground                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::AddMapBackground(class AMapBackground* MapBackground)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "AddMapBackground");

	Params::Minimap_C_AddMapBackground Parms{};

	Parms.MapBackground = MapBackground;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.AddMapFog
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMapFog*                          MapFog                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::AddMapFog(class AMapFog* MapFog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "AddMapFog");

	Params::Minimap_C_AddMapFog Parms{};

	Parms.MapFog = MapFog;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.AddMapIcon
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMapIconComponent*                MapIconComp                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::AddMapIcon(class UMapIconComponent* MapIconComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "AddMapIcon");

	Params::Minimap_C_AddMapIcon Parms{};

	Parms.MapIconComp = MapIconComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.AutoFindMapView
// (Public, BlueprintCallable, BlueprintEvent)

void UMinimap_C::AutoFindMapView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "AutoFindMapView");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.BroadcastMapView
// (Public, BlueprintCallable, BlueprintEvent)

void UMinimap_C::BroadcastMapView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "BroadcastMapView");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.ChangeZoom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delta                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::ChangeZoom(double Delta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "ChangeZoom");

	Params::Minimap_C_ChangeZoom Parms{};

	Parms.Delta = Delta;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.CleanupListeners
// (BlueprintCallable, BlueprintEvent)

void UMinimap_C::CleanupListeners()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "CleanupListeners");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UMinimap_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.CustomEvent_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        StartUV                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        EndUV                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLeftMouseButton                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsShiftSelect                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCtrlSelect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::CustomEvent_0(const struct FVector2D& StartUV, const struct FVector2D& EndUV, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "CustomEvent_0");

	Params::Minimap_C_CustomEvent_0 Parms{};

	Parms.StartUV = std::move(StartUV);
	Parms.EndUV = std::move(EndUV);
	Parms.IsLeftMouseButton = IsLeftMouseButton;
	Parms.IsShiftSelect = IsShiftSelect;
	Parms.IsCtrlSelect = IsCtrlSelect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.CustomEvent_1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        StartUV                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        EndUV                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLeftMouseButton                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsShiftSelect                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCtrlSelect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::CustomEvent_1(const struct FVector2D& StartUV, const struct FVector2D& EndUV, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "CustomEvent_1");

	Params::Minimap_C_CustomEvent_1 Parms{};

	Parms.StartUV = std::move(StartUV);
	Parms.EndUV = std::move(EndUV);
	Parms.IsLeftMouseButton = IsLeftMouseButton;
	Parms.IsShiftSelect = IsShiftSelect;
	Parms.IsCtrlSelect = IsCtrlSelect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UMinimap_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.EnforceAspectRatio
// (Protected, BlueprintCallable, BlueprintEvent)

void UMinimap_C::EnforceAspectRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "EnforceAspectRatio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.ExecuteUbergraph_Minimap
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::ExecuteUbergraph_Minimap(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "ExecuteUbergraph_Minimap");

	Params::Minimap_C_ExecuteUbergraph_Minimap Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.ForgetDestroyedIcons
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UMinimap_C::ForgetDestroyedIcons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "ForgetDestroyedIcons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.InitDrawFrustum
// (Public, BlueprintCallable, BlueprintEvent)

void UMinimap_C::InitDrawFrustum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "InitDrawFrustum");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.InitFillBackground
// (Protected, BlueprintCallable, BlueprintEvent)

void UMinimap_C::InitFillBackground()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "InitFillBackground");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.InitMap
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        Geom                                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UMinimap_C::InitMap(const struct FGeometry& Geom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "InitMap");

	Params::Minimap_C_InitMap Parms{};

	Parms.Geom = std::move(Geom);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.InitShape
// (Protected, BlueprintCallable, BlueprintEvent)

void UMinimap_C::InitShape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "InitShape");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.InitZoom
// (Public, BlueprintCallable, BlueprintEvent)

void UMinimap_C::InitZoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "InitZoom");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.OnBoxSelected__DelegateSignature
// (Public, Delegate, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMapIconComponent*>        MapIcons                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    IsLeftMouseButton                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsShiftSelect                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCtrlSelect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::OnBoxSelected__DelegateSignature(TArray<class UMapIconComponent*>& MapIcons, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "OnBoxSelected__DelegateSignature");

	Params::Minimap_C_OnBoxSelected__DelegateSignature Parms{};

	Parms.MapIcons = std::move(MapIcons);
	Parms.IsLeftMouseButton = IsLeftMouseButton;
	Parms.IsShiftSelect = IsShiftSelect;
	Parms.IsCtrlSelect = IsCtrlSelect;

	UObject::ProcessEvent(Func, &Parms);

	MapIcons = std::move(Parms.MapIcons);
}


// Function Minimap.Minimap_C.OnMapBackgroundUnregistered_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMapBackground*                   MapBackground                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::OnMapBackgroundUnregistered_Event_0(class AMapBackground* MapBackground)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "OnMapBackgroundUnregistered_Event_0");

	Params::Minimap_C_OnMapBackgroundUnregistered_Event_0 Parms{};

	Parms.MapBackground = MapBackground;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.OnMapClicked__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLeftMouseButton                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::OnMapClicked__DelegateSignature(const struct FVector& WorldLocation, bool IsLeftMouseButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "OnMapClicked__DelegateSignature");

	Params::Minimap_C_OnMapClicked__DelegateSignature Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.IsLeftMouseButton = IsLeftMouseButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.OnMapFogRegistered_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMapFog*                          MapFog                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::OnMapFogRegistered_Event_0(class AMapFog* MapFog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "OnMapFogRegistered_Event_0");

	Params::Minimap_C_OnMapFogRegistered_Event_0 Parms{};

	Parms.MapFog = MapFog;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.OnMapIconRegistered
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMapIconComponent*                MapIcon                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::OnMapIconRegistered(class UMapIconComponent* MapIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "OnMapIconRegistered");

	Params::Minimap_C_OnMapIconRegistered Parms{};

	Parms.MapIcon = MapIcon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.OnMapIconWidgetCreated
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMinimapInternal_Icon_C*          MapIconWidget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::OnMapIconWidgetCreated(class UMinimapInternal_Icon_C* MapIconWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "OnMapIconWidgetCreated");

	Params::Minimap_C_OnMapIconWidgetCreated Parms{};

	Parms.MapIconWidget = MapIconWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UMinimap_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "OnMouseButtonDown");

	Params::Minimap_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Minimap.Minimap_C.OnMouseClick_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        UV                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLeftMouseButton                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::OnMouseClick_Event_0(const struct FVector2D& UV, bool IsLeftMouseButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "OnMouseClick_Event_0");

	Params::Minimap_C_OnMouseClick_Event_0 Parms{};

	Parms.UV = std::move(UV);
	Parms.IsLeftMouseButton = IsLeftMouseButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.OnViewChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMapViewComponent*                Param_MapViewComp                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::OnViewChanged__DelegateSignature(class UMapViewComponent* Param_MapViewComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "OnViewChanged__DelegateSignature");

	Params::Minimap_C_OnViewChanged__DelegateSignature Parms{};

	Parms.Param_MapViewComp = Param_MapViewComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.OnViewDestroyed_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMapViewComponent*                MapView                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::OnViewDestroyed_Event_0(class UMapViewComponent* MapView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "OnViewDestroyed_Event_0");

	Params::Minimap_C_OnViewDestroyed_Event_0 Parms{};

	Parms.MapView = MapView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.ProcessBackgroundClick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        UV                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLeftMouseButton                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::ProcessBackgroundClick(const struct FVector2D& UV, bool IsLeftMouseButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "ProcessBackgroundClick");

	Params::Minimap_C_ProcessBackgroundClick Parms{};

	Parms.UV = std::move(UV);
	Parms.IsLeftMouseButton = IsLeftMouseButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.ProcessBoxSelect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        StartUV                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        EndUV                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLeftMouseButton                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsShiftSelect                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCtrlSelect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::ProcessBoxSelect(const struct FVector2D& StartUV, const struct FVector2D& EndUV, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "ProcessBoxSelect");

	Params::Minimap_C_ProcessBoxSelect Parms{};

	Parms.StartUV = std::move(StartUV);
	Parms.EndUV = std::move(EndUV);
	Parms.IsLeftMouseButton = IsLeftMouseButton;
	Parms.IsShiftSelect = IsShiftSelect;
	Parms.IsCtrlSelect = IsCtrlSelect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.ReinitBoxSelect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UMinimap_C::ReinitBoxSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "ReinitBoxSelect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.ReinitShape
// (Public, BlueprintCallable, BlueprintEvent)

void UMinimap_C::ReinitShape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "ReinitShape");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.RetryAutoFind
// (BlueprintCallable, BlueprintEvent)

void UMinimap_C::RetryAutoFind()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "RetryAutoFind");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.RetryMapSize
// (BlueprintCallable, BlueprintEvent)

void UMinimap_C::RetryMapSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "RetryMapSize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.SetMapView
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMapViewComponent*                NewMapView                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::SetMapView(class UMapViewComponent* NewMapView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "SetMapView");

	Params::Minimap_C_SetMapView Parms{};

	Parms.NewMapView = NewMapView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Minimap.Minimap_C.SetupListeners
// (BlueprintCallable, BlueprintEvent)

void UMinimap_C::SetupListeners()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "SetupListeners");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.SetupViewListener
// (BlueprintCallable, BlueprintEvent)

void UMinimap_C::SetupViewListener()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "SetupViewListener");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Minimap.Minimap_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimap_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Minimap_C", "Tick");

	Params::Minimap_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}

}

