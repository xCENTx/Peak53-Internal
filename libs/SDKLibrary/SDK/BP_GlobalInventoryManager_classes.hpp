#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalInventoryManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GlobalInventoryManager.BP_GlobalInventoryManager_C
// 0x0020 (0x02B0 - 0x0290)
class ABP_GlobalInventoryManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_MasterInventory_C*>          ContainerInventories;                              // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ClearContainerInventories();
	void CreateNewInventory(const struct FS_InvItem& Item, bool Replicate, bool AllowStartingItems, class UBP_MasterInventory_C** Inventory);
	void CreateNewItem(class FName ItemId, int32 Amount, bool AddDefaults, bool AddStartingItems, bool Rotated, bool Replicated, struct FS_InvItem* NewItem);
	void CreateNewWeaponInventory(const struct FS_InvItem& Item, bool Replicate, bool AllowStartingItems, class UBP_WeaponInventory_C** WeaponInventory);
	void DestroyItemInventory(class UBP_MasterInventory_C* MasterInventory);
	void ExecuteUbergraph_BP_GlobalInventoryManager(int32 EntryPoint);
	void InitializeGlobalInventory();
	void LoadSave(class UBP_SGKSaveGame_C* SaveGame);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GlobalInventoryManager_C">();
	}
	static class ABP_GlobalInventoryManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GlobalInventoryManager_C>();
	}
};
static_assert(alignof(ABP_GlobalInventoryManager_C) == 0x000008, "Wrong alignment on ABP_GlobalInventoryManager_C");
static_assert(sizeof(ABP_GlobalInventoryManager_C) == 0x0002B0, "Wrong size on ABP_GlobalInventoryManager_C");
static_assert(offsetof(ABP_GlobalInventoryManager_C, UberGraphFrame) == 0x000290, "Member 'ABP_GlobalInventoryManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GlobalInventoryManager_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_GlobalInventoryManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalInventoryManager_C, ContainerInventories) == 0x0002A0, "Member 'ABP_GlobalInventoryManager_C::ContainerInventories' has a wrong offset!");

}

