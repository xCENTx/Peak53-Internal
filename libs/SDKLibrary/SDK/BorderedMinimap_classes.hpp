#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BorderedMinimap

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "MinimapPlugin_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BorderedMinimap.BorderedMinimap_C
// 0x0098 (0x0310 - 0x0278)
class UBorderedMinimap_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                Button_ZoomInC;                                    // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Button_ZoomInR;                                    // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Button_ZoomOutC;                                   // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Button_ZoomOutR;                                   // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_310;                                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_CircleBorder;                                // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_RectBorder;                                  // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMinimap_C*                             Minimap;                                           // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        Switcher_Border;                                   // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EMapViewSearchOption                          AutoLocateMapView;                                 // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsCircular;                                       // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bDrawCamera;                                       // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3857[0x5];                                     // 0x02CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FloorDistance;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           FillColor;                                         // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        IconScale;                                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        NorthYaw;                                          // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bEnableBoxSelect;                                  // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3858[0x3];                                     // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BoxSelectColor;                                    // 0x02FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BndEvt__Button_ZoomIn_K2Node_ComponentBoundEvent_186_OnButtonPressedEvent__DelegateSignature();
	void BndEvt__Button_ZoomIn_K2Node_ComponentBoundEvent_205_OnButtonReleasedEvent__DelegateSignature();
	void BndEvt__Button_ZoomInR_K2Node_ComponentBoundEvent_327_OnButtonPressedEvent__DelegateSignature();
	void BndEvt__Button_ZoomInR_K2Node_ComponentBoundEvent_345_OnButtonReleasedEvent__DelegateSignature();
	void BndEvt__Button_ZoomOut_K2Node_ComponentBoundEvent_218_OnButtonPressedEvent__DelegateSignature();
	void BndEvt__Button_ZoomOut_K2Node_ComponentBoundEvent_233_OnButtonReleasedEvent__DelegateSignature();
	void BndEvt__Button_ZoomOutR_K2Node_ComponentBoundEvent_364_OnButtonPressedEvent__DelegateSignature();
	void BndEvt__Button_ZoomOutR_K2Node_ComponentBoundEvent_384_OnButtonReleasedEvent__DelegateSignature();
	void Construct();
	void CopyOptionsToMapWidget();
	void ExecuteUbergraph_BorderedMinimap(int32 EntryPoint);
	void InitBorder();
	void InitButtons();
	void OnViewChanged_Event_0(class UMapViewComponent* MapViewComp);
	void PreConstruct(bool IsDesignTime);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void TickBorder();
	void TickZoom(double DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BorderedMinimap_C">();
	}
	static class UBorderedMinimap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBorderedMinimap_C>();
	}
};
static_assert(alignof(UBorderedMinimap_C) == 0x000008, "Wrong alignment on UBorderedMinimap_C");
static_assert(sizeof(UBorderedMinimap_C) == 0x000310, "Wrong size on UBorderedMinimap_C");
static_assert(offsetof(UBorderedMinimap_C, UberGraphFrame) == 0x000278, "Member 'UBorderedMinimap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, Button_ZoomInC) == 0x000280, "Member 'UBorderedMinimap_C::Button_ZoomInC' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, Button_ZoomInR) == 0x000288, "Member 'UBorderedMinimap_C::Button_ZoomInR' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, Button_ZoomOutC) == 0x000290, "Member 'UBorderedMinimap_C::Button_ZoomOutC' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, Button_ZoomOutR) == 0x000298, "Member 'UBorderedMinimap_C::Button_ZoomOutR' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, Image_310) == 0x0002A0, "Member 'UBorderedMinimap_C::Image_310' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, Image_CircleBorder) == 0x0002A8, "Member 'UBorderedMinimap_C::Image_CircleBorder' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, Image_RectBorder) == 0x0002B0, "Member 'UBorderedMinimap_C::Image_RectBorder' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, Minimap) == 0x0002B8, "Member 'UBorderedMinimap_C::Minimap' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, Switcher_Border) == 0x0002C0, "Member 'UBorderedMinimap_C::Switcher_Border' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, AutoLocateMapView) == 0x0002C8, "Member 'UBorderedMinimap_C::AutoLocateMapView' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, bIsCircular) == 0x0002C9, "Member 'UBorderedMinimap_C::bIsCircular' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, bDrawCamera) == 0x0002CA, "Member 'UBorderedMinimap_C::bDrawCamera' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, FloorDistance) == 0x0002D0, "Member 'UBorderedMinimap_C::FloorDistance' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, FillColor) == 0x0002D8, "Member 'UBorderedMinimap_C::FillColor' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, IconScale) == 0x0002E8, "Member 'UBorderedMinimap_C::IconScale' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, NorthYaw) == 0x0002F0, "Member 'UBorderedMinimap_C::NorthYaw' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, bEnableBoxSelect) == 0x0002F8, "Member 'UBorderedMinimap_C::bEnableBoxSelect' has a wrong offset!");
static_assert(offsetof(UBorderedMinimap_C, BoxSelectColor) == 0x0002FC, "Member 'UBorderedMinimap_C::BoxSelectColor' has a wrong offset!");

}

