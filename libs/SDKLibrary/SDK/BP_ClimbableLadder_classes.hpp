#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ClimbableLadder

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ClimbableLadder.BP_ClimbableLadder_C
// 0x0070 (0x0300 - 0x0290)
class ABP_ClimbableLadder_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          OverlappingLadder_;                                // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        EndClimbTeleport;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          EndClimb;                                          // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        BaseArrow;                                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Ladder_Left;                                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          Crossbar;                                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Ladder_Right;                                      // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Height;                                            // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LoopHeight;                                        // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CrossBarGap;                                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartedClimb_;                                     // 0x02F8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverlappedBase;                                    // 0x02F9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_ClimbableLadder_EndClimb_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_ClimbableLadder_OverlappingLadder__K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ExecuteUbergraph_BP_ClimbableLadder(int32 EntryPoint);
	void Update();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ClimbableLadder_C">();
	}
	static class ABP_ClimbableLadder_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ClimbableLadder_C>();
	}
};
static_assert(alignof(ABP_ClimbableLadder_C) == 0x000008, "Wrong alignment on ABP_ClimbableLadder_C");
static_assert(sizeof(ABP_ClimbableLadder_C) == 0x000300, "Wrong size on ABP_ClimbableLadder_C");
static_assert(offsetof(ABP_ClimbableLadder_C, UberGraphFrame) == 0x000290, "Member 'ABP_ClimbableLadder_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, OverlappingLadder_) == 0x000298, "Member 'ABP_ClimbableLadder_C::OverlappingLadder_' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, EndClimbTeleport) == 0x0002A0, "Member 'ABP_ClimbableLadder_C::EndClimbTeleport' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, EndClimb) == 0x0002A8, "Member 'ABP_ClimbableLadder_C::EndClimb' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, BaseArrow) == 0x0002B0, "Member 'ABP_ClimbableLadder_C::BaseArrow' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, Ladder_Left) == 0x0002B8, "Member 'ABP_ClimbableLadder_C::Ladder_Left' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, Box) == 0x0002C0, "Member 'ABP_ClimbableLadder_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, Crossbar) == 0x0002C8, "Member 'ABP_ClimbableLadder_C::Crossbar' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, Ladder_Right) == 0x0002D0, "Member 'ABP_ClimbableLadder_C::Ladder_Right' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, DefaultSceneRoot) == 0x0002D8, "Member 'ABP_ClimbableLadder_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, Height) == 0x0002E0, "Member 'ABP_ClimbableLadder_C::Height' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, LoopHeight) == 0x0002E8, "Member 'ABP_ClimbableLadder_C::LoopHeight' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, CrossBarGap) == 0x0002F0, "Member 'ABP_ClimbableLadder_C::CrossBarGap' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, StartedClimb_) == 0x0002F8, "Member 'ABP_ClimbableLadder_C::StartedClimb_' has a wrong offset!");
static_assert(offsetof(ABP_ClimbableLadder_C, OverlappedBase) == 0x0002F9, "Member 'ABP_ClimbableLadder_C::OverlappedBase' has a wrong offset!");

}

