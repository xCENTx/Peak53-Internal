#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Peak53PlayerState

#include "Basic.hpp"

#include "S_CraftingCost_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Peak53Teams_structs.hpp"
#include "S_StartingWeaponItem_structs.hpp"
#include "SteamCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "SteamCoreWeb_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Peak53PlayerState.Peak53PlayerState_C
// 0x0288 (0x0630 - 0x03A8)
class APeak53PlayerState_C final : public APlayerState
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_SGKController_C*>            ControllerArray;                                   // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FText                                   PlayerName;                                        // 0x03C8(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class FText                                   PlayerTag;                                         // 0x03E0(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class FText                                   PlayerKills;                                       // 0x03F8(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class FText                                   PlayerDeaths;                                      // 0x0410(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class FText                                   PlayerScore;                                       // 0x0428(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	EPeak53Teams                                  PlayerTeam;                                        // 0x0440(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35F8[0x7];                                     // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MessageToBeSendFeed;                               // 0x0448(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	class UClass*                                 Loadout;                                           // 0x0460(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FUniqueNetIdRepl                       UniqueNetID;                                       // 0x0468(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSteamID                               SteamID;                                           // 0x0498(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         SteamTotalKills;                                   // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SteamTotalDeaths;                                  // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SteamTotalGamesWon;                                // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SteamTotalGamesLost;                               // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewGamesWon;                                       // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewGamesLost;                                      // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_StartingWeaponItem>          WeaponsPrimary;                                    // 0x04B8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FS_StartingWeaponItem>          WeaponsSecondary;                                  // 0x04C8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FS_StartingWeaponItem>          WeaponsAll;                                        // 0x04D8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FS_CraftingCost>                WeaponsTool1;                                      // 0x04E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FS_CraftingCost>                WeaponsTool2;                                      // 0x04F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FS_CraftingCost>                WeaponsToolAll;                                    // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   PlayerMVP;                                         // 0x0518(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SteamBombDefused;                                  // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SteamBombPlanted;                                  // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SteamHeadshots;                                    // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SteamMVPAwards;                                    // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   PlayerBombDefused;                                 // 0x0540(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class FText                                   PlayerBombPlanted;                                 // 0x0558(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class FText                                   PlayerHeadshots;                                   // 0x0570(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class FText                                   PlayerMVPAwards;                                   // 0x0588(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	int32                                         SteamGlobalRank;                                   // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SteamGlobalScore;                                  // 0x05A4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBomb;                                           // 0x05A8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x05A9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35F9[0x6];                                     // 0x05AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentEquipmentString;                            // 0x05B0(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSteamID                               SteamIDReplicated;                                 // 0x05C0(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         SteamInventory;                                    // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bHasFlag;                                          // 0x05D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35FA[0x3];                                     // 0x05D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SteamGlobalFlagsPlanted;                           // 0x05DC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   PlayerFlagsPlanted;                                // 0x05E0(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	int32                                         SteamNpcKills;                                     // 0x05F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35FB[0x4];                                     // 0x05FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NpcKills;                                          // 0x0600(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FSlateColor                            TagColor;                                          // 0x0618(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void CMDAddItemToSteamInventory(const class FString& ItemPropsJson);
	void CMDGetPlayerSteamInventory(const struct FSteamID& Param_SteamIDReplicated);
	void ExecuteUbergraph_Peak53PlayerState(int32 EntryPoint);
	void GetSteamLeaderboardValues();
	void OnCallback_01E133F4472B991E8E4D58B586F83664(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_037D9CFC4C71C423939EBDA26A22D4C6(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_05107B3846292B443429B893697810B8(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_0627A79345E03734C499B68F3B9D260B(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_07B01903424831DFBBA12298085DCF2A(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_098A66484C48F24E9D628C8A67E20025(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_0EB9F3F64F24C79B9896B59E90791861(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_0F5E4CA54D4DE08F4EA689951531FD8D(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_0FB5FFEA434AAD1A1D2758A7E4182DE8(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_1B3335A740A469B7F0C444B52A51CD0A(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_1CB2BA704E32A0C9221AFDBE5D53D6E3(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_1D541B3740E3A43AB5EC4A9260FACBD5(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_28ECC6924D5C838CC01BB5A61D9BA228(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_3B7E95BE4606F9638DADA69F9E4C6012(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_410D1C2245BF063BE9A0B2BCFBD7428A(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_45E9748C4F0A9F17DBB71EA42AC6BA5F(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_46B3AF5D4B37B9C79F90A599D139F66D(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_470C6ABB45E243D4D94C8BA45D63F460(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_4D3973E64C287C9FAA33D6B1D65D14B0(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_4ECFD612430CFBF1F134558F99366577(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_50924D1B4EC9FF898A1704BAF99FA4D1(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_530AD5B248AF4A6E93A7568BECF04316(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_550B9E9841CE88877F273E840A5CD104(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful);
	void OnCallback_59E9334D478BD24D32D4DFA345667073(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_6570B2B1400C12351D95A7AB63D5073E(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_6900E4FF4E8EB4933345188F07541902(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_6BD46ACD4E92DD15258DD7875CA18CDE(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_6F67C6D04B00D873FC01598A7B8F35AB(const class FString& Data, bool bWasSuccessful);
	void OnCallback_7D0563654BE56F9065809F94A6CDCDFF(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_871A91EE4288E72E5F0AF58F689C22DD(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_93A8DADE427EEA9FCF7747B6A88C4E6E(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_96D384D2457A56AED7B7A5854F7D5C8A(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_A0586B1D4AAF17A3E73478AD54E57145(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_A49FE09B46DA608A1526689A3D370CF9(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_A81B854841E6594B712318B320972D65(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful);
	void OnCallback_ADB8BFC048C597759635089A2FFFC30C(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_B77A3AE048BAC3DFFDE538A3874E7ACA(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_B7B4B2A941A24FFA255C52AA7644B9EB(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_B82BB874486FE6839CA9B2A8EB019619(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_C505F9854E31081AA93D9785B6A07452(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_D9F1FC95459DA8F9167A28BA74EFDD6D(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_D9F558064B5D6A62A4C89583D25C52C3(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_DFAD931E42F4D012194B018E28281A0C(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_E85095074CD51CE70C23D88CE040A44F(const class FString& Data, bool bWasSuccessful);
	void OnRep_MessageToBeSendFeed();
	void OnRep_PlayerScore();
	void OnRep_PlayerTag();
	void OnRep_PlayerTeam();
	void Printasad(const class FText& MessageFeed);
	void PrintMessageFeed(const class FText& MessageFeed);
	void ReceiveBeginPlay();
	void SetCurrentEquipmentString(const class FString& Param_CurrentEquipmentString);
	void SetGlobalScoreServer(int32 Param_SteamGlobalScore);
	void WriteSteamLeaderboards(EPeak53Teams WinnerTeam);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Peak53PlayerState_C">();
	}
	static class APeak53PlayerState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APeak53PlayerState_C>();
	}
};
static_assert(alignof(APeak53PlayerState_C) == 0x000008, "Wrong alignment on APeak53PlayerState_C");
static_assert(sizeof(APeak53PlayerState_C) == 0x000630, "Wrong size on APeak53PlayerState_C");
static_assert(offsetof(APeak53PlayerState_C, UberGraphFrame) == 0x0003A8, "Member 'APeak53PlayerState_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, DefaultSceneRoot) == 0x0003B0, "Member 'APeak53PlayerState_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, ControllerArray) == 0x0003B8, "Member 'APeak53PlayerState_C::ControllerArray' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, PlayerName) == 0x0003C8, "Member 'APeak53PlayerState_C::PlayerName' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, PlayerTag) == 0x0003E0, "Member 'APeak53PlayerState_C::PlayerTag' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, PlayerKills) == 0x0003F8, "Member 'APeak53PlayerState_C::PlayerKills' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, PlayerDeaths) == 0x000410, "Member 'APeak53PlayerState_C::PlayerDeaths' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, PlayerScore) == 0x000428, "Member 'APeak53PlayerState_C::PlayerScore' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, PlayerTeam) == 0x000440, "Member 'APeak53PlayerState_C::PlayerTeam' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, MessageToBeSendFeed) == 0x000448, "Member 'APeak53PlayerState_C::MessageToBeSendFeed' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, Loadout) == 0x000460, "Member 'APeak53PlayerState_C::Loadout' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, UniqueNetID) == 0x000468, "Member 'APeak53PlayerState_C::UniqueNetID' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamID) == 0x000498, "Member 'APeak53PlayerState_C::SteamID' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamTotalKills) == 0x0004A0, "Member 'APeak53PlayerState_C::SteamTotalKills' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamTotalDeaths) == 0x0004A4, "Member 'APeak53PlayerState_C::SteamTotalDeaths' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamTotalGamesWon) == 0x0004A8, "Member 'APeak53PlayerState_C::SteamTotalGamesWon' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamTotalGamesLost) == 0x0004AC, "Member 'APeak53PlayerState_C::SteamTotalGamesLost' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, NewGamesWon) == 0x0004B0, "Member 'APeak53PlayerState_C::NewGamesWon' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, NewGamesLost) == 0x0004B4, "Member 'APeak53PlayerState_C::NewGamesLost' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, WeaponsPrimary) == 0x0004B8, "Member 'APeak53PlayerState_C::WeaponsPrimary' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, WeaponsSecondary) == 0x0004C8, "Member 'APeak53PlayerState_C::WeaponsSecondary' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, WeaponsAll) == 0x0004D8, "Member 'APeak53PlayerState_C::WeaponsAll' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, WeaponsTool1) == 0x0004E8, "Member 'APeak53PlayerState_C::WeaponsTool1' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, WeaponsTool2) == 0x0004F8, "Member 'APeak53PlayerState_C::WeaponsTool2' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, WeaponsToolAll) == 0x000508, "Member 'APeak53PlayerState_C::WeaponsToolAll' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, PlayerMVP) == 0x000518, "Member 'APeak53PlayerState_C::PlayerMVP' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamBombDefused) == 0x000530, "Member 'APeak53PlayerState_C::SteamBombDefused' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamBombPlanted) == 0x000534, "Member 'APeak53PlayerState_C::SteamBombPlanted' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamHeadshots) == 0x000538, "Member 'APeak53PlayerState_C::SteamHeadshots' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamMVPAwards) == 0x00053C, "Member 'APeak53PlayerState_C::SteamMVPAwards' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, PlayerBombDefused) == 0x000540, "Member 'APeak53PlayerState_C::PlayerBombDefused' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, PlayerBombPlanted) == 0x000558, "Member 'APeak53PlayerState_C::PlayerBombPlanted' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, PlayerHeadshots) == 0x000570, "Member 'APeak53PlayerState_C::PlayerHeadshots' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, PlayerMVPAwards) == 0x000588, "Member 'APeak53PlayerState_C::PlayerMVPAwards' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamGlobalRank) == 0x0005A0, "Member 'APeak53PlayerState_C::SteamGlobalRank' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamGlobalScore) == 0x0005A4, "Member 'APeak53PlayerState_C::SteamGlobalScore' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, HasBomb) == 0x0005A8, "Member 'APeak53PlayerState_C::HasBomb' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, IsDead) == 0x0005A9, "Member 'APeak53PlayerState_C::IsDead' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, CurrentEquipmentString) == 0x0005B0, "Member 'APeak53PlayerState_C::CurrentEquipmentString' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamIDReplicated) == 0x0005C0, "Member 'APeak53PlayerState_C::SteamIDReplicated' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamInventory) == 0x0005C8, "Member 'APeak53PlayerState_C::SteamInventory' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, bHasFlag) == 0x0005D8, "Member 'APeak53PlayerState_C::bHasFlag' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamGlobalFlagsPlanted) == 0x0005DC, "Member 'APeak53PlayerState_C::SteamGlobalFlagsPlanted' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, PlayerFlagsPlanted) == 0x0005E0, "Member 'APeak53PlayerState_C::PlayerFlagsPlanted' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, SteamNpcKills) == 0x0005F8, "Member 'APeak53PlayerState_C::SteamNpcKills' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, NpcKills) == 0x000600, "Member 'APeak53PlayerState_C::NpcKills' has a wrong offset!");
static_assert(offsetof(APeak53PlayerState_C, TagColor) == 0x000618, "Member 'APeak53PlayerState_C::TagColor' has a wrong offset!");

}

