#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VendorComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "S_VendorBuy_structs.hpp"
#include "BP_MasterInventory_classes.hpp"
#include "S_VendorSell_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VendorComponent.BP_VendorComponent_C
// 0x0050 (0x02E0 - 0x0290)
class UBP_VendorComponent_C final : public UBP_MasterInventory_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_VendorComponent_C;               // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        RestockTime;                                       // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStockLimits;                                    // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Restock;                                           // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C6D[0x6];                                     // 0x02A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_VendorBuy>                   BuyList;                                           // 0x02A8(0x0010)(Edit, BlueprintVisible)
	TArray<struct FS_VendorSell>                  SellList;                                          // 0x02B8(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 VenderStock;                                       // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        CurrentRestockTime;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool BuyCostCheck(const struct FS_VendorBuy& BuyListing, class UBP_PlayerInventory_C* PlayerInventory, bool RemoveItems, int32 Amount);
	void BuyVenderItem(const struct FS_VendorBuy& BuyListing, class UBP_PlayerInventory_C* PlayerInventory, int32 Amount);
	void ExecuteUbergraph_BP_VendorComponent(int32 EntryPoint);
	void LoadComponentData(class UBP_SGKSaveGame_C* SaveGame, bool* LoadComplete);
	void ReceiveBeginPlay();
	void RestockCheckTimer();
	void SaveComponentData(class UBP_SGKSaveGame_C* SaveGame);
	void SaveVenderData(class UBP_SGKSaveGame_C* SaveGame);
	void SellVenderItem(const struct FS_VendorSell& SellListing, class UBP_PlayerInventory_C* PlayerInventory, int32 Amount);
	void ServerBuyVenderItem(const struct FS_VendorBuy& VenderBuyListing, class UBP_PlayerInventory_C* PlayerInventory, int32 Amount);
	void ServerSellVenderItem(const struct FS_VendorSell& VenderSellListing, class UBP_PlayerInventory_C* PlayerInventory, int32 Amount);
	bool StockLimitCheck(const struct FS_VendorBuy& BuyListing, bool RemoveStock, int32 Amount, int32* FoundAmount);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VendorComponent_C">();
	}
	static class UBP_VendorComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_VendorComponent_C>();
	}
};
static_assert(alignof(UBP_VendorComponent_C) == 0x000008, "Wrong alignment on UBP_VendorComponent_C");
static_assert(sizeof(UBP_VendorComponent_C) == 0x0002E0, "Wrong size on UBP_VendorComponent_C");
static_assert(offsetof(UBP_VendorComponent_C, UberGraphFrame_BP_VendorComponent_C) == 0x000290, "Member 'UBP_VendorComponent_C::UberGraphFrame_BP_VendorComponent_C' has a wrong offset!");
static_assert(offsetof(UBP_VendorComponent_C, RestockTime) == 0x000298, "Member 'UBP_VendorComponent_C::RestockTime' has a wrong offset!");
static_assert(offsetof(UBP_VendorComponent_C, UseStockLimits) == 0x0002A0, "Member 'UBP_VendorComponent_C::UseStockLimits' has a wrong offset!");
static_assert(offsetof(UBP_VendorComponent_C, Restock) == 0x0002A1, "Member 'UBP_VendorComponent_C::Restock' has a wrong offset!");
static_assert(offsetof(UBP_VendorComponent_C, BuyList) == 0x0002A8, "Member 'UBP_VendorComponent_C::BuyList' has a wrong offset!");
static_assert(offsetof(UBP_VendorComponent_C, SellList) == 0x0002B8, "Member 'UBP_VendorComponent_C::SellList' has a wrong offset!");
static_assert(offsetof(UBP_VendorComponent_C, VenderStock) == 0x0002C8, "Member 'UBP_VendorComponent_C::VenderStock' has a wrong offset!");
static_assert(offsetof(UBP_VendorComponent_C, CurrentRestockTime) == 0x0002D8, "Member 'UBP_VendorComponent_C::CurrentRestockTime' has a wrong offset!");

}

