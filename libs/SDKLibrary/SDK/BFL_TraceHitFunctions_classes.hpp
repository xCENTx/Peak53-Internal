#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFL_TraceHitFunctions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BFL_TraceHitFunctions.BFL_TraceHitFunctions_C
// 0x0000 (0x0028 - 0x0028)
class UBFL_TraceHitFunctions_C final : public UBlueprintFunctionLibrary
{
public:
	static void Hit_Faceindex(const struct FHitResult& Hit, class UObject* __WorldContext, int32* FaceIndex);
	static void Hit_Item(const struct FHitResult& Hit, class UObject* __WorldContext, int32* HitItem);
	static bool Hit_Result_Under_Cursor_byChannel(ETraceTypeQuery TraceChannel, bool bTraceComplex, int32 PlayerIndex, class UObject* __WorldContext, struct FHitResult* HitResult);
	static void Hit_TraceEnd(const struct FHitResult& Hit, class UObject* __WorldContext, struct FVector* TraceEnd);
	static void Hit_TraceStart(const struct FHitResult& Hit, class UObject* __WorldContext, struct FVector* TraceStart);
	static void HitActor(const struct FHitResult& Hit, class UObject* __WorldContext, class AActor** Param_HitActor);
	static void HitBlockingHit(const struct FHitResult& Hit, class UObject* __WorldContext, bool* bBlockingHit);
	static void HitBoneName(const struct FHitResult& Hit, class UObject* __WorldContext, class FName* Param_HitBoneName);
	static void HitComponent(const struct FHitResult& Hit, class UObject* __WorldContext, class UPrimitiveComponent** Param_HitComponent);
	static void HitDistance(const struct FHitResult& Hit, class UObject* __WorldContext, double* Distance);
	static void HitImpactNormal(const struct FHitResult& Hit, class UObject* __WorldContext, struct FVector* ImpactNormal);
	static void HitImpactPoint(const struct FHitResult& Hit, class UObject* __WorldContext, struct FVector* ImpactPoint);
	static void HitLocation(const struct FHitResult& Hit, class UObject* __WorldContext, struct FVector* Location);
	static void HitNormal(const struct FHitResult& Hit, class UObject* __WorldContext, struct FVector* Normal);
	static void HitPhysMat(const struct FHitResult& Hit, class UObject* __WorldContext, class UPhysicalMaterial** PhysMat);
	static void HitTime(const struct FHitResult& Hit, class UObject* __WorldContext, double* Time);
	static void ProjectileTraceForword(class USceneComponent* Target, double Spread, double ProjectileSpeed, class UObject* __WorldContext, struct FVector* Start, struct FVector* LunchVelocity);
	static void ProjectileTraceRight(class USceneComponent* Target, double Spread, double ProjectileSpeed, class UObject* __WorldContext, struct FVector* Start, struct FVector* LunchVelocity);
	static void ProjectileTraceUp(class USceneComponent* Target, double Spread, double ProjectileSpeed, class UObject* __WorldContext, struct FVector* Start, struct FVector* LunchVelocity);
	static void TraceForword(class USceneComponent* Target, double RayLength, class UObject* __WorldContext, struct FVector* Start, struct FVector* End);
	static void TraceRight(class USceneComponent* Target, double RayLength, class UObject* __WorldContext, struct FVector* Start, struct FVector* End);
	static void TraceSpreadForword(class USceneComponent* Target, double RayLength, double Spread, class UObject* __WorldContext, struct FVector* Start, struct FVector* End);
	static void TraceSpreadRight(class USceneComponent* Target, double RayLength, double Spread, class UObject* __WorldContext, struct FVector* Start, struct FVector* End);
	static void TraceSpreadUP(class USceneComponent* Target, double RayLength, double Spread, class UObject* __WorldContext, struct FVector* Start, struct FVector* End);
	static void TraceUp(class USceneComponent* Target, double RayLength, class UObject* __WorldContext, struct FVector* Start, struct FVector* End);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BFL_TraceHitFunctions_C">();
	}
	static class UBFL_TraceHitFunctions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBFL_TraceHitFunctions_C>();
	}
};
static_assert(alignof(UBFL_TraceHitFunctions_C) == 0x000008, "Wrong alignment on UBFL_TraceHitFunctions_C");
static_assert(sizeof(UBFL_TraceHitFunctions_C) == 0x000028, "Wrong size on UBFL_TraceHitFunctions_C");

}

