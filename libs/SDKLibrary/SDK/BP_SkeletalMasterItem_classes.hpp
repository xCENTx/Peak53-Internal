#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkeletalMasterItem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_InvItem_structs.hpp"
#include "E_WeaponSlots_structs.hpp"
#include "E_WorldActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SkeletalMasterItem.BP_SkeletalMasterItem_C
// 0x00C8 (0x0358 - 0x0290)
class ABP_SkeletalMasterItem_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    Item;                                              // 0x02A0(0x0010)(Edit, BlueprintVisible, NoDestructor)
	int32                                         ItemAmount;                                        // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RefreshItem;                                       // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B79[0x3];                                     // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InvItem                             InvItem;                                           // 0x02B8(0x0030)(Edit, BlueprintVisible, Net, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Spawned;                                           // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Dropped;                                           // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          SaveGameLoaded;                                    // 0x02EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B7A[0x5];                                     // 0x02EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SaveSystem_C*                       SaveGame;                                          // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_InvItem                             TempItem;                                          // 0x02F8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class AActor*>                         Attachments;                                       // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          UseDroppedItemDestroyTimer;                        // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B7B[0x7];                                     // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DropDestroyTime;                                   // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          Mesh;                                              // 0x0348(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          AddStartingItems;                                  // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool ActionCheck(TArray<struct FS_WorldAction>& ItemActions, E_WorldActions ActionType);
	void Consume(class UBP_PlayerInventory_C* PlayerInventory);
	void CreateItem(class ABP_GlobalInventoryManager_C* InventoryManager);
	void DropDestroyTimer();
	void EquipClothing(class UBP_PlayerInventory_C* PlayerInventory);
	void EquipWeapon(class UBP_PlayerInventory_C* PlayerInventory);
	void ExecuteUbergraph_BP_SkeletalMasterItem(int32 EntryPoint);
	void Hold(class UBP_PlayerInventory_C* PlayerInventory);
	void Interact(class UBP_PlayerInventory_C* PlayerInventory);
	void InteractActions(class UBP_PlayerInventory_C* PlayerInventory, E_WorldActions Action);
	void ItemDecay();
	void ItemOffsets();
	void Learn(class UBP_PlayerInventory_C* PlayerInventory);
	void LoadItem(class UBP_SGKSaveGame_C* Param_SaveGame);
	void MulticastUpdateMesh(class USkeletalMesh* Param_SkeletalMesh);
	void OnRep_Mesh();
	void Open(class UBP_PlayerInventory_C* PlayerInventory);
	void Pickup(class UBP_PlayerInventory_C* PlayerInventory);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void Reset();
	void SaveNotValid();
	void SGK_AllowInteraction(bool* AllowInteraction);
	void SGK_CodeCheck(const class FText& Code, bool* CodeAccepted);
	bool SGK_DropItem(const struct FS_InvItem& Param_InvItem, bool Param_Dropped, bool Param_Spawned, bool SaveLoaded);
	bool SGK_EndInteraction(class UBP_PlayerInventory_C* PlayerInventory);
	void SGK_GetVerifiedPlayers(TArray<class FText>* VerifiedPlayers);
	bool SGK_Interact(class UBP_PlayerInventory_C* PlayerInventory, E_WorldActions Action);
	void SGK_InteractName(class FText* InteractName);
	void SGK_InvItem(bool* IsItem, struct FS_InvItem* Param_InvItem);
	void SGK_ItemAmount(int32* Amount);
	void SGK_Mesh(class UPrimitiveComponent** Param_Mesh);
	void SGK_PlayerInProximity();
	void SGK_PlayerOutProximity();
	void SGK_PossibleActions(class UBP_PlayerInventory_C* PlayerInventory, bool* ActionsFound, TArray<struct FS_WorldAction>* PossibleActions);
	void SGK_SetVerifiedPlayers(TArray<class FText>& VerifiedPlayers);
	void SGK_TurnedOnEffect(bool TurnedOn);
	bool SGK_UpdateCode(const class FText& Code);
	bool SGK_VerifyPlayer(const class FText& Text);
	void SGKSave(class UBP_SGKSaveGame_C* Save);
	void SpawnAttachments(const struct FS_InvItem& Param_InvItem);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SkeletalMasterItem_C">();
	}
	static class ABP_SkeletalMasterItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SkeletalMasterItem_C>();
	}
};
static_assert(alignof(ABP_SkeletalMasterItem_C) == 0x000008, "Wrong alignment on ABP_SkeletalMasterItem_C");
static_assert(sizeof(ABP_SkeletalMasterItem_C) == 0x000358, "Wrong size on ABP_SkeletalMasterItem_C");
static_assert(offsetof(ABP_SkeletalMasterItem_C, UberGraphFrame) == 0x000290, "Member 'ABP_SkeletalMasterItem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, SkeletalMesh) == 0x000298, "Member 'ABP_SkeletalMasterItem_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, Item) == 0x0002A0, "Member 'ABP_SkeletalMasterItem_C::Item' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, ItemAmount) == 0x0002B0, "Member 'ABP_SkeletalMasterItem_C::ItemAmount' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, RefreshItem) == 0x0002B4, "Member 'ABP_SkeletalMasterItem_C::RefreshItem' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, InvItem) == 0x0002B8, "Member 'ABP_SkeletalMasterItem_C::InvItem' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, Spawned) == 0x0002E8, "Member 'ABP_SkeletalMasterItem_C::Spawned' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, Dropped) == 0x0002E9, "Member 'ABP_SkeletalMasterItem_C::Dropped' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, SaveGameLoaded) == 0x0002EA, "Member 'ABP_SkeletalMasterItem_C::SaveGameLoaded' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, SaveGame) == 0x0002F0, "Member 'ABP_SkeletalMasterItem_C::SaveGame' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, TempItem) == 0x0002F8, "Member 'ABP_SkeletalMasterItem_C::TempItem' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, Attachments) == 0x000328, "Member 'ABP_SkeletalMasterItem_C::Attachments' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, UseDroppedItemDestroyTimer) == 0x000338, "Member 'ABP_SkeletalMasterItem_C::UseDroppedItemDestroyTimer' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, DropDestroyTime) == 0x000340, "Member 'ABP_SkeletalMasterItem_C::DropDestroyTime' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, Mesh) == 0x000348, "Member 'ABP_SkeletalMasterItem_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_SkeletalMasterItem_C, AddStartingItems) == 0x000350, "Member 'ABP_SkeletalMasterItem_C::AddStartingItems' has a wrong offset!");

}

