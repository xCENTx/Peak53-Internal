#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DragonIKPlugin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DragonIKPlugin_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class DragonIKPlugin.DragonIKFootStepsComponent
// 0x01A0 (0x0240 - 0x00A0)
class alignas(0x10) UDragonIKFootStepsComponent final : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnCharacterFootStep;                               // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E1[0x164];                                   // 0x00B0(0x0164)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Read_this;                                         // 0x0214(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E2[0x4];                                     // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Foot_socket;                                       // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Foot_enter_height;                                 // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Foot_exit_height;                                  // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E3[0x8];                                     // 0x0238(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CallFootSteps(class FName bone_name, const struct FTransform& Foot_transform, float Height_difference, const struct FHitResult& Hit_info);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIKFootStepsComponent">();
	}
	static class UDragonIKFootStepsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonIKFootStepsComponent>();
	}
};
static_assert(alignof(UDragonIKFootStepsComponent) == 0x000010, "Wrong alignment on UDragonIKFootStepsComponent");
static_assert(sizeof(UDragonIKFootStepsComponent) == 0x000240, "Wrong size on UDragonIKFootStepsComponent");
static_assert(offsetof(UDragonIKFootStepsComponent, OnCharacterFootStep) == 0x0000A0, "Member 'UDragonIKFootStepsComponent::OnCharacterFootStep' has a wrong offset!");
static_assert(offsetof(UDragonIKFootStepsComponent, Read_this) == 0x000214, "Member 'UDragonIKFootStepsComponent::Read_this' has a wrong offset!");
static_assert(offsetof(UDragonIKFootStepsComponent, Foot_socket) == 0x000220, "Member 'UDragonIKFootStepsComponent::Foot_socket' has a wrong offset!");
static_assert(offsetof(UDragonIKFootStepsComponent, Foot_enter_height) == 0x000230, "Member 'UDragonIKFootStepsComponent::Foot_enter_height' has a wrong offset!");
static_assert(offsetof(UDragonIKFootStepsComponent, Foot_exit_height) == 0x000234, "Member 'UDragonIKFootStepsComponent::Foot_exit_height' has a wrong offset!");

// Class DragonIKPlugin.DragonIKPhysicsComponent
// 0x0350 (0x03F0 - 0x00A0)
class alignas(0x10) UDragonIKPhysicsComponent final : public UActorComponent
{
public:
	uint8                                         Pad_24E6[0x20];                                    // 0x00A0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Physanim_tag_index;                                // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Custom_Root_Bone;                                  // 0x00C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E7[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Individual_bone_selection;                         // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E8[0x20];                                    // 0x00E0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Influence_Stopping_Bones;                          // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDragonData_PhysicsHandleMultiplier> Override_Handle_Strength_Multiplier;               // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E9[0x30];                                    // 0x0120(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Linear_Strength;                                   // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Angular_Strength;                                  // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Linear_Damp;                                       // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Angular_Damp;                                      // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Interpolation_Speed;                               // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Parent_child_ragdoll_state;                        // 0x0164(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24EA[0x3];                                     // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FName>                Parent_Child_Connection_Array;                     // 0x0168(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Use_auto_blending_logic;                           // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24EB[0x3];                                     // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Autoblendalpha;                                    // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24EC[0x1];                                     // 0x01C0(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Modify_physics_states;                             // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24ED[0x2];                                     // 0x01C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Hit_Enable_Speed;                                  // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hit_Disable_Speed;                                 // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hit_delay_time;                                    // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24EE[0x8];                                     // 0x01D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Physanim_Enter_Curve;                              // 0x01D8(0x0088)(Edit, NativeAccessSpecifierPublic)
	bool                                          blend_to_zero;                                     // 0x0260(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24EF[0x18F];                                   // 0x0261(0x018F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CacheSimulationStates();
	void Control_Bone_Handle(class FName bone_name, const struct FTransform& Override_transform, bool Enable);
	void FirstTimeInitialization(class USkeletalMeshComponent* Skeleton_input);
	void Modify_Reset_Bone_Info(const TArray<class FName>& bone_list);
	void OnHitCallback(const struct FHitResult& Hit, class FName Optional_Override_Hit_Bone_Name, struct FVector* Hit_location, struct FVector* Hit_impulse_direction, class FName* Hit_bone_name);
	void PerformActiveRagdoll(float Pelvis_mass_override);
	void ReGrabAllHandles(bool Exit_ragdoll);
	void ReleaseAllHandles(bool Go_ragdoll);
	void SetInterpolation(int32 Inter_value);
	void UpdatePhysanimData(int32 LinearStrength, int32 AngularStrength, int32 LinearDamp, int32 AngularDamp);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIKPhysicsComponent">();
	}
	static class UDragonIKPhysicsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonIKPhysicsComponent>();
	}
};
static_assert(alignof(UDragonIKPhysicsComponent) == 0x000010, "Wrong alignment on UDragonIKPhysicsComponent");
static_assert(sizeof(UDragonIKPhysicsComponent) == 0x0003F0, "Wrong size on UDragonIKPhysicsComponent");
static_assert(offsetof(UDragonIKPhysicsComponent, Physanim_tag_index) == 0x0000C0, "Member 'UDragonIKPhysicsComponent::Physanim_tag_index' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Custom_Root_Bone) == 0x0000C4, "Member 'UDragonIKPhysicsComponent::Custom_Root_Bone' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Individual_bone_selection) == 0x0000D0, "Member 'UDragonIKPhysicsComponent::Individual_bone_selection' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Influence_Stopping_Bones) == 0x000100, "Member 'UDragonIKPhysicsComponent::Influence_Stopping_Bones' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Override_Handle_Strength_Multiplier) == 0x000110, "Member 'UDragonIKPhysicsComponent::Override_Handle_Strength_Multiplier' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Linear_Strength) == 0x000150, "Member 'UDragonIKPhysicsComponent::Linear_Strength' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Angular_Strength) == 0x000154, "Member 'UDragonIKPhysicsComponent::Angular_Strength' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Linear_Damp) == 0x000158, "Member 'UDragonIKPhysicsComponent::Linear_Damp' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Angular_Damp) == 0x00015C, "Member 'UDragonIKPhysicsComponent::Angular_Damp' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Interpolation_Speed) == 0x000160, "Member 'UDragonIKPhysicsComponent::Interpolation_Speed' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Parent_child_ragdoll_state) == 0x000164, "Member 'UDragonIKPhysicsComponent::Parent_child_ragdoll_state' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Parent_Child_Connection_Array) == 0x000168, "Member 'UDragonIKPhysicsComponent::Parent_Child_Connection_Array' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Use_auto_blending_logic) == 0x0001B8, "Member 'UDragonIKPhysicsComponent::Use_auto_blending_logic' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Autoblendalpha) == 0x0001BC, "Member 'UDragonIKPhysicsComponent::Autoblendalpha' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Modify_physics_states) == 0x0001C1, "Member 'UDragonIKPhysicsComponent::Modify_physics_states' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Hit_Enable_Speed) == 0x0001C4, "Member 'UDragonIKPhysicsComponent::Hit_Enable_Speed' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Hit_Disable_Speed) == 0x0001C8, "Member 'UDragonIKPhysicsComponent::Hit_Disable_Speed' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Hit_delay_time) == 0x0001CC, "Member 'UDragonIKPhysicsComponent::Hit_delay_time' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Physanim_Enter_Curve) == 0x0001D8, "Member 'UDragonIKPhysicsComponent::Physanim_Enter_Curve' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, blend_to_zero) == 0x000260, "Member 'UDragonIKPhysicsComponent::blend_to_zero' has a wrong offset!");

// Class DragonIKPlugin.DragonIKPhysicsHolder
// 0x0018 (0x02A8 - 0x0290)
class ADragonIKPhysicsHolder final : public AActor
{
public:
	uint8                                         Pad_24F2[0x10];                                    // 0x0290(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Connected_actor;                                   // 0x02A0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIKPhysicsHolder">();
	}
	static class ADragonIKPhysicsHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADragonIKPhysicsHolder>();
	}
};
static_assert(alignof(ADragonIKPhysicsHolder) == 0x000008, "Wrong alignment on ADragonIKPhysicsHolder");
static_assert(sizeof(ADragonIKPhysicsHolder) == 0x0002A8, "Wrong size on ADragonIKPhysicsHolder");
static_assert(offsetof(ADragonIKPhysicsHolder, Connected_actor) == 0x0002A0, "Member 'ADragonIKPhysicsHolder::Connected_actor' has a wrong offset!");

// Class DragonIKPlugin.DragonIKWeaponPhysicsComponent
// 0x0440 (0x04E0 - 0x00A0)
class UDragonIKWeaponPhysicsComponent final : public UActorComponent
{
public:
	uint8                                         Pad_24F3[0x398];                                   // 0x00A0(0x0398)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Read_this;                                         // 0x0438(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max_Arm_Length_Percent;                            // 0x0440(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Physanim_tag_index;                                // 0x0444(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Linear_Strength;                                   // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Angular_Strength;                                  // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Linear_Damp;                                       // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Angular_Damp;                                      // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Interpolation_Speed;                               // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Unfreeze_speed;                                    // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_grabbing;                                       // 0x0460(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24F4[0x7F];                                    // 0x0461(0x007F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Attach_Hand_Only(class FName Hand_bone, bool Arm_position_recalibrate);
	void FirstTimeInitialization(class USkeletalMeshComponent* Skeleton_input);
	void Freeze_Elbows_Function(class FName Hand_bone);
	void Grab_Weapon(class UPrimitiveComponent* Weapon_mesh_input, class FName Grabbed_bone, bool Simulate_physics, bool Use_gravity);
	void Release_Hand_Only(class FName Hand_bone);
	void Release_Hand_Plus_Override(class FName Hand_bone, const struct FTransform& Hand_transform, bool Override_hand_location, bool Override_Hand_Rotation);
	void Release_Weapon(bool Should_simulatephysics, bool Use_gravity, bool bKeep_Attachment);
	void Unfreeze_Elbows_Function(class FName Hand_bone);
	void Weapon_Transform_Override(const struct FTransform& Weapon_Transform, bool bShould_Override_Weapon_Transform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIKWeaponPhysicsComponent">();
	}
	static class UDragonIKWeaponPhysicsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonIKWeaponPhysicsComponent>();
	}
};
static_assert(alignof(UDragonIKWeaponPhysicsComponent) == 0x000008, "Wrong alignment on UDragonIKWeaponPhysicsComponent");
static_assert(sizeof(UDragonIKWeaponPhysicsComponent) == 0x0004E0, "Wrong size on UDragonIKWeaponPhysicsComponent");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Read_this) == 0x000438, "Member 'UDragonIKWeaponPhysicsComponent::Read_this' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Max_Arm_Length_Percent) == 0x000440, "Member 'UDragonIKWeaponPhysicsComponent::Max_Arm_Length_Percent' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Physanim_tag_index) == 0x000444, "Member 'UDragonIKWeaponPhysicsComponent::Physanim_tag_index' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Linear_Strength) == 0x000448, "Member 'UDragonIKWeaponPhysicsComponent::Linear_Strength' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Angular_Strength) == 0x00044C, "Member 'UDragonIKWeaponPhysicsComponent::Angular_Strength' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Linear_Damp) == 0x000450, "Member 'UDragonIKWeaponPhysicsComponent::Linear_Damp' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Angular_Damp) == 0x000454, "Member 'UDragonIKWeaponPhysicsComponent::Angular_Damp' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Interpolation_Speed) == 0x000458, "Member 'UDragonIKWeaponPhysicsComponent::Interpolation_Speed' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Unfreeze_speed) == 0x00045C, "Member 'UDragonIKWeaponPhysicsComponent::Unfreeze_speed' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Is_grabbing) == 0x000460, "Member 'UDragonIKWeaponPhysicsComponent::Is_grabbing' has a wrong offset!");

// Class DragonIKPlugin.DragonIK_Library
// 0x0008 (0x0030 - 0x0028)
class UDragonIK_Library final : public UObject
{
public:
	uint8                                         Pad_24FA[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FRotator CustomLookRotation(const struct FVector& LookAt, const struct FVector& UpDirection);
	static struct FRotator LookAtRotation_V3(const struct FVector& Source, const struct FVector& Target, const struct FVector& UpVector);
	static struct FRotator LookAtVector_V2(const struct FVector& Source_Location, const struct FVector& LookAt, const struct FVector& UpDirection);
	static struct FTransform QuatLookXatLocation(const struct FTransform& LookAtFromTransform, const struct FVector& LookAtTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIK_Library">();
	}
	static class UDragonIK_Library* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonIK_Library>();
	}
};
static_assert(alignof(UDragonIK_Library) == 0x000008, "Wrong alignment on UDragonIK_Library");
static_assert(sizeof(UDragonIK_Library) == 0x000030, "Wrong size on UDragonIK_Library");

}

