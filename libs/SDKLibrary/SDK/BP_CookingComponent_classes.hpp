#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CookingComponent

#include "Basic.hpp"

#include "S_CraftingCost_structs.hpp"
#include "Engine_structs.hpp"
#include "S_CookingSlot_structs.hpp"
#include "S_InvItem_structs.hpp"
#include "E_CookingType_structs.hpp"
#include "BP_MasterInventory_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CookingComponent.BP_CookingComponent_C
// 0x00C0 (0x0350 - 0x0290)
class UBP_CookingComponent_C final : public UBP_MasterInventory_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_CookingComponent_C;              // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	E_CookingType                                 CookingType;                                       // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C3[0x3];                                     // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfCookingSlots;                              // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequireFuel;                                       // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C4[0x3];                                     // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfFuelSlots;                                 // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FDataTableRowHandle>            FuelItems;                                         // 0x02A8(0x0010)(Edit, BlueprintVisible)
	bool                                          SwitchedOn;                                        // 0x02B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C5[0x7];                                     // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           FuelTimer;                                         // 0x02C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ConvertTimer;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         DummySlots;                                        // 0x02D0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C6[0x4];                                     // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_CookingSlot>                 CookingSlots;                                      // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   CookingUITitle;                                    // 0x02E8(0x0018)(Edit, BlueprintVisible)
	TArray<int32>                                 PausedIndexs;                                      // 0x0300(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FS_InvItem                             ReturnFuelItem;                                    // 0x0310(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<struct FS_CraftingCost>                FuelStartingItems;                                 // 0x0340(0x0010)(Edit, BlueprintVisible)

public:
	void Add_Burnt_Fuel_Item();
	void AddReturnedItems(const struct FS_CookingSlot& CookingSlot);
	void AddStartingFuelItems();
	void AddStartingItems(bool* Return);
	void BurnFuel();
	void ClearCookingItem(const struct FS_InvSlot& InvSlot, struct FS_CookingSlot* CookingSlot);
	void ClientPauseAllCookingSlotTimer();
	void ClientResumeAllConvertSlots();
	void ConstructContainsSlots();
	void ConstructCookingSlots();
	void ConstructSlots();
	void ExecuteUbergraph_BP_CookingComponent(int32 EntryPoint);
	bool FreeSlotCheck(const struct FS_CraftingCost& Item, struct FS_InvSlot* InvSlot);
	bool GetContentsSlots(TArray<struct FS_InvSlot>* ContentsSlots);
	bool GetCookingInvSlots(TArray<struct FS_InvSlot>* Param_CookingSlots);
	bool GetFuelSlots(TArray<struct FS_InvSlot>* FuelSlots);
	void IsCookingSlot(int32 Param_Index, bool* Param_IsCookingSlot);
	void IsFuelItem(class FName ItemId, bool* Param_IsFuelItem);
	void IsIndexFuelSlot(int32 Param_Index, bool* IsFuelSlot);
	void LoadComponentData(class UBP_SGKSaveGame_C* SaveGame, bool* LoadComplete);
	void LoadCookingData(const struct FS_StorageSave& S_StorageSave);
	void LoadInventoryData(const struct FS_StorageSave& S_StorageSave);
	void MoveCookingItem(const struct FS_InvSlot& ContentElement, const struct FS_InvSlot& CookingSlot);
	void UnPauseSingleSlot(int32 Param_Index, bool Pause);
	void PauseAllPlayerCookingSlots();
	void ReceiveBeginPlay();
	void RestartPlayerCookingSlot(const struct FS_CookingSlot& CookingSlot);
	void ResumeAllPlayerCookingSlots();
	void SaveComponentData(class UBP_SGKSaveGame_C* SaveGame);
	void SaveCookingData(class UBP_SGKSaveGame_C* SaveGame);
	void ServerBurnFuel(double Time);
	void ServerConvertTimerCheck();
	void ServerPauseBurnFuel();
	void ServerStartFuelBurn();
	void ServerStopBurningFuel();
	bool SetNewCookingItem(const struct FS_InvSlot& InvSlot, struct FS_CookingSlot* CookingSlot);
	void SetNewCookingSlotItem(const struct FS_InvSlot& InvSlot, const struct FS_InvItem& Item, bool SpecialSlot);
	void SetSwitchedOn();
	void SGK_ItemMovedInInventory();
	void SGK_ToggleComponent();
	void SGK_UpdateSpecialSlot(const struct FS_InvSlot& InvSlot);
	void StartPlayerCookingSlot(const struct FS_CookingSlot& CookingSlot);
	void TurnOn();
	void UpdateCookingItems();
	void UpdateCookingTimes();
	bool UpdateFuelBurn();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CookingComponent_C">();
	}
	static class UBP_CookingComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CookingComponent_C>();
	}
};
static_assert(alignof(UBP_CookingComponent_C) == 0x000008, "Wrong alignment on UBP_CookingComponent_C");
static_assert(sizeof(UBP_CookingComponent_C) == 0x000350, "Wrong size on UBP_CookingComponent_C");
static_assert(offsetof(UBP_CookingComponent_C, UberGraphFrame_BP_CookingComponent_C) == 0x000290, "Member 'UBP_CookingComponent_C::UberGraphFrame_BP_CookingComponent_C' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, CookingType) == 0x000298, "Member 'UBP_CookingComponent_C::CookingType' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, NumberOfCookingSlots) == 0x00029C, "Member 'UBP_CookingComponent_C::NumberOfCookingSlots' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, RequireFuel) == 0x0002A0, "Member 'UBP_CookingComponent_C::RequireFuel' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, NumberOfFuelSlots) == 0x0002A4, "Member 'UBP_CookingComponent_C::NumberOfFuelSlots' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, FuelItems) == 0x0002A8, "Member 'UBP_CookingComponent_C::FuelItems' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, SwitchedOn) == 0x0002B8, "Member 'UBP_CookingComponent_C::SwitchedOn' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, FuelTimer) == 0x0002C0, "Member 'UBP_CookingComponent_C::FuelTimer' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, ConvertTimer) == 0x0002C8, "Member 'UBP_CookingComponent_C::ConvertTimer' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, DummySlots) == 0x0002D0, "Member 'UBP_CookingComponent_C::DummySlots' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, CookingSlots) == 0x0002D8, "Member 'UBP_CookingComponent_C::CookingSlots' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, CookingUITitle) == 0x0002E8, "Member 'UBP_CookingComponent_C::CookingUITitle' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, PausedIndexs) == 0x000300, "Member 'UBP_CookingComponent_C::PausedIndexs' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, ReturnFuelItem) == 0x000310, "Member 'UBP_CookingComponent_C::ReturnFuelItem' has a wrong offset!");
static_assert(offsetof(UBP_CookingComponent_C, FuelStartingItems) == 0x000340, "Member 'UBP_CookingComponent_C::FuelStartingItems' has a wrong offset!");

}

