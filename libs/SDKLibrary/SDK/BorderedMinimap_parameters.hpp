#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BorderedMinimap

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BorderedMinimap.BorderedMinimap_C.ExecuteUbergraph_BorderedMinimap
// 0x00A0 (0x00A0 - 0x0000)
struct BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_1; // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3859[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UMapViewComponent* MapViewComp)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_385A[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0020(0x0040)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_385B[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_DeltaSeconds;                   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_385C[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_385D[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapViewComponent*                      K2Node_CustomEvent_MapViewComp;                    // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_TickZoom_DeltaSeconds_ImplicitCast;       // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap) == 0x000008, "Wrong alignment on BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap");
static_assert(sizeof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap) == 0x0000A0, "Wrong size on BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, EntryPoint) == 0x000000, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::EntryPoint' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, Temp_bool_IsClosed_Variable) == 0x000005, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x000006, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_1) == 0x000007, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_1' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, Temp_bool_IsClosed_Variable_1) == 0x000008, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, Temp_bool_Has_Been_Initd_Variable) == 0x00001C, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, Temp_bool_Has_Been_Initd_Variable_1) == 0x00001D, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, K2Node_Event_MyGeometry) == 0x000020, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, K2Node_Event_InDeltaTime) == 0x000060, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, K2Node_CustomEvent_DeltaSeconds) == 0x000068, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::K2Node_CustomEvent_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, Temp_bool_IsClosed_Variable_2) == 0x000070, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000078, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, Temp_bool_Has_Been_Initd_Variable_2) == 0x000088, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, K2Node_CustomEvent_MapViewComp) == 0x000090, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::K2Node_CustomEvent_MapViewComp' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap, CallFunc_TickZoom_DeltaSeconds_ImplicitCast) == 0x000098, "Member 'BorderedMinimap_C_ExecuteUbergraph_BorderedMinimap::CallFunc_TickZoom_DeltaSeconds_ImplicitCast' has a wrong offset!");

// Function BorderedMinimap.BorderedMinimap_C.InitBorder
// 0x0004 (0x0004 - 0x0000)
struct BorderedMinimap_C_InitBorder final
{
public:
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BorderedMinimap_C_InitBorder) == 0x000004, "Wrong alignment on BorderedMinimap_C_InitBorder");
static_assert(sizeof(BorderedMinimap_C_InitBorder) == 0x000004, "Wrong size on BorderedMinimap_C_InitBorder");
static_assert(offsetof(BorderedMinimap_C_InitBorder, CallFunc_Conv_BoolToInt_ReturnValue) == 0x000000, "Member 'BorderedMinimap_C_InitBorder::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");

// Function BorderedMinimap.BorderedMinimap_C.InitButtons
// 0x0006 (0x0006 - 0x0000)
struct BorderedMinimap_C_InitButtons final
{
public:
	bool                                          bShowButtons;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BorderedMinimap_C_InitButtons) == 0x000001, "Wrong alignment on BorderedMinimap_C_InitButtons");
static_assert(sizeof(BorderedMinimap_C_InitButtons) == 0x000006, "Wrong size on BorderedMinimap_C_InitButtons");
static_assert(offsetof(BorderedMinimap_C_InitButtons, bShowButtons) == 0x000000, "Member 'BorderedMinimap_C_InitButtons::bShowButtons' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_InitButtons, Temp_bool_Variable) == 0x000001, "Member 'BorderedMinimap_C_InitButtons::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_InitButtons, Temp_byte_Variable) == 0x000002, "Member 'BorderedMinimap_C_InitButtons::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_InitButtons, Temp_byte_Variable_1) == 0x000003, "Member 'BorderedMinimap_C_InitButtons::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_InitButtons, K2Node_Select_Default) == 0x000004, "Member 'BorderedMinimap_C_InitButtons::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_InitButtons, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'BorderedMinimap_C_InitButtons::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BorderedMinimap.BorderedMinimap_C.OnViewChanged_Event_0
// 0x0008 (0x0008 - 0x0000)
struct BorderedMinimap_C_OnViewChanged_Event_0 final
{
public:
	class UMapViewComponent*                      MapViewComp;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BorderedMinimap_C_OnViewChanged_Event_0) == 0x000008, "Wrong alignment on BorderedMinimap_C_OnViewChanged_Event_0");
static_assert(sizeof(BorderedMinimap_C_OnViewChanged_Event_0) == 0x000008, "Wrong size on BorderedMinimap_C_OnViewChanged_Event_0");
static_assert(offsetof(BorderedMinimap_C_OnViewChanged_Event_0, MapViewComp) == 0x000000, "Member 'BorderedMinimap_C_OnViewChanged_Event_0::MapViewComp' has a wrong offset!");

// Function BorderedMinimap.BorderedMinimap_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BorderedMinimap_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BorderedMinimap_C_PreConstruct) == 0x000001, "Wrong alignment on BorderedMinimap_C_PreConstruct");
static_assert(sizeof(BorderedMinimap_C_PreConstruct) == 0x000001, "Wrong size on BorderedMinimap_C_PreConstruct");
static_assert(offsetof(BorderedMinimap_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BorderedMinimap_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BorderedMinimap.BorderedMinimap_C.Tick
// 0x0048 (0x0048 - 0x0000)
struct BorderedMinimap_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BorderedMinimap_C_Tick) == 0x000008, "Wrong alignment on BorderedMinimap_C_Tick");
static_assert(sizeof(BorderedMinimap_C_Tick) == 0x000048, "Wrong size on BorderedMinimap_C_Tick");
static_assert(offsetof(BorderedMinimap_C_Tick, MyGeometry) == 0x000000, "Member 'BorderedMinimap_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_Tick, InDeltaTime) == 0x000040, "Member 'BorderedMinimap_C_Tick::InDeltaTime' has a wrong offset!");

// Function BorderedMinimap.BorderedMinimap_C.TickBorder
// 0x000C (0x000C - 0x0000)
struct BorderedMinimap_C_TickBorder final
{
public:
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_385E[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetViewYaw_Yaw;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetViewYaw_WorldYaw_ImplicitCast;         // 0x0008(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BorderedMinimap_C_TickBorder) == 0x000004, "Wrong alignment on BorderedMinimap_C_TickBorder");
static_assert(sizeof(BorderedMinimap_C_TickBorder) == 0x00000C, "Wrong size on BorderedMinimap_C_TickBorder");
static_assert(offsetof(BorderedMinimap_C_TickBorder, CallFunc_IsVisible_ReturnValue) == 0x000000, "Member 'BorderedMinimap_C_TickBorder::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_TickBorder, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BorderedMinimap_C_TickBorder::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_TickBorder, CallFunc_GetViewYaw_Yaw) == 0x000004, "Member 'BorderedMinimap_C_TickBorder::CallFunc_GetViewYaw_Yaw' has a wrong offset!");
static_assert(offsetof(BorderedMinimap_C_TickBorder, CallFunc_GetViewYaw_WorldYaw_ImplicitCast) == 0x000008, "Member 'BorderedMinimap_C_TickBorder::CallFunc_GetViewYaw_WorldYaw_ImplicitCast' has a wrong offset!");

// Function BorderedMinimap.BorderedMinimap_C.TickZoom
// 0x0008 (0x0008 - 0x0000)
struct BorderedMinimap_C_TickZoom final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BorderedMinimap_C_TickZoom) == 0x000008, "Wrong alignment on BorderedMinimap_C_TickZoom");
static_assert(sizeof(BorderedMinimap_C_TickZoom) == 0x000008, "Wrong size on BorderedMinimap_C_TickZoom");
static_assert(offsetof(BorderedMinimap_C_TickZoom, DeltaSeconds) == 0x000000, "Member 'BorderedMinimap_C_TickZoom::DeltaSeconds' has a wrong offset!");

}

