#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterSniperWeapon

#include "Basic.hpp"

#include "S_FOVSetting_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_MasterRangeWeapon_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterSniperWeapon.BP_MasterSniperWeapon_C
// 0x0090 (0x0EA0 - 0x0E10)
class ABP_MasterSniperWeapon_C final : public ABP_MasterRangeWeapon_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MasterSniperWeapon_C;            // 0x0E10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Timeline_NewTrack_0_1E7657D143CE176562F5EC89530FC862; // 0x0E18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_1E7657D143CE176562F5EC89530FC862; // 0x0E1C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40E1[0x3];                                     // 0x0E1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x0E20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ScopeClass;                                        // 0x0E28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Scope_AttachOffset;                                // 0x0E30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZAttachOffset;                                     // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MagnifiedScope_C*                   ScopeRef;                                          // 0x0E50(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          MagnifiedScopeDisabled;                            // 0x0E58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40E2[0x7];                                     // 0x0E59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_FOVSetting>                  SniperZoomFOVs;                                    // 0x0E60(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SniperZoomStartingFOV;                             // 0x0E70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40E3[0x4];                                     // 0x0E74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       Current_Camera;                                    // 0x0E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FS_FOVSetting                          SniperZoomTargetFOV;                               // 0x0E80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentZoomIndex;                                  // 0x0E90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ClientExitAim();
	void CreateScope();
	void EndZoom();
	void ExecuteUbergraph_BP_MasterSniperWeapon(int32 EntryPoint);
	void Get_Sighted_FOV(double* Param_SightTPFOV);
	void HandleZoom(bool bZoomIn);
	void ReceiveBeginPlay();
	void Select_Zoom_FOV(bool bZoomIn, bool* bDoZoom);
	void SGK_ClientSecondaryAction(bool KeyDown);
	void SniperZoomIn();
	void SniperZoomOut();
	void StopZoom();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void Update_Owner_Visibility(bool bHideOwner);
	void ZoomToggle();

	void GetLookSensitivityMultiplier(double* Multiplier) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterSniperWeapon_C">();
	}
	static class ABP_MasterSniperWeapon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MasterSniperWeapon_C>();
	}
};
static_assert(alignof(ABP_MasterSniperWeapon_C) == 0x000010, "Wrong alignment on ABP_MasterSniperWeapon_C");
static_assert(sizeof(ABP_MasterSniperWeapon_C) == 0x000EA0, "Wrong size on ABP_MasterSniperWeapon_C");
static_assert(offsetof(ABP_MasterSniperWeapon_C, UberGraphFrame_BP_MasterSniperWeapon_C) == 0x000E10, "Member 'ABP_MasterSniperWeapon_C::UberGraphFrame_BP_MasterSniperWeapon_C' has a wrong offset!");
static_assert(offsetof(ABP_MasterSniperWeapon_C, Timeline_NewTrack_0_1E7657D143CE176562F5EC89530FC862) == 0x000E18, "Member 'ABP_MasterSniperWeapon_C::Timeline_NewTrack_0_1E7657D143CE176562F5EC89530FC862' has a wrong offset!");
static_assert(offsetof(ABP_MasterSniperWeapon_C, Timeline__Direction_1E7657D143CE176562F5EC89530FC862) == 0x000E1C, "Member 'ABP_MasterSniperWeapon_C::Timeline__Direction_1E7657D143CE176562F5EC89530FC862' has a wrong offset!");
static_assert(offsetof(ABP_MasterSniperWeapon_C, Timeline) == 0x000E20, "Member 'ABP_MasterSniperWeapon_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_MasterSniperWeapon_C, ScopeClass) == 0x000E28, "Member 'ABP_MasterSniperWeapon_C::ScopeClass' has a wrong offset!");
static_assert(offsetof(ABP_MasterSniperWeapon_C, Scope_AttachOffset) == 0x000E30, "Member 'ABP_MasterSniperWeapon_C::Scope_AttachOffset' has a wrong offset!");
static_assert(offsetof(ABP_MasterSniperWeapon_C, ZAttachOffset) == 0x000E48, "Member 'ABP_MasterSniperWeapon_C::ZAttachOffset' has a wrong offset!");
static_assert(offsetof(ABP_MasterSniperWeapon_C, ScopeRef) == 0x000E50, "Member 'ABP_MasterSniperWeapon_C::ScopeRef' has a wrong offset!");
static_assert(offsetof(ABP_MasterSniperWeapon_C, MagnifiedScopeDisabled) == 0x000E58, "Member 'ABP_MasterSniperWeapon_C::MagnifiedScopeDisabled' has a wrong offset!");
static_assert(offsetof(ABP_MasterSniperWeapon_C, SniperZoomFOVs) == 0x000E60, "Member 'ABP_MasterSniperWeapon_C::SniperZoomFOVs' has a wrong offset!");
static_assert(offsetof(ABP_MasterSniperWeapon_C, SniperZoomStartingFOV) == 0x000E70, "Member 'ABP_MasterSniperWeapon_C::SniperZoomStartingFOV' has a wrong offset!");
static_assert(offsetof(ABP_MasterSniperWeapon_C, Current_Camera) == 0x000E78, "Member 'ABP_MasterSniperWeapon_C::Current_Camera' has a wrong offset!");
static_assert(offsetof(ABP_MasterSniperWeapon_C, SniperZoomTargetFOV) == 0x000E80, "Member 'ABP_MasterSniperWeapon_C::SniperZoomTargetFOV' has a wrong offset!");
static_assert(offsetof(ABP_MasterSniperWeapon_C, CurrentZoomIndex) == 0x000E90, "Member 'ABP_MasterSniperWeapon_C::CurrentZoomIndex' has a wrong offset!");

}

