#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SGKGameInstanceInterface

#include "Basic.hpp"

#include "E_SoundVolumes_structs.hpp"


namespace SDK::Params
{

// Function BP_SGKGameInstanceInterface.BP_SGKGameInstanceInterface_C.SGK AimedSense
// 0x0008 (0x0008 - 0x0000)
struct BP_SGKGameInstanceInterface_C_SGK_AimedSense final
{
public:
	double                                        AimedSense;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKGameInstanceInterface_C_SGK_AimedSense) == 0x000008, "Wrong alignment on BP_SGKGameInstanceInterface_C_SGK_AimedSense");
static_assert(sizeof(BP_SGKGameInstanceInterface_C_SGK_AimedSense) == 0x000008, "Wrong size on BP_SGKGameInstanceInterface_C_SGK_AimedSense");
static_assert(offsetof(BP_SGKGameInstanceInterface_C_SGK_AimedSense, AimedSense) == 0x000000, "Member 'BP_SGKGameInstanceInterface_C_SGK_AimedSense::AimedSense' has a wrong offset!");

// Function BP_SGKGameInstanceInterface.BP_SGKGameInstanceInterface_C.SGK GetLoadSaveGame
// 0x0001 (0x0001 - 0x0000)
struct BP_SGKGameInstanceInterface_C_SGK_GetLoadSaveGame final
{
public:
	bool                                          LoadSaveGame;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKGameInstanceInterface_C_SGK_GetLoadSaveGame) == 0x000001, "Wrong alignment on BP_SGKGameInstanceInterface_C_SGK_GetLoadSaveGame");
static_assert(sizeof(BP_SGKGameInstanceInterface_C_SGK_GetLoadSaveGame) == 0x000001, "Wrong size on BP_SGKGameInstanceInterface_C_SGK_GetLoadSaveGame");
static_assert(offsetof(BP_SGKGameInstanceInterface_C_SGK_GetLoadSaveGame, LoadSaveGame) == 0x000000, "Member 'BP_SGKGameInstanceInterface_C_SGK_GetLoadSaveGame::LoadSaveGame' has a wrong offset!");

// Function BP_SGKGameInstanceInterface.BP_SGKGameInstanceInterface_C.SGK GetMenuOpenedLevel
// 0x0001 (0x0001 - 0x0000)
struct BP_SGKGameInstanceInterface_C_SGK_GetMenuOpenedLevel final
{
public:
	bool                                          MenuOpenedLevel;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKGameInstanceInterface_C_SGK_GetMenuOpenedLevel) == 0x000001, "Wrong alignment on BP_SGKGameInstanceInterface_C_SGK_GetMenuOpenedLevel");
static_assert(sizeof(BP_SGKGameInstanceInterface_C_SGK_GetMenuOpenedLevel) == 0x000001, "Wrong size on BP_SGKGameInstanceInterface_C_SGK_GetMenuOpenedLevel");
static_assert(offsetof(BP_SGKGameInstanceInterface_C_SGK_GetMenuOpenedLevel, MenuOpenedLevel) == 0x000000, "Member 'BP_SGKGameInstanceInterface_C_SGK_GetMenuOpenedLevel::MenuOpenedLevel' has a wrong offset!");

// Function BP_SGKGameInstanceInterface.BP_SGKGameInstanceInterface_C.SGK GetSaveGameSlotName
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKGameInstanceInterface_C_SGK_GetSaveGameSlotName final
{
public:
	class FString                                 SaveGameSlotName;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKGameInstanceInterface_C_SGK_GetSaveGameSlotName) == 0x000008, "Wrong alignment on BP_SGKGameInstanceInterface_C_SGK_GetSaveGameSlotName");
static_assert(sizeof(BP_SGKGameInstanceInterface_C_SGK_GetSaveGameSlotName) == 0x000010, "Wrong size on BP_SGKGameInstanceInterface_C_SGK_GetSaveGameSlotName");
static_assert(offsetof(BP_SGKGameInstanceInterface_C_SGK_GetSaveGameSlotName, SaveGameSlotName) == 0x000000, "Member 'BP_SGKGameInstanceInterface_C_SGK_GetSaveGameSlotName::SaveGameSlotName' has a wrong offset!");

// Function BP_SGKGameInstanceInterface.BP_SGKGameInstanceInterface_C.SGK MouseSense
// 0x0008 (0x0008 - 0x0000)
struct BP_SGKGameInstanceInterface_C_SGK_MouseSense final
{
public:
	double                                        MouseSense;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKGameInstanceInterface_C_SGK_MouseSense) == 0x000008, "Wrong alignment on BP_SGKGameInstanceInterface_C_SGK_MouseSense");
static_assert(sizeof(BP_SGKGameInstanceInterface_C_SGK_MouseSense) == 0x000008, "Wrong size on BP_SGKGameInstanceInterface_C_SGK_MouseSense");
static_assert(offsetof(BP_SGKGameInstanceInterface_C_SGK_MouseSense, MouseSense) == 0x000000, "Member 'BP_SGKGameInstanceInterface_C_SGK_MouseSense::MouseSense' has a wrong offset!");

// Function BP_SGKGameInstanceInterface.BP_SGKGameInstanceInterface_C.SGK Options Save
// 0x0008 (0x0008 - 0x0000)
struct BP_SGKGameInstanceInterface_C_SGK_Options_Save final
{
public:
	class UBP_SGKSettingsSaveData_C*              Settings;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKGameInstanceInterface_C_SGK_Options_Save) == 0x000008, "Wrong alignment on BP_SGKGameInstanceInterface_C_SGK_Options_Save");
static_assert(sizeof(BP_SGKGameInstanceInterface_C_SGK_Options_Save) == 0x000008, "Wrong size on BP_SGKGameInstanceInterface_C_SGK_Options_Save");
static_assert(offsetof(BP_SGKGameInstanceInterface_C_SGK_Options_Save, Settings) == 0x000000, "Member 'BP_SGKGameInstanceInterface_C_SGK_Options_Save::Settings' has a wrong offset!");

// Function BP_SGKGameInstanceInterface.BP_SGKGameInstanceInterface_C.SGK SetAimedSense
// 0x0008 (0x0008 - 0x0000)
struct BP_SGKGameInstanceInterface_C_SGK_SetAimedSense final
{
public:
	double                                        AimedSense;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKGameInstanceInterface_C_SGK_SetAimedSense) == 0x000008, "Wrong alignment on BP_SGKGameInstanceInterface_C_SGK_SetAimedSense");
static_assert(sizeof(BP_SGKGameInstanceInterface_C_SGK_SetAimedSense) == 0x000008, "Wrong size on BP_SGKGameInstanceInterface_C_SGK_SetAimedSense");
static_assert(offsetof(BP_SGKGameInstanceInterface_C_SGK_SetAimedSense, AimedSense) == 0x000000, "Member 'BP_SGKGameInstanceInterface_C_SGK_SetAimedSense::AimedSense' has a wrong offset!");

// Function BP_SGKGameInstanceInterface.BP_SGKGameInstanceInterface_C.SGK SetLoadSaveGame
// 0x0001 (0x0001 - 0x0000)
struct BP_SGKGameInstanceInterface_C_SGK_SetLoadSaveGame final
{
public:
	bool                                          LoadSaveGame;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKGameInstanceInterface_C_SGK_SetLoadSaveGame) == 0x000001, "Wrong alignment on BP_SGKGameInstanceInterface_C_SGK_SetLoadSaveGame");
static_assert(sizeof(BP_SGKGameInstanceInterface_C_SGK_SetLoadSaveGame) == 0x000001, "Wrong size on BP_SGKGameInstanceInterface_C_SGK_SetLoadSaveGame");
static_assert(offsetof(BP_SGKGameInstanceInterface_C_SGK_SetLoadSaveGame, LoadSaveGame) == 0x000000, "Member 'BP_SGKGameInstanceInterface_C_SGK_SetLoadSaveGame::LoadSaveGame' has a wrong offset!");

// Function BP_SGKGameInstanceInterface.BP_SGKGameInstanceInterface_C.SGK SetMenuOpenedLevel
// 0x0001 (0x0001 - 0x0000)
struct BP_SGKGameInstanceInterface_C_SGK_SetMenuOpenedLevel final
{
public:
	bool                                          MenuOpenedLevel;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKGameInstanceInterface_C_SGK_SetMenuOpenedLevel) == 0x000001, "Wrong alignment on BP_SGKGameInstanceInterface_C_SGK_SetMenuOpenedLevel");
static_assert(sizeof(BP_SGKGameInstanceInterface_C_SGK_SetMenuOpenedLevel) == 0x000001, "Wrong size on BP_SGKGameInstanceInterface_C_SGK_SetMenuOpenedLevel");
static_assert(offsetof(BP_SGKGameInstanceInterface_C_SGK_SetMenuOpenedLevel, MenuOpenedLevel) == 0x000000, "Member 'BP_SGKGameInstanceInterface_C_SGK_SetMenuOpenedLevel::MenuOpenedLevel' has a wrong offset!");

// Function BP_SGKGameInstanceInterface.BP_SGKGameInstanceInterface_C.SGK SetMouseSense
// 0x0008 (0x0008 - 0x0000)
struct BP_SGKGameInstanceInterface_C_SGK_SetMouseSense final
{
public:
	double                                        MouseSense;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKGameInstanceInterface_C_SGK_SetMouseSense) == 0x000008, "Wrong alignment on BP_SGKGameInstanceInterface_C_SGK_SetMouseSense");
static_assert(sizeof(BP_SGKGameInstanceInterface_C_SGK_SetMouseSense) == 0x000008, "Wrong size on BP_SGKGameInstanceInterface_C_SGK_SetMouseSense");
static_assert(offsetof(BP_SGKGameInstanceInterface_C_SGK_SetMouseSense, MouseSense) == 0x000000, "Member 'BP_SGKGameInstanceInterface_C_SGK_SetMouseSense::MouseSense' has a wrong offset!");

// Function BP_SGKGameInstanceInterface.BP_SGKGameInstanceInterface_C.SGK SetSaveGameSlotName
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKGameInstanceInterface_C_SGK_SetSaveGameSlotName final
{
public:
	class FString                                 SaveGameSlotName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKGameInstanceInterface_C_SGK_SetSaveGameSlotName) == 0x000008, "Wrong alignment on BP_SGKGameInstanceInterface_C_SGK_SetSaveGameSlotName");
static_assert(sizeof(BP_SGKGameInstanceInterface_C_SGK_SetSaveGameSlotName) == 0x000010, "Wrong size on BP_SGKGameInstanceInterface_C_SGK_SetSaveGameSlotName");
static_assert(offsetof(BP_SGKGameInstanceInterface_C_SGK_SetSaveGameSlotName, SaveGameSlotName) == 0x000000, "Member 'BP_SGKGameInstanceInterface_C_SGK_SetSaveGameSlotName::SaveGameSlotName' has a wrong offset!");

// Function BP_SGKGameInstanceInterface.BP_SGKGameInstanceInterface_C.SGK SetVolume
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKGameInstanceInterface_C_SGK_SetVolume final
{
public:
	E_SoundVolumes                                Sound;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36CC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Volume;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKGameInstanceInterface_C_SGK_SetVolume) == 0x000008, "Wrong alignment on BP_SGKGameInstanceInterface_C_SGK_SetVolume");
static_assert(sizeof(BP_SGKGameInstanceInterface_C_SGK_SetVolume) == 0x000010, "Wrong size on BP_SGKGameInstanceInterface_C_SGK_SetVolume");
static_assert(offsetof(BP_SGKGameInstanceInterface_C_SGK_SetVolume, Sound) == 0x000000, "Member 'BP_SGKGameInstanceInterface_C_SGK_SetVolume::Sound' has a wrong offset!");
static_assert(offsetof(BP_SGKGameInstanceInterface_C_SGK_SetVolume, Volume) == 0x000008, "Member 'BP_SGKGameInstanceInterface_C_SGK_SetVolume::Volume' has a wrong offset!");

}

