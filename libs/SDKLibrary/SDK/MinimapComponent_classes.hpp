#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinimapComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "MinimapType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "MinimapRotation_structs.hpp"
#include "MinimapStyle_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass MinimapComponent.MinimapComponent_C
// 0x02A8 (0x0520 - 0x0278)
class UMinimapComponent_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 BorderImage;                                       // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                MainBorder;                                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           MainCanvas;                                        // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MinimapImage;                                      // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MyLocationImage;                                   // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayMother;                                     // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               TheOverlay;                                        // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ViewAngleImage;                                    // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class APawn*                                  OwnerW;                                            // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MPDynMat;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MapMaterial;                                       // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             MapTexture;                                        // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 OrRenderTargetTexture;                             // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture*                               OpacityMask;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture*                               NoMask;                                            // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        MapWidthCapturedInMapTexture_InWorldUnits_;        // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              AddedMapOffset;                                    // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        MapLenghToCenter;                                  // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MapTextureDimention;                               // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zoom;                                              // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        MaxZoom;                                           // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        ZoomSteps;                                         // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UPOIW_C*>                        ArrayOfPOI;                                        // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        MinimapOpacity;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EMinimapType                                  Type;                                              // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          RotateMinimap;                                     // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EMinimapRotation                              RotateMinimapUsing;                                // 0x0352(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EMinimapRotation                              RotateViewAngleUsing;                              // 0x0353(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EMinimapStyle                                 Style;                                             // 0x0354(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          MouseWheelZoom_on_hover;                           // 0x0355(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4214[0x2];                                     // 0x0356(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ViewAngleTexture;                                  // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              ViewAngleTextureSize;                              // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FSlateColor                            ViewAngleColor;                                    // 0x0370(0x0014)(Edit, BlueprintVisible, ExposeOnSpawn)
	uint8                                         Pad_4215[0x4];                                     // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MyLocationTexture;                                 // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              MyLocationTextureSize;                             // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FSlateColor                            MyLocationColor;                                   // 0x03A0(0x0014)(Edit, BlueprintVisible, ExposeOnSpawn)
	uint8                                         Pad_4216[0x4];                                     // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MinimapBorderTexture;                              // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Border_Size;                                       // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          BorderRotates;                                     // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4217[0x7];                                     // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             MiniMapClicked;                                    // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                LastKnownOwnerLocation;                            // 0x03E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastKnownOwnerControlRotation;                     // 0x03F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BUseLastKown;                                      // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UpdateMinimap;                                     // 0x0411(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4218[0x6];                                     // 0x0412(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             HIArrowUp;                                         // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            HIColor1;                                          // 0x0420(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_4219[0x4];                                     // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             HIArrowDown;                                       // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            HIColor2;                                          // 0x0440(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_421A[0x4];                                     // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              HISize;                                            // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HIAccepDiff;                                       // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDesignTime;                                     // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TempSkipOnce;                                      // 0x0471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MouseIn;                                           // 0x0472(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsMouseDown;                                      // 0x0473(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421B[0x4];                                     // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BigMapMouseLocation;                               // 0x0478(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BigMapAdaptiveZoom;                                // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              OnClickScreenPos;                                  // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TempAddX;                                          // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TempAddY;                                          // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BigMapDragSensitivity;                             // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        DragLimitValue;                                    // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bCanDragMap;                                       // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_421C[0x7];                                     // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   MouseButtonToDrag;                                 // 0x04D0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               LastKnownPawnRot;                                  // 0x04E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ADummyMarker_C*                         Marker;                                            // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          StopBlinkingWhenOffMinimap;                        // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_421D[0x7];                                     // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AcceptableHeightDifference;                        // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          CenterOnPlayerWhenOpened_;                         // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void AddActor(class AActor* POIActors, bool FollowActorRotation, class UTexture2D* Texture, const struct FVector2D& TextureSize, const struct FSlateColor& Color, bool bShowHeightIndicator, const class FText& ToolTipOnHover, bool Blink, double BlinkSpeed);
	void AddActors(TArray<class AActor*>& POIActors, bool FollowActorRotation, class UTexture2D* Texture, const struct FVector2D& TextureSize, const struct FSlateColor& Color, bool bShowHeightIndicator, const class FText& ToolTipOnHover, bool Blink, double BlinkSpeed);
	void AddMarker(const struct FVector& Location, bool Persistent, class UTexture2D* Texture, const struct FVector2D& TextureSize, const struct FSlateColor& Color, const class FText& ToolTipOnHover, class UTexture2D* OffMinimapTexture__If_persistent_, const struct FVector2D& OffMinimapTextureSize, class ADummyMarker_C** MarkerRef);
	void AddMultiplePointOfInterest(const struct FSlateColor& Color, TArray<class AActor*>& Actors, bool bIsPersistent, bool FollowActorRotation, class UTexture2D* Texture, const struct FVector2D& TextureSize, class UTexture2D* OutOfMapTextureIfPersistent, bool bKeepOutOfMinimapTexStraightIfPersistent, bool bOnlyShowWhenOutOfMinimapIfPersistent);
	void AddPersistentActor(class AActor* POIActors, bool FollowActorRotation, class UTexture2D* Texture, const struct FVector2D& TextureSize, const struct FSlateColor& Color, class UTexture2D* OffMinimapTexture, const struct FVector2D& OffMinimapTextureSize, bool bKeepOffMinimapTextureStraight, bool bOnlyShowWhenOffMinimap, bool bShowHeightIndicator, const class FText& ToolTipOnHover, bool Blink, double BlinkSpeed);
	void AddPersistentActors(TArray<class AActor*>& POIActors, bool FollowActorRotation, class UTexture2D* Texture, const struct FVector2D& TextureSize, const struct FSlateColor& Color, class UTexture2D* OffMinimapTexture, const struct FVector2D& OffScreenTextureSize, bool bKeepOffMinimapTextureStraight, bool bOnlyShowWhenOffMinimap, bool bShowHeightIndicator, const class FText& ToolTipOnHover, bool Blink, double BlinkSpeed);
	void AddPointOfInterest(const struct FSlateColor& Color, class AActor* POIActor, bool bIsPersistent, bool FollowActorRotation, class UTexture2D* Texture, const struct FVector2D& TextureSize, class UTexture2D* OutOfMinniMapTextureIfPersistent, const struct FVector2D& OffScreenTexSize, bool bKeepOutOfMinimapTexStraightIfPersistent, bool bOnlyShowWhenOutOfMinimapIfPersistent, bool bIsLocation, const struct FVector& Location, bool bShowHeightIndicator, const class FText& Tooltip, bool Blink, double BlinkSpeed);
	void AdjustHeightIndicatorSettings(class UTexture2D* ArrowUP, const struct FSlateColor& ArrowUpColor, class UTexture2D* ArrowDown, const struct FSlateColor& ArrowDownColor, const struct FVector2D& Size, double Param_AcceptableHeightDifference);
	void CenterOverviewMapOnOwner();
	void ChangeBlinkSpeed(class AActor* POIActor, double Speed, bool* Found);
	void ChangeBlinkSpeedMultiplePOI(const TArray<class AActor*>& POIs, double NewSpeed);
	void ChangeBorderSize(double NewSize);
	void ChangeBorderTextureAndSize(class UTexture2D* Texture, double Param_Border_Size);
	void ChangeMinimapBorder(class UTexture2D* BorderTexture, double Size, bool bBorderRotates_);
	void ChangeMinimapTexture(class UTexture2D* Param_MapTexture, class UTextureRenderTarget2D* OrRenderTarget, double MapLength, bool Param_bIsDesignTime);
	void ChangeMyLocationColor(const struct FSlateColor& Color);
	void ChangeMyLocationTexture(class UTexture2D* Texture, const struct FVector2D& Size);
	void ChangePOIColor(class AActor* Actor, const struct FSlateColor& Tint);
	void ChangePOITexture(class AActor* Actor, class UTexture2D* Texture, const struct FVector2D& Texture_Size, bool* Changed);
	void ChangePOITextureAndColor(class AActor* Actor, class UTexture2D* Texture, const struct FVector2D& Texture_Size, const struct FSlateColor& Tint, bool* Changed);
	void ChangeToCircularMinimap(bool bMinimapRotates_);
	void ChangeToRectangularMinimap(bool bMinimapRotates_);
	void ClampXY(double& X, double& Y, double& BorderSize, double ExtraClamp, bool* bIsOutside);
	void ClearAllPOI();
	void ClonePOIArray(TArray<class UPOIW_C*>& Source, bool KeepPersistentActors, bool KeepHeightIndicator);
	void Construct();
	void EValidateMinimapClick(const struct FVector& Location, const struct FKey& Button);
	void EValidateMinimapClick_Timer();
	void ExecuteUbergraph_MinimapComponent(int32 EntryPoint);
	void GetBorderSize(double* BorderSize);
	void GetMarker(class AActor** Param_Marker);
	void GetPOIArray(TArray<class UPOIW_C*>* Param_ArrayOfPOI);
	void Initialize();
	void IsOutsideOfCircle(double& X, double& Y, double& R, bool* IsOutside);
	void IsOwnerAdded(bool* Found);
	void MiniMapClicked__DelegateSignature(const struct FVector& WolrdLocation, const struct FKey& ButtonUsed);
	void MinimapStartUpdate(class APawn* OwnerPawn, bool* Success);
	void MinimapStopUpdate(bool ClearPOIs);
	void MinimapZoomIn();
	void MinimapZoomOut();
	struct FEventReply On_MinimapClick(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void PreConstruct(bool IsDesignTime);
	void RemoveActor(class AActor* Actor, bool* Removed);
	void RemoveMarker();
	void RoundMapAdjsuter(double X, double Y, double& BorderSize, double Clamp, double* Left, double* Bottom);
	void SetBlinkEnabled(class AActor* POIActor, bool Enabled, bool* Found);
	void SetBlinkEnabledMultiplePOI(TArray<class AActor*>& POIs, bool Enabled);
	void SetMarkerRef(class ADummyMarker_C* Param_Marker, class UTexture2D* Texture, const struct FVector2D& TextureSize, const struct FSlateColor& Color, const class FText& ToolTipOnHover, bool Persistent, class UTexture2D* OffMinimapTexture__If_persistent_, const struct FVector2D& OffMinimapTextureSize);
	void SetOpacity(double Opacity);
	void SetZoomValue(double Param_Zoom);
	void SquareCoorToCircle(double XSquare, double YSquare, double* XCircle, double* YCircle);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void ToggleMyLocationVisibility();
	void ToggleViewAngleVisibility();
	void UpdateMarker(const struct FVector& NewLocation);
	void UpdatePOIs();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MinimapComponent_C">();
	}
	static class UMinimapComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMinimapComponent_C>();
	}
};
static_assert(alignof(UMinimapComponent_C) == 0x000008, "Wrong alignment on UMinimapComponent_C");
static_assert(sizeof(UMinimapComponent_C) == 0x000520, "Wrong size on UMinimapComponent_C");
static_assert(offsetof(UMinimapComponent_C, UberGraphFrame) == 0x000278, "Member 'UMinimapComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, BorderImage) == 0x000280, "Member 'UMinimapComponent_C::BorderImage' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MainBorder) == 0x000288, "Member 'UMinimapComponent_C::MainBorder' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MainCanvas) == 0x000290, "Member 'UMinimapComponent_C::MainCanvas' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MinimapImage) == 0x000298, "Member 'UMinimapComponent_C::MinimapImage' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MyLocationImage) == 0x0002A0, "Member 'UMinimapComponent_C::MyLocationImage' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, OverlayMother) == 0x0002A8, "Member 'UMinimapComponent_C::OverlayMother' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, TheOverlay) == 0x0002B0, "Member 'UMinimapComponent_C::TheOverlay' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, ViewAngleImage) == 0x0002B8, "Member 'UMinimapComponent_C::ViewAngleImage' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, OwnerW) == 0x0002C0, "Member 'UMinimapComponent_C::OwnerW' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MPDynMat) == 0x0002C8, "Member 'UMinimapComponent_C::MPDynMat' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MapMaterial) == 0x0002D0, "Member 'UMinimapComponent_C::MapMaterial' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MapTexture) == 0x0002D8, "Member 'UMinimapComponent_C::MapTexture' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, OrRenderTargetTexture) == 0x0002E0, "Member 'UMinimapComponent_C::OrRenderTargetTexture' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, OpacityMask) == 0x0002E8, "Member 'UMinimapComponent_C::OpacityMask' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, NoMask) == 0x0002F0, "Member 'UMinimapComponent_C::NoMask' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MapWidthCapturedInMapTexture_InWorldUnits_) == 0x0002F8, "Member 'UMinimapComponent_C::MapWidthCapturedInMapTexture_InWorldUnits_' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, AddedMapOffset) == 0x000300, "Member 'UMinimapComponent_C::AddedMapOffset' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MapLenghToCenter) == 0x000310, "Member 'UMinimapComponent_C::MapLenghToCenter' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MapTextureDimention) == 0x000318, "Member 'UMinimapComponent_C::MapTextureDimention' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, Zoom) == 0x000320, "Member 'UMinimapComponent_C::Zoom' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MaxZoom) == 0x000328, "Member 'UMinimapComponent_C::MaxZoom' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, ZoomSteps) == 0x000330, "Member 'UMinimapComponent_C::ZoomSteps' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, ArrayOfPOI) == 0x000338, "Member 'UMinimapComponent_C::ArrayOfPOI' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MinimapOpacity) == 0x000348, "Member 'UMinimapComponent_C::MinimapOpacity' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, Type) == 0x000350, "Member 'UMinimapComponent_C::Type' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, RotateMinimap) == 0x000351, "Member 'UMinimapComponent_C::RotateMinimap' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, RotateMinimapUsing) == 0x000352, "Member 'UMinimapComponent_C::RotateMinimapUsing' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, RotateViewAngleUsing) == 0x000353, "Member 'UMinimapComponent_C::RotateViewAngleUsing' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, Style) == 0x000354, "Member 'UMinimapComponent_C::Style' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MouseWheelZoom_on_hover) == 0x000355, "Member 'UMinimapComponent_C::MouseWheelZoom_on_hover' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, ViewAngleTexture) == 0x000358, "Member 'UMinimapComponent_C::ViewAngleTexture' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, ViewAngleTextureSize) == 0x000360, "Member 'UMinimapComponent_C::ViewAngleTextureSize' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, ViewAngleColor) == 0x000370, "Member 'UMinimapComponent_C::ViewAngleColor' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MyLocationTexture) == 0x000388, "Member 'UMinimapComponent_C::MyLocationTexture' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MyLocationTextureSize) == 0x000390, "Member 'UMinimapComponent_C::MyLocationTextureSize' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MyLocationColor) == 0x0003A0, "Member 'UMinimapComponent_C::MyLocationColor' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MinimapBorderTexture) == 0x0003B8, "Member 'UMinimapComponent_C::MinimapBorderTexture' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, Border_Size) == 0x0003C0, "Member 'UMinimapComponent_C::Border_Size' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, BorderRotates) == 0x0003C8, "Member 'UMinimapComponent_C::BorderRotates' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MiniMapClicked) == 0x0003D0, "Member 'UMinimapComponent_C::MiniMapClicked' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, LastKnownOwnerLocation) == 0x0003E0, "Member 'UMinimapComponent_C::LastKnownOwnerLocation' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, LastKnownOwnerControlRotation) == 0x0003F8, "Member 'UMinimapComponent_C::LastKnownOwnerControlRotation' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, BUseLastKown) == 0x000410, "Member 'UMinimapComponent_C::BUseLastKown' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, UpdateMinimap) == 0x000411, "Member 'UMinimapComponent_C::UpdateMinimap' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, HIArrowUp) == 0x000418, "Member 'UMinimapComponent_C::HIArrowUp' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, HIColor1) == 0x000420, "Member 'UMinimapComponent_C::HIColor1' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, HIArrowDown) == 0x000438, "Member 'UMinimapComponent_C::HIArrowDown' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, HIColor2) == 0x000440, "Member 'UMinimapComponent_C::HIColor2' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, HISize) == 0x000458, "Member 'UMinimapComponent_C::HISize' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, HIAccepDiff) == 0x000468, "Member 'UMinimapComponent_C::HIAccepDiff' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, bIsDesignTime) == 0x000470, "Member 'UMinimapComponent_C::bIsDesignTime' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, TempSkipOnce) == 0x000471, "Member 'UMinimapComponent_C::TempSkipOnce' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MouseIn) == 0x000472, "Member 'UMinimapComponent_C::MouseIn' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, bIsMouseDown) == 0x000473, "Member 'UMinimapComponent_C::bIsMouseDown' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, BigMapMouseLocation) == 0x000478, "Member 'UMinimapComponent_C::BigMapMouseLocation' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, BigMapAdaptiveZoom) == 0x000490, "Member 'UMinimapComponent_C::BigMapAdaptiveZoom' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, OnClickScreenPos) == 0x000498, "Member 'UMinimapComponent_C::OnClickScreenPos' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, TempAddX) == 0x0004A8, "Member 'UMinimapComponent_C::TempAddX' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, TempAddY) == 0x0004B0, "Member 'UMinimapComponent_C::TempAddY' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, BigMapDragSensitivity) == 0x0004B8, "Member 'UMinimapComponent_C::BigMapDragSensitivity' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, DragLimitValue) == 0x0004C0, "Member 'UMinimapComponent_C::DragLimitValue' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, bCanDragMap) == 0x0004C8, "Member 'UMinimapComponent_C::bCanDragMap' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, MouseButtonToDrag) == 0x0004D0, "Member 'UMinimapComponent_C::MouseButtonToDrag' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, LastKnownPawnRot) == 0x0004E8, "Member 'UMinimapComponent_C::LastKnownPawnRot' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, Marker) == 0x000500, "Member 'UMinimapComponent_C::Marker' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, StopBlinkingWhenOffMinimap) == 0x000508, "Member 'UMinimapComponent_C::StopBlinkingWhenOffMinimap' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, AcceptableHeightDifference) == 0x000510, "Member 'UMinimapComponent_C::AcceptableHeightDifference' has a wrong offset!");
static_assert(offsetof(UMinimapComponent_C, CenterOnPlayerWhenOpened_) == 0x000518, "Member 'UMinimapComponent_C::CenterOnPlayerWhenOpened_' has a wrong offset!");

}

