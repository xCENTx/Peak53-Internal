#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SGKMenuGameState

#include "Basic.hpp"

#include "Peak53Teams_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.AddPlayerToReadyList
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKMenuGameState_C_AddPlayerToReadyList final
{
public:
	const class ABP_SGKMenuController_C*          NewItem;                                           // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_AddPlayerToReadyList) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_AddPlayerToReadyList");
static_assert(sizeof(BP_SGKMenuGameState_C_AddPlayerToReadyList) == 0x000010, "Wrong size on BP_SGKMenuGameState_C_AddPlayerToReadyList");
static_assert(offsetof(BP_SGKMenuGameState_C_AddPlayerToReadyList, NewItem) == 0x000000, "Member 'BP_SGKMenuGameState_C_AddPlayerToReadyList::NewItem' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_AddPlayerToReadyList, CallFunc_Array_Add_ReturnValue) == 0x000008, "Member 'BP_SGKMenuGameState_C_AddPlayerToReadyList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.AddToInsurgents
// 0x0018 (0x0018 - 0x0000)
struct BP_SGKMenuGameState_C_AddToInsurgents final
{
public:
	const class ABP_SGKMenuController_C*          NewItem;                                           // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindPlayerIndex_index;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindPlayerIndex_sucess;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D73[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_AddToInsurgents) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_AddToInsurgents");
static_assert(sizeof(BP_SGKMenuGameState_C_AddToInsurgents) == 0x000018, "Wrong size on BP_SGKMenuGameState_C_AddToInsurgents");
static_assert(offsetof(BP_SGKMenuGameState_C_AddToInsurgents, NewItem) == 0x000000, "Member 'BP_SGKMenuGameState_C_AddToInsurgents::NewItem' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_AddToInsurgents, CallFunc_FindPlayerIndex_index) == 0x000008, "Member 'BP_SGKMenuGameState_C_AddToInsurgents::CallFunc_FindPlayerIndex_index' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_AddToInsurgents, CallFunc_FindPlayerIndex_sucess) == 0x00000C, "Member 'BP_SGKMenuGameState_C_AddToInsurgents::CallFunc_FindPlayerIndex_sucess' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_AddToInsurgents, CallFunc_Array_AddUnique_ReturnValue) == 0x000010, "Member 'BP_SGKMenuGameState_C_AddToInsurgents::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.AddToSeals
// 0x0018 (0x0018 - 0x0000)
struct BP_SGKMenuGameState_C_AddToSeals final
{
public:
	const class ABP_SGKMenuController_C*          Player;                                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindPlayerIndex_index;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindPlayerIndex_sucess;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D74[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_AddToSeals) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_AddToSeals");
static_assert(sizeof(BP_SGKMenuGameState_C_AddToSeals) == 0x000018, "Wrong size on BP_SGKMenuGameState_C_AddToSeals");
static_assert(offsetof(BP_SGKMenuGameState_C_AddToSeals, Player) == 0x000000, "Member 'BP_SGKMenuGameState_C_AddToSeals::Player' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_AddToSeals, CallFunc_FindPlayerIndex_index) == 0x000008, "Member 'BP_SGKMenuGameState_C_AddToSeals::CallFunc_FindPlayerIndex_index' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_AddToSeals, CallFunc_FindPlayerIndex_sucess) == 0x00000C, "Member 'BP_SGKMenuGameState_C_AddToSeals::CallFunc_FindPlayerIndex_sucess' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_AddToSeals, CallFunc_Array_AddUnique_ReturnValue) == 0x000010, "Member 'BP_SGKMenuGameState_C_AddToSeals::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.AutoTeam
// 0x0018 (0x0018 - 0x0000)
struct BP_SGKMenuGameState_C_AutoTeam final
{
public:
	const class ABP_SGKMenuController_C*          Player;                                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_AutoTeam) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_AutoTeam");
static_assert(sizeof(BP_SGKMenuGameState_C_AutoTeam) == 0x000018, "Wrong size on BP_SGKMenuGameState_C_AutoTeam");
static_assert(offsetof(BP_SGKMenuGameState_C_AutoTeam, Player) == 0x000000, "Member 'BP_SGKMenuGameState_C_AutoTeam::Player' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_AutoTeam, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'BP_SGKMenuGameState_C_AutoTeam::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_AutoTeam, CallFunc_Array_Length_ReturnValue_1) == 0x00000C, "Member 'BP_SGKMenuGameState_C_AutoTeam::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_AutoTeam, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_SGKMenuGameState_C_AutoTeam::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.CheckIfAllPlayersAreReady
// 0x0014 (0x0014 - 0x0000)
struct BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady final
{
public:
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady) == 0x000004, "Wrong alignment on BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady");
static_assert(sizeof(BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady) == 0x000014, "Wrong size on BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady");
static_assert(offsetof(BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady, CallFunc_Array_Length_ReturnValue) == 0x000000, "Member 'BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady, CallFunc_Array_Length_ReturnValue_1) == 0x000004, "Member 'BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady, CallFunc_Array_Length_ReturnValue_2) == 0x000008, "Member 'BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000011, "Member 'BP_SGKMenuGameState_C_CheckIfAllPlayersAreReady::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.ExecuteUbergraph_BP_SGKMenuGameState
// 0x00D8 (0x00D8 - 0x0000)
struct BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D75[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_SGKGameInstance_C*                  K2Node_DynamicCast_AsBP_SGKGame_Instance;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D76[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D77[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D78[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_MapName;                        // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_ServerName;                     // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D79[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D7A[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_SGKMenuController_C*                K2Node_DynamicCast_AsBP_SGKMenu_Controller;        // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D7B[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState");
static_assert(sizeof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState) == 0x0000D8, "Wrong size on BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, EntryPoint) == 0x000000, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, K2Node_DynamicCast_AsBP_SGKGame_Instance) == 0x000010, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::K2Node_DynamicCast_AsBP_SGKGame_Instance' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, Temp_bool_Has_Been_Initd_Variable) == 0x000019, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000030, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x000038, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, Temp_int_Array_Index_Variable) == 0x000044, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, K2Node_CustomEvent_MapName) == 0x000048, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::K2Node_CustomEvent_MapName' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, K2Node_CustomEvent_ServerName) == 0x000058, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::K2Node_CustomEvent_ServerName' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, CallFunc_Subtract_IntInt_ReturnValue) == 0x000068, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00006C, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, CallFunc_Concat_StrStr_ReturnValue) == 0x000070, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000080, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000090, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, CallFunc_GetPlayerController_ReturnValue) == 0x0000A0, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, Temp_bool_IsClosed_Variable) == 0x0000A8, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, CallFunc_Array_Get_Item) == 0x0000B0, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, CallFunc_GetPlayerController_ReturnValue_1) == 0x0000B8, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, K2Node_DynamicCast_AsBP_SGKMenu_Controller) == 0x0000C0, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::K2Node_DynamicCast_AsBP_SGKMenu_Controller' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, K2Node_DynamicCast_bSuccess_1) == 0x0000C8, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, CallFunc_Array_Length_ReturnValue) == 0x0000CC, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState, CallFunc_Less_IntInt_ReturnValue) == 0x0000D0, "Member 'BP_SGKMenuGameState_C_ExecuteUbergraph_BP_SGKMenuGameState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.F Set Player Lodout
// 0x0050 (0x0050 - 0x0000)
struct BP_SGKMenuGameState_C_F_Set_Player_Lodout final
{
public:
	int32                                         Lodout;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D7C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      Controller;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Result;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_SGKMenuController_C*                K2Node_DynamicCast_AsBP_SGKMenu_Controller;        // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_1;                 // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_2;                 // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_3;                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_4;                 // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_5;                 // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_6;                 // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_7;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_8;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_9;                 // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_10;                // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_11;                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_12;                // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_13;                // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_14;                // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_15;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_16;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_17;                // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_18;                // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_19;                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_20;                // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_21;                // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_22;                // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_23;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_24;                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_25;                // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_26;                // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_27;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_28;                // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_29;                // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_30;                // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_31;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_32;                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_33;                // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_34;                // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_35;                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_36;                // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_37;                // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindPlayerIndex_index;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindPlayerIndex_sucess;                   // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess_1;                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_F_Set_Player_Lodout) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_F_Set_Player_Lodout");
static_assert(sizeof(BP_SGKMenuGameState_C_F_Set_Player_Lodout) == 0x000050, "Wrong size on BP_SGKMenuGameState_C_F_Set_Player_Lodout");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, Lodout) == 0x000000, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::Lodout' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, Controller) == 0x000008, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::Controller' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, Result) == 0x000010, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::Result' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_DynamicCast_AsBP_SGKMenu_Controller) == 0x000018, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_DynamicCast_AsBP_SGKMenu_Controller' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess) == 0x000021, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_1) == 0x000022, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_2) == 0x000023, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_3) == 0x000024, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_4) == 0x000025, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_5) == 0x000026, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_6) == 0x000027, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_7) == 0x000028, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_8) == 0x000029, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_9) == 0x00002A, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_9' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_10) == 0x00002B, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_10' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_11) == 0x00002C, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_11' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_12) == 0x00002D, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_12' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_13) == 0x00002E, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_13' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_14) == 0x00002F, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_14' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_15) == 0x000030, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_15' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_16) == 0x000031, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_16' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_17) == 0x000032, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_17' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_18) == 0x000033, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_18' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_19) == 0x000034, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_19' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_20) == 0x000035, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_20' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_21) == 0x000036, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_21' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_22) == 0x000037, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_22' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_23) == 0x000038, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_23' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_24) == 0x000039, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_24' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_25) == 0x00003A, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_25' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_26) == 0x00003B, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_26' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_27) == 0x00003C, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_27' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_28) == 0x00003D, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_28' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_29) == 0x00003E, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_29' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_30) == 0x00003F, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_30' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_31) == 0x000040, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_31' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_32) == 0x000041, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_32' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_33) == 0x000042, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_33' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_34) == 0x000043, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_34' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_35) == 0x000044, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_35' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_36) == 0x000045, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_36' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchInteger_CmpSuccess_37) == 0x000046, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchInteger_CmpSuccess_37' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchString_CmpSuccess) == 0x000047, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, CallFunc_FindPlayerIndex_index) == 0x000048, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::CallFunc_FindPlayerIndex_index' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, CallFunc_FindPlayerIndex_sucess) == 0x00004C, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::CallFunc_FindPlayerIndex_sucess' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_F_Set_Player_Lodout, K2Node_SwitchString_CmpSuccess_1) == 0x00004D, "Member 'BP_SGKMenuGameState_C_F_Set_Player_Lodout::K2Node_SwitchString_CmpSuccess_1' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.FindPlayerIndex
// 0x0050 (0x0050 - 0x0000)
struct BP_SGKMenuGameState_C_FindPlayerIndex final
{
public:
	TArray<class ABP_SGKMenuController_C*>        Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ABP_SGKMenuController_C*                Controller;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sucess;                                            // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D7D[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Result;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D7E[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SGKMenuController_C*                CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D7F[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D80[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_FindPlayerIndex) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_FindPlayerIndex");
static_assert(sizeof(BP_SGKMenuGameState_C_FindPlayerIndex) == 0x000050, "Wrong size on BP_SGKMenuGameState_C_FindPlayerIndex");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, Array) == 0x000000, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::Array' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, Controller) == 0x000010, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::Controller' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, Param_Index) == 0x000018, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, Sucess) == 0x00001C, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::Sucess' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, Result) == 0x000020, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::Result' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, Temp_bool_True_if_break_was_hit_Variable) == 0x000028, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000038, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, CallFunc_BooleanAND_ReturnValue) == 0x000048, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_FindPlayerIndex, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000049, "Member 'BP_SGKMenuGameState_C_FindPlayerIndex::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.ForcePlayerReady
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKMenuGameState_C_ForcePlayerReady final
{
public:
	class ABP_SGKMenuController_C*                Object;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_ForcePlayerReady) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_ForcePlayerReady");
static_assert(sizeof(BP_SGKMenuGameState_C_ForcePlayerReady) == 0x000010, "Wrong size on BP_SGKMenuGameState_C_ForcePlayerReady");
static_assert(offsetof(BP_SGKMenuGameState_C_ForcePlayerReady, Object) == 0x000000, "Member 'BP_SGKMenuGameState_C_ForcePlayerReady::Object' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ForcePlayerReady, CallFunc_Array_Add_ReturnValue) == 0x000008, "Member 'BP_SGKMenuGameState_C_ForcePlayerReady::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ForcePlayerReady, CallFunc_Array_Contains_ReturnValue) == 0x00000C, "Member 'BP_SGKMenuGameState_C_ForcePlayerReady::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.ForcePlayerReadyState
// 0x0040 (0x0040 - 0x0000)
struct BP_SGKMenuGameState_C_ForcePlayerReadyState final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D81[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D82[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D83[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SGKMenuController_C*                K2Node_DynamicCast_AsBP_SGKMenu_Controller;        // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D84[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_ForcePlayerReadyState) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_ForcePlayerReadyState");
static_assert(sizeof(BP_SGKMenuGameState_C_ForcePlayerReadyState) == 0x000040, "Wrong size on BP_SGKMenuGameState_C_ForcePlayerReadyState");
static_assert(offsetof(BP_SGKMenuGameState_C_ForcePlayerReadyState, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_SGKMenuGameState_C_ForcePlayerReadyState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ForcePlayerReadyState, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_SGKMenuGameState_C_ForcePlayerReadyState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ForcePlayerReadyState, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_SGKMenuGameState_C_ForcePlayerReadyState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ForcePlayerReadyState, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_SGKMenuGameState_C_ForcePlayerReadyState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ForcePlayerReadyState, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_SGKMenuGameState_C_ForcePlayerReadyState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ForcePlayerReadyState, CallFunc_GetPlayerController_ReturnValue) == 0x000020, "Member 'BP_SGKMenuGameState_C_ForcePlayerReadyState::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ForcePlayerReadyState, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_SGKMenuGameState_C_ForcePlayerReadyState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ForcePlayerReadyState, K2Node_DynamicCast_AsBP_SGKMenu_Controller) == 0x000030, "Member 'BP_SGKMenuGameState_C_ForcePlayerReadyState::K2Node_DynamicCast_AsBP_SGKMenu_Controller' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ForcePlayerReadyState, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_SGKMenuGameState_C_ForcePlayerReadyState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_ForcePlayerReadyState, CallFunc_Array_Add_ReturnValue) == 0x00003C, "Member 'BP_SGKMenuGameState_C_ForcePlayerReadyState::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.Remove Lobby Screen for All Players
// 0x0038 (0x0038 - 0x0000)
struct BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D85[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_SGKMenuController_C*                K2Node_DynamicCast_AsBP_SGKMenu_Controller;        // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players");
static_assert(sizeof(BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players) == 0x000038, "Wrong size on BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players");
static_assert(offsetof(BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players, CallFunc_GetPlayerController_ReturnValue) == 0x000020, "Member 'BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players, K2Node_DynamicCast_AsBP_SGKMenu_Controller) == 0x000028, "Member 'BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players::K2Node_DynamicCast_AsBP_SGKMenu_Controller' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_SGKMenuGameState_C_Remove_Lobby_Screen_for_All_Players::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.RemovePlayer
// 0x0020 (0x0020 - 0x0000)
struct BP_SGKMenuGameState_C_RemovePlayer final
{
public:
	class ABP_SGKMenuController_C*                Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindPlayerIndex_index;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindPlayerIndex_sucess;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D86[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FindPlayerIndex_index_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindPlayerIndex_sucess_1;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D87[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FindPlayerIndex_index_2;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindPlayerIndex_sucess_2;                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_RemovePlayer) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_RemovePlayer");
static_assert(sizeof(BP_SGKMenuGameState_C_RemovePlayer) == 0x000020, "Wrong size on BP_SGKMenuGameState_C_RemovePlayer");
static_assert(offsetof(BP_SGKMenuGameState_C_RemovePlayer, Controller) == 0x000000, "Member 'BP_SGKMenuGameState_C_RemovePlayer::Controller' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_RemovePlayer, CallFunc_FindPlayerIndex_index) == 0x000008, "Member 'BP_SGKMenuGameState_C_RemovePlayer::CallFunc_FindPlayerIndex_index' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_RemovePlayer, CallFunc_FindPlayerIndex_sucess) == 0x00000C, "Member 'BP_SGKMenuGameState_C_RemovePlayer::CallFunc_FindPlayerIndex_sucess' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_RemovePlayer, CallFunc_FindPlayerIndex_index_1) == 0x000010, "Member 'BP_SGKMenuGameState_C_RemovePlayer::CallFunc_FindPlayerIndex_index_1' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_RemovePlayer, CallFunc_FindPlayerIndex_sucess_1) == 0x000014, "Member 'BP_SGKMenuGameState_C_RemovePlayer::CallFunc_FindPlayerIndex_sucess_1' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_RemovePlayer, CallFunc_FindPlayerIndex_index_2) == 0x000018, "Member 'BP_SGKMenuGameState_C_RemovePlayer::CallFunc_FindPlayerIndex_index_2' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_RemovePlayer, CallFunc_FindPlayerIndex_sucess_2) == 0x00001C, "Member 'BP_SGKMenuGameState_C_RemovePlayer::CallFunc_FindPlayerIndex_sucess_2' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.RemovePlayerFromReadyList
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKMenuGameState_C_RemovePlayerFromReadyList final
{
public:
	const class ABP_SGKMenuController_C*          NewItem;                                           // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindPlayerIndex_index;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindPlayerIndex_sucess;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_RemovePlayerFromReadyList) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_RemovePlayerFromReadyList");
static_assert(sizeof(BP_SGKMenuGameState_C_RemovePlayerFromReadyList) == 0x000010, "Wrong size on BP_SGKMenuGameState_C_RemovePlayerFromReadyList");
static_assert(offsetof(BP_SGKMenuGameState_C_RemovePlayerFromReadyList, NewItem) == 0x000000, "Member 'BP_SGKMenuGameState_C_RemovePlayerFromReadyList::NewItem' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_RemovePlayerFromReadyList, CallFunc_FindPlayerIndex_index) == 0x000008, "Member 'BP_SGKMenuGameState_C_RemovePlayerFromReadyList::CallFunc_FindPlayerIndex_index' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_RemovePlayerFromReadyList, CallFunc_FindPlayerIndex_sucess) == 0x00000C, "Member 'BP_SGKMenuGameState_C_RemovePlayerFromReadyList::CallFunc_FindPlayerIndex_sucess' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.SetServerMapName
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKMenuGameState_C_SetServerMapName final
{
public:
	class FString                                 Param_MapName;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_SetServerMapName) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_SetServerMapName");
static_assert(sizeof(BP_SGKMenuGameState_C_SetServerMapName) == 0x000010, "Wrong size on BP_SGKMenuGameState_C_SetServerMapName");
static_assert(offsetof(BP_SGKMenuGameState_C_SetServerMapName, Param_MapName) == 0x000000, "Member 'BP_SGKMenuGameState_C_SetServerMapName::Param_MapName' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.SetServerName
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKMenuGameState_C_SetServerName final
{
public:
	class FString                                 Param_ServerName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_SetServerName) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_SetServerName");
static_assert(sizeof(BP_SGKMenuGameState_C_SetServerName) == 0x000010, "Wrong size on BP_SGKMenuGameState_C_SetServerName");
static_assert(offsetof(BP_SGKMenuGameState_C_SetServerName, Param_ServerName) == 0x000000, "Member 'BP_SGKMenuGameState_C_SetServerName::Param_ServerName' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.SwitchTeams
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKMenuGameState_C_SwitchTeams final
{
public:
	const class ABP_SGKMenuController_C*          ItemToFind;                                        // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindPlayerIndex_index;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindPlayerIndex_sucess;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_SwitchTeams) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_SwitchTeams");
static_assert(sizeof(BP_SGKMenuGameState_C_SwitchTeams) == 0x000010, "Wrong size on BP_SGKMenuGameState_C_SwitchTeams");
static_assert(offsetof(BP_SGKMenuGameState_C_SwitchTeams, ItemToFind) == 0x000000, "Member 'BP_SGKMenuGameState_C_SwitchTeams::ItemToFind' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_SwitchTeams, CallFunc_FindPlayerIndex_index) == 0x000008, "Member 'BP_SGKMenuGameState_C_SwitchTeams::CallFunc_FindPlayerIndex_index' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_SwitchTeams, CallFunc_FindPlayerIndex_sucess) == 0x00000C, "Member 'BP_SGKMenuGameState_C_SwitchTeams::CallFunc_FindPlayerIndex_sucess' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.TogglePlayerReady
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKMenuGameState_C_TogglePlayerReady final
{
public:
	const class ABP_SGKMenuController_C*          ItemToFind;                                        // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindPlayerIndex_index;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindPlayerIndex_sucess;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKMenuGameState_C_TogglePlayerReady) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_TogglePlayerReady");
static_assert(sizeof(BP_SGKMenuGameState_C_TogglePlayerReady) == 0x000010, "Wrong size on BP_SGKMenuGameState_C_TogglePlayerReady");
static_assert(offsetof(BP_SGKMenuGameState_C_TogglePlayerReady, ItemToFind) == 0x000000, "Member 'BP_SGKMenuGameState_C_TogglePlayerReady::ItemToFind' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_TogglePlayerReady, CallFunc_FindPlayerIndex_index) == 0x000008, "Member 'BP_SGKMenuGameState_C_TogglePlayerReady::CallFunc_FindPlayerIndex_index' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_TogglePlayerReady, CallFunc_FindPlayerIndex_sucess) == 0x00000C, "Member 'BP_SGKMenuGameState_C_TogglePlayerReady::CallFunc_FindPlayerIndex_sucess' has a wrong offset!");

// Function BP_SGKMenuGameState.BP_SGKMenuGameState_C.Update Lobby for All Clients
// 0x0040 (0x0040 - 0x0000)
struct BP_SGKMenuGameState_C_Update_Lobby_for_All_Clients final
{
public:
	TArray<int32>                                 Ranks;                                             // 0x0000(0x0010)(Edit, BlueprintVisible)
	TArray<bool>                                  Ready;                                             // 0x0010(0x0010)(Edit, BlueprintVisible)
	TArray<EPeak53Teams>                          Team;                                              // 0x0020(0x0010)(Edit, BlueprintVisible)
	TArray<class FName>                           Names;                                             // 0x0030(0x0010)(Edit, BlueprintVisible)
};
static_assert(alignof(BP_SGKMenuGameState_C_Update_Lobby_for_All_Clients) == 0x000008, "Wrong alignment on BP_SGKMenuGameState_C_Update_Lobby_for_All_Clients");
static_assert(sizeof(BP_SGKMenuGameState_C_Update_Lobby_for_All_Clients) == 0x000040, "Wrong size on BP_SGKMenuGameState_C_Update_Lobby_for_All_Clients");
static_assert(offsetof(BP_SGKMenuGameState_C_Update_Lobby_for_All_Clients, Ranks) == 0x000000, "Member 'BP_SGKMenuGameState_C_Update_Lobby_for_All_Clients::Ranks' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_Update_Lobby_for_All_Clients, Ready) == 0x000010, "Member 'BP_SGKMenuGameState_C_Update_Lobby_for_All_Clients::Ready' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_Update_Lobby_for_All_Clients, Team) == 0x000020, "Member 'BP_SGKMenuGameState_C_Update_Lobby_for_All_Clients::Team' has a wrong offset!");
static_assert(offsetof(BP_SGKMenuGameState_C_Update_Lobby_for_All_Clients, Names) == 0x000030, "Member 'BP_SGKMenuGameState_C_Update_Lobby_for_All_Clients::Names' has a wrong offset!");

}

