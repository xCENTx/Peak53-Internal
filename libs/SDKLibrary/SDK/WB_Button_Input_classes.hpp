#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_Button_Input

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "S_ButtonTextInfo_PMM_structs.hpp"
#include "ECommonButtonState_structs.hpp"
#include "CommonUI_classes.hpp"
#include "Slate_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_Button_Input.WB_Button_Input_C
// 0x0370 (0x1860 - 0x14F0)
class UWB_Button_Input_C final : public UCommonButtonBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x14F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Selecting_Anim_R;                                  // 0x14F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Selecting_Anim_L;                                  // 0x1500(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWB_Frame_C*                            Frame_L;                                           // 0x1508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_Frame_C*                            Frame_R;                                           // 0x1510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      IKS_Left;                                          // 0x1518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      IKS_Right;                                         // 0x1520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActionWidget*                    InputDetector;                                     // 0x1528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SB_States;                                         // 0x1530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       T_Left;                                            // 0x1538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       T_Right;                                           // 0x1540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_Button;                                       // 0x1548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Text_Button_Text;                                  // 0x1550(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   Text_Button_Description;                           // 0x1568(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FS_ButtonTextInfo_PMM                  Text_Button_Info;                                  // 0x1580(0x00F0)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UCommonTextStyle>           Input_TextStyle;                                   // 0x1670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          bUsingGamepad;                                     // 0x1678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDesignTime;                                     // 0x1679(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4991[0x6];                                     // 0x167A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ButtonTextInfo_PMM                  Input_Button_Info;                                 // 0x1680(0x00F0)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FInputChord                            SelectedKey_L;                                     // 0x1770(0x0020)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	struct FInputChord                            SelectedKey_R;                                     // 0x1790(0x0020)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          CanExecute;                                        // 0x17B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4992[0x7];                                     // 0x17B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnKeySelected;                                     // 0x17B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FInputChord                            Old_Key_L;                                         // 0x17C8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FInputChord                            New_Key_L;                                         // 0x17E8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FInputChord                            Old_Key_R;                                         // 0x1808(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FInputChord                            New_Key_R;                                         // 0x1828(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   MappingName;                                       // 0x1848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        AxisValue;                                         // 0x1850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsAxisMapping;                                     // 0x1858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void AlignStateTextWidth();
	void BndEvt__WB_Button_Input_IKS_Left_K2Node_ComponentBoundEvent_1_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void BndEvt__WB_Button_Input_IKS_Left_K2Node_ComponentBoundEvent_2_OnIsSelectingKeyChanged__DelegateSignature();
	void BndEvt__WB_Button_Input_IKS_Right_K2Node_ComponentBoundEvent_3_OnIsSelectingKeyChanged__DelegateSignature();
	void BndEvt__WB_Button_Input_IKS_Right_K2Node_ComponentBoundEvent_4_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void BndEvt__WB_Button_State_InputDetector_K2Node_ComponentBoundEvent_0_OnInputMethodChanged__DelegateSignature(bool Param_bUsingGamepad);
	void BP_OnClicked();
	void BP_OnDeselected();
	void BP_OnHovered();
	void BP_OnSelected();
	void BP_OnUnhovered();
	void ExecuteUbergraph_WB_Button_Input(int32 EntryPoint);
	struct FS_TextInfo_PMM FindTextInfoByButtonState(ECommonButtonState State, const struct FS_ButtonTextInfo_PMM& S_ButtonTextInfo_PMM);
	class FText InputKeySelector_FindCurrentText(class UInputKeySelector* InputKeySelector);
	struct FEventReply OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent);
	void OnKeySelected__DelegateSignature(const struct FInputChord& OldKey, const struct FInputChord& NewKey, class UWB_Button_Input_C* Button, class FName Param_MappingName, const class FText& MappingNameText, double Param_AxisValue, bool Param_IsAxisMapping);
	void OnLeftExecute();
	struct FEventReply OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void OnRightExecute();
	void PreConstruct(bool IsDesignTime);
	void SetButtonText(const class FText& InText);
	void SetButtonTextInfo(ECommonButtonState InState);
	void SetInputTextButtonState(ECommonButtonState State, bool bIsLeft);
	void SetInputTextInfo(const struct FS_TextInfo_PMM& TextInfo);
	void SetTextInfo(class UCommonTextBlock* InText, const struct FS_TextInfo_PMM& TextInfo);
	void SetTextVisibility(class UWidget* InText, bool bVisible);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_Button_Input_C">();
	}
	static class UWB_Button_Input_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_Button_Input_C>();
	}
};
static_assert(alignof(UWB_Button_Input_C) == 0x000010, "Wrong alignment on UWB_Button_Input_C");
static_assert(sizeof(UWB_Button_Input_C) == 0x001860, "Wrong size on UWB_Button_Input_C");
static_assert(offsetof(UWB_Button_Input_C, UberGraphFrame) == 0x0014F0, "Member 'UWB_Button_Input_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, Selecting_Anim_R) == 0x0014F8, "Member 'UWB_Button_Input_C::Selecting_Anim_R' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, Selecting_Anim_L) == 0x001500, "Member 'UWB_Button_Input_C::Selecting_Anim_L' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, Frame_L) == 0x001508, "Member 'UWB_Button_Input_C::Frame_L' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, Frame_R) == 0x001510, "Member 'UWB_Button_Input_C::Frame_R' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, IKS_Left) == 0x001518, "Member 'UWB_Button_Input_C::IKS_Left' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, IKS_Right) == 0x001520, "Member 'UWB_Button_Input_C::IKS_Right' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, InputDetector) == 0x001528, "Member 'UWB_Button_Input_C::InputDetector' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, SB_States) == 0x001530, "Member 'UWB_Button_Input_C::SB_States' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, T_Left) == 0x001538, "Member 'UWB_Button_Input_C::T_Left' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, T_Right) == 0x001540, "Member 'UWB_Button_Input_C::T_Right' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, Text_Button) == 0x001548, "Member 'UWB_Button_Input_C::Text_Button' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, Text_Button_Text) == 0x001550, "Member 'UWB_Button_Input_C::Text_Button_Text' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, Text_Button_Description) == 0x001568, "Member 'UWB_Button_Input_C::Text_Button_Description' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, Text_Button_Info) == 0x001580, "Member 'UWB_Button_Input_C::Text_Button_Info' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, Input_TextStyle) == 0x001670, "Member 'UWB_Button_Input_C::Input_TextStyle' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, bUsingGamepad) == 0x001678, "Member 'UWB_Button_Input_C::bUsingGamepad' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, bIsDesignTime) == 0x001679, "Member 'UWB_Button_Input_C::bIsDesignTime' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, Input_Button_Info) == 0x001680, "Member 'UWB_Button_Input_C::Input_Button_Info' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, SelectedKey_L) == 0x001770, "Member 'UWB_Button_Input_C::SelectedKey_L' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, SelectedKey_R) == 0x001790, "Member 'UWB_Button_Input_C::SelectedKey_R' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, CanExecute) == 0x0017B0, "Member 'UWB_Button_Input_C::CanExecute' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, OnKeySelected) == 0x0017B8, "Member 'UWB_Button_Input_C::OnKeySelected' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, Old_Key_L) == 0x0017C8, "Member 'UWB_Button_Input_C::Old_Key_L' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, New_Key_L) == 0x0017E8, "Member 'UWB_Button_Input_C::New_Key_L' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, Old_Key_R) == 0x001808, "Member 'UWB_Button_Input_C::Old_Key_R' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, New_Key_R) == 0x001828, "Member 'UWB_Button_Input_C::New_Key_R' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, MappingName) == 0x001848, "Member 'UWB_Button_Input_C::MappingName' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, AxisValue) == 0x001850, "Member 'UWB_Button_Input_C::AxisValue' has a wrong offset!");
static_assert(offsetof(UWB_Button_Input_C, IsAxisMapping) == 0x001858, "Member 'UWB_Button_Input_C::IsAxisMapping' has a wrong offset!");

}

