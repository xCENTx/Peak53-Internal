#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VendorComponent

#include "Basic.hpp"

#include "BP_VendorComponent_classes.hpp"
#include "BP_VendorComponent_parameters.hpp"


namespace SDK
{

// Function BP_VendorComponent.BP_VendorComponent_C.BuyCostCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_VendorBuy                     BuyListing                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UBP_PlayerInventory_C*            PlayerInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    RemoveItems                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_VendorComponent_C::BuyCostCheck(const struct FS_VendorBuy& BuyListing, class UBP_PlayerInventory_C* PlayerInventory, bool RemoveItems, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VendorComponent_C", "BuyCostCheck");

	Params::BP_VendorComponent_C_BuyCostCheck Parms{};

	Parms.BuyListing = std::move(BuyListing);
	Parms.PlayerInventory = PlayerInventory;
	Parms.RemoveItems = RemoveItems;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_VendorComponent.BP_VendorComponent_C.BuyVenderItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_VendorBuy                     BuyListing                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UBP_PlayerInventory_C*            PlayerInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VendorComponent_C::BuyVenderItem(const struct FS_VendorBuy& BuyListing, class UBP_PlayerInventory_C* PlayerInventory, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VendorComponent_C", "BuyVenderItem");

	Params::BP_VendorComponent_C_BuyVenderItem Parms{};

	Parms.BuyListing = std::move(BuyListing);
	Parms.PlayerInventory = PlayerInventory;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VendorComponent.BP_VendorComponent_C.ExecuteUbergraph_BP_VendorComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VendorComponent_C::ExecuteUbergraph_BP_VendorComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VendorComponent_C", "ExecuteUbergraph_BP_VendorComponent");

	Params::BP_VendorComponent_C_ExecuteUbergraph_BP_VendorComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VendorComponent.BP_VendorComponent_C.LoadComponentData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadComplete                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VendorComponent_C::LoadComponentData(class UBP_SGKSaveGame_C* SaveGame, bool* LoadComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VendorComponent_C", "LoadComponentData");

	Params::BP_VendorComponent_C_LoadComponentData Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);

	if (LoadComplete != nullptr)
		*LoadComplete = Parms.LoadComplete;
}


// Function BP_VendorComponent.BP_VendorComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_VendorComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VendorComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VendorComponent.BP_VendorComponent_C.RestockCheckTimer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_VendorComponent_C::RestockCheckTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VendorComponent_C", "RestockCheckTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VendorComponent.BP_VendorComponent_C.SaveComponentData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_VendorComponent_C::SaveComponentData(class UBP_SGKSaveGame_C* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VendorComponent_C", "SaveComponentData");

	Params::BP_VendorComponent_C_SaveComponentData Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VendorComponent.BP_VendorComponent_C.SaveVenderData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_VendorComponent_C::SaveVenderData(class UBP_SGKSaveGame_C* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VendorComponent_C", "SaveVenderData");

	Params::BP_VendorComponent_C_SaveVenderData Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VendorComponent.BP_VendorComponent_C.SellVenderItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_VendorSell                    SellListing                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UBP_PlayerInventory_C*            PlayerInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VendorComponent_C::SellVenderItem(const struct FS_VendorSell& SellListing, class UBP_PlayerInventory_C* PlayerInventory, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VendorComponent_C", "SellVenderItem");

	Params::BP_VendorComponent_C_SellVenderItem Parms{};

	Parms.SellListing = std::move(SellListing);
	Parms.PlayerInventory = PlayerInventory;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VendorComponent.BP_VendorComponent_C.ServerBuyVenderItem
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_VendorBuy                     VenderBuyListing                                       (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UBP_PlayerInventory_C*            PlayerInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VendorComponent_C::ServerBuyVenderItem(const struct FS_VendorBuy& VenderBuyListing, class UBP_PlayerInventory_C* PlayerInventory, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VendorComponent_C", "ServerBuyVenderItem");

	Params::BP_VendorComponent_C_ServerBuyVenderItem Parms{};

	Parms.VenderBuyListing = std::move(VenderBuyListing);
	Parms.PlayerInventory = PlayerInventory;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VendorComponent.BP_VendorComponent_C.ServerSellVenderItem
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_VendorSell                    VenderSellListing                                      (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UBP_PlayerInventory_C*            PlayerInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VendorComponent_C::ServerSellVenderItem(const struct FS_VendorSell& VenderSellListing, class UBP_PlayerInventory_C* PlayerInventory, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VendorComponent_C", "ServerSellVenderItem");

	Params::BP_VendorComponent_C_ServerSellVenderItem Parms{};

	Parms.VenderSellListing = std::move(VenderSellListing);
	Parms.PlayerInventory = PlayerInventory;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VendorComponent.BP_VendorComponent_C.StockLimitCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_VendorBuy                     BuyListing                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    RemoveStock                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FoundAmount                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_VendorComponent_C::StockLimitCheck(const struct FS_VendorBuy& BuyListing, bool RemoveStock, int32 Amount, int32* FoundAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VendorComponent_C", "StockLimitCheck");

	Params::BP_VendorComponent_C_StockLimitCheck Parms{};

	Parms.BuyListing = std::move(BuyListing);
	Parms.RemoveStock = RemoveStock;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);

	if (FoundAmount != nullptr)
		*FoundAmount = Parms.FoundAmount;

	return Parms.ReturnValue;
}

}

