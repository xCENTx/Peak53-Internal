#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EOSCoreWeb

#include "Basic.hpp"

#include "EOSCoreWeb_classes.hpp"
#include "EOSCoreWeb_parameters.hpp"


namespace SDK
{

// Function EOSCoreWeb.EOSWebAuthLibrary.InitiateEpicAuthentication
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bWasSuccessful, const class FString& AuthenticationCode, const class FString& ErrorMessage)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInitiateEpicAuthenticationRequestRequest                                                (Parm, NativeAccessSpecifierPublic)

void UEOSWebAuthLibrary::InitiateEpicAuthentication(const TDelegate<void(bool bWasSuccessful, const class FString& AuthenticationCode, const class FString& ErrorMessage)>& Callback, const struct FInitiateEpicAuthenticationRequest& Request)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EOSWebAuthLibrary", "InitiateEpicAuthentication");

	Params::EOSWebAuthLibrary_InitiateEpicAuthentication Parms{};

	Parms.Callback = Callback;
	Parms.Request = std::move(Request);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EOSCoreWeb.EOSWebAuthLibrary.RequestAuthAccessToken
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bWasSuccessful, struct FAuthAccessTokenCallbackData& Data, struct FWebResponse& WebResponse)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRequestAuthAccessTokenRequest   Request                                                (Parm, NativeAccessSpecifierPublic)

void UEOSWebAuthLibrary::RequestAuthAccessToken(const TDelegate<void(bool bWasSuccessful, struct FAuthAccessTokenCallbackData& Data, struct FWebResponse& WebResponse)>& Callback, const struct FRequestAuthAccessTokenRequest& Request)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EOSWebAuthLibrary", "RequestAuthAccessToken");

	Params::EOSWebAuthLibrary_RequestAuthAccessToken Parms{};

	Parms.Callback = Callback;
	Parms.Request = std::move(Request);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EOSCoreWeb.EOSWebConnectLibrary.RequestAccessToken
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FRequestAccessTokenRequest       Request                                                (Parm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bWasSuccessful, struct FAccessTokenCallbackData& Data, struct FWebResponse& WebResponse)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEOSWebConnectLibrary::RequestAccessToken(const struct FRequestAccessTokenRequest& Request, const TDelegate<void(bool bWasSuccessful, struct FAccessTokenCallbackData& Data, struct FWebResponse& WebResponse)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EOSWebConnectLibrary", "RequestAccessToken");

	Params::EOSWebConnectLibrary_RequestAccessToken Parms{};

	Parms.Request = std::move(Request);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EOSCoreWeb.EOSWebPlayerTicketLibrary.SubmitTicket
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           WebApiKey                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSubmitTicketRequest             Request                                                (Parm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bWasSuccessful, struct FSubmitTicketResponse& Response, struct FWebResponse& WebResponse)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEOSWebPlayerTicketLibrary::SubmitTicket(const class FString& WebApiKey, const struct FSubmitTicketRequest& Request, const TDelegate<void(bool bWasSuccessful, struct FSubmitTicketResponse& Response, struct FWebResponse& WebResponse)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EOSWebPlayerTicketLibrary", "SubmitTicket");

	Params::EOSWebPlayerTicketLibrary_SubmitTicket Parms{};

	Parms.WebApiKey = std::move(WebApiKey);
	Parms.Request = std::move(Request);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EOSCoreWeb.EOSWebShared.GetPublicIp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const class FString& Response)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEOSWebShared::GetPublicIp(const TDelegate<void(const class FString& Response)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EOSWebShared", "GetPublicIp");

	Params::EOSWebShared_GetPublicIp Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EOSCoreWeb.EOSWebVoiceLibrary.CreateRoomToken
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AccessToken                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebRequestParticipantData>Participants                                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           DeploymentId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RoomName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bWasSuccessful, struct FCreateRoomTokenCallback& Data, struct FWebResponse& WebResponse)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEOSWebVoiceLibrary::CreateRoomToken(const class FString& AccessToken, const TArray<struct FWebRequestParticipantData>& Participants, const class FString& DeploymentId, const class FString& RoomName, const TDelegate<void(bool bWasSuccessful, struct FCreateRoomTokenCallback& Data, struct FWebResponse& WebResponse)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EOSWebVoiceLibrary", "CreateRoomToken");

	Params::EOSWebVoiceLibrary_CreateRoomToken Parms{};

	Parms.AccessToken = std::move(AccessToken);
	Parms.Participants = std::move(Participants);
	Parms.DeploymentId = std::move(DeploymentId);
	Parms.RoomName = std::move(RoomName);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EOSCoreWeb.EOSWebVoiceLibrary.ModifyParticipant
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AccessToken                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ProductUserId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DeploymentId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RoomName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHardMuted                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bWasSuccessful, struct FWebResponse& WebResponse)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEOSWebVoiceLibrary::ModifyParticipant(const class FString& AccessToken, const class FString& ProductUserId, const class FString& DeploymentId, const class FString& RoomName, bool bHardMuted, const TDelegate<void(bool bWasSuccessful, struct FWebResponse& WebResponse)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EOSWebVoiceLibrary", "ModifyParticipant");

	Params::EOSWebVoiceLibrary_ModifyParticipant Parms{};

	Parms.AccessToken = std::move(AccessToken);
	Parms.ProductUserId = std::move(ProductUserId);
	Parms.DeploymentId = std::move(DeploymentId);
	Parms.RoomName = std::move(RoomName);
	Parms.bHardMuted = bHardMuted;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EOSCoreWeb.EOSWebVoiceLibrary.RemoveParticipant
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AccessToken                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ProductUserId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DeploymentId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RoomName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bWasSuccessful, struct FWebResponse& WebResponse)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEOSWebVoiceLibrary::RemoveParticipant(const class FString& AccessToken, const class FString& ProductUserId, const class FString& DeploymentId, const class FString& RoomName, const TDelegate<void(bool bWasSuccessful, struct FWebResponse& WebResponse)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EOSWebVoiceLibrary", "RemoveParticipant");

	Params::EOSWebVoiceLibrary_RemoveParticipant Parms{};

	Parms.AccessToken = std::move(AccessToken);
	Parms.ProductUserId = std::move(ProductUserId);
	Parms.DeploymentId = std::move(DeploymentId);
	Parms.RoomName = std::move(RoomName);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

