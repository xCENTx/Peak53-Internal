#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InventoryCell

#include "Basic.hpp"

#include "S_InvSlot_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_AttachmentSlot_structs.hpp"
#include "S_InvSlotID_structs.hpp"
#include "S_WeaponSlot_structs.hpp"
#include "SlateCore_structs.hpp"
#include "S_EquipmentSlot_structs.hpp"
#include "S_NotificationDetails_structs.hpp"
#include "S_EquipmentSlotID_structs.hpp"
#include "S_WeaponSlotID_structs.hpp"
#include "S_InvItem_structs.hpp"


namespace SDK::Params
{

// Function BP_InventoryCell.BP_InventoryCell_C.CellDebugText
// 0x00D0 (0x00D0 - 0x0000)
struct BP_InventoryCell_C_CellDebugText final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_148F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InvSlot                             CallFunc_Array_Get_Item;                           // 0x0008(0x0050)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0058(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1490[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00B8(0x0018)()
};
static_assert(alignof(BP_InventoryCell_C_CellDebugText) == 0x000008, "Wrong alignment on BP_InventoryCell_C_CellDebugText");
static_assert(sizeof(BP_InventoryCell_C_CellDebugText) == 0x0000D0, "Wrong size on BP_InventoryCell_C_CellDebugText");
static_assert(offsetof(BP_InventoryCell_C_CellDebugText, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_InventoryCell_C_CellDebugText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_CellDebugText, CallFunc_Array_Get_Item) == 0x000008, "Member 'BP_InventoryCell_C_CellDebugText::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_CellDebugText, CallFunc_Conv_IntToText_ReturnValue) == 0x000058, "Member 'BP_InventoryCell_C_CellDebugText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_CellDebugText, CallFunc_Conv_TextToString_ReturnValue) == 0x000070, "Member 'BP_InventoryCell_C_CellDebugText::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_CellDebugText, CallFunc_Conv_IntToString_ReturnValue) == 0x000080, "Member 'BP_InventoryCell_C_CellDebugText::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_CellDebugText, CallFunc_Concat_StrStr_ReturnValue) == 0x000090, "Member 'BP_InventoryCell_C_CellDebugText::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_CellDebugText, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000A0, "Member 'BP_InventoryCell_C_CellDebugText::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_CellDebugText, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000A8, "Member 'BP_InventoryCell_C_CellDebugText::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_CellDebugText, CallFunc_Conv_StringToText_ReturnValue) == 0x0000B8, "Member 'BP_InventoryCell_C_CellDebugText::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function BP_InventoryCell.BP_InventoryCell_C.DragOverLayCheck
// 0x03A0 (0x03A0 - 0x0000)
struct BP_InventoryCell_C_DragOverLayCheck final
{
public:
	class UBP_MoveIcon_C*                         Move_Widget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FS_InvSlotID                           K2Node_MakeStruct_S_InvSlotID;                     // 0x0008(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_InvSlotID                           K2Node_MakeStruct_S_InvSlotID_1;                   // 0x0018(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_InvSlotID                           K2Node_MakeStruct_S_InvSlotID_2;                   // 0x0028(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_SelectAttachmentItem_IsValid;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1491[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_AttachmentSlot                      CallFunc_SelectAttachmentItem_ReturnValue;         // 0x0040(0x0048)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_SGK_ItemSize_Height;                      // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SGK_ItemSize_Width;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_InvSlot                             CallFunc_Array_Get_Item;                           // 0x0090(0x0050)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_SGK_RootSpaceCheck_SlotsBlocked;          // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1492[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_InvSlot>                     CallFunc_SGK_RootSpaceCheck_FoundSlots;            // 0x00E8(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FS_InvSlot                             CallFunc_Array_Get_Item_1;                         // 0x00F8(0x0050)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_InvSlotID                           Temp_struct_Variable;                              // 0x0148(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_WeaponSlot                          CallFunc_SelectedWeaponSlot_ReturnValue;           // 0x0158(0x0050)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_SGK_ItemSize_Height_1;                    // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SGK_ItemSize_Width_1;                     // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SGK_RootSpaceCheck_SlotsBlocked_1;        // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1493[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_InvSlot>                     CallFunc_SGK_RootSpaceCheck_FoundSlots_1;          // 0x01B8(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FS_InvSlotID                           K2Node_MakeStruct_S_InvSlotID_3;                   // 0x01C8(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_SGK_GetInvSlot_SlotFound;                 // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1494[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InvSlot                             CallFunc_SGK_GetInvSlot_InvSlot;                   // 0x01E0(0x0050)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_EquipmentSlot                       CallFunc_SelectEquipmentSlot_ReturnValue;          // 0x0230(0x0048)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_InvItem                             CallFunc_SGK_InvSlotItem_InvItem;                  // 0x0278(0x0030)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_SGK_ItemSize_Height_2;                    // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SGK_ItemSize_Width_2;                     // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SGK_ItemSize_Height_3;                    // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SGK_ItemSize_Width_3;                     // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1495[0x6];                                     // 0x02BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InvSlotID                           K2Node_Select_Default;                             // 0x02C0(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_InvSlot                             CallFunc_Array_Get_Item_2;                         // 0x02D0(0x0050)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_InvSlot                             CallFunc_Array_Get_Item_3;                         // 0x0320(0x0050)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_SGK_RootSpaceCheck_SlotsBlocked_2;        // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1496[0x7];                                     // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_InvSlot>                     CallFunc_SGK_RootSpaceCheck_FoundSlots_2;          // 0x0378(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SGK_RootSpaceCheck_SlotsBlocked_3;        // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1497[0x7];                                     // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_InvSlot>                     CallFunc_SGK_RootSpaceCheck_FoundSlots_3;          // 0x0390(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_InventoryCell_C_DragOverLayCheck) == 0x000008, "Wrong alignment on BP_InventoryCell_C_DragOverLayCheck");
static_assert(sizeof(BP_InventoryCell_C_DragOverLayCheck) == 0x0003A0, "Wrong size on BP_InventoryCell_C_DragOverLayCheck");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, Move_Widget) == 0x000000, "Member 'BP_InventoryCell_C_DragOverLayCheck::Move_Widget' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, K2Node_MakeStruct_S_InvSlotID) == 0x000008, "Member 'BP_InventoryCell_C_DragOverLayCheck::K2Node_MakeStruct_S_InvSlotID' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, K2Node_MakeStruct_S_InvSlotID_1) == 0x000018, "Member 'BP_InventoryCell_C_DragOverLayCheck::K2Node_MakeStruct_S_InvSlotID_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, K2Node_MakeStruct_S_InvSlotID_2) == 0x000028, "Member 'BP_InventoryCell_C_DragOverLayCheck::K2Node_MakeStruct_S_InvSlotID_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SelectAttachmentItem_IsValid) == 0x000038, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SelectAttachmentItem_IsValid' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SelectAttachmentItem_ReturnValue) == 0x000040, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SelectAttachmentItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_ItemSize_Height) == 0x000088, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_ItemSize_Height' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_ItemSize_Width) == 0x00008C, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_ItemSize_Width' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_Array_Get_Item) == 0x000090, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_RootSpaceCheck_SlotsBlocked) == 0x0000E0, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_RootSpaceCheck_SlotsBlocked' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_RootSpaceCheck_FoundSlots) == 0x0000E8, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_RootSpaceCheck_FoundSlots' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_Array_Get_Item_1) == 0x0000F8, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, Temp_struct_Variable) == 0x000148, "Member 'BP_InventoryCell_C_DragOverLayCheck::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SelectedWeaponSlot_ReturnValue) == 0x000158, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SelectedWeaponSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_ItemSize_Height_1) == 0x0001A8, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_ItemSize_Height_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_ItemSize_Width_1) == 0x0001AC, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_ItemSize_Width_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_RootSpaceCheck_SlotsBlocked_1) == 0x0001B0, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_RootSpaceCheck_SlotsBlocked_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_RootSpaceCheck_FoundSlots_1) == 0x0001B8, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_RootSpaceCheck_FoundSlots_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, K2Node_MakeStruct_S_InvSlotID_3) == 0x0001C8, "Member 'BP_InventoryCell_C_DragOverLayCheck::K2Node_MakeStruct_S_InvSlotID_3' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_GetInvSlot_SlotFound) == 0x0001D8, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_GetInvSlot_SlotFound' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_GetInvSlot_InvSlot) == 0x0001E0, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_GetInvSlot_InvSlot' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SelectEquipmentSlot_ReturnValue) == 0x000230, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SelectEquipmentSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_InvSlotItem_InvItem) == 0x000278, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_InvSlotItem_InvItem' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_ItemSize_Height_2) == 0x0002A8, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_ItemSize_Height_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_ItemSize_Width_2) == 0x0002AC, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_ItemSize_Width_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_ItemSize_Height_3) == 0x0002B0, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_ItemSize_Height_3' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_ItemSize_Width_3) == 0x0002B4, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_ItemSize_Width_3' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, Temp_bool_Variable) == 0x0002B8, "Member 'BP_InventoryCell_C_DragOverLayCheck::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, K2Node_SwitchEnum_CmpSuccess) == 0x0002B9, "Member 'BP_InventoryCell_C_DragOverLayCheck::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, K2Node_Select_Default) == 0x0002C0, "Member 'BP_InventoryCell_C_DragOverLayCheck::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_Array_Get_Item_2) == 0x0002D0, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_Array_Get_Item_3) == 0x000320, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_RootSpaceCheck_SlotsBlocked_2) == 0x000370, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_RootSpaceCheck_SlotsBlocked_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_RootSpaceCheck_FoundSlots_2) == 0x000378, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_RootSpaceCheck_FoundSlots_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_RootSpaceCheck_SlotsBlocked_3) == 0x000388, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_RootSpaceCheck_SlotsBlocked_3' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_DragOverLayCheck, CallFunc_SGK_RootSpaceCheck_FoundSlots_3) == 0x000390, "Member 'BP_InventoryCell_C_DragOverLayCheck::CallFunc_SGK_RootSpaceCheck_FoundSlots_3' has a wrong offset!");

// Function BP_InventoryCell.BP_InventoryCell_C.ExecuteUbergraph_BP_InventoryCell
// 0x0288 (0x0288 - 0x0000)
struct BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1498[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_PointerEvent_2;                       // 0x0008(0x0098)()
	class UDragDropOperation*                     K2Node_Event_Operation_2;                          // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPointerEvent                          K2Node_Event_PointerEvent_1;                       // 0x00A8(0x0098)(ConstParm)
	class UDragDropOperation*                     K2Node_Event_Operation_1;                          // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0148(0x0040)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_PointerEvent;                         // 0x0188(0x0098)()
	class UDragDropOperation*                     K2Node_Event_Operation;                            // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_MoveIcon_C*                         K2Node_DynamicCast_AsBP_Move_Icon;                 // 0x0228(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1499[0x3];                                     // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0234(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149A[0x4];                                     // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerInventory_C*                  CallFunc_GetComponentByClass_ReturnValue;          // 0x0270(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149B[0x3];                                     // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast; // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell) == 0x000008, "Wrong alignment on BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell");
static_assert(sizeof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell) == 0x000288, "Wrong size on BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, EntryPoint) == 0x000000, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, K2Node_Event_PointerEvent_2) == 0x000008, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::K2Node_Event_PointerEvent_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, K2Node_Event_Operation_2) == 0x0000A0, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::K2Node_Event_Operation_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, K2Node_Event_PointerEvent_1) == 0x0000A8, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::K2Node_Event_PointerEvent_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, K2Node_Event_Operation_1) == 0x000140, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::K2Node_Event_Operation_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, K2Node_Event_MyGeometry) == 0x000148, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, K2Node_Event_PointerEvent) == 0x000188, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::K2Node_Event_PointerEvent' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, K2Node_Event_Operation) == 0x000220, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::K2Node_Event_Operation' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, K2Node_DynamicCast_AsBP_Move_Icon) == 0x000228, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::K2Node_DynamicCast_AsBP_Move_Icon' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, K2Node_DynamicCast_bSuccess) == 0x000230, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, K2Node_CreateDelegate_OutputDelegate) == 0x000234, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, CallFunc_BreakVector2D_X) == 0x000248, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, CallFunc_BreakVector2D_Y) == 0x000250, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, CallFunc_BreakVector2D_X_1) == 0x000258, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, CallFunc_BreakVector2D_Y_1) == 0x000260, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, CallFunc_GetOwningPlayer_ReturnValue) == 0x000268, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, CallFunc_GetComponentByClass_ReturnValue) == 0x000270, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, CallFunc_IsValid_ReturnValue) == 0x000278, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x00027C, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell, CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast) == 0x000280, "Member 'BP_InventoryCell_C_ExecuteUbergraph_BP_InventoryCell::CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast' has a wrong offset!");

// Function BP_InventoryCell.BP_InventoryCell_C.FuelItemChecks
// 0x0048 (0x0048 - 0x0000)
struct BP_InventoryCell_C_FuelItemChecks final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Allow;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CraftingComponent_C*                CraftingInvL;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CookingComponent_C*                 CookingInvL;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFuelItem_IsFuelItem;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsIndexFuelSlot_IsFuelSlot;               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149D[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CraftingComponent_C*                K2Node_DynamicCast_AsBP_Crafting_Component;        // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFuelItem_IsFuelItem_1;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsIndexFuelSlot_IsFuelSlot_1;             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149E[0x5];                                     // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CookingComponent_C*                 K2Node_DynamicCast_AsBP_Cooking_Component;         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryCell_C_FuelItemChecks) == 0x000008, "Wrong alignment on BP_InventoryCell_C_FuelItemChecks");
static_assert(sizeof(BP_InventoryCell_C_FuelItemChecks) == 0x000048, "Wrong size on BP_InventoryCell_C_FuelItemChecks");
static_assert(offsetof(BP_InventoryCell_C_FuelItemChecks, ID) == 0x000000, "Member 'BP_InventoryCell_C_FuelItemChecks::ID' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_FuelItemChecks, Allow) == 0x000008, "Member 'BP_InventoryCell_C_FuelItemChecks::Allow' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_FuelItemChecks, CraftingInvL) == 0x000010, "Member 'BP_InventoryCell_C_FuelItemChecks::CraftingInvL' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_FuelItemChecks, CookingInvL) == 0x000018, "Member 'BP_InventoryCell_C_FuelItemChecks::CookingInvL' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_FuelItemChecks, CallFunc_IsFuelItem_IsFuelItem) == 0x000020, "Member 'BP_InventoryCell_C_FuelItemChecks::CallFunc_IsFuelItem_IsFuelItem' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_FuelItemChecks, CallFunc_IsIndexFuelSlot_IsFuelSlot) == 0x000021, "Member 'BP_InventoryCell_C_FuelItemChecks::CallFunc_IsIndexFuelSlot_IsFuelSlot' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_FuelItemChecks, K2Node_DynamicCast_AsBP_Crafting_Component) == 0x000028, "Member 'BP_InventoryCell_C_FuelItemChecks::K2Node_DynamicCast_AsBP_Crafting_Component' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_FuelItemChecks, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_InventoryCell_C_FuelItemChecks::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_FuelItemChecks, CallFunc_IsFuelItem_IsFuelItem_1) == 0x000031, "Member 'BP_InventoryCell_C_FuelItemChecks::CallFunc_IsFuelItem_IsFuelItem_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_FuelItemChecks, CallFunc_IsIndexFuelSlot_IsFuelSlot_1) == 0x000032, "Member 'BP_InventoryCell_C_FuelItemChecks::CallFunc_IsIndexFuelSlot_IsFuelSlot_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_FuelItemChecks, K2Node_DynamicCast_AsBP_Cooking_Component) == 0x000038, "Member 'BP_InventoryCell_C_FuelItemChecks::K2Node_DynamicCast_AsBP_Cooking_Component' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_FuelItemChecks, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_InventoryCell_C_FuelItemChecks::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_InventoryCell.BP_InventoryCell_C.HideCheckCellsOverlay
// 0x0098 (0x0098 - 0x0000)
struct BP_InventoryCell_C_HideCheckCellsOverlay final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBP_SGKGridInterface_C> K2Node_DynamicCast_AsBP_SGKGrid_Interface;         // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14A0[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InvSlot                             CallFunc_Array_Get_Item;                           // 0x0028(0x0050)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class UBP_InventoryCell_C*>            CallFunc_SGK_CellSlots_Cells;                      // 0x0078(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UBP_InventoryCell_C*                    CallFunc_Array_Get_Item_1;                         // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryCell_C_HideCheckCellsOverlay) == 0x000008, "Wrong alignment on BP_InventoryCell_C_HideCheckCellsOverlay");
static_assert(sizeof(BP_InventoryCell_C_HideCheckCellsOverlay) == 0x000098, "Wrong size on BP_InventoryCell_C_HideCheckCellsOverlay");
static_assert(offsetof(BP_InventoryCell_C_HideCheckCellsOverlay, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_InventoryCell_C_HideCheckCellsOverlay::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_HideCheckCellsOverlay, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_InventoryCell_C_HideCheckCellsOverlay::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_HideCheckCellsOverlay, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_InventoryCell_C_HideCheckCellsOverlay::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_HideCheckCellsOverlay, K2Node_DynamicCast_AsBP_SGKGrid_Interface) == 0x000010, "Member 'BP_InventoryCell_C_HideCheckCellsOverlay::K2Node_DynamicCast_AsBP_SGKGrid_Interface' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_HideCheckCellsOverlay, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_InventoryCell_C_HideCheckCellsOverlay::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_HideCheckCellsOverlay, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_InventoryCell_C_HideCheckCellsOverlay::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_HideCheckCellsOverlay, CallFunc_SGK_CellSlots_Cells) == 0x000078, "Member 'BP_InventoryCell_C_HideCheckCellsOverlay::CallFunc_SGK_CellSlots_Cells' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_HideCheckCellsOverlay, CallFunc_Array_Get_Item_1) == 0x000088, "Member 'BP_InventoryCell_C_HideCheckCellsOverlay::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_HideCheckCellsOverlay, CallFunc_Array_Length_ReturnValue) == 0x000090, "Member 'BP_InventoryCell_C_HideCheckCellsOverlay::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_HideCheckCellsOverlay, CallFunc_IsValid_ReturnValue) == 0x000094, "Member 'BP_InventoryCell_C_HideCheckCellsOverlay::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_HideCheckCellsOverlay, CallFunc_Less_IntInt_ReturnValue) == 0x000095, "Member 'BP_InventoryCell_C_HideCheckCellsOverlay::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_InventoryCell.BP_InventoryCell_C.ItemDragOver
// 0x0030 (0x0030 - 0x0000)
struct BP_InventoryCell_C_ItemDragOver final
{
public:
	class UDragDropOperation*                     DragOperation;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              NewLocalVar_0;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MoveIcon_C*                         MoveWidgetL;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_MoveIcon_C*                         K2Node_DynamicCast_AsBP_Move_Icon;                 // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryCell_C_ItemDragOver) == 0x000008, "Wrong alignment on BP_InventoryCell_C_ItemDragOver");
static_assert(sizeof(BP_InventoryCell_C_ItemDragOver) == 0x000030, "Wrong size on BP_InventoryCell_C_ItemDragOver");
static_assert(offsetof(BP_InventoryCell_C_ItemDragOver, DragOperation) == 0x000000, "Member 'BP_InventoryCell_C_ItemDragOver::DragOperation' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ItemDragOver, NewLocalVar_0) == 0x000008, "Member 'BP_InventoryCell_C_ItemDragOver::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ItemDragOver, MoveWidgetL) == 0x000018, "Member 'BP_InventoryCell_C_ItemDragOver::MoveWidgetL' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ItemDragOver, K2Node_DynamicCast_AsBP_Move_Icon) == 0x000020, "Member 'BP_InventoryCell_C_ItemDragOver::K2Node_DynamicCast_AsBP_Move_Icon' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ItemDragOver, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_InventoryCell_C_ItemDragOver::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_InventoryCell.BP_InventoryCell_C.OnDragCancelled
// 0x00A0 (0x00A0 - 0x0000)
struct BP_InventoryCell_C_OnDragCancelled final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryCell_C_OnDragCancelled) == 0x000008, "Wrong alignment on BP_InventoryCell_C_OnDragCancelled");
static_assert(sizeof(BP_InventoryCell_C_OnDragCancelled) == 0x0000A0, "Wrong size on BP_InventoryCell_C_OnDragCancelled");
static_assert(offsetof(BP_InventoryCell_C_OnDragCancelled, PointerEvent) == 0x000000, "Member 'BP_InventoryCell_C_OnDragCancelled::PointerEvent' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDragCancelled, Operation) == 0x000098, "Member 'BP_InventoryCell_C_OnDragCancelled::Operation' has a wrong offset!");

// Function BP_InventoryCell.BP_InventoryCell_C.OnDragEnter
// 0x00E0 (0x00E0 - 0x0000)
struct BP_InventoryCell_C_OnDragEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0040(0x0098)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryCell_C_OnDragEnter) == 0x000008, "Wrong alignment on BP_InventoryCell_C_OnDragEnter");
static_assert(sizeof(BP_InventoryCell_C_OnDragEnter) == 0x0000E0, "Wrong size on BP_InventoryCell_C_OnDragEnter");
static_assert(offsetof(BP_InventoryCell_C_OnDragEnter, MyGeometry) == 0x000000, "Member 'BP_InventoryCell_C_OnDragEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDragEnter, PointerEvent) == 0x000040, "Member 'BP_InventoryCell_C_OnDragEnter::PointerEvent' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDragEnter, Operation) == 0x0000D8, "Member 'BP_InventoryCell_C_OnDragEnter::Operation' has a wrong offset!");

// Function BP_InventoryCell.BP_InventoryCell_C.OnDragLeave
// 0x00A0 (0x00A0 - 0x0000)
struct BP_InventoryCell_C_OnDragLeave final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0098)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryCell_C_OnDragLeave) == 0x000008, "Wrong alignment on BP_InventoryCell_C_OnDragLeave");
static_assert(sizeof(BP_InventoryCell_C_OnDragLeave) == 0x0000A0, "Wrong size on BP_InventoryCell_C_OnDragLeave");
static_assert(offsetof(BP_InventoryCell_C_OnDragLeave, PointerEvent) == 0x000000, "Member 'BP_InventoryCell_C_OnDragLeave::PointerEvent' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDragLeave, Operation) == 0x000098, "Member 'BP_InventoryCell_C_OnDragLeave::Operation' has a wrong offset!");

// Function BP_InventoryCell.BP_InventoryCell_C.OnDrop
// 0x04B8 (0x04B8 - 0x0000)
struct BP_InventoryCell_C_OnDrop final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0040(0x0098)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14A1[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MoveIcon_C*                         MoveWidgetL;                                       // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FS_NotificationDetails                 K2Node_MakeStruct_S_NotificationDetails;           // 0x00F0(0x0038)(HasGetValueTypeHash)
	struct FS_NotificationDetails                 K2Node_MakeStruct_S_NotificationDetails_1;         // 0x0128(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_SelectAttachmentItem_IsValid;             // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14A2[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_AttachmentSlot                      CallFunc_SelectAttachmentItem_ReturnValue;         // 0x0168(0x0048)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_FuelItemChecks_Allow;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14A3[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_WeaponSlot                          CallFunc_SelectedWeaponSlot_ReturnValue;           // 0x01B8(0x0050)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_NotificationDetails                 K2Node_MakeStruct_S_NotificationDetails_2;         // 0x0208(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_FuelItemChecks_Allow_1;                   // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14A4[0x7];                                     // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_NotificationDetails                 K2Node_MakeStruct_S_NotificationDetails_3;         // 0x0248(0x0038)(HasGetValueTypeHash)
	struct FS_EquipmentSlot                       CallFunc_SelectEquipmentSlot_ReturnValue;          // 0x0280(0x0048)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_FuelItemChecks_Allow_2;                   // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SGK_GetInvSlot_SlotFound;                 // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14A5[0x6];                                     // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InvSlot                             CallFunc_SGK_GetInvSlot_InvSlot;                   // 0x02D0(0x0050)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_FuelItemChecks_Allow_3;                   // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0321(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14A6[0x6];                                     // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InvSlotID                           K2Node_MakeStruct_S_InvSlotID;                     // 0x0328(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_NotificationDetails                 K2Node_MakeStruct_S_NotificationDetails_4;         // 0x0338(0x0038)(HasGetValueTypeHash)
	struct FS_NotificationDetails                 K2Node_MakeStruct_S_NotificationDetails_5;         // 0x0370(0x0038)(HasGetValueTypeHash)
	struct FS_WeaponSlot                          CallFunc_SelectedWeaponSlot_ReturnValue_1;         // 0x03A8(0x0050)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_HoldingWeaponCheck_ReturnValue;           // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SGK_GetInvSlot_SlotFound_1;               // 0x03F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14A7[0x6];                                     // 0x03FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InvSlot                             CallFunc_SGK_GetInvSlot_InvSlot_1;                 // 0x0400(0x0050)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_HoldingItemCheck_ReturnValue;             // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14A8[0x7];                                     // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_EquipmentSlotID                     K2Node_MakeStruct_S_EquipmentSlotID;               // 0x0458(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_InvSlotID                           K2Node_MakeStruct_S_InvSlotID_1;                   // 0x0468(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_WeaponSlotID                        K2Node_MakeStruct_S_WeaponSlotID;                  // 0x0478(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_InvSlotID                           K2Node_MakeStruct_S_InvSlotID_2;                   // 0x0488(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_InvSlotID                           K2Node_MakeStruct_S_InvSlotID_3;                   // 0x0498(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	class UBP_MoveIcon_C*                         K2Node_DynamicCast_AsBP_Move_Icon;                 // 0x04A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryCell_C_OnDrop) == 0x000008, "Wrong alignment on BP_InventoryCell_C_OnDrop");
static_assert(sizeof(BP_InventoryCell_C_OnDrop) == 0x0004B8, "Wrong size on BP_InventoryCell_C_OnDrop");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, MyGeometry) == 0x000000, "Member 'BP_InventoryCell_C_OnDrop::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, PointerEvent) == 0x000040, "Member 'BP_InventoryCell_C_OnDrop::PointerEvent' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, Operation) == 0x0000D8, "Member 'BP_InventoryCell_C_OnDrop::Operation' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, ReturnValue) == 0x0000E0, "Member 'BP_InventoryCell_C_OnDrop::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, MoveWidgetL) == 0x0000E8, "Member 'BP_InventoryCell_C_OnDrop::MoveWidgetL' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_MakeStruct_S_NotificationDetails) == 0x0000F0, "Member 'BP_InventoryCell_C_OnDrop::K2Node_MakeStruct_S_NotificationDetails' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_MakeStruct_S_NotificationDetails_1) == 0x000128, "Member 'BP_InventoryCell_C_OnDrop::K2Node_MakeStruct_S_NotificationDetails_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_SelectAttachmentItem_IsValid) == 0x000160, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_SelectAttachmentItem_IsValid' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_SelectAttachmentItem_ReturnValue) == 0x000168, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_SelectAttachmentItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_FuelItemChecks_Allow) == 0x0001B0, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_FuelItemChecks_Allow' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_SelectedWeaponSlot_ReturnValue) == 0x0001B8, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_SelectedWeaponSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_MakeStruct_S_NotificationDetails_2) == 0x000208, "Member 'BP_InventoryCell_C_OnDrop::K2Node_MakeStruct_S_NotificationDetails_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_FuelItemChecks_Allow_1) == 0x000240, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_FuelItemChecks_Allow_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_MakeStruct_S_NotificationDetails_3) == 0x000248, "Member 'BP_InventoryCell_C_OnDrop::K2Node_MakeStruct_S_NotificationDetails_3' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_SelectEquipmentSlot_ReturnValue) == 0x000280, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_SelectEquipmentSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_FuelItemChecks_Allow_2) == 0x0002C8, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_FuelItemChecks_Allow_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_SGK_GetInvSlot_SlotFound) == 0x0002C9, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_SGK_GetInvSlot_SlotFound' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_SGK_GetInvSlot_InvSlot) == 0x0002D0, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_SGK_GetInvSlot_InvSlot' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_FuelItemChecks_Allow_3) == 0x000320, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_FuelItemChecks_Allow_3' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_SwitchEnum_CmpSuccess) == 0x000321, "Member 'BP_InventoryCell_C_OnDrop::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_MakeStruct_S_InvSlotID) == 0x000328, "Member 'BP_InventoryCell_C_OnDrop::K2Node_MakeStruct_S_InvSlotID' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_MakeStruct_S_NotificationDetails_4) == 0x000338, "Member 'BP_InventoryCell_C_OnDrop::K2Node_MakeStruct_S_NotificationDetails_4' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_MakeStruct_S_NotificationDetails_5) == 0x000370, "Member 'BP_InventoryCell_C_OnDrop::K2Node_MakeStruct_S_NotificationDetails_5' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_SelectedWeaponSlot_ReturnValue_1) == 0x0003A8, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_SelectedWeaponSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_HoldingWeaponCheck_ReturnValue) == 0x0003F8, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_HoldingWeaponCheck_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_SGK_GetInvSlot_SlotFound_1) == 0x0003F9, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_SGK_GetInvSlot_SlotFound_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_SGK_GetInvSlot_InvSlot_1) == 0x000400, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_SGK_GetInvSlot_InvSlot_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, CallFunc_HoldingItemCheck_ReturnValue) == 0x000450, "Member 'BP_InventoryCell_C_OnDrop::CallFunc_HoldingItemCheck_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_MakeStruct_S_EquipmentSlotID) == 0x000458, "Member 'BP_InventoryCell_C_OnDrop::K2Node_MakeStruct_S_EquipmentSlotID' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_MakeStruct_S_InvSlotID_1) == 0x000468, "Member 'BP_InventoryCell_C_OnDrop::K2Node_MakeStruct_S_InvSlotID_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_MakeStruct_S_WeaponSlotID) == 0x000478, "Member 'BP_InventoryCell_C_OnDrop::K2Node_MakeStruct_S_WeaponSlotID' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_MakeStruct_S_InvSlotID_2) == 0x000488, "Member 'BP_InventoryCell_C_OnDrop::K2Node_MakeStruct_S_InvSlotID_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_MakeStruct_S_InvSlotID_3) == 0x000498, "Member 'BP_InventoryCell_C_OnDrop::K2Node_MakeStruct_S_InvSlotID_3' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_DynamicCast_AsBP_Move_Icon) == 0x0004A8, "Member 'BP_InventoryCell_C_OnDrop::K2Node_DynamicCast_AsBP_Move_Icon' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_OnDrop, K2Node_DynamicCast_bSuccess) == 0x0004B0, "Member 'BP_InventoryCell_C_OnDrop::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_InventoryCell.BP_InventoryCell_C.ShowCheckCellsOverlay
// 0x00B0 (0x00B0 - 0x0000)
struct BP_InventoryCell_C_ShowCheckCellsOverlay final
{
public:
	TArray<struct FS_InvSlot>                     Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14A9[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InvSlot                             CallFunc_Array_Get_Item;                           // 0x0020(0x0050)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14AA[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBP_SGKGridInterface_C> K2Node_DynamicCast_AsBP_SGKGrid_Interface;         // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14AB[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_InventoryCell_C*>            CallFunc_SGK_CellSlots_Cells;                      // 0x0090(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UBP_InventoryCell_C*                    CallFunc_Array_Get_Item_1;                         // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryCell_C_ShowCheckCellsOverlay) == 0x000008, "Wrong alignment on BP_InventoryCell_C_ShowCheckCellsOverlay");
static_assert(sizeof(BP_InventoryCell_C_ShowCheckCellsOverlay) == 0x0000B0, "Wrong size on BP_InventoryCell_C_ShowCheckCellsOverlay");
static_assert(offsetof(BP_InventoryCell_C_ShowCheckCellsOverlay, Array) == 0x000000, "Member 'BP_InventoryCell_C_ShowCheckCellsOverlay::Array' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ShowCheckCellsOverlay, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_InventoryCell_C_ShowCheckCellsOverlay::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ShowCheckCellsOverlay, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_InventoryCell_C_ShowCheckCellsOverlay::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ShowCheckCellsOverlay, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_InventoryCell_C_ShowCheckCellsOverlay::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ShowCheckCellsOverlay, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_InventoryCell_C_ShowCheckCellsOverlay::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ShowCheckCellsOverlay, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'BP_InventoryCell_C_ShowCheckCellsOverlay::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ShowCheckCellsOverlay, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'BP_InventoryCell_C_ShowCheckCellsOverlay::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ShowCheckCellsOverlay, K2Node_DynamicCast_AsBP_SGKGrid_Interface) == 0x000078, "Member 'BP_InventoryCell_C_ShowCheckCellsOverlay::K2Node_DynamicCast_AsBP_SGKGrid_Interface' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ShowCheckCellsOverlay, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'BP_InventoryCell_C_ShowCheckCellsOverlay::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ShowCheckCellsOverlay, CallFunc_SGK_CellSlots_Cells) == 0x000090, "Member 'BP_InventoryCell_C_ShowCheckCellsOverlay::CallFunc_SGK_CellSlots_Cells' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ShowCheckCellsOverlay, CallFunc_Array_Get_Item_1) == 0x0000A0, "Member 'BP_InventoryCell_C_ShowCheckCellsOverlay::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryCell_C_ShowCheckCellsOverlay, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'BP_InventoryCell_C_ShowCheckCellsOverlay::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_InventoryCell.BP_InventoryCell_C.UpdateOverLay
// 0x0008 (0x0008 - 0x0000)
struct BP_InventoryCell_C_UpdateOverLay final
{
public:
	class UBP_MoveIcon_C*                         Move_Widget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryCell_C_UpdateOverLay) == 0x000008, "Wrong alignment on BP_InventoryCell_C_UpdateOverLay");
static_assert(sizeof(BP_InventoryCell_C_UpdateOverLay) == 0x000008, "Wrong size on BP_InventoryCell_C_UpdateOverLay");
static_assert(offsetof(BP_InventoryCell_C_UpdateOverLay, Move_Widget) == 0x000000, "Member 'BP_InventoryCell_C_UpdateOverLay::Move_Widget' has a wrong offset!");

}

