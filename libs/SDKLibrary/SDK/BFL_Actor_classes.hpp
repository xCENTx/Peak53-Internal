#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFL_Actor

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BFL_Actor.BFL_Actor_C
// 0x0000 (0x0028 - 0x0028)
class UBFL_Actor_C final : public UBlueprintFunctionLibrary
{
public:
	static void StopHitStop(class AActor* Target, class UObject* __WorldContext);
	static void StartHitStop(class AActor* Actor, double Duration, class UObject* __WorldContext);
	static bool SetActorTransformToNewTransform(class AActor* TargetActor, double InterpSpeed, const struct FTransform& Transform, float LocationTolerance, class UObject* __WorldContext);
	static bool SetActorTransformToNewActorLocation(class USceneComponent* Target_componet, class AActor* TargetActor, double InterpSpeed, class UObject* __WorldContext);
	static void RandomColor(class UObject* __WorldContext, struct FColor* Color);
	static void IsRightOfActor_(class AActor* Actor, class AActor* OtherActor, class UObject* __WorldContext, bool* IsOnRightSide_);
	static void IsInFrontOfActor_(class AActor* Actor, class AActor* OtherActor, double AcceptanceAngle, bool UseXY_, bool Debug, class UObject* __WorldContext, bool* IsInfront_);
	static void GetSpeed(const struct FVector& VelocityThisFrame, const struct FVector& VelocityLastFrame, double DeltaTime, class UObject* __WorldContext, double* Speed);
	static void GetRandomPointOnSphere(const struct FVector& Origin, double Radius, bool Debug, class UObject* __WorldContext, struct FVector* CirclePoint);
	static void GetRandomPointOnCircle(const struct FVector& Origin, double Radius, bool Debug, const struct FVector& YAxis, const struct FVector& ZAxis, class UObject* __WorldContext, struct FVector* CirclePoint);
	static void GetFurthestInstance(TArray<class AActor*>& ActorArray, const struct FVector& Origin, bool UseXY_, bool Squared_, bool Debug, class UObject* __WorldContext, class AActor** FurthestActor, double* Distance);
	static void GetFurthestActorOfClass(class UClass* ActorClass, const struct FVector& Origin, bool UseXY_, bool Squared_, bool Debug, class UObject* __WorldContext, class AActor** FurthestActor, double* Distance);
	static void GetDistanceToPoint(const struct FVector& Source, const struct FVector& Target, bool UseXY_, bool DistanceSquared_, bool Debug, double DebugDrawDuration, class UObject* __WorldContext, double* Distance);
	static void GetClosestInstance(TArray<class AActor*>& ActorArray, const struct FVector& Origin, bool UseXY_, bool Squared_, bool Debug, class UObject* __WorldContext, class AActor** ClosestActor, double* Distance);
	static void GetClosestActorOfClass(class UClass* ActorClass, const struct FVector& Origin, bool UseXY_, bool Squared_, bool Debug, class UObject* __WorldContext, class AActor** ClosestActor, double* Distance);
	static void GetAngleBetweenActors(class AActor* Actor, class AActor* OtherActor, bool Degrees, bool Debug, class UObject* __WorldContext, double* Angle);
	static void CheckInFront(const struct FVector& Source, const struct FVector& SourceForward, const struct FVector& Target, bool ShowDebug, double MaxAngle, class UObject* __WorldContext, bool* IsInfront_);
	static void CanSeeActor_(const struct FVector& EyeLocation, class AActor* Target, TArray<class AActor*>& ActorsToIgnore, class UObject* __WorldContext, bool* CanSee_);
	static void AddToAngle(double Angle, double NewDegrees, bool Degrees_, class UObject* __WorldContext, double* NewAngle);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BFL_Actor_C">();
	}
	static class UBFL_Actor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBFL_Actor_C>();
	}
};
static_assert(alignof(UBFL_Actor_C) == 0x000008, "Wrong alignment on UBFL_Actor_C");
static_assert(sizeof(UBFL_Actor_C) == 0x000028, "Wrong size on UBFL_Actor_C");

}

