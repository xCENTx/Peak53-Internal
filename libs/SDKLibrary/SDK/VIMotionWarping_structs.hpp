#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VIMotionWarping

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum VIMotionWarping.EVIRootMotionModifierState
// NumValues: 0x0005
enum class EVIRootMotionModifierState : uint8
{
	Waiting                                  = 0,
	Active                                   = 1,
	MarkedForRemoval                         = 2,
	Disabled                                 = 3,
	EVIRootMotionModifierState_MAX           = 4,
};

// Enum VIMotionWarping.EVIMotionWarpRotationType
// NumValues: 0x0003
enum class EVIMotionWarpRotationType : uint8
{
	Default                                  = 0,
	Facing                                   = 1,
	EVIMotionWarpRotationType_MAX            = 2,
};

// ScriptStruct VIMotionWarping.VIMotionWarpingWindowData
// 0x0010 (0x0010 - 0x0000)
struct FVIMotionWarpingWindowData final
{
public:
	class UVIAnimNotifyState_MotionWarping*       VIAnimNotify;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVIMotionWarpingWindowData) == 0x000008, "Wrong alignment on FVIMotionWarpingWindowData");
static_assert(sizeof(FVIMotionWarpingWindowData) == 0x000010, "Wrong size on FVIMotionWarpingWindowData");
static_assert(offsetof(FVIMotionWarpingWindowData, VIAnimNotify) == 0x000000, "Member 'FVIMotionWarpingWindowData::VIAnimNotify' has a wrong offset!");
static_assert(offsetof(FVIMotionWarpingWindowData, StartTime) == 0x000008, "Member 'FVIMotionWarpingWindowData::StartTime' has a wrong offset!");
static_assert(offsetof(FVIMotionWarpingWindowData, EndTime) == 0x00000C, "Member 'FVIMotionWarpingWindowData::EndTime' has a wrong offset!");

// ScriptStruct VIMotionWarping.VIRootMotionModifier
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FVIRootMotionModifier
{
public:
	uint8                                         Pad_1B1D[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UAnimSequenceBase>       Animation;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousPosition;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentPosition;                                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLocalSpace;                                     // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVIRootMotionModifierState                    State;                                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1E[0x2];                                     // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVIRootMotionModifier) == 0x000008, "Wrong alignment on FVIRootMotionModifier");
static_assert(sizeof(FVIRootMotionModifier) == 0x000028, "Wrong size on FVIRootMotionModifier");
static_assert(offsetof(FVIRootMotionModifier, Animation) == 0x000008, "Member 'FVIRootMotionModifier::Animation' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier, StartTime) == 0x000010, "Member 'FVIRootMotionModifier::StartTime' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier, EndTime) == 0x000014, "Member 'FVIRootMotionModifier::EndTime' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier, PreviousPosition) == 0x000018, "Member 'FVIRootMotionModifier::PreviousPosition' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier, CurrentPosition) == 0x00001C, "Member 'FVIRootMotionModifier::CurrentPosition' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier, Weight) == 0x000020, "Member 'FVIRootMotionModifier::Weight' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier, bInLocalSpace) == 0x000024, "Member 'FVIRootMotionModifier::bInLocalSpace' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier, State) == 0x000025, "Member 'FVIRootMotionModifier::State' has a wrong offset!");

// ScriptStruct VIMotionWarping.VIMotionWarpingSyncPoint
// 0x0040 (0x0040 - 0x0000)
struct FVIMotionWarpingSyncPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B1F[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0020(0x0020)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FVIMotionWarpingSyncPoint) == 0x000010, "Wrong alignment on FVIMotionWarpingSyncPoint");
static_assert(sizeof(FVIMotionWarpingSyncPoint) == 0x000040, "Wrong size on FVIMotionWarpingSyncPoint");
static_assert(offsetof(FVIMotionWarpingSyncPoint, Location) == 0x000000, "Member 'FVIMotionWarpingSyncPoint::Location' has a wrong offset!");
static_assert(offsetof(FVIMotionWarpingSyncPoint, Rotation) == 0x000020, "Member 'FVIMotionWarpingSyncPoint::Rotation' has a wrong offset!");

// ScriptStruct VIMotionWarping.VIRootMotionModifier_Warp
// 0x0058 (0x0080 - 0x0028)
struct FVIRootMotionModifier_Warp : public FVIRootMotionModifier
{
public:
	class FName                                   SyncPointName;                                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpTranslation;                                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreZAxis;                                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpRotation;                                     // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVIMotionWarpRotationType                     RotationType;                                      // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarpRotationTimeMultiplier;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B20[0x8];                                     // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVIMotionWarpingSyncPoint              CachedSyncPoint;                                   // 0x0040(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVIRootMotionModifier_Warp) == 0x000010, "Wrong alignment on FVIRootMotionModifier_Warp");
static_assert(sizeof(FVIRootMotionModifier_Warp) == 0x000080, "Wrong size on FVIRootMotionModifier_Warp");
static_assert(offsetof(FVIRootMotionModifier_Warp, SyncPointName) == 0x000028, "Member 'FVIRootMotionModifier_Warp::SyncPointName' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier_Warp, bWarpTranslation) == 0x000030, "Member 'FVIRootMotionModifier_Warp::bWarpTranslation' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier_Warp, bIgnoreZAxis) == 0x000031, "Member 'FVIRootMotionModifier_Warp::bIgnoreZAxis' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier_Warp, bWarpRotation) == 0x000032, "Member 'FVIRootMotionModifier_Warp::bWarpRotation' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier_Warp, RotationType) == 0x000033, "Member 'FVIRootMotionModifier_Warp::RotationType' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier_Warp, WarpRotationTimeMultiplier) == 0x000034, "Member 'FVIRootMotionModifier_Warp::WarpRotationTimeMultiplier' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier_Warp, CachedSyncPoint) == 0x000040, "Member 'FVIRootMotionModifier_Warp::CachedSyncPoint' has a wrong offset!");

// ScriptStruct VIMotionWarping.VIRootMotionModifier_Scale
// 0x0018 (0x0040 - 0x0028)
struct FVIRootMotionModifier_Scale final : public FVIRootMotionModifier
{
public:
	struct FVector                                Scale;                                             // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVIRootMotionModifier_Scale) == 0x000008, "Wrong alignment on FVIRootMotionModifier_Scale");
static_assert(sizeof(FVIRootMotionModifier_Scale) == 0x000040, "Wrong size on FVIRootMotionModifier_Scale");
static_assert(offsetof(FVIRootMotionModifier_Scale, Scale) == 0x000028, "Member 'FVIRootMotionModifier_Scale::Scale' has a wrong offset!");

// ScriptStruct VIMotionWarping.VIMotionDeltaTrack
// 0x0060 (0x0060 - 0x0000)
struct FVIMotionDeltaTrack final
{
public:
	TArray<struct FTransform>                     BoneTransformTrack;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        DeltaTranslationTrack;                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       DeltaRotationTrack;                                // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                TotalTranslation;                                  // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TotalRotation;                                     // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVIMotionDeltaTrack) == 0x000008, "Wrong alignment on FVIMotionDeltaTrack");
static_assert(sizeof(FVIMotionDeltaTrack) == 0x000060, "Wrong size on FVIMotionDeltaTrack");
static_assert(offsetof(FVIMotionDeltaTrack, BoneTransformTrack) == 0x000000, "Member 'FVIMotionDeltaTrack::BoneTransformTrack' has a wrong offset!");
static_assert(offsetof(FVIMotionDeltaTrack, DeltaTranslationTrack) == 0x000010, "Member 'FVIMotionDeltaTrack::DeltaTranslationTrack' has a wrong offset!");
static_assert(offsetof(FVIMotionDeltaTrack, DeltaRotationTrack) == 0x000020, "Member 'FVIMotionDeltaTrack::DeltaRotationTrack' has a wrong offset!");
static_assert(offsetof(FVIMotionDeltaTrack, TotalTranslation) == 0x000030, "Member 'FVIMotionDeltaTrack::TotalTranslation' has a wrong offset!");
static_assert(offsetof(FVIMotionDeltaTrack, TotalRotation) == 0x000048, "Member 'FVIMotionDeltaTrack::TotalRotation' has a wrong offset!");

// ScriptStruct VIMotionWarping.VIMotionDeltaTrackContainer
// 0x0010 (0x0010 - 0x0000)
struct FVIMotionDeltaTrackContainer final
{
public:
	TArray<struct FVIMotionDeltaTrack>            Tracks;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVIMotionDeltaTrackContainer) == 0x000008, "Wrong alignment on FVIMotionDeltaTrackContainer");
static_assert(sizeof(FVIMotionDeltaTrackContainer) == 0x000010, "Wrong size on FVIMotionDeltaTrackContainer");
static_assert(offsetof(FVIMotionDeltaTrackContainer, Tracks) == 0x000000, "Member 'FVIMotionDeltaTrackContainer::Tracks' has a wrong offset!");

// ScriptStruct VIMotionWarping.VIRootMotionModifier_AdjustmentBlendWarp
// 0x0170 (0x01F0 - 0x0080)
struct FVIRootMotionModifier_AdjustmentBlendWarp final : public FVIRootMotionModifier_Warp
{
public:
	bool                                          bWarpIKBones;                                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B21[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IKBones;                                           // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B22[0x8];                                     // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CachedMeshTransform;                               // 0x00A0(0x0060)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTransform                             CachedMeshRelativeTransform;                       // 0x0100(0x0060)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTransform                             CachedVIRootMotion;                                // 0x0160(0x0060)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAnimSequenceTrackContainer            Result;                                            // 0x01C0(0x0020)(Protected, NativeAccessSpecifierProtected)
	float                                         ActualStartTime;                                   // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B23[0xC];                                     // 0x01E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVIRootMotionModifier_AdjustmentBlendWarp) == 0x000010, "Wrong alignment on FVIRootMotionModifier_AdjustmentBlendWarp");
static_assert(sizeof(FVIRootMotionModifier_AdjustmentBlendWarp) == 0x0001F0, "Wrong size on FVIRootMotionModifier_AdjustmentBlendWarp");
static_assert(offsetof(FVIRootMotionModifier_AdjustmentBlendWarp, bWarpIKBones) == 0x000080, "Member 'FVIRootMotionModifier_AdjustmentBlendWarp::bWarpIKBones' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier_AdjustmentBlendWarp, IKBones) == 0x000088, "Member 'FVIRootMotionModifier_AdjustmentBlendWarp::IKBones' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier_AdjustmentBlendWarp, CachedMeshTransform) == 0x0000A0, "Member 'FVIRootMotionModifier_AdjustmentBlendWarp::CachedMeshTransform' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier_AdjustmentBlendWarp, CachedMeshRelativeTransform) == 0x000100, "Member 'FVIRootMotionModifier_AdjustmentBlendWarp::CachedMeshRelativeTransform' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier_AdjustmentBlendWarp, CachedVIRootMotion) == 0x000160, "Member 'FVIRootMotionModifier_AdjustmentBlendWarp::CachedVIRootMotion' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier_AdjustmentBlendWarp, Result) == 0x0001C0, "Member 'FVIRootMotionModifier_AdjustmentBlendWarp::Result' has a wrong offset!");
static_assert(offsetof(FVIRootMotionModifier_AdjustmentBlendWarp, ActualStartTime) == 0x0001E0, "Member 'FVIRootMotionModifier_AdjustmentBlendWarp::ActualStartTime' has a wrong offset!");

// ScriptStruct VIMotionWarping.VIRootMotionModifier_SkewWarp
// 0x0000 (0x0080 - 0x0080)
struct FVIRootMotionModifier_SkewWarp final : public FVIRootMotionModifier_Warp
{
};
static_assert(alignof(FVIRootMotionModifier_SkewWarp) == 0x000010, "Wrong alignment on FVIRootMotionModifier_SkewWarp");
static_assert(sizeof(FVIRootMotionModifier_SkewWarp) == 0x000080, "Wrong size on FVIRootMotionModifier_SkewWarp");

}

