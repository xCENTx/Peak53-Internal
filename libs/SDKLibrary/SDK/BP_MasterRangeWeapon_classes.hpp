#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterRangeWeapon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_FireModes_structs.hpp"
#include "S_WeaponRecoil_structs.hpp"
#include "E_DamageType_structs.hpp"
#include "E_CharacterState_structs.hpp"
#include "S_InvSlot_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_MasterWeapon_classes.hpp"
#include "E_CameraType_structs.hpp"
#include "S_Damage_structs.hpp"
#include "E_AnimationState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterRangeWeapon.BP_MasterRangeWeapon_C
// 0x0530 (0x0E10 - 0x08E0)
class ABP_MasterRangeWeapon_C : public ABP_MasterWeapon_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MasterRangeWeapon_C;             // 0x08D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM4_Outline;                                       // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM2_Outline;                                       // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM3_Outline;                                       // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM5_Outline;                                       // 0x08F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM1_Outline;                                       // 0x0900(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM4;                                               // 0x0908(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Outline;                                           // 0x0910(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM3;                                               // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM5;                                               // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM2;                                               // 0x0928(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x0930(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM1;                                               // 0x0938(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x0940(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PickupVolume;                                      // 0x0948(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0950(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0958(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BulletSpawnLocation;                               // 0x0960(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ADS_Interpolation_NewTrack_0_75151D2B4C93410B73183CA14DA50164; // 0x0968(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ADS_Interpolation__Direction_75151D2B4C93410B73183CA14DA50164; // 0x096C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5714[0x3];                                     // 0x096D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ADS_Interpolation;                                 // 0x0970(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_6F2E135D4EE82100F05D2EBA0616F2AF; // 0x0978(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_6F2E135D4EE82100F05D2EBA0616F2AF; // 0x097C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5715[0x3];                                     // 0x097D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ADSCameraTimeLine_NewTrack_0_F88105B54EB196497B80B1963E00CAF6; // 0x0988(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ADSCameraTimeLine__Direction_F88105B54EB196497B80B1963E00CAF6; // 0x098C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5716[0x3];                                     // 0x098D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ADSCameraTimeLine;                                 // 0x0990(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Aimed;                                             // 0x0998(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5717[0x3];                                     // 0x0999(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxAmmo;                                           // 0x099C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FDataTableRowHandle>            AllowedAmmoTypes;                                  // 0x09A0(0x0010)(Edit, BlueprintVisible)
	bool                                          PrimaryActionDown;                                 // 0x09B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5718[0x7];                                     // 0x09B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InvSlot                             CurrentFireItem;                                   // 0x09B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	double                                        BustFireDelay;                                     // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AutoFireDelay;                                     // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SingleFireDelay;                                   // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AutoFireRate;                                      // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BurstFireCount;                                    // 0x0A28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5719[0x4];                                     // 0x0A2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Range;                                             // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               WeaponTraceChannel;                                // 0x0A38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SingleShot;                                        // 0x0A39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_571A[0x2];                                     // 0x0A3A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Multi_Shot_Count;                                  // 0x0A3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FireFromSocket;                                    // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PerShotItemCost;                                   // 0x0A48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_571B[0x4];                                     // 0x0A4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<E_FireModes>                             FireModes;                                         // 0x0A50(0x0050)(Edit, BlueprintVisible)
	int32                                         CurrentBurstCount;                                 // 0x0AA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_571C[0x4];                                     // 0x0AA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DistanceSpreadIncrease;                            // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDistanceSpreadIncrease;                         // 0x0AB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_571D[0x7];                                     // 0x0AB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DistanceSpreadMax;                                 // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartDistanceSpreadIncrease;                       // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<E_CharacterState, double>                Spread;                                            // 0x0AC8(0x0050)(Edit, BlueprintVisible)
	double                                        MaxSpread;                                         // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpreadIncreasePerShot;                             // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpreadReductionSpread;                             // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentSpread;                                     // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             NoAmmoSound;                                       // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FireSound;                                         // 0x0B40(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CharacterFireAnimation;                            // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      WeaponFireAnimation;                               // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         MuzzleFlashEffect;                                 // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   MuzzleFlashSocket;                                 // 0x0B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Muzzle_Effect;                                     // 0x0B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowChamberingReload;                             // 0x0B70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowChamberingReloadWithMagazineAttached;         // 0x0B71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_571E[0x6];                                     // 0x0B72(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CharacterChamberAnimation;                         // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FPCharacterChamberAnimation;                       // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      WeaponChamberAnimation;                            // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ChamberAddAmount;                                  // 0x0B90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_571F[0x4];                                     // 0x0B94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AmmoItemNames;                                     // 0x0B98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          UseAmmoDamageValues;                               // 0x0BA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5720[0x7];                                     // 0x0BA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_Damage>                      AmmoDamage;                                        // 0x0BB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DebugLineTrace;                                    // 0x0BC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAim;                                            // 0x0BC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ADSCameraDebug;                                    // 0x0BC2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5721[0x5];                                     // 0x0BC3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FirstPersonAimedFOV;                               // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThirdPersonAimedFOV;                               // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ADSCameraLocation;                                 // 0x0BD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartingTPFOV;                                     // 0x0BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartingFP_FOV;                                    // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AimedSway;                                         // 0x0C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TPStartFeildOfView;                                // 0x0C08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FPStartFieldOfView;                                // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SightFPFOV;                                        // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SightTPFOV;                                        // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SightFOV;                                          // 0x0C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5722[0x7];                                     // 0x0C29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SightLocation;                                     // 0x0C30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SightAiming;                                       // 0x0C48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5723[0x7];                                     // 0x0C49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DefaultFireSound;                                  // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AttachmentSpreadMod;                               // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MasterAttachment_C*                 Sight;                                             // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Spread;                                        // 0x0C68(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMode;                                         // 0x0C70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5724[0x3];                                     // 0x0C71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_WeaponRecoil                        PerShotRecoil;                                     // 0x0C74(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChamberNextRound;                                  // 0x0C84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowChamberingWhenInInventory;                    // 0x0C85(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reload;                                            // 0x0C86(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5725[0x1];                                     // 0x0C87(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InvSlot                             RemoveItemL;                                       // 0x0C88(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	uint8                                         Pad_5726[0x8];                                     // 0x0CD8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ThirdPersonAimedHandIK;                            // 0x0CE0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             FirstPersonAimedHandIK;                            // 0x0D40(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MasterAttachment_C*                 AimdSightReference;                                // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ADSCameraAlpha;                                    // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CharacterAimedFireAnimation;                       // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         RemoveAmount;                                      // 0x0DB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowReloadCancel;                                 // 0x0DBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5727[0x3];                                     // 0x0DBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SpreadAttachmentPerShotMod;                        // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinSpreadPerShot;                                  // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlashlight_;                                      // 0x0DD0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5728[0x3];                                     // 0x0DD1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DatatableName;                                     // 0x0DD4(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bDropped_;                                         // 0x0DDC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_5729[0x3];                                     // 0x0DDD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SGKMasterCharacter_C*               SgkActor;                                          // 0x0DE0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          OneTimePick;                                       // 0x0DE8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_572A[0x7];                                     // 0x0DE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      NiagaraDropEffect;                                 // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ChamberMemory;                                     // 0x0DF8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_572B[0x4];                                     // 0x0DFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUW_Scope_C*                            ScopeTextureWidget;                                // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ADS_ON_;                                           // 0x0E08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ADS_Aimed(bool bPickA);
	void ADS_Interpolation__FinishedFunc();
	void ADS_Interpolation__UpdateFunc();
	void ADSCameraTimeLine__FinishedFunc();
	void ADSCameraTimeLine__UpdateFunc();
	void ADSCameraTimelineReverse();
	void ApplyRangeWeaponAttachmentStats(class ABP_MasterAttachment_C* Attachment);
	void ApplyWeaponAttachmentStats(class ABP_MasterAttachment_C* Attachment);
	void BndEvt__BP_MasterRangeWeapon_PickupVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_MasterRangeWeapon_PickupVolume_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CalculateHoldableSway();
	void CalculateWeaponSway();
	void CanShoot_(bool* TURR);
	void ChamberAmmoCheck(bool* AmmoFound);
	void CharacterFalling();
	void CharacterSprinting(bool Sprinting);
	void CheckPlanting(bool* PlantingBomb);
	void ClientExitAim();
	void ClientFireWeapon();
	void ClientOwnerFireEffects();
	void ClientOwnerNoAmmoSound();
	void ClientSetReload(bool Param_Reload);
	void DecreaseSpread(double Amount);
	void DelayDestroyMC();
	void DelayDestroyServer();
	void ExecuteUbergraph_BP_MasterRangeWeapon(int32 EntryPoint);
	void Get_Sighted_FOV(double* Param_SightTPFOV);
	void HitscanTraces();
	void IncreaseSpread(double IncreaseAmount);
	void MulticastDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd);
	void MulticastDebugSphere(const struct FVector& Center);
	void MulticastFireEffects();
	void MulticastNoAmmoSound();
	void MulticastProjectileSpawn(const struct FVector& Location, const struct FRotator& Rotation, class FName AmmoID);
	void OnBlendOut_50B07BB945ECC720DEA04E837F2E618D(class FName NotifyName);
	void OnBlendOut_917101B3417C952AA8CFB6B82351D5EB(class FName NotifyName);
	void OnCompleted_50B07BB945ECC720DEA04E837F2E618D(class FName NotifyName);
	void OnCompleted_917101B3417C952AA8CFB6B82351D5EB(class FName NotifyName);
	void OnInterrupted_50B07BB945ECC720DEA04E837F2E618D(class FName NotifyName);
	void OnInterrupted_917101B3417C952AA8CFB6B82351D5EB(class FName NotifyName);
	void OnNotifyBegin_50B07BB945ECC720DEA04E837F2E618D(class FName NotifyName);
	void OnNotifyBegin_917101B3417C952AA8CFB6B82351D5EB(class FName NotifyName);
	void OnNotifyEnd_50B07BB945ECC720DEA04E837F2E618D(class FName NotifyName);
	void OnNotifyEnd_917101B3417C952AA8CFB6B82351D5EB(class FName NotifyName);
	void OnRep_bFlashlight_();
	void OnRep_OneTimePick();
	void OnRep_Reload();
	void OnRep_SgkActor();
	void OverrideMaterials(TArray<class UMaterialInstance*>& NewMaterials);
	void ProjectileCalculation();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void RemoveMagazineChecks(const struct FS_InvSlot& NewMagSlot);
	void RemoveRangeWeaponAttachmentStats(class ABP_MasterAttachment_C* Attachment);
	void RemoveWeaponAttchmentStats(class ABP_MasterAttachment_C* Attachment);
	void ResetReloadJamClient();
	void ResetReloadJamSv();
	void RestoreChamberAmount();
	void ScopeTextureFnRm(class USceneComponent* Mesh);
	void ScopetextureFunction(class USceneComponent* Mesh);
	void ServerChamberCheckes();
	void ServerExitAim(bool ClientExit);
	void ServerFireWeapon();
	void ServerPartReloadChecks();
	void ServerReloadChecks();
	void ServerUpdateBulletLocation(const struct FVector& Location);
	void ServerUpdateTraceStart(const struct FVector& Location, bool Relative);
	void SetChamberMemory();
	void SetFlashlightMulticast(bool Param_bFlashlight_);
	void SetFlashlightServer(bool Param_bFlashlight_);
	void SGK_Aimed(bool* Param_Aimed);
	void SGK_ChamberWeaponAmmo();
	void SGK_ClientPrimaryAction(bool KeyDown);
	void SGK_ClientReloadChecks();
	void SGK_ClientSecondaryAction(bool KeyDown);
	void SGK_HoldableMesh(class UPrimitiveComponent** Mesh);
	void SGK_NewHeld(bool Held);
	void SGK_ResetHoldable();
	void SGK_ServerPrimaryAction(bool KeyDown);
	void SGK_ServerSecondaryAction(bool KeyDown);
	void SGK_ToggleFireMode();
	void StartingFOV();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void UpdateBulletSpawnLocation();
	void UpdateMinSpread(E_CharacterState CharacterState);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterRangeWeapon_C">();
	}
	static class ABP_MasterRangeWeapon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MasterRangeWeapon_C>();
	}
};
static_assert(alignof(ABP_MasterRangeWeapon_C) == 0x000010, "Wrong alignment on ABP_MasterRangeWeapon_C");
static_assert(sizeof(ABP_MasterRangeWeapon_C) == 0x000E10, "Wrong size on ABP_MasterRangeWeapon_C");
static_assert(offsetof(ABP_MasterRangeWeapon_C, UberGraphFrame_BP_MasterRangeWeapon_C) == 0x0008D8, "Member 'ABP_MasterRangeWeapon_C::UberGraphFrame_BP_MasterRangeWeapon_C' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SM4_Outline) == 0x0008E0, "Member 'ABP_MasterRangeWeapon_C::SM4_Outline' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SM2_Outline) == 0x0008E8, "Member 'ABP_MasterRangeWeapon_C::SM2_Outline' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SM3_Outline) == 0x0008F0, "Member 'ABP_MasterRangeWeapon_C::SM3_Outline' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SM5_Outline) == 0x0008F8, "Member 'ABP_MasterRangeWeapon_C::SM5_Outline' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SM1_Outline) == 0x000900, "Member 'ABP_MasterRangeWeapon_C::SM1_Outline' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SM4) == 0x000908, "Member 'ABP_MasterRangeWeapon_C::SM4' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, Outline) == 0x000910, "Member 'ABP_MasterRangeWeapon_C::Outline' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SM3) == 0x000918, "Member 'ABP_MasterRangeWeapon_C::SM3' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SM5) == 0x000920, "Member 'ABP_MasterRangeWeapon_C::SM5' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SM2) == 0x000928, "Member 'ABP_MasterRangeWeapon_C::SM2' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, RotatingMovement) == 0x000930, "Member 'ABP_MasterRangeWeapon_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SM1) == 0x000938, "Member 'ABP_MasterRangeWeapon_C::SM1' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, Widget) == 0x000940, "Member 'ABP_MasterRangeWeapon_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, PickupVolume) == 0x000948, "Member 'ABP_MasterRangeWeapon_C::PickupVolume' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SpotLight) == 0x000950, "Member 'ABP_MasterRangeWeapon_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SkeletalMesh) == 0x000958, "Member 'ABP_MasterRangeWeapon_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, BulletSpawnLocation) == 0x000960, "Member 'ABP_MasterRangeWeapon_C::BulletSpawnLocation' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ADS_Interpolation_NewTrack_0_75151D2B4C93410B73183CA14DA50164) == 0x000968, "Member 'ABP_MasterRangeWeapon_C::ADS_Interpolation_NewTrack_0_75151D2B4C93410B73183CA14DA50164' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ADS_Interpolation__Direction_75151D2B4C93410B73183CA14DA50164) == 0x00096C, "Member 'ABP_MasterRangeWeapon_C::ADS_Interpolation__Direction_75151D2B4C93410B73183CA14DA50164' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ADS_Interpolation) == 0x000970, "Member 'ABP_MasterRangeWeapon_C::ADS_Interpolation' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, Timeline_0_NewTrack_0_6F2E135D4EE82100F05D2EBA0616F2AF) == 0x000978, "Member 'ABP_MasterRangeWeapon_C::Timeline_0_NewTrack_0_6F2E135D4EE82100F05D2EBA0616F2AF' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, Timeline_0__Direction_6F2E135D4EE82100F05D2EBA0616F2AF) == 0x00097C, "Member 'ABP_MasterRangeWeapon_C::Timeline_0__Direction_6F2E135D4EE82100F05D2EBA0616F2AF' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, Timeline_0) == 0x000980, "Member 'ABP_MasterRangeWeapon_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ADSCameraTimeLine_NewTrack_0_F88105B54EB196497B80B1963E00CAF6) == 0x000988, "Member 'ABP_MasterRangeWeapon_C::ADSCameraTimeLine_NewTrack_0_F88105B54EB196497B80B1963E00CAF6' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ADSCameraTimeLine__Direction_F88105B54EB196497B80B1963E00CAF6) == 0x00098C, "Member 'ABP_MasterRangeWeapon_C::ADSCameraTimeLine__Direction_F88105B54EB196497B80B1963E00CAF6' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ADSCameraTimeLine) == 0x000990, "Member 'ABP_MasterRangeWeapon_C::ADSCameraTimeLine' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, Aimed) == 0x000998, "Member 'ABP_MasterRangeWeapon_C::Aimed' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, MaxAmmo) == 0x00099C, "Member 'ABP_MasterRangeWeapon_C::MaxAmmo' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, AllowedAmmoTypes) == 0x0009A0, "Member 'ABP_MasterRangeWeapon_C::AllowedAmmoTypes' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, PrimaryActionDown) == 0x0009B0, "Member 'ABP_MasterRangeWeapon_C::PrimaryActionDown' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, CurrentFireItem) == 0x0009B8, "Member 'ABP_MasterRangeWeapon_C::CurrentFireItem' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, BustFireDelay) == 0x000A08, "Member 'ABP_MasterRangeWeapon_C::BustFireDelay' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, AutoFireDelay) == 0x000A10, "Member 'ABP_MasterRangeWeapon_C::AutoFireDelay' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SingleFireDelay) == 0x000A18, "Member 'ABP_MasterRangeWeapon_C::SingleFireDelay' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, AutoFireRate) == 0x000A20, "Member 'ABP_MasterRangeWeapon_C::AutoFireRate' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, BurstFireCount) == 0x000A28, "Member 'ABP_MasterRangeWeapon_C::BurstFireCount' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, Range) == 0x000A30, "Member 'ABP_MasterRangeWeapon_C::Range' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, WeaponTraceChannel) == 0x000A38, "Member 'ABP_MasterRangeWeapon_C::WeaponTraceChannel' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SingleShot) == 0x000A39, "Member 'ABP_MasterRangeWeapon_C::SingleShot' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, Multi_Shot_Count) == 0x000A3C, "Member 'ABP_MasterRangeWeapon_C::Multi_Shot_Count' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, FireFromSocket) == 0x000A40, "Member 'ABP_MasterRangeWeapon_C::FireFromSocket' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, PerShotItemCost) == 0x000A48, "Member 'ABP_MasterRangeWeapon_C::PerShotItemCost' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, FireModes) == 0x000A50, "Member 'ABP_MasterRangeWeapon_C::FireModes' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, CurrentBurstCount) == 0x000AA0, "Member 'ABP_MasterRangeWeapon_C::CurrentBurstCount' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, DistanceSpreadIncrease) == 0x000AA8, "Member 'ABP_MasterRangeWeapon_C::DistanceSpreadIncrease' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, UseDistanceSpreadIncrease) == 0x000AB0, "Member 'ABP_MasterRangeWeapon_C::UseDistanceSpreadIncrease' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, DistanceSpreadMax) == 0x000AB8, "Member 'ABP_MasterRangeWeapon_C::DistanceSpreadMax' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, StartDistanceSpreadIncrease) == 0x000AC0, "Member 'ABP_MasterRangeWeapon_C::StartDistanceSpreadIncrease' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, Spread) == 0x000AC8, "Member 'ABP_MasterRangeWeapon_C::Spread' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, MaxSpread) == 0x000B18, "Member 'ABP_MasterRangeWeapon_C::MaxSpread' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SpreadIncreasePerShot) == 0x000B20, "Member 'ABP_MasterRangeWeapon_C::SpreadIncreasePerShot' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SpreadReductionSpread) == 0x000B28, "Member 'ABP_MasterRangeWeapon_C::SpreadReductionSpread' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, CurrentSpread) == 0x000B30, "Member 'ABP_MasterRangeWeapon_C::CurrentSpread' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, NoAmmoSound) == 0x000B38, "Member 'ABP_MasterRangeWeapon_C::NoAmmoSound' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, FireSound) == 0x000B40, "Member 'ABP_MasterRangeWeapon_C::FireSound' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, CharacterFireAnimation) == 0x000B48, "Member 'ABP_MasterRangeWeapon_C::CharacterFireAnimation' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, WeaponFireAnimation) == 0x000B50, "Member 'ABP_MasterRangeWeapon_C::WeaponFireAnimation' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, MuzzleFlashEffect) == 0x000B58, "Member 'ABP_MasterRangeWeapon_C::MuzzleFlashEffect' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, MuzzleFlashSocket) == 0x000B60, "Member 'ABP_MasterRangeWeapon_C::MuzzleFlashSocket' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, Muzzle_Effect) == 0x000B68, "Member 'ABP_MasterRangeWeapon_C::Muzzle_Effect' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, AllowChamberingReload) == 0x000B70, "Member 'ABP_MasterRangeWeapon_C::AllowChamberingReload' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, AllowChamberingReloadWithMagazineAttached) == 0x000B71, "Member 'ABP_MasterRangeWeapon_C::AllowChamberingReloadWithMagazineAttached' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, CharacterChamberAnimation) == 0x000B78, "Member 'ABP_MasterRangeWeapon_C::CharacterChamberAnimation' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, FPCharacterChamberAnimation) == 0x000B80, "Member 'ABP_MasterRangeWeapon_C::FPCharacterChamberAnimation' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, WeaponChamberAnimation) == 0x000B88, "Member 'ABP_MasterRangeWeapon_C::WeaponChamberAnimation' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ChamberAddAmount) == 0x000B90, "Member 'ABP_MasterRangeWeapon_C::ChamberAddAmount' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, AmmoItemNames) == 0x000B98, "Member 'ABP_MasterRangeWeapon_C::AmmoItemNames' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, UseAmmoDamageValues) == 0x000BA8, "Member 'ABP_MasterRangeWeapon_C::UseAmmoDamageValues' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, AmmoDamage) == 0x000BB0, "Member 'ABP_MasterRangeWeapon_C::AmmoDamage' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, DebugLineTrace) == 0x000BC0, "Member 'ABP_MasterRangeWeapon_C::DebugLineTrace' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, CanAim) == 0x000BC1, "Member 'ABP_MasterRangeWeapon_C::CanAim' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ADSCameraDebug) == 0x000BC2, "Member 'ABP_MasterRangeWeapon_C::ADSCameraDebug' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, FirstPersonAimedFOV) == 0x000BC8, "Member 'ABP_MasterRangeWeapon_C::FirstPersonAimedFOV' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ThirdPersonAimedFOV) == 0x000BD0, "Member 'ABP_MasterRangeWeapon_C::ThirdPersonAimedFOV' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ADSCameraLocation) == 0x000BD8, "Member 'ABP_MasterRangeWeapon_C::ADSCameraLocation' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, StartingTPFOV) == 0x000BF0, "Member 'ABP_MasterRangeWeapon_C::StartingTPFOV' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, StartingFP_FOV) == 0x000BF8, "Member 'ABP_MasterRangeWeapon_C::StartingFP_FOV' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, AimedSway) == 0x000C00, "Member 'ABP_MasterRangeWeapon_C::AimedSway' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, TPStartFeildOfView) == 0x000C08, "Member 'ABP_MasterRangeWeapon_C::TPStartFeildOfView' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, FPStartFieldOfView) == 0x000C10, "Member 'ABP_MasterRangeWeapon_C::FPStartFieldOfView' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SightFPFOV) == 0x000C18, "Member 'ABP_MasterRangeWeapon_C::SightFPFOV' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SightTPFOV) == 0x000C20, "Member 'ABP_MasterRangeWeapon_C::SightTPFOV' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SightFOV) == 0x000C28, "Member 'ABP_MasterRangeWeapon_C::SightFOV' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SightLocation) == 0x000C30, "Member 'ABP_MasterRangeWeapon_C::SightLocation' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SightAiming) == 0x000C48, "Member 'ABP_MasterRangeWeapon_C::SightAiming' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, DefaultFireSound) == 0x000C50, "Member 'ABP_MasterRangeWeapon_C::DefaultFireSound' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, AttachmentSpreadMod) == 0x000C58, "Member 'ABP_MasterRangeWeapon_C::AttachmentSpreadMod' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, Sight) == 0x000C60, "Member 'ABP_MasterRangeWeapon_C::Sight' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, Min_Spread) == 0x000C68, "Member 'ABP_MasterRangeWeapon_C::Min_Spread' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, DebugMode) == 0x000C70, "Member 'ABP_MasterRangeWeapon_C::DebugMode' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, PerShotRecoil) == 0x000C74, "Member 'ABP_MasterRangeWeapon_C::PerShotRecoil' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ChamberNextRound) == 0x000C84, "Member 'ABP_MasterRangeWeapon_C::ChamberNextRound' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, AllowChamberingWhenInInventory) == 0x000C85, "Member 'ABP_MasterRangeWeapon_C::AllowChamberingWhenInInventory' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, Reload) == 0x000C86, "Member 'ABP_MasterRangeWeapon_C::Reload' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, RemoveItemL) == 0x000C88, "Member 'ABP_MasterRangeWeapon_C::RemoveItemL' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ThirdPersonAimedHandIK) == 0x000CE0, "Member 'ABP_MasterRangeWeapon_C::ThirdPersonAimedHandIK' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, FirstPersonAimedHandIK) == 0x000D40, "Member 'ABP_MasterRangeWeapon_C::FirstPersonAimedHandIK' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, AimdSightReference) == 0x000DA0, "Member 'ABP_MasterRangeWeapon_C::AimdSightReference' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ADSCameraAlpha) == 0x000DA8, "Member 'ABP_MasterRangeWeapon_C::ADSCameraAlpha' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, CharacterAimedFireAnimation) == 0x000DB0, "Member 'ABP_MasterRangeWeapon_C::CharacterAimedFireAnimation' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, RemoveAmount) == 0x000DB8, "Member 'ABP_MasterRangeWeapon_C::RemoveAmount' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, AllowReloadCancel) == 0x000DBC, "Member 'ABP_MasterRangeWeapon_C::AllowReloadCancel' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SpreadAttachmentPerShotMod) == 0x000DC0, "Member 'ABP_MasterRangeWeapon_C::SpreadAttachmentPerShotMod' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, MinSpreadPerShot) == 0x000DC8, "Member 'ABP_MasterRangeWeapon_C::MinSpreadPerShot' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, bFlashlight_) == 0x000DD0, "Member 'ABP_MasterRangeWeapon_C::bFlashlight_' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, DatatableName) == 0x000DD4, "Member 'ABP_MasterRangeWeapon_C::DatatableName' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, bDropped_) == 0x000DDC, "Member 'ABP_MasterRangeWeapon_C::bDropped_' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, SgkActor) == 0x000DE0, "Member 'ABP_MasterRangeWeapon_C::SgkActor' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, OneTimePick) == 0x000DE8, "Member 'ABP_MasterRangeWeapon_C::OneTimePick' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, NiagaraDropEffect) == 0x000DF0, "Member 'ABP_MasterRangeWeapon_C::NiagaraDropEffect' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ChamberMemory) == 0x000DF8, "Member 'ABP_MasterRangeWeapon_C::ChamberMemory' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ScopeTextureWidget) == 0x000E00, "Member 'ABP_MasterRangeWeapon_C::ScopeTextureWidget' has a wrong offset!");
static_assert(offsetof(ABP_MasterRangeWeapon_C, ADS_ON_) == 0x000E08, "Member 'ABP_MasterRangeWeapon_C::ADS_ON_' has a wrong offset!");

}

