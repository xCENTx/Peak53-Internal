#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALSV4_CPP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ALSV4_CPP_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EnhancedInput_structs.hpp"


namespace SDK::Params
{

// Function ALSV4_CPP.ALSCharacterMovementComponent.Server_SetAllowedGait
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterMovementComponent_Server_SetAllowedGait final
{
public:
	EALSGait                                      NewAllowedGait;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterMovementComponent_Server_SetAllowedGait) == 0x000001, "Wrong alignment on ALSCharacterMovementComponent_Server_SetAllowedGait");
static_assert(sizeof(ALSCharacterMovementComponent_Server_SetAllowedGait) == 0x000001, "Wrong size on ALSCharacterMovementComponent_Server_SetAllowedGait");
static_assert(offsetof(ALSCharacterMovementComponent_Server_SetAllowedGait, NewAllowedGait) == 0x000000, "Member 'ALSCharacterMovementComponent_Server_SetAllowedGait::NewAllowedGait' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterMovementComponent.SetAllowedGait
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterMovementComponent_SetAllowedGait final
{
public:
	EALSGait                                      NewAllowedGait;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterMovementComponent_SetAllowedGait) == 0x000001, "Wrong alignment on ALSCharacterMovementComponent_SetAllowedGait");
static_assert(sizeof(ALSCharacterMovementComponent_SetAllowedGait) == 0x000001, "Wrong size on ALSCharacterMovementComponent_SetAllowedGait");
static_assert(offsetof(ALSCharacterMovementComponent_SetAllowedGait, NewAllowedGait) == 0x000000, "Member 'ALSCharacterMovementComponent_SetAllowedGait::NewAllowedGait' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterMovementComponent.SetMovementSettings
// 0x0020 (0x0020 - 0x0000)
struct ALSCharacterMovementComponent_SetMovementSettings final
{
public:
	struct FALSMovementSettings                   NewMovementSettings;                               // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterMovementComponent_SetMovementSettings) == 0x000008, "Wrong alignment on ALSCharacterMovementComponent_SetMovementSettings");
static_assert(sizeof(ALSCharacterMovementComponent_SetMovementSettings) == 0x000020, "Wrong size on ALSCharacterMovementComponent_SetMovementSettings");
static_assert(offsetof(ALSCharacterMovementComponent_SetMovementSettings, NewMovementSettings) == 0x000000, "Member 'ALSCharacterMovementComponent_SetMovementSettings::NewMovementSettings' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.AimAction
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_AimAction final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_AimAction) == 0x000001, "Wrong alignment on ALSBaseCharacter_AimAction");
static_assert(sizeof(ALSBaseCharacter_AimAction) == 0x000001, "Wrong size on ALSBaseCharacter_AimAction");
static_assert(offsetof(ALSBaseCharacter_AimAction, bValue) == 0x000000, "Member 'ALSBaseCharacter_AimAction::bValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.CameraRightAction
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_CameraRightAction final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_CameraRightAction) == 0x000004, "Wrong alignment on ALSBaseCharacter_CameraRightAction");
static_assert(sizeof(ALSBaseCharacter_CameraRightAction) == 0x000004, "Wrong size on ALSBaseCharacter_CameraRightAction");
static_assert(offsetof(ALSBaseCharacter_CameraRightAction, Value) == 0x000000, "Member 'ALSBaseCharacter_CameraRightAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.CameraUpAction
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_CameraUpAction final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_CameraUpAction) == 0x000004, "Wrong alignment on ALSBaseCharacter_CameraUpAction");
static_assert(sizeof(ALSBaseCharacter_CameraUpAction) == 0x000004, "Wrong size on ALSBaseCharacter_CameraUpAction");
static_assert(offsetof(ALSBaseCharacter_CameraUpAction, Value) == 0x000000, "Member 'ALSBaseCharacter_CameraUpAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.ForwardMovementAction
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_ForwardMovementAction final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_ForwardMovementAction) == 0x000004, "Wrong alignment on ALSBaseCharacter_ForwardMovementAction");
static_assert(sizeof(ALSBaseCharacter_ForwardMovementAction) == 0x000004, "Wrong size on ALSBaseCharacter_ForwardMovementAction");
static_assert(offsetof(ALSBaseCharacter_ForwardMovementAction, Value) == 0x000000, "Member 'ALSBaseCharacter_ForwardMovementAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetFirstPersonCameraTarget
// 0x0018 (0x0018 - 0x0000)
struct ALSBaseCharacter_GetFirstPersonCameraTarget final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetFirstPersonCameraTarget) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetFirstPersonCameraTarget");
static_assert(sizeof(ALSBaseCharacter_GetFirstPersonCameraTarget) == 0x000018, "Wrong size on ALSBaseCharacter_GetFirstPersonCameraTarget");
static_assert(offsetof(ALSBaseCharacter_GetFirstPersonCameraTarget, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetFirstPersonCameraTarget::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetGetUpAnimation
// 0x0010 (0x0010 - 0x0000)
struct ALSBaseCharacter_GetGetUpAnimation final
{
public:
	bool                                          bRagdollFaceUpState;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B32[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetGetUpAnimation) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetGetUpAnimation");
static_assert(sizeof(ALSBaseCharacter_GetGetUpAnimation) == 0x000010, "Wrong size on ALSBaseCharacter_GetGetUpAnimation");
static_assert(offsetof(ALSBaseCharacter_GetGetUpAnimation, bRagdollFaceUpState) == 0x000000, "Member 'ALSBaseCharacter_GetGetUpAnimation::bRagdollFaceUpState' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetGetUpAnimation, ReturnValue) == 0x000008, "Member 'ALSBaseCharacter_GetGetUpAnimation::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetRollAnimation
// 0x0008 (0x0008 - 0x0000)
struct ALSBaseCharacter_GetRollAnimation final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetRollAnimation) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetRollAnimation");
static_assert(sizeof(ALSBaseCharacter_GetRollAnimation) == 0x000008, "Wrong size on ALSBaseCharacter_GetRollAnimation");
static_assert(offsetof(ALSBaseCharacter_GetRollAnimation, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetRollAnimation::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetThirdPersonPivotTarget
// 0x0060 (0x0060 - 0x0000)
struct ALSBaseCharacter_GetThirdPersonPivotTarget final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetThirdPersonPivotTarget) == 0x000010, "Wrong alignment on ALSBaseCharacter_GetThirdPersonPivotTarget");
static_assert(sizeof(ALSBaseCharacter_GetThirdPersonPivotTarget) == 0x000060, "Wrong size on ALSBaseCharacter_GetThirdPersonPivotTarget");
static_assert(offsetof(ALSBaseCharacter_GetThirdPersonPivotTarget, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetThirdPersonPivotTarget::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetThirdPersonTraceParams
// 0x0020 (0x0020 - 0x0000)
struct ALSBaseCharacter_GetThirdPersonTraceParams final
{
public:
	struct FVector                                TraceOrigin;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceRadius;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B33[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSBaseCharacter_GetThirdPersonTraceParams) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetThirdPersonTraceParams");
static_assert(sizeof(ALSBaseCharacter_GetThirdPersonTraceParams) == 0x000020, "Wrong size on ALSBaseCharacter_GetThirdPersonTraceParams");
static_assert(offsetof(ALSBaseCharacter_GetThirdPersonTraceParams, TraceOrigin) == 0x000000, "Member 'ALSBaseCharacter_GetThirdPersonTraceParams::TraceOrigin' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetThirdPersonTraceParams, TraceRadius) == 0x000018, "Member 'ALSBaseCharacter_GetThirdPersonTraceParams::TraceRadius' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetThirdPersonTraceParams, ReturnValue) == 0x00001C, "Member 'ALSBaseCharacter_GetThirdPersonTraceParams::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.JumpAction
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_JumpAction final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_JumpAction) == 0x000001, "Wrong alignment on ALSBaseCharacter_JumpAction");
static_assert(sizeof(ALSBaseCharacter_JumpAction) == 0x000001, "Wrong size on ALSBaseCharacter_JumpAction");
static_assert(offsetof(ALSBaseCharacter_JumpAction, bValue) == 0x000000, "Member 'ALSBaseCharacter_JumpAction::bValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Multicast_PlayMontage
// 0x0010 (0x0010 - 0x0000)
struct ALSBaseCharacter_Multicast_PlayMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B34[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSBaseCharacter_Multicast_PlayMontage) == 0x000008, "Wrong alignment on ALSBaseCharacter_Multicast_PlayMontage");
static_assert(sizeof(ALSBaseCharacter_Multicast_PlayMontage) == 0x000010, "Wrong size on ALSBaseCharacter_Multicast_PlayMontage");
static_assert(offsetof(ALSBaseCharacter_Multicast_PlayMontage, Montage) == 0x000000, "Member 'ALSBaseCharacter_Multicast_PlayMontage::Montage' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_Multicast_PlayMontage, PlayRate) == 0x000008, "Member 'ALSBaseCharacter_Multicast_PlayMontage::PlayRate' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Multicast_RagdollEnd
// 0x0018 (0x0018 - 0x0000)
struct ALSBaseCharacter_Multicast_RagdollEnd final
{
public:
	struct FVector                                CharacterLocation;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Multicast_RagdollEnd) == 0x000008, "Wrong alignment on ALSBaseCharacter_Multicast_RagdollEnd");
static_assert(sizeof(ALSBaseCharacter_Multicast_RagdollEnd) == 0x000018, "Wrong size on ALSBaseCharacter_Multicast_RagdollEnd");
static_assert(offsetof(ALSBaseCharacter_Multicast_RagdollEnd, CharacterLocation) == 0x000000, "Member 'ALSBaseCharacter_Multicast_RagdollEnd::CharacterLocation' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.OnRep_OverlayState
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_OnRep_OverlayState final
{
public:
	EALSOverlayState                              PrevOverlayState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_OnRep_OverlayState) == 0x000001, "Wrong alignment on ALSBaseCharacter_OnRep_OverlayState");
static_assert(sizeof(ALSBaseCharacter_OnRep_OverlayState) == 0x000001, "Wrong size on ALSBaseCharacter_OnRep_OverlayState");
static_assert(offsetof(ALSBaseCharacter_OnRep_OverlayState, PrevOverlayState) == 0x000000, "Member 'ALSBaseCharacter_OnRep_OverlayState::PrevOverlayState' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.OnRep_RotationMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_OnRep_RotationMode final
{
public:
	EALSRotationMode                              PrevRotMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_OnRep_RotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_OnRep_RotationMode");
static_assert(sizeof(ALSBaseCharacter_OnRep_RotationMode) == 0x000001, "Wrong size on ALSBaseCharacter_OnRep_RotationMode");
static_assert(offsetof(ALSBaseCharacter_OnRep_RotationMode, PrevRotMode) == 0x000000, "Member 'ALSBaseCharacter_OnRep_RotationMode::PrevRotMode' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.OnRep_ViewMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_OnRep_ViewMode final
{
public:
	EALSViewMode                                  PrevViewMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_OnRep_ViewMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_OnRep_ViewMode");
static_assert(sizeof(ALSBaseCharacter_OnRep_ViewMode) == 0x000001, "Wrong size on ALSBaseCharacter_OnRep_ViewMode");
static_assert(offsetof(ALSBaseCharacter_OnRep_ViewMode, PrevViewMode) == 0x000000, "Member 'ALSBaseCharacter_OnRep_ViewMode::PrevViewMode' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.OnRep_VisibleMesh
// 0x0008 (0x0008 - 0x0000)
struct ALSBaseCharacter_OnRep_VisibleMesh final
{
public:
	const class USkeletalMesh*                    PreviousSkeletalMesh;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_OnRep_VisibleMesh) == 0x000008, "Wrong alignment on ALSBaseCharacter_OnRep_VisibleMesh");
static_assert(sizeof(ALSBaseCharacter_OnRep_VisibleMesh) == 0x000008, "Wrong size on ALSBaseCharacter_OnRep_VisibleMesh");
static_assert(offsetof(ALSBaseCharacter_OnRep_VisibleMesh, PreviousSkeletalMesh) == 0x000000, "Member 'ALSBaseCharacter_OnRep_VisibleMesh::PreviousSkeletalMesh' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Replicated_PlayMontage
// 0x0010 (0x0010 - 0x0000)
struct ALSBaseCharacter_Replicated_PlayMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B35[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSBaseCharacter_Replicated_PlayMontage) == 0x000008, "Wrong alignment on ALSBaseCharacter_Replicated_PlayMontage");
static_assert(sizeof(ALSBaseCharacter_Replicated_PlayMontage) == 0x000010, "Wrong size on ALSBaseCharacter_Replicated_PlayMontage");
static_assert(offsetof(ALSBaseCharacter_Replicated_PlayMontage, Montage) == 0x000000, "Member 'ALSBaseCharacter_Replicated_PlayMontage::Montage' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_Replicated_PlayMontage, PlayRate) == 0x000008, "Member 'ALSBaseCharacter_Replicated_PlayMontage::PlayRate' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.RightMovementAction
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_RightMovementAction final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_RightMovementAction) == 0x000004, "Wrong alignment on ALSBaseCharacter_RightMovementAction");
static_assert(sizeof(ALSBaseCharacter_RightMovementAction) == 0x000004, "Wrong size on ALSBaseCharacter_RightMovementAction");
static_assert(offsetof(ALSBaseCharacter_RightMovementAction, Value) == 0x000000, "Member 'ALSBaseCharacter_RightMovementAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_PlayMontage
// 0x0010 (0x0010 - 0x0000)
struct ALSBaseCharacter_Server_PlayMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B36[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSBaseCharacter_Server_PlayMontage) == 0x000008, "Wrong alignment on ALSBaseCharacter_Server_PlayMontage");
static_assert(sizeof(ALSBaseCharacter_Server_PlayMontage) == 0x000010, "Wrong size on ALSBaseCharacter_Server_PlayMontage");
static_assert(offsetof(ALSBaseCharacter_Server_PlayMontage, Montage) == 0x000000, "Member 'ALSBaseCharacter_Server_PlayMontage::Montage' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_Server_PlayMontage, PlayRate) == 0x000008, "Member 'ALSBaseCharacter_Server_PlayMontage::PlayRate' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_RagdollEnd
// 0x0018 (0x0018 - 0x0000)
struct ALSBaseCharacter_Server_RagdollEnd final
{
public:
	struct FVector                                CharacterLocation;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_RagdollEnd) == 0x000008, "Wrong alignment on ALSBaseCharacter_Server_RagdollEnd");
static_assert(sizeof(ALSBaseCharacter_Server_RagdollEnd) == 0x000018, "Wrong size on ALSBaseCharacter_Server_RagdollEnd");
static_assert(offsetof(ALSBaseCharacter_Server_RagdollEnd, CharacterLocation) == 0x000000, "Member 'ALSBaseCharacter_Server_RagdollEnd::CharacterLocation' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetDesiredGait
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_Server_SetDesiredGait final
{
public:
	EALSGait                                      NewGait;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetDesiredGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_Server_SetDesiredGait");
static_assert(sizeof(ALSBaseCharacter_Server_SetDesiredGait) == 0x000001, "Wrong size on ALSBaseCharacter_Server_SetDesiredGait");
static_assert(offsetof(ALSBaseCharacter_Server_SetDesiredGait, NewGait) == 0x000000, "Member 'ALSBaseCharacter_Server_SetDesiredGait::NewGait' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetDesiredRotationMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_Server_SetDesiredRotationMode final
{
public:
	EALSRotationMode                              NewRotMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetDesiredRotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_Server_SetDesiredRotationMode");
static_assert(sizeof(ALSBaseCharacter_Server_SetDesiredRotationMode) == 0x000001, "Wrong size on ALSBaseCharacter_Server_SetDesiredRotationMode");
static_assert(offsetof(ALSBaseCharacter_Server_SetDesiredRotationMode, NewRotMode) == 0x000000, "Member 'ALSBaseCharacter_Server_SetDesiredRotationMode::NewRotMode' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetDesiredStance
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_Server_SetDesiredStance final
{
public:
	EALSStance                                    NewStance;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetDesiredStance) == 0x000001, "Wrong alignment on ALSBaseCharacter_Server_SetDesiredStance");
static_assert(sizeof(ALSBaseCharacter_Server_SetDesiredStance) == 0x000001, "Wrong size on ALSBaseCharacter_Server_SetDesiredStance");
static_assert(offsetof(ALSBaseCharacter_Server_SetDesiredStance, NewStance) == 0x000000, "Member 'ALSBaseCharacter_Server_SetDesiredStance::NewStance' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetMeshLocationDuringRagdoll
// 0x0018 (0x0018 - 0x0000)
struct ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll final
{
public:
	struct FVector                                MeshLocation;                                      // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll) == 0x000008, "Wrong alignment on ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll");
static_assert(sizeof(ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll) == 0x000018, "Wrong size on ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll");
static_assert(offsetof(ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll, MeshLocation) == 0x000000, "Member 'ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll::MeshLocation' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetOverlayState
// 0x0002 (0x0002 - 0x0000)
struct ALSBaseCharacter_Server_SetOverlayState final
{
public:
	EALSOverlayState                              NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetOverlayState) == 0x000001, "Wrong alignment on ALSBaseCharacter_Server_SetOverlayState");
static_assert(sizeof(ALSBaseCharacter_Server_SetOverlayState) == 0x000002, "Wrong size on ALSBaseCharacter_Server_SetOverlayState");
static_assert(offsetof(ALSBaseCharacter_Server_SetOverlayState, NewState) == 0x000000, "Member 'ALSBaseCharacter_Server_SetOverlayState::NewState' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_Server_SetOverlayState, bForce) == 0x000001, "Member 'ALSBaseCharacter_Server_SetOverlayState::bForce' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetRotationMode
// 0x0002 (0x0002 - 0x0000)
struct ALSBaseCharacter_Server_SetRotationMode final
{
public:
	EALSRotationMode                              NewRotationMode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetRotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_Server_SetRotationMode");
static_assert(sizeof(ALSBaseCharacter_Server_SetRotationMode) == 0x000002, "Wrong size on ALSBaseCharacter_Server_SetRotationMode");
static_assert(offsetof(ALSBaseCharacter_Server_SetRotationMode, NewRotationMode) == 0x000000, "Member 'ALSBaseCharacter_Server_SetRotationMode::NewRotationMode' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_Server_SetRotationMode, bForce) == 0x000001, "Member 'ALSBaseCharacter_Server_SetRotationMode::bForce' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetViewMode
// 0x0002 (0x0002 - 0x0000)
struct ALSBaseCharacter_Server_SetViewMode final
{
public:
	EALSViewMode                                  NewViewMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetViewMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_Server_SetViewMode");
static_assert(sizeof(ALSBaseCharacter_Server_SetViewMode) == 0x000002, "Wrong size on ALSBaseCharacter_Server_SetViewMode");
static_assert(offsetof(ALSBaseCharacter_Server_SetViewMode, NewViewMode) == 0x000000, "Member 'ALSBaseCharacter_Server_SetViewMode::NewViewMode' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_Server_SetViewMode, bForce) == 0x000001, "Member 'ALSBaseCharacter_Server_SetViewMode::bForce' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetVisibleMesh
// 0x0008 (0x0008 - 0x0000)
struct ALSBaseCharacter_Server_SetVisibleMesh final
{
public:
	class USkeletalMesh*                          NewSkeletalMesh;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetVisibleMesh) == 0x000008, "Wrong alignment on ALSBaseCharacter_Server_SetVisibleMesh");
static_assert(sizeof(ALSBaseCharacter_Server_SetVisibleMesh) == 0x000008, "Wrong size on ALSBaseCharacter_Server_SetVisibleMesh");
static_assert(offsetof(ALSBaseCharacter_Server_SetVisibleMesh, NewSkeletalMesh) == 0x000000, "Member 'ALSBaseCharacter_Server_SetVisibleMesh::NewSkeletalMesh' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetActorLocationAndTargetRotation
// 0x0030 (0x0030 - 0x0000)
struct ALSBaseCharacter_SetActorLocationAndTargetRotation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotation;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetActorLocationAndTargetRotation) == 0x000008, "Wrong alignment on ALSBaseCharacter_SetActorLocationAndTargetRotation");
static_assert(sizeof(ALSBaseCharacter_SetActorLocationAndTargetRotation) == 0x000030, "Wrong size on ALSBaseCharacter_SetActorLocationAndTargetRotation");
static_assert(offsetof(ALSBaseCharacter_SetActorLocationAndTargetRotation, NewLocation) == 0x000000, "Member 'ALSBaseCharacter_SetActorLocationAndTargetRotation::NewLocation' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_SetActorLocationAndTargetRotation, NewRotation) == 0x000018, "Member 'ALSBaseCharacter_SetActorLocationAndTargetRotation::NewRotation' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetCameraBehavior
// 0x0008 (0x0008 - 0x0000)
struct ALSBaseCharacter_SetCameraBehavior final
{
public:
	class UALSPlayerCameraBehavior*               CamBeh;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetCameraBehavior) == 0x000008, "Wrong alignment on ALSBaseCharacter_SetCameraBehavior");
static_assert(sizeof(ALSBaseCharacter_SetCameraBehavior) == 0x000008, "Wrong size on ALSBaseCharacter_SetCameraBehavior");
static_assert(offsetof(ALSBaseCharacter_SetCameraBehavior, CamBeh) == 0x000000, "Member 'ALSBaseCharacter_SetCameraBehavior::CamBeh' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetDesiredGait
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetDesiredGait final
{
public:
	EALSGait                                      NewGait;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetDesiredGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetDesiredGait");
static_assert(sizeof(ALSBaseCharacter_SetDesiredGait) == 0x000001, "Wrong size on ALSBaseCharacter_SetDesiredGait");
static_assert(offsetof(ALSBaseCharacter_SetDesiredGait, NewGait) == 0x000000, "Member 'ALSBaseCharacter_SetDesiredGait::NewGait' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetDesiredRotationMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetDesiredRotationMode final
{
public:
	EALSRotationMode                              NewRotMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetDesiredRotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetDesiredRotationMode");
static_assert(sizeof(ALSBaseCharacter_SetDesiredRotationMode) == 0x000001, "Wrong size on ALSBaseCharacter_SetDesiredRotationMode");
static_assert(offsetof(ALSBaseCharacter_SetDesiredRotationMode, NewRotMode) == 0x000000, "Member 'ALSBaseCharacter_SetDesiredRotationMode::NewRotMode' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetDesiredStance
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetDesiredStance final
{
public:
	EALSStance                                    NewStance;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetDesiredStance) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetDesiredStance");
static_assert(sizeof(ALSBaseCharacter_SetDesiredStance) == 0x000001, "Wrong size on ALSBaseCharacter_SetDesiredStance");
static_assert(offsetof(ALSBaseCharacter_SetDesiredStance, NewStance) == 0x000000, "Member 'ALSBaseCharacter_SetDesiredStance::NewStance' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetGait
// 0x0002 (0x0002 - 0x0000)
struct ALSBaseCharacter_SetGait final
{
public:
	EALSGait                                      NewGait;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetGait");
static_assert(sizeof(ALSBaseCharacter_SetGait) == 0x000002, "Wrong size on ALSBaseCharacter_SetGait");
static_assert(offsetof(ALSBaseCharacter_SetGait, NewGait) == 0x000000, "Member 'ALSBaseCharacter_SetGait::NewGait' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_SetGait, bForce) == 0x000001, "Member 'ALSBaseCharacter_SetGait::bForce' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetGroundedEntryState
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetGroundedEntryState final
{
public:
	EALSGroundedEntryState                        NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetGroundedEntryState) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetGroundedEntryState");
static_assert(sizeof(ALSBaseCharacter_SetGroundedEntryState) == 0x000001, "Wrong size on ALSBaseCharacter_SetGroundedEntryState");
static_assert(offsetof(ALSBaseCharacter_SetGroundedEntryState, NewState) == 0x000000, "Member 'ALSBaseCharacter_SetGroundedEntryState::NewState' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetMovementAction
// 0x0002 (0x0002 - 0x0000)
struct ALSBaseCharacter_SetMovementAction final
{
public:
	EALSMovementAction                            NewAction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetMovementAction) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetMovementAction");
static_assert(sizeof(ALSBaseCharacter_SetMovementAction) == 0x000002, "Wrong size on ALSBaseCharacter_SetMovementAction");
static_assert(offsetof(ALSBaseCharacter_SetMovementAction, NewAction) == 0x000000, "Member 'ALSBaseCharacter_SetMovementAction::NewAction' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_SetMovementAction, bForce) == 0x000001, "Member 'ALSBaseCharacter_SetMovementAction::bForce' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetMovementState
// 0x0002 (0x0002 - 0x0000)
struct ALSBaseCharacter_SetMovementState final
{
public:
	EALSMovementState                             NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetMovementState) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetMovementState");
static_assert(sizeof(ALSBaseCharacter_SetMovementState) == 0x000002, "Wrong size on ALSBaseCharacter_SetMovementState");
static_assert(offsetof(ALSBaseCharacter_SetMovementState, NewState) == 0x000000, "Member 'ALSBaseCharacter_SetMovementState::NewState' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_SetMovementState, bForce) == 0x000001, "Member 'ALSBaseCharacter_SetMovementState::bForce' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetOverlayOverrideState
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_SetOverlayOverrideState final
{
public:
	int32                                         NewState;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetOverlayOverrideState) == 0x000004, "Wrong alignment on ALSBaseCharacter_SetOverlayOverrideState");
static_assert(sizeof(ALSBaseCharacter_SetOverlayOverrideState) == 0x000004, "Wrong size on ALSBaseCharacter_SetOverlayOverrideState");
static_assert(offsetof(ALSBaseCharacter_SetOverlayOverrideState, NewState) == 0x000000, "Member 'ALSBaseCharacter_SetOverlayOverrideState::NewState' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetOverlayState
// 0x0002 (0x0002 - 0x0000)
struct ALSBaseCharacter_SetOverlayState final
{
public:
	EALSOverlayState                              NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetOverlayState) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetOverlayState");
static_assert(sizeof(ALSBaseCharacter_SetOverlayState) == 0x000002, "Wrong size on ALSBaseCharacter_SetOverlayState");
static_assert(offsetof(ALSBaseCharacter_SetOverlayState, NewState) == 0x000000, "Member 'ALSBaseCharacter_SetOverlayState::NewState' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_SetOverlayState, bForce) == 0x000001, "Member 'ALSBaseCharacter_SetOverlayState::bForce' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetRightShoulder
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetRightShoulder final
{
public:
	bool                                          bNewRightShoulder;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetRightShoulder) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetRightShoulder");
static_assert(sizeof(ALSBaseCharacter_SetRightShoulder) == 0x000001, "Wrong size on ALSBaseCharacter_SetRightShoulder");
static_assert(offsetof(ALSBaseCharacter_SetRightShoulder, bNewRightShoulder) == 0x000000, "Member 'ALSBaseCharacter_SetRightShoulder::bNewRightShoulder' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetRotationMode
// 0x0002 (0x0002 - 0x0000)
struct ALSBaseCharacter_SetRotationMode final
{
public:
	EALSRotationMode                              NewRotationMode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetRotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetRotationMode");
static_assert(sizeof(ALSBaseCharacter_SetRotationMode) == 0x000002, "Wrong size on ALSBaseCharacter_SetRotationMode");
static_assert(offsetof(ALSBaseCharacter_SetRotationMode, NewRotationMode) == 0x000000, "Member 'ALSBaseCharacter_SetRotationMode::NewRotationMode' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_SetRotationMode, bForce) == 0x000001, "Member 'ALSBaseCharacter_SetRotationMode::bForce' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetStance
// 0x0002 (0x0002 - 0x0000)
struct ALSBaseCharacter_SetStance final
{
public:
	EALSStance                                    NewStance;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetStance) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetStance");
static_assert(sizeof(ALSBaseCharacter_SetStance) == 0x000002, "Wrong size on ALSBaseCharacter_SetStance");
static_assert(offsetof(ALSBaseCharacter_SetStance, NewStance) == 0x000000, "Member 'ALSBaseCharacter_SetStance::NewStance' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_SetStance, bForce) == 0x000001, "Member 'ALSBaseCharacter_SetStance::bForce' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetViewMode
// 0x0002 (0x0002 - 0x0000)
struct ALSBaseCharacter_SetViewMode final
{
public:
	EALSViewMode                                  NewViewMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetViewMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetViewMode");
static_assert(sizeof(ALSBaseCharacter_SetViewMode) == 0x000002, "Wrong size on ALSBaseCharacter_SetViewMode");
static_assert(offsetof(ALSBaseCharacter_SetViewMode, NewViewMode) == 0x000000, "Member 'ALSBaseCharacter_SetViewMode::NewViewMode' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_SetViewMode, bForce) == 0x000001, "Member 'ALSBaseCharacter_SetViewMode::bForce' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetVisibleMesh
// 0x0008 (0x0008 - 0x0000)
struct ALSBaseCharacter_SetVisibleMesh final
{
public:
	class USkeletalMesh*                          NewSkeletalMesh;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetVisibleMesh) == 0x000008, "Wrong alignment on ALSBaseCharacter_SetVisibleMesh");
static_assert(sizeof(ALSBaseCharacter_SetVisibleMesh) == 0x000008, "Wrong size on ALSBaseCharacter_SetVisibleMesh");
static_assert(offsetof(ALSBaseCharacter_SetVisibleMesh, NewSkeletalMesh) == 0x000000, "Member 'ALSBaseCharacter_SetVisibleMesh::NewSkeletalMesh' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SprintAction
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SprintAction final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SprintAction) == 0x000001, "Wrong alignment on ALSBaseCharacter_SprintAction");
static_assert(sizeof(ALSBaseCharacter_SprintAction) == 0x000001, "Wrong size on ALSBaseCharacter_SprintAction");
static_assert(offsetof(ALSBaseCharacter_SprintAction, bValue) == 0x000000, "Member 'ALSBaseCharacter_SprintAction::bValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.CanSprint
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_CanSprint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_CanSprint) == 0x000001, "Wrong alignment on ALSBaseCharacter_CanSprint");
static_assert(sizeof(ALSBaseCharacter_CanSprint) == 0x000001, "Wrong size on ALSBaseCharacter_CanSprint");
static_assert(offsetof(ALSBaseCharacter_CanSprint, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_CanSprint::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetAcceleration
// 0x0018 (0x0018 - 0x0000)
struct ALSBaseCharacter_GetAcceleration final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetAcceleration) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetAcceleration");
static_assert(sizeof(ALSBaseCharacter_GetAcceleration) == 0x000018, "Wrong size on ALSBaseCharacter_GetAcceleration");
static_assert(offsetof(ALSBaseCharacter_GetAcceleration, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetAcceleration::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetActualGait
// 0x0002 (0x0002 - 0x0000)
struct ALSBaseCharacter_GetActualGait final
{
public:
	EALSGait                                      AllowedGait;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSGait                                      ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetActualGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetActualGait");
static_assert(sizeof(ALSBaseCharacter_GetActualGait) == 0x000002, "Wrong size on ALSBaseCharacter_GetActualGait");
static_assert(offsetof(ALSBaseCharacter_GetActualGait, AllowedGait) == 0x000000, "Member 'ALSBaseCharacter_GetActualGait::AllowedGait' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetActualGait, ReturnValue) == 0x000001, "Member 'ALSBaseCharacter_GetActualGait::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetAimingRotation
// 0x0018 (0x0018 - 0x0000)
struct ALSBaseCharacter_GetAimingRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetAimingRotation) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetAimingRotation");
static_assert(sizeof(ALSBaseCharacter_GetAimingRotation) == 0x000018, "Wrong size on ALSBaseCharacter_GetAimingRotation");
static_assert(offsetof(ALSBaseCharacter_GetAimingRotation, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetAimingRotation::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetAimYawRate
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_GetAimYawRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetAimYawRate) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetAimYawRate");
static_assert(sizeof(ALSBaseCharacter_GetAimYawRate) == 0x000004, "Wrong size on ALSBaseCharacter_GetAimYawRate");
static_assert(offsetof(ALSBaseCharacter_GetAimYawRate, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetAimYawRate::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetAllowedGait
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetAllowedGait final
{
public:
	EALSGait                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetAllowedGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetAllowedGait");
static_assert(sizeof(ALSBaseCharacter_GetAllowedGait) == 0x000001, "Wrong size on ALSBaseCharacter_GetAllowedGait");
static_assert(offsetof(ALSBaseCharacter_GetAllowedGait, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetAllowedGait::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetAnimCurveValue
// 0x000C (0x000C - 0x0000)
struct ALSBaseCharacter_GetAnimCurveValue final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetAnimCurveValue) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetAnimCurveValue");
static_assert(sizeof(ALSBaseCharacter_GetAnimCurveValue) == 0x00000C, "Wrong size on ALSBaseCharacter_GetAnimCurveValue");
static_assert(offsetof(ALSBaseCharacter_GetAnimCurveValue, CurveName) == 0x000000, "Member 'ALSBaseCharacter_GetAnimCurveValue::CurveName' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetAnimCurveValue, ReturnValue) == 0x000008, "Member 'ALSBaseCharacter_GetAnimCurveValue::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetCameraParameters
// 0x000C (0x000C - 0x0000)
struct ALSBaseCharacter_GetCameraParameters final
{
public:
	float                                         TPFOVOut;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FPFOVOut;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRightShoulderOut;                                 // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B37[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSBaseCharacter_GetCameraParameters) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetCameraParameters");
static_assert(sizeof(ALSBaseCharacter_GetCameraParameters) == 0x00000C, "Wrong size on ALSBaseCharacter_GetCameraParameters");
static_assert(offsetof(ALSBaseCharacter_GetCameraParameters, TPFOVOut) == 0x000000, "Member 'ALSBaseCharacter_GetCameraParameters::TPFOVOut' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetCameraParameters, FPFOVOut) == 0x000004, "Member 'ALSBaseCharacter_GetCameraParameters::FPFOVOut' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetCameraParameters, bRightShoulderOut) == 0x000008, "Member 'ALSBaseCharacter_GetCameraParameters::bRightShoulderOut' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetDesiredGait
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetDesiredGait final
{
public:
	EALSGait                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetDesiredGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetDesiredGait");
static_assert(sizeof(ALSBaseCharacter_GetDesiredGait) == 0x000001, "Wrong size on ALSBaseCharacter_GetDesiredGait");
static_assert(offsetof(ALSBaseCharacter_GetDesiredGait, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetDesiredGait::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetDesiredRotationMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetDesiredRotationMode final
{
public:
	EALSRotationMode                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetDesiredRotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetDesiredRotationMode");
static_assert(sizeof(ALSBaseCharacter_GetDesiredRotationMode) == 0x000001, "Wrong size on ALSBaseCharacter_GetDesiredRotationMode");
static_assert(offsetof(ALSBaseCharacter_GetDesiredRotationMode, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetDesiredRotationMode::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetDesiredStance
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetDesiredStance final
{
public:
	EALSStance                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetDesiredStance) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetDesiredStance");
static_assert(sizeof(ALSBaseCharacter_GetDesiredStance) == 0x000001, "Wrong size on ALSBaseCharacter_GetDesiredStance");
static_assert(offsetof(ALSBaseCharacter_GetDesiredStance, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetDesiredStance::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetGait
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetGait final
{
public:
	EALSGait                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetGait");
static_assert(sizeof(ALSBaseCharacter_GetGait) == 0x000001, "Wrong size on ALSBaseCharacter_GetGait");
static_assert(offsetof(ALSBaseCharacter_GetGait, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetGait::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetGroundedEntryState
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetGroundedEntryState final
{
public:
	EALSGroundedEntryState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetGroundedEntryState) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetGroundedEntryState");
static_assert(sizeof(ALSBaseCharacter_GetGroundedEntryState) == 0x000001, "Wrong size on ALSBaseCharacter_GetGroundedEntryState");
static_assert(offsetof(ALSBaseCharacter_GetGroundedEntryState, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetGroundedEntryState::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetMovementAction
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetMovementAction final
{
public:
	EALSMovementAction                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetMovementAction) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetMovementAction");
static_assert(sizeof(ALSBaseCharacter_GetMovementAction) == 0x000001, "Wrong size on ALSBaseCharacter_GetMovementAction");
static_assert(offsetof(ALSBaseCharacter_GetMovementAction, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetMovementAction::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetMovementInput
// 0x0018 (0x0018 - 0x0000)
struct ALSBaseCharacter_GetMovementInput final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetMovementInput) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetMovementInput");
static_assert(sizeof(ALSBaseCharacter_GetMovementInput) == 0x000018, "Wrong size on ALSBaseCharacter_GetMovementInput");
static_assert(offsetof(ALSBaseCharacter_GetMovementInput, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetMovementInput::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetMovementInputAmount
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_GetMovementInputAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetMovementInputAmount) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetMovementInputAmount");
static_assert(sizeof(ALSBaseCharacter_GetMovementInputAmount) == 0x000004, "Wrong size on ALSBaseCharacter_GetMovementInputAmount");
static_assert(offsetof(ALSBaseCharacter_GetMovementInputAmount, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetMovementInputAmount::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetMovementState
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetMovementState final
{
public:
	EALSMovementState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetMovementState) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetMovementState");
static_assert(sizeof(ALSBaseCharacter_GetMovementState) == 0x000001, "Wrong size on ALSBaseCharacter_GetMovementState");
static_assert(offsetof(ALSBaseCharacter_GetMovementState, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetMovementState::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetMyMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct ALSBaseCharacter_GetMyMovementComponent final
{
public:
	class UALSCharacterMovementComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetMyMovementComponent) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetMyMovementComponent");
static_assert(sizeof(ALSBaseCharacter_GetMyMovementComponent) == 0x000008, "Wrong size on ALSBaseCharacter_GetMyMovementComponent");
static_assert(offsetof(ALSBaseCharacter_GetMyMovementComponent, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetMyMovementComponent::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetOverlayOverrideState
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_GetOverlayOverrideState final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetOverlayOverrideState) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetOverlayOverrideState");
static_assert(sizeof(ALSBaseCharacter_GetOverlayOverrideState) == 0x000004, "Wrong size on ALSBaseCharacter_GetOverlayOverrideState");
static_assert(offsetof(ALSBaseCharacter_GetOverlayOverrideState, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetOverlayOverrideState::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetOverlayState
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetOverlayState final
{
public:
	EALSOverlayState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetOverlayState) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetOverlayState");
static_assert(sizeof(ALSBaseCharacter_GetOverlayState) == 0x000001, "Wrong size on ALSBaseCharacter_GetOverlayState");
static_assert(offsetof(ALSBaseCharacter_GetOverlayState, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetOverlayState::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetPrevMovementState
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetPrevMovementState final
{
public:
	EALSMovementState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetPrevMovementState) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetPrevMovementState");
static_assert(sizeof(ALSBaseCharacter_GetPrevMovementState) == 0x000001, "Wrong size on ALSBaseCharacter_GetPrevMovementState");
static_assert(offsetof(ALSBaseCharacter_GetPrevMovementState, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetPrevMovementState::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetRotationMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetRotationMode final
{
public:
	EALSRotationMode                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetRotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetRotationMode");
static_assert(sizeof(ALSBaseCharacter_GetRotationMode) == 0x000001, "Wrong size on ALSBaseCharacter_GetRotationMode");
static_assert(offsetof(ALSBaseCharacter_GetRotationMode, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetRotationMode::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetSpeed
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_GetSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetSpeed) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetSpeed");
static_assert(sizeof(ALSBaseCharacter_GetSpeed) == 0x000004, "Wrong size on ALSBaseCharacter_GetSpeed");
static_assert(offsetof(ALSBaseCharacter_GetSpeed, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetSpeed::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetStance
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetStance final
{
public:
	EALSStance                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetStance) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetStance");
static_assert(sizeof(ALSBaseCharacter_GetStance) == 0x000001, "Wrong size on ALSBaseCharacter_GetStance");
static_assert(offsetof(ALSBaseCharacter_GetStance, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetStance::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetTargetMovementSettings
// 0x0020 (0x0020 - 0x0000)
struct ALSBaseCharacter_GetTargetMovementSettings final
{
public:
	struct FALSMovementSettings                   ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetTargetMovementSettings) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetTargetMovementSettings");
static_assert(sizeof(ALSBaseCharacter_GetTargetMovementSettings) == 0x000020, "Wrong size on ALSBaseCharacter_GetTargetMovementSettings");
static_assert(offsetof(ALSBaseCharacter_GetTargetMovementSettings, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetTargetMovementSettings::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetViewMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetViewMode final
{
public:
	EALSViewMode                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetViewMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetViewMode");
static_assert(sizeof(ALSBaseCharacter_GetViewMode) == 0x000001, "Wrong size on ALSBaseCharacter_GetViewMode");
static_assert(offsetof(ALSBaseCharacter_GetViewMode, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetViewMode::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.HasMovementInput
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_HasMovementInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_HasMovementInput) == 0x000001, "Wrong alignment on ALSBaseCharacter_HasMovementInput");
static_assert(sizeof(ALSBaseCharacter_HasMovementInput) == 0x000001, "Wrong size on ALSBaseCharacter_HasMovementInput");
static_assert(offsetof(ALSBaseCharacter_HasMovementInput, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_HasMovementInput::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_IsMoving) == 0x000001, "Wrong alignment on ALSBaseCharacter_IsMoving");
static_assert(sizeof(ALSBaseCharacter_IsMoving) == 0x000001, "Wrong size on ALSBaseCharacter_IsMoving");
static_assert(offsetof(ALSBaseCharacter_IsMoving, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_IsMoving::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.IsRightShoulder
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_IsRightShoulder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_IsRightShoulder) == 0x000001, "Wrong alignment on ALSBaseCharacter_IsRightShoulder");
static_assert(sizeof(ALSBaseCharacter_IsRightShoulder) == 0x000001, "Wrong size on ALSBaseCharacter_IsRightShoulder");
static_assert(offsetof(ALSBaseCharacter_IsRightShoulder, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_IsRightShoulder::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacter.AttachToHand
// 0x0038 (0x0038 - 0x0000)
struct ALSCharacter_AttachToHand final
{
public:
	class UStaticMesh*                            NewStaticMesh;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          NewSkeletalMesh;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 NewAnimClass;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftHand;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B39[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Offset;                                            // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacter_AttachToHand) == 0x000008, "Wrong alignment on ALSCharacter_AttachToHand");
static_assert(sizeof(ALSCharacter_AttachToHand) == 0x000038, "Wrong size on ALSCharacter_AttachToHand");
static_assert(offsetof(ALSCharacter_AttachToHand, NewStaticMesh) == 0x000000, "Member 'ALSCharacter_AttachToHand::NewStaticMesh' has a wrong offset!");
static_assert(offsetof(ALSCharacter_AttachToHand, NewSkeletalMesh) == 0x000008, "Member 'ALSCharacter_AttachToHand::NewSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ALSCharacter_AttachToHand, NewAnimClass) == 0x000010, "Member 'ALSCharacter_AttachToHand::NewAnimClass' has a wrong offset!");
static_assert(offsetof(ALSCharacter_AttachToHand, bLeftHand) == 0x000018, "Member 'ALSCharacter_AttachToHand::bLeftHand' has a wrong offset!");
static_assert(offsetof(ALSCharacter_AttachToHand, Offset) == 0x000020, "Member 'ALSCharacter_AttachToHand::Offset' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.PlayDynamicTransition
// 0x0020 (0x0020 - 0x0000)
struct ALSCharacterAnimInstance_PlayDynamicTransition final
{
public:
	float                                         ReTriggerDelay;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B3F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSDynamicMontageParams               Parameters;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_PlayDynamicTransition) == 0x000008, "Wrong alignment on ALSCharacterAnimInstance_PlayDynamicTransition");
static_assert(sizeof(ALSCharacterAnimInstance_PlayDynamicTransition) == 0x000020, "Wrong size on ALSCharacterAnimInstance_PlayDynamicTransition");
static_assert(offsetof(ALSCharacterAnimInstance_PlayDynamicTransition, ReTriggerDelay) == 0x000000, "Member 'ALSCharacterAnimInstance_PlayDynamicTransition::ReTriggerDelay' has a wrong offset!");
static_assert(offsetof(ALSCharacterAnimInstance_PlayDynamicTransition, Parameters) == 0x000008, "Member 'ALSCharacterAnimInstance_PlayDynamicTransition::Parameters' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.PlayTransition
// 0x0018 (0x0018 - 0x0000)
struct ALSCharacterAnimInstance_PlayTransition final
{
public:
	struct FALSDynamicMontageParams               Parameters;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_PlayTransition) == 0x000008, "Wrong alignment on ALSCharacterAnimInstance_PlayTransition");
static_assert(sizeof(ALSCharacterAnimInstance_PlayTransition) == 0x000018, "Wrong size on ALSCharacterAnimInstance_PlayTransition");
static_assert(offsetof(ALSCharacterAnimInstance_PlayTransition, Parameters) == 0x000000, "Member 'ALSCharacterAnimInstance_PlayTransition::Parameters' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.PlayTransitionChecked
// 0x0018 (0x0018 - 0x0000)
struct ALSCharacterAnimInstance_PlayTransitionChecked final
{
public:
	struct FALSDynamicMontageParams               Parameters;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_PlayTransitionChecked) == 0x000008, "Wrong alignment on ALSCharacterAnimInstance_PlayTransitionChecked");
static_assert(sizeof(ALSCharacterAnimInstance_PlayTransitionChecked) == 0x000018, "Wrong size on ALSCharacterAnimInstance_PlayTransitionChecked");
static_assert(offsetof(ALSCharacterAnimInstance_PlayTransitionChecked, Parameters) == 0x000000, "Member 'ALSCharacterAnimInstance_PlayTransitionChecked::Parameters' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.SetGroundedEntryState
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterAnimInstance_SetGroundedEntryState final
{
public:
	EALSGroundedEntryState                        NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_SetGroundedEntryState) == 0x000001, "Wrong alignment on ALSCharacterAnimInstance_SetGroundedEntryState");
static_assert(sizeof(ALSCharacterAnimInstance_SetGroundedEntryState) == 0x000001, "Wrong size on ALSCharacterAnimInstance_SetGroundedEntryState");
static_assert(offsetof(ALSCharacterAnimInstance_SetGroundedEntryState, NewState) == 0x000000, "Member 'ALSCharacterAnimInstance_SetGroundedEntryState::NewState' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.SetTrackedHipsDirection
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterAnimInstance_SetTrackedHipsDirection final
{
public:
	EALSHipsDirection                             HipsDirection;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_SetTrackedHipsDirection) == 0x000001, "Wrong alignment on ALSCharacterAnimInstance_SetTrackedHipsDirection");
static_assert(sizeof(ALSCharacterAnimInstance_SetTrackedHipsDirection) == 0x000001, "Wrong size on ALSCharacterAnimInstance_SetTrackedHipsDirection");
static_assert(offsetof(ALSCharacterAnimInstance_SetTrackedHipsDirection, HipsDirection) == 0x000000, "Member 'ALSCharacterAnimInstance_SetTrackedHipsDirection::HipsDirection' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.CanDynamicTransition
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterAnimInstance_CanDynamicTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_CanDynamicTransition) == 0x000001, "Wrong alignment on ALSCharacterAnimInstance_CanDynamicTransition");
static_assert(sizeof(ALSCharacterAnimInstance_CanDynamicTransition) == 0x000001, "Wrong size on ALSCharacterAnimInstance_CanDynamicTransition");
static_assert(offsetof(ALSCharacterAnimInstance_CanDynamicTransition, ReturnValue) == 0x000000, "Member 'ALSCharacterAnimInstance_CanDynamicTransition::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.CanRotateInPlace
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterAnimInstance_CanRotateInPlace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_CanRotateInPlace) == 0x000001, "Wrong alignment on ALSCharacterAnimInstance_CanRotateInPlace");
static_assert(sizeof(ALSCharacterAnimInstance_CanRotateInPlace) == 0x000001, "Wrong size on ALSCharacterAnimInstance_CanRotateInPlace");
static_assert(offsetof(ALSCharacterAnimInstance_CanRotateInPlace, ReturnValue) == 0x000000, "Member 'ALSCharacterAnimInstance_CanRotateInPlace::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.CanTurnInPlace
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterAnimInstance_CanTurnInPlace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_CanTurnInPlace) == 0x000001, "Wrong alignment on ALSCharacterAnimInstance_CanTurnInPlace");
static_assert(sizeof(ALSCharacterAnimInstance_CanTurnInPlace) == 0x000001, "Wrong size on ALSCharacterAnimInstance_CanTurnInPlace");
static_assert(offsetof(ALSCharacterAnimInstance_CanTurnInPlace, ReturnValue) == 0x000000, "Member 'ALSCharacterAnimInstance_CanTurnInPlace::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.ShouldMoveCheck
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterAnimInstance_ShouldMoveCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_ShouldMoveCheck) == 0x000001, "Wrong alignment on ALSCharacterAnimInstance_ShouldMoveCheck");
static_assert(sizeof(ALSCharacterAnimInstance_ShouldMoveCheck) == 0x000001, "Wrong size on ALSCharacterAnimInstance_ShouldMoveCheck");
static_assert(offsetof(ALSCharacterAnimInstance_ShouldMoveCheck, ReturnValue) == 0x000000, "Member 'ALSCharacterAnimInstance_ShouldMoveCheck::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSDebugComponent.FocusedDebugCharacterCycle
// 0x0001 (0x0001 - 0x0000)
struct ALSDebugComponent_FocusedDebugCharacterCycle final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSDebugComponent_FocusedDebugCharacterCycle) == 0x000001, "Wrong alignment on ALSDebugComponent_FocusedDebugCharacterCycle");
static_assert(sizeof(ALSDebugComponent_FocusedDebugCharacterCycle) == 0x000001, "Wrong size on ALSDebugComponent_FocusedDebugCharacterCycle");
static_assert(offsetof(ALSDebugComponent_FocusedDebugCharacterCycle, bValue) == 0x000000, "Member 'ALSDebugComponent_FocusedDebugCharacterCycle::bValue' has a wrong offset!");

// Function ALSV4_CPP.ALSDebugComponent.GetDebugView
// 0x0001 (0x0001 - 0x0000)
struct ALSDebugComponent_GetDebugView final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSDebugComponent_GetDebugView) == 0x000001, "Wrong alignment on ALSDebugComponent_GetDebugView");
static_assert(sizeof(ALSDebugComponent_GetDebugView) == 0x000001, "Wrong size on ALSDebugComponent_GetDebugView");
static_assert(offsetof(ALSDebugComponent_GetDebugView, ReturnValue) == 0x000000, "Member 'ALSDebugComponent_GetDebugView::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSDebugComponent.GetShowDebugShapes
// 0x0001 (0x0001 - 0x0000)
struct ALSDebugComponent_GetShowDebugShapes final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSDebugComponent_GetShowDebugShapes) == 0x000001, "Wrong alignment on ALSDebugComponent_GetShowDebugShapes");
static_assert(sizeof(ALSDebugComponent_GetShowDebugShapes) == 0x000001, "Wrong size on ALSDebugComponent_GetShowDebugShapes");
static_assert(offsetof(ALSDebugComponent_GetShowDebugShapes, ReturnValue) == 0x000000, "Member 'ALSDebugComponent_GetShowDebugShapes::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSDebugComponent.GetShowLayerColors
// 0x0001 (0x0001 - 0x0000)
struct ALSDebugComponent_GetShowLayerColors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSDebugComponent_GetShowLayerColors) == 0x000001, "Wrong alignment on ALSDebugComponent_GetShowLayerColors");
static_assert(sizeof(ALSDebugComponent_GetShowLayerColors) == 0x000001, "Wrong size on ALSDebugComponent_GetShowLayerColors");
static_assert(offsetof(ALSDebugComponent_GetShowLayerColors, ReturnValue) == 0x000000, "Member 'ALSDebugComponent_GetShowLayerColors::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSDebugComponent.GetShowTraces
// 0x0001 (0x0001 - 0x0000)
struct ALSDebugComponent_GetShowTraces final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSDebugComponent_GetShowTraces) == 0x000001, "Wrong alignment on ALSDebugComponent_GetShowTraces");
static_assert(sizeof(ALSDebugComponent_GetShowTraces) == 0x000001, "Wrong size on ALSDebugComponent_GetShowTraces");
static_assert(offsetof(ALSDebugComponent_GetShowTraces, ReturnValue) == 0x000000, "Member 'ALSDebugComponent_GetShowTraces::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSDebugComponent.OnPlayerControllerInitialized
// 0x0008 (0x0008 - 0x0000)
struct ALSDebugComponent_OnPlayerControllerInitialized final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSDebugComponent_OnPlayerControllerInitialized) == 0x000008, "Wrong alignment on ALSDebugComponent_OnPlayerControllerInitialized");
static_assert(sizeof(ALSDebugComponent_OnPlayerControllerInitialized) == 0x000008, "Wrong size on ALSDebugComponent_OnPlayerControllerInitialized");
static_assert(offsetof(ALSDebugComponent_OnPlayerControllerInitialized, Controller) == 0x000000, "Member 'ALSDebugComponent_OnPlayerControllerInitialized::Controller' has a wrong offset!");

// Function ALSV4_CPP.ALSDebugComponent.OpenOverlayMenu
// 0x0001 (0x0001 - 0x0000)
struct ALSDebugComponent_OpenOverlayMenu final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSDebugComponent_OpenOverlayMenu) == 0x000001, "Wrong alignment on ALSDebugComponent_OpenOverlayMenu");
static_assert(sizeof(ALSDebugComponent_OpenOverlayMenu) == 0x000001, "Wrong size on ALSDebugComponent_OpenOverlayMenu");
static_assert(offsetof(ALSDebugComponent_OpenOverlayMenu, bValue) == 0x000000, "Member 'ALSDebugComponent_OpenOverlayMenu::bValue' has a wrong offset!");

// Function ALSV4_CPP.ALSDebugComponent.OverlayMenuCycle
// 0x0001 (0x0001 - 0x0000)
struct ALSDebugComponent_OverlayMenuCycle final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSDebugComponent_OverlayMenuCycle) == 0x000001, "Wrong alignment on ALSDebugComponent_OverlayMenuCycle");
static_assert(sizeof(ALSDebugComponent_OverlayMenuCycle) == 0x000001, "Wrong size on ALSDebugComponent_OverlayMenuCycle");
static_assert(offsetof(ALSDebugComponent_OverlayMenuCycle, bValue) == 0x000000, "Member 'ALSDebugComponent_OverlayMenuCycle::bValue' has a wrong offset!");

// Function ALSV4_CPP.ALSDebugComponent.ToggleGlobalTimeDilationLocal
// 0x0004 (0x0004 - 0x0000)
struct ALSDebugComponent_ToggleGlobalTimeDilationLocal final
{
public:
	float                                         TimeDilation;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSDebugComponent_ToggleGlobalTimeDilationLocal) == 0x000004, "Wrong alignment on ALSDebugComponent_ToggleGlobalTimeDilationLocal");
static_assert(sizeof(ALSDebugComponent_ToggleGlobalTimeDilationLocal) == 0x000004, "Wrong size on ALSDebugComponent_ToggleGlobalTimeDilationLocal");
static_assert(offsetof(ALSDebugComponent_ToggleGlobalTimeDilationLocal, TimeDilation) == 0x000000, "Member 'ALSDebugComponent_ToggleGlobalTimeDilationLocal::TimeDilation' has a wrong offset!");

// Function ALSV4_CPP.ALSMantleComponent.GetMantleAsset
// 0x0048 (0x0048 - 0x0000)
struct ALSMantleComponent_GetMantleAsset final
{
public:
	EALSMantleType                                MantleType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSOverlayState                              CurrentOverlayState;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B48[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSMantleAsset                        ReturnValue;                                       // 0x0008(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSMantleComponent_GetMantleAsset) == 0x000008, "Wrong alignment on ALSMantleComponent_GetMantleAsset");
static_assert(sizeof(ALSMantleComponent_GetMantleAsset) == 0x000048, "Wrong size on ALSMantleComponent_GetMantleAsset");
static_assert(offsetof(ALSMantleComponent_GetMantleAsset, MantleType) == 0x000000, "Member 'ALSMantleComponent_GetMantleAsset::MantleType' has a wrong offset!");
static_assert(offsetof(ALSMantleComponent_GetMantleAsset, CurrentOverlayState) == 0x000001, "Member 'ALSMantleComponent_GetMantleAsset::CurrentOverlayState' has a wrong offset!");
static_assert(offsetof(ALSMantleComponent_GetMantleAsset, ReturnValue) == 0x000008, "Member 'ALSMantleComponent_GetMantleAsset::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMantleComponent.MantleCheck
// 0x0018 (0x0018 - 0x0000)
struct ALSMantleComponent_MantleCheck final
{
public:
	struct FALSMantleTraceSettings                TraceSettings;                                     // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DebugType;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoMantle;                                         // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0016(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B49[0x1];                                     // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSMantleComponent_MantleCheck) == 0x000004, "Wrong alignment on ALSMantleComponent_MantleCheck");
static_assert(sizeof(ALSMantleComponent_MantleCheck) == 0x000018, "Wrong size on ALSMantleComponent_MantleCheck");
static_assert(offsetof(ALSMantleComponent_MantleCheck, TraceSettings) == 0x000000, "Member 'ALSMantleComponent_MantleCheck::TraceSettings' has a wrong offset!");
static_assert(offsetof(ALSMantleComponent_MantleCheck, DebugType) == 0x000014, "Member 'ALSMantleComponent_MantleCheck::DebugType' has a wrong offset!");
static_assert(offsetof(ALSMantleComponent_MantleCheck, bDoMantle) == 0x000015, "Member 'ALSMantleComponent_MantleCheck::bDoMantle' has a wrong offset!");
static_assert(offsetof(ALSMantleComponent_MantleCheck, ReturnValue) == 0x000016, "Member 'ALSMantleComponent_MantleCheck::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMantleComponent.MantleStart
// 0x0090 (0x0090 - 0x0000)
struct ALSMantleComponent_MantleStart final
{
public:
	float                                         MantleHeight;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4A[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSComponentAndTransform              MantleLedgeWS;                                     // 0x0010(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EALSMantleType                                MantleType;                                        // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4B[0xF];                                     // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSMantleComponent_MantleStart) == 0x000010, "Wrong alignment on ALSMantleComponent_MantleStart");
static_assert(sizeof(ALSMantleComponent_MantleStart) == 0x000090, "Wrong size on ALSMantleComponent_MantleStart");
static_assert(offsetof(ALSMantleComponent_MantleStart, MantleHeight) == 0x000000, "Member 'ALSMantleComponent_MantleStart::MantleHeight' has a wrong offset!");
static_assert(offsetof(ALSMantleComponent_MantleStart, MantleLedgeWS) == 0x000010, "Member 'ALSMantleComponent_MantleStart::MantleLedgeWS' has a wrong offset!");
static_assert(offsetof(ALSMantleComponent_MantleStart, MantleType) == 0x000080, "Member 'ALSMantleComponent_MantleStart::MantleType' has a wrong offset!");

// Function ALSV4_CPP.ALSMantleComponent.MantleUpdate
// 0x0004 (0x0004 - 0x0000)
struct ALSMantleComponent_MantleUpdate final
{
public:
	float                                         BlendIn;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSMantleComponent_MantleUpdate) == 0x000004, "Wrong alignment on ALSMantleComponent_MantleUpdate");
static_assert(sizeof(ALSMantleComponent_MantleUpdate) == 0x000004, "Wrong size on ALSMantleComponent_MantleUpdate");
static_assert(offsetof(ALSMantleComponent_MantleUpdate, BlendIn) == 0x000000, "Member 'ALSMantleComponent_MantleUpdate::BlendIn' has a wrong offset!");

// Function ALSV4_CPP.ALSMantleComponent.Multicast_MantleStart
// 0x0090 (0x0090 - 0x0000)
struct ALSMantleComponent_Multicast_MantleStart final
{
public:
	float                                         MantleHeight;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4C[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSComponentAndTransform              MantleLedgeWS;                                     // 0x0010(0x0070)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EALSMantleType                                MantleType;                                        // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4D[0xF];                                     // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSMantleComponent_Multicast_MantleStart) == 0x000010, "Wrong alignment on ALSMantleComponent_Multicast_MantleStart");
static_assert(sizeof(ALSMantleComponent_Multicast_MantleStart) == 0x000090, "Wrong size on ALSMantleComponent_Multicast_MantleStart");
static_assert(offsetof(ALSMantleComponent_Multicast_MantleStart, MantleHeight) == 0x000000, "Member 'ALSMantleComponent_Multicast_MantleStart::MantleHeight' has a wrong offset!");
static_assert(offsetof(ALSMantleComponent_Multicast_MantleStart, MantleLedgeWS) == 0x000010, "Member 'ALSMantleComponent_Multicast_MantleStart::MantleLedgeWS' has a wrong offset!");
static_assert(offsetof(ALSMantleComponent_Multicast_MantleStart, MantleType) == 0x000080, "Member 'ALSMantleComponent_Multicast_MantleStart::MantleType' has a wrong offset!");

// Function ALSV4_CPP.ALSMantleComponent.OnOwnerRagdollStateChanged
// 0x0001 (0x0001 - 0x0000)
struct ALSMantleComponent_OnOwnerRagdollStateChanged final
{
public:
	bool                                          bRagdollState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSMantleComponent_OnOwnerRagdollStateChanged) == 0x000001, "Wrong alignment on ALSMantleComponent_OnOwnerRagdollStateChanged");
static_assert(sizeof(ALSMantleComponent_OnOwnerRagdollStateChanged) == 0x000001, "Wrong size on ALSMantleComponent_OnOwnerRagdollStateChanged");
static_assert(offsetof(ALSMantleComponent_OnOwnerRagdollStateChanged, bRagdollState) == 0x000000, "Member 'ALSMantleComponent_OnOwnerRagdollStateChanged::bRagdollState' has a wrong offset!");

// Function ALSV4_CPP.ALSMantleComponent.Server_MantleStart
// 0x0090 (0x0090 - 0x0000)
struct ALSMantleComponent_Server_MantleStart final
{
public:
	float                                         MantleHeight;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4E[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSComponentAndTransform              MantleLedgeWS;                                     // 0x0010(0x0070)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EALSMantleType                                MantleType;                                        // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4F[0xF];                                     // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSMantleComponent_Server_MantleStart) == 0x000010, "Wrong alignment on ALSMantleComponent_Server_MantleStart");
static_assert(sizeof(ALSMantleComponent_Server_MantleStart) == 0x000090, "Wrong size on ALSMantleComponent_Server_MantleStart");
static_assert(offsetof(ALSMantleComponent_Server_MantleStart, MantleHeight) == 0x000000, "Member 'ALSMantleComponent_Server_MantleStart::MantleHeight' has a wrong offset!");
static_assert(offsetof(ALSMantleComponent_Server_MantleStart, MantleLedgeWS) == 0x000010, "Member 'ALSMantleComponent_Server_MantleStart::MantleLedgeWS' has a wrong offset!");
static_assert(offsetof(ALSMantleComponent_Server_MantleStart, MantleType) == 0x000080, "Member 'ALSMantleComponent_Server_MantleStart::MantleType' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.AngleInRange
// 0x0014 (0x0014 - 0x0000)
struct ALSMathLibrary_AngleInRange final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngle;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Buffer;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncreaseBuffer;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B50[0x2];                                     // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSMathLibrary_AngleInRange) == 0x000004, "Wrong alignment on ALSMathLibrary_AngleInRange");
static_assert(sizeof(ALSMathLibrary_AngleInRange) == 0x000014, "Wrong size on ALSMathLibrary_AngleInRange");
static_assert(offsetof(ALSMathLibrary_AngleInRange, Angle) == 0x000000, "Member 'ALSMathLibrary_AngleInRange::Angle' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_AngleInRange, MinAngle) == 0x000004, "Member 'ALSMathLibrary_AngleInRange::MinAngle' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_AngleInRange, MaxAngle) == 0x000008, "Member 'ALSMathLibrary_AngleInRange::MaxAngle' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_AngleInRange, Buffer) == 0x00000C, "Member 'ALSMathLibrary_AngleInRange::Buffer' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_AngleInRange, IncreaseBuffer) == 0x000010, "Member 'ALSMathLibrary_AngleInRange::IncreaseBuffer' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_AngleInRange, ReturnValue) == 0x000011, "Member 'ALSMathLibrary_AngleInRange::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.CalculateQuadrant
// 0x0020 (0x0020 - 0x0000)
struct ALSMathLibrary_CalculateQuadrant final
{
public:
	EALSMovementDirection                         Current;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B51[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FRThreshold;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FLThreshold;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BRThreshold;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BLThreshold;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Buffer;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSMovementDirection                         ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B52[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSMathLibrary_CalculateQuadrant) == 0x000004, "Wrong alignment on ALSMathLibrary_CalculateQuadrant");
static_assert(sizeof(ALSMathLibrary_CalculateQuadrant) == 0x000020, "Wrong size on ALSMathLibrary_CalculateQuadrant");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, Current) == 0x000000, "Member 'ALSMathLibrary_CalculateQuadrant::Current' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, FRThreshold) == 0x000004, "Member 'ALSMathLibrary_CalculateQuadrant::FRThreshold' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, FLThreshold) == 0x000008, "Member 'ALSMathLibrary_CalculateQuadrant::FLThreshold' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, BRThreshold) == 0x00000C, "Member 'ALSMathLibrary_CalculateQuadrant::BRThreshold' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, BLThreshold) == 0x000010, "Member 'ALSMathLibrary_CalculateQuadrant::BLThreshold' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, Buffer) == 0x000014, "Member 'ALSMathLibrary_CalculateQuadrant::Buffer' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, Angle) == 0x000018, "Member 'ALSMathLibrary_CalculateQuadrant::Angle' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, ReturnValue) == 0x00001C, "Member 'ALSMathLibrary_CalculateQuadrant::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.CapsuleHasRoomCheck
// 0x0030 (0x0030 - 0x0000)
struct ALSMathLibrary_CapsuleHasRoomCheck final
{
public:
	class UCapsuleComponent*                      Capsule;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOffset;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusOffset;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DebugType;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDebugTrace;                                    // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B53[0x5];                                     // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSMathLibrary_CapsuleHasRoomCheck) == 0x000008, "Wrong alignment on ALSMathLibrary_CapsuleHasRoomCheck");
static_assert(sizeof(ALSMathLibrary_CapsuleHasRoomCheck) == 0x000030, "Wrong size on ALSMathLibrary_CapsuleHasRoomCheck");
static_assert(offsetof(ALSMathLibrary_CapsuleHasRoomCheck, Capsule) == 0x000000, "Member 'ALSMathLibrary_CapsuleHasRoomCheck::Capsule' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CapsuleHasRoomCheck, TargetLocation) == 0x000008, "Member 'ALSMathLibrary_CapsuleHasRoomCheck::TargetLocation' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CapsuleHasRoomCheck, HeightOffset) == 0x000020, "Member 'ALSMathLibrary_CapsuleHasRoomCheck::HeightOffset' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CapsuleHasRoomCheck, RadiusOffset) == 0x000024, "Member 'ALSMathLibrary_CapsuleHasRoomCheck::RadiusOffset' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CapsuleHasRoomCheck, DebugType) == 0x000028, "Member 'ALSMathLibrary_CapsuleHasRoomCheck::DebugType' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CapsuleHasRoomCheck, DrawDebugTrace) == 0x000029, "Member 'ALSMathLibrary_CapsuleHasRoomCheck::DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CapsuleHasRoomCheck, ReturnValue) == 0x00002A, "Member 'ALSMathLibrary_CapsuleHasRoomCheck::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.GetCapsuleBaseLocation
// 0x0028 (0x0028 - 0x0000)
struct ALSMathLibrary_GetCapsuleBaseLocation final
{
public:
	float                                         ZOffset;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B54[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      Capsule;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSMathLibrary_GetCapsuleBaseLocation) == 0x000008, "Wrong alignment on ALSMathLibrary_GetCapsuleBaseLocation");
static_assert(sizeof(ALSMathLibrary_GetCapsuleBaseLocation) == 0x000028, "Wrong size on ALSMathLibrary_GetCapsuleBaseLocation");
static_assert(offsetof(ALSMathLibrary_GetCapsuleBaseLocation, ZOffset) == 0x000000, "Member 'ALSMathLibrary_GetCapsuleBaseLocation::ZOffset' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_GetCapsuleBaseLocation, Capsule) == 0x000008, "Member 'ALSMathLibrary_GetCapsuleBaseLocation::Capsule' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_GetCapsuleBaseLocation, ReturnValue) == 0x000010, "Member 'ALSMathLibrary_GetCapsuleBaseLocation::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.GetCapsuleLocationFromBase
// 0x0040 (0x0040 - 0x0000)
struct ALSMathLibrary_GetCapsuleLocationFromBase final
{
public:
	struct FVector                                BaseLocation;                                      // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZOffset;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B55[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      Capsule;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSMathLibrary_GetCapsuleLocationFromBase) == 0x000008, "Wrong alignment on ALSMathLibrary_GetCapsuleLocationFromBase");
static_assert(sizeof(ALSMathLibrary_GetCapsuleLocationFromBase) == 0x000040, "Wrong size on ALSMathLibrary_GetCapsuleLocationFromBase");
static_assert(offsetof(ALSMathLibrary_GetCapsuleLocationFromBase, BaseLocation) == 0x000000, "Member 'ALSMathLibrary_GetCapsuleLocationFromBase::BaseLocation' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_GetCapsuleLocationFromBase, ZOffset) == 0x000018, "Member 'ALSMathLibrary_GetCapsuleLocationFromBase::ZOffset' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_GetCapsuleLocationFromBase, Capsule) == 0x000020, "Member 'ALSMathLibrary_GetCapsuleLocationFromBase::Capsule' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_GetCapsuleLocationFromBase, ReturnValue) == 0x000028, "Member 'ALSMathLibrary_GetCapsuleLocationFromBase::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.MantleComponentLocalToWorld
// 0x00D0 (0x00D0 - 0x0000)
struct ALSMathLibrary_MantleComponentLocalToWorld final
{
public:
	struct FALSComponentAndTransform              CompAndTransform;                                  // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0070(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSMathLibrary_MantleComponentLocalToWorld) == 0x000010, "Wrong alignment on ALSMathLibrary_MantleComponentLocalToWorld");
static_assert(sizeof(ALSMathLibrary_MantleComponentLocalToWorld) == 0x0000D0, "Wrong size on ALSMathLibrary_MantleComponentLocalToWorld");
static_assert(offsetof(ALSMathLibrary_MantleComponentLocalToWorld, CompAndTransform) == 0x000000, "Member 'ALSMathLibrary_MantleComponentLocalToWorld::CompAndTransform' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_MantleComponentLocalToWorld, ReturnValue) == 0x000070, "Member 'ALSMathLibrary_MantleComponentLocalToWorld::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.TransformAdd
// 0x0120 (0x0120 - 0x0000)
struct ALSMathLibrary_TransformAdd final
{
public:
	struct FTransform                             T1;                                                // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             T2;                                                // 0x0060(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x00C0(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSMathLibrary_TransformAdd) == 0x000010, "Wrong alignment on ALSMathLibrary_TransformAdd");
static_assert(sizeof(ALSMathLibrary_TransformAdd) == 0x000120, "Wrong size on ALSMathLibrary_TransformAdd");
static_assert(offsetof(ALSMathLibrary_TransformAdd, T1) == 0x000000, "Member 'ALSMathLibrary_TransformAdd::T1' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_TransformAdd, T2) == 0x000060, "Member 'ALSMathLibrary_TransformAdd::T2' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_TransformAdd, ReturnValue) == 0x0000C0, "Member 'ALSMathLibrary_TransformAdd::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.TransformSub
// 0x0120 (0x0120 - 0x0000)
struct ALSMathLibrary_TransformSub final
{
public:
	struct FTransform                             T1;                                                // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             T2;                                                // 0x0060(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x00C0(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSMathLibrary_TransformSub) == 0x000010, "Wrong alignment on ALSMathLibrary_TransformSub");
static_assert(sizeof(ALSMathLibrary_TransformSub) == 0x000120, "Wrong size on ALSMathLibrary_TransformSub");
static_assert(offsetof(ALSMathLibrary_TransformSub, T1) == 0x000000, "Member 'ALSMathLibrary_TransformSub::T1' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_TransformSub, T2) == 0x000060, "Member 'ALSMathLibrary_TransformSub::T2' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_TransformSub, ReturnValue) == 0x0000C0, "Member 'ALSMathLibrary_TransformSub::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerCameraManager.CalculateAxisIndependentLag
// 0x0080 (0x0080 - 0x0000)
struct ALSPlayerCameraManager_CalculateAxisIndependentLag final
{
public:
	struct FVector                                CurrentLocation;                                   // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LagSpeeds;                                         // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B5B[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0068(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerCameraManager_CalculateAxisIndependentLag) == 0x000008, "Wrong alignment on ALSPlayerCameraManager_CalculateAxisIndependentLag");
static_assert(sizeof(ALSPlayerCameraManager_CalculateAxisIndependentLag) == 0x000080, "Wrong size on ALSPlayerCameraManager_CalculateAxisIndependentLag");
static_assert(offsetof(ALSPlayerCameraManager_CalculateAxisIndependentLag, CurrentLocation) == 0x000000, "Member 'ALSPlayerCameraManager_CalculateAxisIndependentLag::CurrentLocation' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CalculateAxisIndependentLag, TargetLocation) == 0x000018, "Member 'ALSPlayerCameraManager_CalculateAxisIndependentLag::TargetLocation' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CalculateAxisIndependentLag, CameraRotation) == 0x000030, "Member 'ALSPlayerCameraManager_CalculateAxisIndependentLag::CameraRotation' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CalculateAxisIndependentLag, LagSpeeds) == 0x000048, "Member 'ALSPlayerCameraManager_CalculateAxisIndependentLag::LagSpeeds' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CalculateAxisIndependentLag, DeltaTime) == 0x000060, "Member 'ALSPlayerCameraManager_CalculateAxisIndependentLag::DeltaTime' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CalculateAxisIndependentLag, ReturnValue) == 0x000068, "Member 'ALSPlayerCameraManager_CalculateAxisIndependentLag::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerCameraManager.CustomCameraBehavior
// 0x0040 (0x0040 - 0x0000)
struct ALSPlayerCameraManager_CustomCameraBehavior final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B5C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B5D[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSPlayerCameraManager_CustomCameraBehavior) == 0x000008, "Wrong alignment on ALSPlayerCameraManager_CustomCameraBehavior");
static_assert(sizeof(ALSPlayerCameraManager_CustomCameraBehavior) == 0x000040, "Wrong size on ALSPlayerCameraManager_CustomCameraBehavior");
static_assert(offsetof(ALSPlayerCameraManager_CustomCameraBehavior, DeltaTime) == 0x000000, "Member 'ALSPlayerCameraManager_CustomCameraBehavior::DeltaTime' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CustomCameraBehavior, Location) == 0x000008, "Member 'ALSPlayerCameraManager_CustomCameraBehavior::Location' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CustomCameraBehavior, Rotation) == 0x000020, "Member 'ALSPlayerCameraManager_CustomCameraBehavior::Rotation' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CustomCameraBehavior, FOV) == 0x000038, "Member 'ALSPlayerCameraManager_CustomCameraBehavior::FOV' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CustomCameraBehavior, ReturnValue) == 0x00003C, "Member 'ALSPlayerCameraManager_CustomCameraBehavior::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerCameraManager.DrawDebugTargets
// 0x0018 (0x0018 - 0x0000)
struct ALSPlayerCameraManager_DrawDebugTargets final
{
public:
	struct FVector                                PivotTargetLocation;                               // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerCameraManager_DrawDebugTargets) == 0x000008, "Wrong alignment on ALSPlayerCameraManager_DrawDebugTargets");
static_assert(sizeof(ALSPlayerCameraManager_DrawDebugTargets) == 0x000018, "Wrong size on ALSPlayerCameraManager_DrawDebugTargets");
static_assert(offsetof(ALSPlayerCameraManager_DrawDebugTargets, PivotTargetLocation) == 0x000000, "Member 'ALSPlayerCameraManager_DrawDebugTargets::PivotTargetLocation' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerCameraManager.OnPossess
// 0x0008 (0x0008 - 0x0000)
struct ALSPlayerCameraManager_OnPossess final
{
public:
	class AALSBaseCharacter*                      NewCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerCameraManager_OnPossess) == 0x000008, "Wrong alignment on ALSPlayerCameraManager_OnPossess");
static_assert(sizeof(ALSPlayerCameraManager_OnPossess) == 0x000008, "Wrong size on ALSPlayerCameraManager_OnPossess");
static_assert(offsetof(ALSPlayerCameraManager_OnPossess, NewCharacter) == 0x000000, "Member 'ALSPlayerCameraManager_OnPossess::NewCharacter' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerCameraManager.GetCameraBehaviorParam
// 0x000C (0x000C - 0x0000)
struct ALSPlayerCameraManager_GetCameraBehaviorParam final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerCameraManager_GetCameraBehaviorParam) == 0x000004, "Wrong alignment on ALSPlayerCameraManager_GetCameraBehaviorParam");
static_assert(sizeof(ALSPlayerCameraManager_GetCameraBehaviorParam) == 0x00000C, "Wrong size on ALSPlayerCameraManager_GetCameraBehaviorParam");
static_assert(offsetof(ALSPlayerCameraManager_GetCameraBehaviorParam, CurveName) == 0x000000, "Member 'ALSPlayerCameraManager_GetCameraBehaviorParam::CurveName' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_GetCameraBehaviorParam, ReturnValue) == 0x000008, "Member 'ALSPlayerCameraManager_GetCameraBehaviorParam::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.AimAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_AimAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_AimAction) == 0x000008, "Wrong alignment on ALSPlayerController_AimAction");
static_assert(sizeof(ALSPlayerController_AimAction) == 0x000020, "Wrong size on ALSPlayerController_AimAction");
static_assert(offsetof(ALSPlayerController_AimAction, Value) == 0x000000, "Member 'ALSPlayerController_AimAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.CameraHeldAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_CameraHeldAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_CameraHeldAction) == 0x000008, "Wrong alignment on ALSPlayerController_CameraHeldAction");
static_assert(sizeof(ALSPlayerController_CameraHeldAction) == 0x000020, "Wrong size on ALSPlayerController_CameraHeldAction");
static_assert(offsetof(ALSPlayerController_CameraHeldAction, Value) == 0x000000, "Member 'ALSPlayerController_CameraHeldAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.CameraRightAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_CameraRightAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_CameraRightAction) == 0x000008, "Wrong alignment on ALSPlayerController_CameraRightAction");
static_assert(sizeof(ALSPlayerController_CameraRightAction) == 0x000020, "Wrong size on ALSPlayerController_CameraRightAction");
static_assert(offsetof(ALSPlayerController_CameraRightAction, Value) == 0x000000, "Member 'ALSPlayerController_CameraRightAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.CameraTapAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_CameraTapAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_CameraTapAction) == 0x000008, "Wrong alignment on ALSPlayerController_CameraTapAction");
static_assert(sizeof(ALSPlayerController_CameraTapAction) == 0x000020, "Wrong size on ALSPlayerController_CameraTapAction");
static_assert(offsetof(ALSPlayerController_CameraTapAction, Value) == 0x000000, "Member 'ALSPlayerController_CameraTapAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.CameraUpAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_CameraUpAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_CameraUpAction) == 0x000008, "Wrong alignment on ALSPlayerController_CameraUpAction");
static_assert(sizeof(ALSPlayerController_CameraUpAction) == 0x000020, "Wrong size on ALSPlayerController_CameraUpAction");
static_assert(offsetof(ALSPlayerController_CameraUpAction, Value) == 0x000000, "Member 'ALSPlayerController_CameraUpAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.DebugFocusedCharacterCycleAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_DebugFocusedCharacterCycleAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_DebugFocusedCharacterCycleAction) == 0x000008, "Wrong alignment on ALSPlayerController_DebugFocusedCharacterCycleAction");
static_assert(sizeof(ALSPlayerController_DebugFocusedCharacterCycleAction) == 0x000020, "Wrong size on ALSPlayerController_DebugFocusedCharacterCycleAction");
static_assert(offsetof(ALSPlayerController_DebugFocusedCharacterCycleAction, Value) == 0x000000, "Member 'ALSPlayerController_DebugFocusedCharacterCycleAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.DebugOpenOverlayMenuAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_DebugOpenOverlayMenuAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_DebugOpenOverlayMenuAction) == 0x000008, "Wrong alignment on ALSPlayerController_DebugOpenOverlayMenuAction");
static_assert(sizeof(ALSPlayerController_DebugOpenOverlayMenuAction) == 0x000020, "Wrong size on ALSPlayerController_DebugOpenOverlayMenuAction");
static_assert(offsetof(ALSPlayerController_DebugOpenOverlayMenuAction, Value) == 0x000000, "Member 'ALSPlayerController_DebugOpenOverlayMenuAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.DebugOverlayMenuCycleAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_DebugOverlayMenuCycleAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_DebugOverlayMenuCycleAction) == 0x000008, "Wrong alignment on ALSPlayerController_DebugOverlayMenuCycleAction");
static_assert(sizeof(ALSPlayerController_DebugOverlayMenuCycleAction) == 0x000020, "Wrong size on ALSPlayerController_DebugOverlayMenuCycleAction");
static_assert(offsetof(ALSPlayerController_DebugOverlayMenuCycleAction, Value) == 0x000000, "Member 'ALSPlayerController_DebugOverlayMenuCycleAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.DebugToggleCharacterInfoAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_DebugToggleCharacterInfoAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_DebugToggleCharacterInfoAction) == 0x000008, "Wrong alignment on ALSPlayerController_DebugToggleCharacterInfoAction");
static_assert(sizeof(ALSPlayerController_DebugToggleCharacterInfoAction) == 0x000020, "Wrong size on ALSPlayerController_DebugToggleCharacterInfoAction");
static_assert(offsetof(ALSPlayerController_DebugToggleCharacterInfoAction, Value) == 0x000000, "Member 'ALSPlayerController_DebugToggleCharacterInfoAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.DebugToggleDebugViewAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_DebugToggleDebugViewAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_DebugToggleDebugViewAction) == 0x000008, "Wrong alignment on ALSPlayerController_DebugToggleDebugViewAction");
static_assert(sizeof(ALSPlayerController_DebugToggleDebugViewAction) == 0x000020, "Wrong size on ALSPlayerController_DebugToggleDebugViewAction");
static_assert(offsetof(ALSPlayerController_DebugToggleDebugViewAction, Value) == 0x000000, "Member 'ALSPlayerController_DebugToggleDebugViewAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.DebugToggleHudAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_DebugToggleHudAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_DebugToggleHudAction) == 0x000008, "Wrong alignment on ALSPlayerController_DebugToggleHudAction");
static_assert(sizeof(ALSPlayerController_DebugToggleHudAction) == 0x000020, "Wrong size on ALSPlayerController_DebugToggleHudAction");
static_assert(offsetof(ALSPlayerController_DebugToggleHudAction, Value) == 0x000000, "Member 'ALSPlayerController_DebugToggleHudAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.DebugToggleLayerColorsAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_DebugToggleLayerColorsAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_DebugToggleLayerColorsAction) == 0x000008, "Wrong alignment on ALSPlayerController_DebugToggleLayerColorsAction");
static_assert(sizeof(ALSPlayerController_DebugToggleLayerColorsAction) == 0x000020, "Wrong size on ALSPlayerController_DebugToggleLayerColorsAction");
static_assert(offsetof(ALSPlayerController_DebugToggleLayerColorsAction, Value) == 0x000000, "Member 'ALSPlayerController_DebugToggleLayerColorsAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.DebugToggleMeshAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_DebugToggleMeshAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_DebugToggleMeshAction) == 0x000008, "Wrong alignment on ALSPlayerController_DebugToggleMeshAction");
static_assert(sizeof(ALSPlayerController_DebugToggleMeshAction) == 0x000020, "Wrong size on ALSPlayerController_DebugToggleMeshAction");
static_assert(offsetof(ALSPlayerController_DebugToggleMeshAction, Value) == 0x000000, "Member 'ALSPlayerController_DebugToggleMeshAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.DebugToggleShapesAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_DebugToggleShapesAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_DebugToggleShapesAction) == 0x000008, "Wrong alignment on ALSPlayerController_DebugToggleShapesAction");
static_assert(sizeof(ALSPlayerController_DebugToggleShapesAction) == 0x000020, "Wrong size on ALSPlayerController_DebugToggleShapesAction");
static_assert(offsetof(ALSPlayerController_DebugToggleShapesAction, Value) == 0x000000, "Member 'ALSPlayerController_DebugToggleShapesAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.DebugToggleSlomoAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_DebugToggleSlomoAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_DebugToggleSlomoAction) == 0x000008, "Wrong alignment on ALSPlayerController_DebugToggleSlomoAction");
static_assert(sizeof(ALSPlayerController_DebugToggleSlomoAction) == 0x000020, "Wrong size on ALSPlayerController_DebugToggleSlomoAction");
static_assert(offsetof(ALSPlayerController_DebugToggleSlomoAction, Value) == 0x000000, "Member 'ALSPlayerController_DebugToggleSlomoAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.DebugToggleTracesAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_DebugToggleTracesAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_DebugToggleTracesAction) == 0x000008, "Wrong alignment on ALSPlayerController_DebugToggleTracesAction");
static_assert(sizeof(ALSPlayerController_DebugToggleTracesAction) == 0x000020, "Wrong size on ALSPlayerController_DebugToggleTracesAction");
static_assert(offsetof(ALSPlayerController_DebugToggleTracesAction, Value) == 0x000000, "Member 'ALSPlayerController_DebugToggleTracesAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.ForwardMovementAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_ForwardMovementAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_ForwardMovementAction) == 0x000008, "Wrong alignment on ALSPlayerController_ForwardMovementAction");
static_assert(sizeof(ALSPlayerController_ForwardMovementAction) == 0x000020, "Wrong size on ALSPlayerController_ForwardMovementAction");
static_assert(offsetof(ALSPlayerController_ForwardMovementAction, Value) == 0x000000, "Member 'ALSPlayerController_ForwardMovementAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.JumpAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_JumpAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_JumpAction) == 0x000008, "Wrong alignment on ALSPlayerController_JumpAction");
static_assert(sizeof(ALSPlayerController_JumpAction) == 0x000020, "Wrong size on ALSPlayerController_JumpAction");
static_assert(offsetof(ALSPlayerController_JumpAction, Value) == 0x000000, "Member 'ALSPlayerController_JumpAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.LookingDirectionAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_LookingDirectionAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_LookingDirectionAction) == 0x000008, "Wrong alignment on ALSPlayerController_LookingDirectionAction");
static_assert(sizeof(ALSPlayerController_LookingDirectionAction) == 0x000020, "Wrong size on ALSPlayerController_LookingDirectionAction");
static_assert(offsetof(ALSPlayerController_LookingDirectionAction, Value) == 0x000000, "Member 'ALSPlayerController_LookingDirectionAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.RagdollAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_RagdollAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_RagdollAction) == 0x000008, "Wrong alignment on ALSPlayerController_RagdollAction");
static_assert(sizeof(ALSPlayerController_RagdollAction) == 0x000020, "Wrong size on ALSPlayerController_RagdollAction");
static_assert(offsetof(ALSPlayerController_RagdollAction, Value) == 0x000000, "Member 'ALSPlayerController_RagdollAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.RightMovementAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_RightMovementAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_RightMovementAction) == 0x000008, "Wrong alignment on ALSPlayerController_RightMovementAction");
static_assert(sizeof(ALSPlayerController_RightMovementAction) == 0x000020, "Wrong size on ALSPlayerController_RightMovementAction");
static_assert(offsetof(ALSPlayerController_RightMovementAction, Value) == 0x000000, "Member 'ALSPlayerController_RightMovementAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.SprintAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_SprintAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_SprintAction) == 0x000008, "Wrong alignment on ALSPlayerController_SprintAction");
static_assert(sizeof(ALSPlayerController_SprintAction) == 0x000020, "Wrong size on ALSPlayerController_SprintAction");
static_assert(offsetof(ALSPlayerController_SprintAction, Value) == 0x000000, "Member 'ALSPlayerController_SprintAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.StanceAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_StanceAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_StanceAction) == 0x000008, "Wrong alignment on ALSPlayerController_StanceAction");
static_assert(sizeof(ALSPlayerController_StanceAction) == 0x000020, "Wrong size on ALSPlayerController_StanceAction");
static_assert(offsetof(ALSPlayerController_StanceAction, Value) == 0x000000, "Member 'ALSPlayerController_StanceAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.VelocityDirectionAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_VelocityDirectionAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_VelocityDirectionAction) == 0x000008, "Wrong alignment on ALSPlayerController_VelocityDirectionAction");
static_assert(sizeof(ALSPlayerController_VelocityDirectionAction) == 0x000020, "Wrong size on ALSPlayerController_VelocityDirectionAction");
static_assert(offsetof(ALSPlayerController_VelocityDirectionAction, Value) == 0x000000, "Member 'ALSPlayerController_VelocityDirectionAction::Value' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerController.WalkAction
// 0x0020 (0x0020 - 0x0000)
struct ALSPlayerController_WalkAction final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerController_WalkAction) == 0x000008, "Wrong alignment on ALSPlayerController_WalkAction");
static_assert(sizeof(ALSPlayerController_WalkAction) == 0x000020, "Wrong size on ALSPlayerController_WalkAction");
static_assert(offsetof(ALSPlayerController_WalkAction, Value) == 0x000000, "Member 'ALSPlayerController_WalkAction::Value' has a wrong offset!");

}

