#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Flashlight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MasterHoldable_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Flashlight.BP_Flashlight_C
// 0x0020 (0x06D0 - 0x06B0)
class ABP_Flashlight_C final : public ABP_MasterHoldable_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Flashlight_C;                    // 0x06B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Flashlight;                                        // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Flashlight(int32 EntryPoint);
	void SGK_HoldableMesh(class UPrimitiveComponent** Mesh);
	void SGK_ServerPrimaryAction(bool KeyDown);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Flashlight_C">();
	}
	static class ABP_Flashlight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Flashlight_C>();
	}
};
static_assert(alignof(ABP_Flashlight_C) == 0x000010, "Wrong alignment on ABP_Flashlight_C");
static_assert(sizeof(ABP_Flashlight_C) == 0x0006D0, "Wrong size on ABP_Flashlight_C");
static_assert(offsetof(ABP_Flashlight_C, UberGraphFrame_BP_Flashlight_C) == 0x0006B0, "Member 'ABP_Flashlight_C::UberGraphFrame_BP_Flashlight_C' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_C, PointLight) == 0x0006B8, "Member 'ABP_Flashlight_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_C, SpotLight) == 0x0006C0, "Member 'ABP_Flashlight_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_Flashlight_C, Flashlight) == 0x0006C8, "Member 'ABP_Flashlight_C::Flashlight' has a wrong offset!");

}

