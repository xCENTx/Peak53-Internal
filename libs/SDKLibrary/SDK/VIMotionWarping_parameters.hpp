#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VIMotionWarping

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "VIMotionWarping_structs.hpp"


namespace SDK::Params
{

// Function VIMotionWarping.VIAnimNotifyState_MotionWarping.AddVIRootMotionModifier
// 0x0018 (0x0018 - 0x0000)
struct VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier final
{
public:
	class UVIMotionWarpingComponent*              VIMotionWarpingComp;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier) == 0x000008, "Wrong alignment on VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier");
static_assert(sizeof(VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier) == 0x000018, "Wrong size on VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier");
static_assert(offsetof(VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier, VIMotionWarpingComp) == 0x000000, "Member 'VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier::VIMotionWarpingComp' has a wrong offset!");
static_assert(offsetof(VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier, Animation) == 0x000008, "Member 'VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier::Animation' has a wrong offset!");
static_assert(offsetof(VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier, StartTime) == 0x000010, "Member 'VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier::StartTime' has a wrong offset!");
static_assert(offsetof(VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier, EndTime) == 0x000014, "Member 'VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier::EndTime' has a wrong offset!");

// Function VIMotionWarping.VIMotionWarpingUtilities.BreakVIMotionWarpingSyncPoint
// 0x0070 (0x0070 - 0x0000)
struct VIMotionWarpingUtilities_BreakVIMotionWarpingSyncPoint final
{
public:
	struct FVIMotionWarpingSyncPoint              SyncPoint;                                         // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIMotionWarpingUtilities_BreakVIMotionWarpingSyncPoint) == 0x000010, "Wrong alignment on VIMotionWarpingUtilities_BreakVIMotionWarpingSyncPoint");
static_assert(sizeof(VIMotionWarpingUtilities_BreakVIMotionWarpingSyncPoint) == 0x000070, "Wrong size on VIMotionWarpingUtilities_BreakVIMotionWarpingSyncPoint");
static_assert(offsetof(VIMotionWarpingUtilities_BreakVIMotionWarpingSyncPoint, SyncPoint) == 0x000000, "Member 'VIMotionWarpingUtilities_BreakVIMotionWarpingSyncPoint::SyncPoint' has a wrong offset!");
static_assert(offsetof(VIMotionWarpingUtilities_BreakVIMotionWarpingSyncPoint, Location) == 0x000040, "Member 'VIMotionWarpingUtilities_BreakVIMotionWarpingSyncPoint::Location' has a wrong offset!");
static_assert(offsetof(VIMotionWarpingUtilities_BreakVIMotionWarpingSyncPoint, Rotation) == 0x000058, "Member 'VIMotionWarpingUtilities_BreakVIMotionWarpingSyncPoint::Rotation' has a wrong offset!");

// Function VIMotionWarping.VIMotionWarpingUtilities.ExtractVIRootMotionFromAnimation
// 0x0070 (0x0070 - 0x0000)
struct VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation final
{
public:
	const class UAnimSequenceBase*                Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation) == 0x000010, "Wrong alignment on VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation");
static_assert(sizeof(VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation) == 0x000070, "Wrong size on VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation");
static_assert(offsetof(VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation, Animation) == 0x000000, "Member 'VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation::Animation' has a wrong offset!");
static_assert(offsetof(VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation, StartTime) == 0x000008, "Member 'VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation::StartTime' has a wrong offset!");
static_assert(offsetof(VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation, EndTime) == 0x00000C, "Member 'VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation::EndTime' has a wrong offset!");
static_assert(offsetof(VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation, ReturnValue) == 0x000010, "Member 'VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation::ReturnValue' has a wrong offset!");

// Function VIMotionWarping.VIMotionWarpingUtilities.GetVIMotionWarpingWindowsForSyncPointFromAnimation
// 0x0020 (0x0020 - 0x0000)
struct VIMotionWarpingUtilities_GetVIMotionWarpingWindowsForSyncPointFromAnimation final
{
public:
	const class UAnimSequenceBase*                Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SyncPointName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVIMotionWarpingWindowData>     OutWindows;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIMotionWarpingUtilities_GetVIMotionWarpingWindowsForSyncPointFromAnimation) == 0x000008, "Wrong alignment on VIMotionWarpingUtilities_GetVIMotionWarpingWindowsForSyncPointFromAnimation");
static_assert(sizeof(VIMotionWarpingUtilities_GetVIMotionWarpingWindowsForSyncPointFromAnimation) == 0x000020, "Wrong size on VIMotionWarpingUtilities_GetVIMotionWarpingWindowsForSyncPointFromAnimation");
static_assert(offsetof(VIMotionWarpingUtilities_GetVIMotionWarpingWindowsForSyncPointFromAnimation, Animation) == 0x000000, "Member 'VIMotionWarpingUtilities_GetVIMotionWarpingWindowsForSyncPointFromAnimation::Animation' has a wrong offset!");
static_assert(offsetof(VIMotionWarpingUtilities_GetVIMotionWarpingWindowsForSyncPointFromAnimation, SyncPointName) == 0x000008, "Member 'VIMotionWarpingUtilities_GetVIMotionWarpingWindowsForSyncPointFromAnimation::SyncPointName' has a wrong offset!");
static_assert(offsetof(VIMotionWarpingUtilities_GetVIMotionWarpingWindowsForSyncPointFromAnimation, OutWindows) == 0x000010, "Member 'VIMotionWarpingUtilities_GetVIMotionWarpingWindowsForSyncPointFromAnimation::OutWindows' has a wrong offset!");

// Function VIMotionWarping.VIMotionWarpingUtilities.GetVIMotionWarpingWindowsFromAnimation
// 0x0018 (0x0018 - 0x0000)
struct VIMotionWarpingUtilities_GetVIMotionWarpingWindowsFromAnimation final
{
public:
	const class UAnimSequenceBase*                Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVIMotionWarpingWindowData>     OutWindows;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIMotionWarpingUtilities_GetVIMotionWarpingWindowsFromAnimation) == 0x000008, "Wrong alignment on VIMotionWarpingUtilities_GetVIMotionWarpingWindowsFromAnimation");
static_assert(sizeof(VIMotionWarpingUtilities_GetVIMotionWarpingWindowsFromAnimation) == 0x000018, "Wrong size on VIMotionWarpingUtilities_GetVIMotionWarpingWindowsFromAnimation");
static_assert(offsetof(VIMotionWarpingUtilities_GetVIMotionWarpingWindowsFromAnimation, Animation) == 0x000000, "Member 'VIMotionWarpingUtilities_GetVIMotionWarpingWindowsFromAnimation::Animation' has a wrong offset!");
static_assert(offsetof(VIMotionWarpingUtilities_GetVIMotionWarpingWindowsFromAnimation, OutWindows) == 0x000008, "Member 'VIMotionWarpingUtilities_GetVIMotionWarpingWindowsFromAnimation::OutWindows' has a wrong offset!");

// Function VIMotionWarping.VIMotionWarpingUtilities.MakeVIMotionWarpingSyncPoint
// 0x0070 (0x0070 - 0x0000)
struct VIMotionWarpingUtilities_MakeVIMotionWarpingSyncPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVIMotionWarpingSyncPoint              ReturnValue;                                       // 0x0030(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIMotionWarpingUtilities_MakeVIMotionWarpingSyncPoint) == 0x000010, "Wrong alignment on VIMotionWarpingUtilities_MakeVIMotionWarpingSyncPoint");
static_assert(sizeof(VIMotionWarpingUtilities_MakeVIMotionWarpingSyncPoint) == 0x000070, "Wrong size on VIMotionWarpingUtilities_MakeVIMotionWarpingSyncPoint");
static_assert(offsetof(VIMotionWarpingUtilities_MakeVIMotionWarpingSyncPoint, Location) == 0x000000, "Member 'VIMotionWarpingUtilities_MakeVIMotionWarpingSyncPoint::Location' has a wrong offset!");
static_assert(offsetof(VIMotionWarpingUtilities_MakeVIMotionWarpingSyncPoint, Rotation) == 0x000018, "Member 'VIMotionWarpingUtilities_MakeVIMotionWarpingSyncPoint::Rotation' has a wrong offset!");
static_assert(offsetof(VIMotionWarpingUtilities_MakeVIMotionWarpingSyncPoint, ReturnValue) == 0x000030, "Member 'VIMotionWarpingUtilities_MakeVIMotionWarpingSyncPoint::ReturnValue' has a wrong offset!");

// Function VIMotionWarping.VIMotionWarpingComponent.AddOrUpdateSyncPoint
// 0x0050 (0x0050 - 0x0000)
struct VIMotionWarpingComponent_AddOrUpdateSyncPoint final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B26[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVIMotionWarpingSyncPoint              SyncPoint;                                         // 0x0010(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIMotionWarpingComponent_AddOrUpdateSyncPoint) == 0x000010, "Wrong alignment on VIMotionWarpingComponent_AddOrUpdateSyncPoint");
static_assert(sizeof(VIMotionWarpingComponent_AddOrUpdateSyncPoint) == 0x000050, "Wrong size on VIMotionWarpingComponent_AddOrUpdateSyncPoint");
static_assert(offsetof(VIMotionWarpingComponent_AddOrUpdateSyncPoint, Param_Name) == 0x000000, "Member 'VIMotionWarpingComponent_AddOrUpdateSyncPoint::Param_Name' has a wrong offset!");
static_assert(offsetof(VIMotionWarpingComponent_AddOrUpdateSyncPoint, SyncPoint) == 0x000010, "Member 'VIMotionWarpingComponent_AddOrUpdateSyncPoint::SyncPoint' has a wrong offset!");

// Function VIMotionWarping.VIMotionWarpingComponent.RemoveSyncPoint
// 0x000C (0x000C - 0x0000)
struct VIMotionWarpingComponent_RemoveSyncPoint final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIMotionWarpingComponent_RemoveSyncPoint) == 0x000004, "Wrong alignment on VIMotionWarpingComponent_RemoveSyncPoint");
static_assert(sizeof(VIMotionWarpingComponent_RemoveSyncPoint) == 0x00000C, "Wrong size on VIMotionWarpingComponent_RemoveSyncPoint");
static_assert(offsetof(VIMotionWarpingComponent_RemoveSyncPoint, Param_Name) == 0x000000, "Member 'VIMotionWarpingComponent_RemoveSyncPoint::Param_Name' has a wrong offset!");
static_assert(offsetof(VIMotionWarpingComponent_RemoveSyncPoint, ReturnValue) == 0x000008, "Member 'VIMotionWarpingComponent_RemoveSyncPoint::ReturnValue' has a wrong offset!");

// Function VIMotionWarping.VIRootMotionModifierConfig_Warp.AddVIRootMotionModifierSimpleWarp
// 0x0028 (0x0028 - 0x0000)
struct VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp final
{
public:
	class UVIMotionWarpingComponent*              InVIMotionWarpingComp;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                InAnimation;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEndTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSyncPointName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWarpTranslation;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIgnoreZAxis;                                    // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWarpRotation;                                   // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVIMotionWarpRotationType                     InRotationType;                                    // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWarpRotationTimeMultiplier;                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp) == 0x000008, "Wrong alignment on VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp");
static_assert(sizeof(VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp) == 0x000028, "Wrong size on VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp");
static_assert(offsetof(VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp, InVIMotionWarpingComp) == 0x000000, "Member 'VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp::InVIMotionWarpingComp' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp, InAnimation) == 0x000008, "Member 'VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp::InAnimation' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp, InStartTime) == 0x000010, "Member 'VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp::InStartTime' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp, InEndTime) == 0x000014, "Member 'VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp::InEndTime' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp, InSyncPointName) == 0x000018, "Member 'VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp::InSyncPointName' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp, bInWarpTranslation) == 0x000020, "Member 'VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp::bInWarpTranslation' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp, bInIgnoreZAxis) == 0x000021, "Member 'VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp::bInIgnoreZAxis' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp, bInWarpRotation) == 0x000022, "Member 'VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp::bInWarpRotation' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp, InRotationType) == 0x000023, "Member 'VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp::InRotationType' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp, InWarpRotationTimeMultiplier) == 0x000024, "Member 'VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp::InWarpRotationTimeMultiplier' has a wrong offset!");

// Function VIMotionWarping.VIRootMotionModifierConfig_Scale.AddVIRootMotionModifierScale
// 0x0030 (0x0030 - 0x0000)
struct VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale final
{
public:
	class UVIMotionWarpingComponent*              InVIMotionWarpingComp;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                InAnimation;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEndTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale) == 0x000008, "Wrong alignment on VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale");
static_assert(sizeof(VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale) == 0x000030, "Wrong size on VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale");
static_assert(offsetof(VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale, InVIMotionWarpingComp) == 0x000000, "Member 'VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale::InVIMotionWarpingComp' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale, InAnimation) == 0x000008, "Member 'VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale::InAnimation' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale, InStartTime) == 0x000010, "Member 'VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale::InStartTime' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale, InEndTime) == 0x000014, "Member 'VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale::InEndTime' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale, InScale) == 0x000018, "Member 'VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale::InScale' has a wrong offset!");

// Function VIMotionWarping.VIRootMotionModifierConfig_AdjustmentBlendWarp.AddVIRootMotionModifierAdjustmentBlendWarp
// 0x0038 (0x0038 - 0x0000)
struct VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp final
{
public:
	class UVIMotionWarpingComponent*              InVIMotionWarpingComp;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                InAnimation;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEndTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSyncPointName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWarpTranslation;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIgnoreZAxis;                                    // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWarpRotation;                                   // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWarpIKBones;                                    // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B28[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           InIKBones;                                         // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp) == 0x000008, "Wrong alignment on VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp");
static_assert(sizeof(VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp) == 0x000038, "Wrong size on VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp, InVIMotionWarpingComp) == 0x000000, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp::InVIMotionWarpingComp' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp, InAnimation) == 0x000008, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp::InAnimation' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp, InStartTime) == 0x000010, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp::InStartTime' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp, InEndTime) == 0x000014, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp::InEndTime' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp, InSyncPointName) == 0x000018, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp::InSyncPointName' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp, bInWarpTranslation) == 0x000020, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp::bInWarpTranslation' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp, bInIgnoreZAxis) == 0x000021, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp::bInIgnoreZAxis' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp, bInWarpRotation) == 0x000022, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp::bInWarpRotation' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp, bInWarpIKBones) == 0x000023, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp::bInWarpIKBones' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp, InIKBones) == 0x000028, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp::InIKBones' has a wrong offset!");

// Function VIMotionWarping.VIRootMotionModifierConfig_AdjustmentBlendWarp.GetIKBoneTransformAndAlpha
// 0x0080 (0x0080 - 0x0000)
struct VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             OutTransform;                                      // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutAlpha;                                          // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B29[0xC];                                     // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha) == 0x000010, "Wrong alignment on VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha");
static_assert(sizeof(VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha) == 0x000080, "Wrong size on VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha, Character) == 0x000000, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha::Character' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha, BoneName) == 0x000008, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha::BoneName' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha, OutTransform) == 0x000010, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha::OutTransform' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha, OutAlpha) == 0x000070, "Member 'VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha::OutAlpha' has a wrong offset!");

// Function VIMotionWarping.VIRootMotionModifierConfig_SkewWarp.AddVIRootMotionModifierSkewWarp
// 0x0028 (0x0028 - 0x0000)
struct VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp final
{
public:
	class UVIMotionWarpingComponent*              InVIMotionWarpingComp;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                InAnimation;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEndTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSyncPointName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWarpTranslation;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIgnoreZAxis;                                    // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWarpRotation;                                   // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVIMotionWarpRotationType                     InRotationType;                                    // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWarpRotationTimeMultiplier;                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp) == 0x000008, "Wrong alignment on VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp");
static_assert(sizeof(VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp) == 0x000028, "Wrong size on VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp");
static_assert(offsetof(VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp, InVIMotionWarpingComp) == 0x000000, "Member 'VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp::InVIMotionWarpingComp' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp, InAnimation) == 0x000008, "Member 'VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp::InAnimation' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp, InStartTime) == 0x000010, "Member 'VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp::InStartTime' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp, InEndTime) == 0x000014, "Member 'VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp::InEndTime' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp, InSyncPointName) == 0x000018, "Member 'VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp::InSyncPointName' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp, bInWarpTranslation) == 0x000020, "Member 'VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp::bInWarpTranslation' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp, bInIgnoreZAxis) == 0x000021, "Member 'VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp::bInIgnoreZAxis' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp, bInWarpRotation) == 0x000022, "Member 'VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp::bInWarpRotation' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp, InRotationType) == 0x000023, "Member 'VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp::InRotationType' has a wrong offset!");
static_assert(offsetof(VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp, InWarpRotationTimeMultiplier) == 0x000024, "Member 'VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp::InWarpRotationTimeMultiplier' has a wrong offset!");

}

