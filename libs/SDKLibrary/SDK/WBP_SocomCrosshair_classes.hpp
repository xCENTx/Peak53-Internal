#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_SocomCrosshair

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_CrosshairType_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_SocomCrosshair.WBP_SocomCrosshair_C
// 0x0098 (0x0310 - 0x0278)
class UWBP_SocomCrosshair_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Bottom;                                            // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Circle;                                            // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Crosshair;                                         // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Left;                                              // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               MIddle;                                            // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Right;                                             // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Top;                                               // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        Crosshair_length;                                  // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Crosshair_thickness;                               // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Crosshair_baseSpread;                              // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Crosshair_spread;                                  // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DefaultColor;                                      // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EnemyColor;                                        // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FriendlyColor;                                     // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_SocomCrosshair(int32 EntryPoint);
	void HitIndicatorSpawn();
	void HitMarkerSpawn();
	void PaintCrosshair(E_CrosshairType CrosshairColor);
	void PreConstruct(bool IsDesignTime);
	void ReloadWidget();
	void SetSpread(double CurrentSpread);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_SocomCrosshair_C">();
	}
	static class UWBP_SocomCrosshair_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_SocomCrosshair_C>();
	}
};
static_assert(alignof(UWBP_SocomCrosshair_C) == 0x000008, "Wrong alignment on UWBP_SocomCrosshair_C");
static_assert(sizeof(UWBP_SocomCrosshair_C) == 0x000310, "Wrong size on UWBP_SocomCrosshair_C");
static_assert(offsetof(UWBP_SocomCrosshair_C, UberGraphFrame) == 0x000278, "Member 'UWBP_SocomCrosshair_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, Bottom) == 0x000280, "Member 'UWBP_SocomCrosshair_C::Bottom' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, CanvasPanel_0) == 0x000288, "Member 'UWBP_SocomCrosshair_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, Circle) == 0x000290, "Member 'UWBP_SocomCrosshair_C::Circle' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, Crosshair) == 0x000298, "Member 'UWBP_SocomCrosshair_C::Crosshair' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, Left) == 0x0002A0, "Member 'UWBP_SocomCrosshair_C::Left' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, MIddle) == 0x0002A8, "Member 'UWBP_SocomCrosshair_C::MIddle' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, Right) == 0x0002B0, "Member 'UWBP_SocomCrosshair_C::Right' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, Top) == 0x0002B8, "Member 'UWBP_SocomCrosshair_C::Top' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, Crosshair_length) == 0x0002C0, "Member 'UWBP_SocomCrosshair_C::Crosshair_length' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, Crosshair_thickness) == 0x0002C8, "Member 'UWBP_SocomCrosshair_C::Crosshair_thickness' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, Crosshair_baseSpread) == 0x0002D0, "Member 'UWBP_SocomCrosshair_C::Crosshair_baseSpread' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, Crosshair_spread) == 0x0002D8, "Member 'UWBP_SocomCrosshair_C::Crosshair_spread' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, DefaultColor) == 0x0002E0, "Member 'UWBP_SocomCrosshair_C::DefaultColor' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, EnemyColor) == 0x0002F0, "Member 'UWBP_SocomCrosshair_C::EnemyColor' has a wrong offset!");
static_assert(offsetof(UWBP_SocomCrosshair_C, FriendlyColor) == 0x000300, "Member 'UWBP_SocomCrosshair_C::FriendlyColor' has a wrong offset!");

}

