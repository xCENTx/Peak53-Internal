#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlagItem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass FlagItem.FlagItem_C
// 0x0050 (0x02E0 - 0x0290)
class AFlagItem_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Glitter;                                           // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Flagblowing_Cue;                                   // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Pickup;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CompassIndicatorComponent_C*        BP_CompassIndicatorComponent;                      // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Flag;                                              // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Cooldown;                                          // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BombItem_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void DestroyActorMC();
	void DestroyActorSV();
	void ExecuteUbergraph_FlagItem(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FlagItem_C">();
	}
	static class AFlagItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFlagItem_C>();
	}
};
static_assert(alignof(AFlagItem_C) == 0x000008, "Wrong alignment on AFlagItem_C");
static_assert(sizeof(AFlagItem_C) == 0x0002E0, "Wrong size on AFlagItem_C");
static_assert(offsetof(AFlagItem_C, UberGraphFrame) == 0x000290, "Member 'AFlagItem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFlagItem_C, Glitter) == 0x000298, "Member 'AFlagItem_C::Glitter' has a wrong offset!");
static_assert(offsetof(AFlagItem_C, Flagblowing_Cue) == 0x0002A0, "Member 'AFlagItem_C::Flagblowing_Cue' has a wrong offset!");
static_assert(offsetof(AFlagItem_C, Pickup) == 0x0002A8, "Member 'AFlagItem_C::Pickup' has a wrong offset!");
static_assert(offsetof(AFlagItem_C, BP_CompassIndicatorComponent) == 0x0002B0, "Member 'AFlagItem_C::BP_CompassIndicatorComponent' has a wrong offset!");
static_assert(offsetof(AFlagItem_C, TextRender) == 0x0002B8, "Member 'AFlagItem_C::TextRender' has a wrong offset!");
static_assert(offsetof(AFlagItem_C, Box) == 0x0002C0, "Member 'AFlagItem_C::Box' has a wrong offset!");
static_assert(offsetof(AFlagItem_C, Flag) == 0x0002C8, "Member 'AFlagItem_C::Flag' has a wrong offset!");
static_assert(offsetof(AFlagItem_C, DefaultSceneRoot) == 0x0002D0, "Member 'AFlagItem_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AFlagItem_C, Cooldown) == 0x0002D8, "Member 'AFlagItem_C::Cooldown' has a wrong offset!");

}

