#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SGKGameMode

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Peak53Teams_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SGKGameMode.BP_SGKGameMode_C
// 0x0120 (0x0450 - 0x0330)
class ABP_SGKGameMode_C final : public AGameModeBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0330(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_GameModeInitComponent_C*            BP_GameModeInitComponent;                          // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SGKSaveGame_C*                      UMISaveGame;                                       // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_SaveSystem_C*                       SaveSystem;                                        // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_MasterGrid_C*                       FoundationGrid;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_ResourceManager_C*                  ResourceManager;                                   // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_MasterGrid_C*                       WallGrid;                                          // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_GlobalInventoryManager_C*           GlobalInventoryManager;                            // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CreateInventory;                                   // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          PlayerList;                                        // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3179[0x7];                                     // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerController*>              PlayerListGamemode;                                // 0x0390(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance, RepNotify)
	class ABP_AK74_RA_C*                          Enemy;                                             // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         SpawnAmount;                                       // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_317A[0x4];                                     // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           EnemyTImerHandle;                                  // 0x03B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Wave;                                              // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_317B[0x4];                                     // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerStart*>                   SealsStart;                                        // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class APlayerStart*>                   InsurgentsStart;                                   // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class APlayerController*>              PlayerControllers;                                 // 0x03E0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	class UObject*                                Beacon;                                            // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EndMatch;                                          // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ActorLoadingQueue;                                 // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_317C[0x7];                                     // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerController*>              PlayerControllerQueue;                             // 0x0410(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class APlayerController*>              All_Players_PCs;                                   // 0x0420(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class APlayerController*>              SealControllers;                                   // 0x0430(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class APlayerController*>              InsurgentControllers;                              // 0x0440(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void AddPlayersStarts();
	void CalculePlayerToolsItems(class ABP_SGKMasterCharacter_C* Target, class APeak53PlayerState_C* PlayerState, TArray<struct FS_CraftingCost>* TempArray1);
	void CheckFFA(bool* FFA_);
	void CMDAddPlayerControllerQueue(const class APlayerController*& NewItem);
	void CreateInventory__DelegateSignature();
	void EndMatch__DelegateSignature();
	void ExecuteUbergraph_BP_SGKGameMode(int32 EntryPoint);
	void HandleStartingNewPlayer(class APlayerController* NewPlayer);
	void K2_OnLogout(class AController* ExitingController);
	void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void LoopThroughTeammates(EPeak53Teams PlayerTeam, class ABP_SGKController_C* Controller);
	void OnRep_PlayerListGameMode();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RestartPlayerEvent(class APlayerController* PlayerController);
	void SGK_GetGlobalInventory(class ABP_GlobalInventoryManager_C** GlobalInventory);
	void SGK_GetInitComponent(class UBP_GameModeInitComponent_C** InitComponent);
	void SGK_GetResourceManager(class ABP_ResourceManager_C** Param_ResourceManager);
	void SGK_GetSaveGame(class ABP_SaveSystem_C** SaveGame);
	void SGK_SaveGame();
	void SGK_SetSaveSystem(class ABP_SaveSystem_C* Param_SaveSystem);
	class APawn* SpawnDefaultPawnAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform);
	void SpawnSpectatorBP(class AActor* Parent_Actor, class AActor* Param_Owner);
	void SpectateTeam(EPeak53Teams PlayerTeam, class ABP_SGKController_C* Controller);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SGKGameMode_C">();
	}
	static class ABP_SGKGameMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SGKGameMode_C>();
	}
};
static_assert(alignof(ABP_SGKGameMode_C) == 0x000008, "Wrong alignment on ABP_SGKGameMode_C");
static_assert(sizeof(ABP_SGKGameMode_C) == 0x000450, "Wrong size on ABP_SGKGameMode_C");
static_assert(offsetof(ABP_SGKGameMode_C, UberGraphFrame) == 0x000330, "Member 'ABP_SGKGameMode_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, BP_GameModeInitComponent) == 0x000338, "Member 'ABP_SGKGameMode_C::BP_GameModeInitComponent' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, DefaultSceneRoot) == 0x000340, "Member 'ABP_SGKGameMode_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, UMISaveGame) == 0x000348, "Member 'ABP_SGKGameMode_C::UMISaveGame' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, SaveSystem) == 0x000350, "Member 'ABP_SGKGameMode_C::SaveSystem' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, FoundationGrid) == 0x000358, "Member 'ABP_SGKGameMode_C::FoundationGrid' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, ResourceManager) == 0x000360, "Member 'ABP_SGKGameMode_C::ResourceManager' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, WallGrid) == 0x000368, "Member 'ABP_SGKGameMode_C::WallGrid' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, GlobalInventoryManager) == 0x000370, "Member 'ABP_SGKGameMode_C::GlobalInventoryManager' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, CreateInventory) == 0x000378, "Member 'ABP_SGKGameMode_C::CreateInventory' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, PlayerList) == 0x000388, "Member 'ABP_SGKGameMode_C::PlayerList' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, PlayerListGamemode) == 0x000390, "Member 'ABP_SGKGameMode_C::PlayerListGamemode' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, Enemy) == 0x0003A0, "Member 'ABP_SGKGameMode_C::Enemy' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, SpawnAmount) == 0x0003A8, "Member 'ABP_SGKGameMode_C::SpawnAmount' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, EnemyTImerHandle) == 0x0003B0, "Member 'ABP_SGKGameMode_C::EnemyTImerHandle' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, Wave) == 0x0003B8, "Member 'ABP_SGKGameMode_C::Wave' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, SealsStart) == 0x0003C0, "Member 'ABP_SGKGameMode_C::SealsStart' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, InsurgentsStart) == 0x0003D0, "Member 'ABP_SGKGameMode_C::InsurgentsStart' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, PlayerControllers) == 0x0003E0, "Member 'ABP_SGKGameMode_C::PlayerControllers' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, Beacon) == 0x0003F0, "Member 'ABP_SGKGameMode_C::Beacon' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, EndMatch) == 0x0003F8, "Member 'ABP_SGKGameMode_C::EndMatch' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, ActorLoadingQueue) == 0x000408, "Member 'ABP_SGKGameMode_C::ActorLoadingQueue' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, PlayerControllerQueue) == 0x000410, "Member 'ABP_SGKGameMode_C::PlayerControllerQueue' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, All_Players_PCs) == 0x000420, "Member 'ABP_SGKGameMode_C::All_Players_PCs' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, SealControllers) == 0x000430, "Member 'ABP_SGKGameMode_C::SealControllers' has a wrong offset!");
static_assert(offsetof(ABP_SGKGameMode_C, InsurgentControllers) == 0x000440, "Member 'ABP_SGKGameMode_C::InsurgentControllers' has a wrong offset!");

}

