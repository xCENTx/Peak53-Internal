#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALSV4_CPP

#include "Basic.hpp"

#include "ALSV4_CPP_classes.hpp"
#include "ALSV4_CPP_parameters.hpp"


namespace SDK
{

// Function ALSV4_CPP.ALSCharacterMovementComponent.Server_SetAllowedGait
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// EALSGait                                NewAllowedGait                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSCharacterMovementComponent::Server_SetAllowedGait(EALSGait NewAllowedGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterMovementComponent", "Server_SetAllowedGait");

	Params::ALSCharacterMovementComponent_Server_SetAllowedGait Parms{};

	Parms.NewAllowedGait = NewAllowedGait;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSCharacterMovementComponent.SetAllowedGait
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EALSGait                                NewAllowedGait                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSCharacterMovementComponent::SetAllowedGait(EALSGait NewAllowedGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterMovementComponent", "SetAllowedGait");

	Params::ALSCharacterMovementComponent_SetAllowedGait Parms{};

	Parms.NewAllowedGait = NewAllowedGait;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSCharacterMovementComponent.SetMovementSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FALSMovementSettings             NewMovementSettings                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UALSCharacterMovementComponent::SetMovementSettings(const struct FALSMovementSettings& NewMovementSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterMovementComponent", "SetMovementSettings");

	Params::ALSCharacterMovementComponent_SetMovementSettings Parms{};

	Parms.NewMovementSettings = std::move(NewMovementSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.AimAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::AimAction(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "AimAction");

	Params::ALSBaseCharacter_AimAction Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.CameraHeldAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AALSBaseCharacter::CameraHeldAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "CameraHeldAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.CameraRightAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::CameraRightAction(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "CameraRightAction");

	Params::ALSBaseCharacter_CameraRightAction Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.CameraTapAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AALSBaseCharacter::CameraTapAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "CameraTapAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.CameraUpAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::CameraUpAction(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "CameraUpAction");

	Params::ALSBaseCharacter_CameraUpAction Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.EventOnJumped
// (Final, Native, Public, BlueprintCallable)

void AALSBaseCharacter::EventOnJumped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "EventOnJumped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.EventOnLanded
// (Final, Native, Public, BlueprintCallable)

void AALSBaseCharacter::EventOnLanded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "EventOnLanded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.ForwardMovementAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::ForwardMovementAction(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "ForwardMovementAction");

	Params::ALSBaseCharacter_ForwardMovementAction Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetFirstPersonCameraTarget
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AALSBaseCharacter::GetFirstPersonCameraTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetFirstPersonCameraTarget");

	Params::ALSBaseCharacter_GetFirstPersonCameraTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetGetUpAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bRagdollFaceUpState                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* AALSBaseCharacter::GetGetUpAnimation(bool bRagdollFaceUpState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetGetUpAnimation");

	Params::ALSBaseCharacter_GetGetUpAnimation Parms{};

	Parms.bRagdollFaceUpState = bRagdollFaceUpState;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetRollAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* AALSBaseCharacter::GetRollAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetRollAnimation");

	Params::ALSBaseCharacter_GetRollAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetThirdPersonPivotTarget
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform AALSBaseCharacter::GetThirdPersonPivotTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetThirdPersonPivotTarget");

	Params::ALSBaseCharacter_GetThirdPersonPivotTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetThirdPersonTraceParams
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          TraceOrigin                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TraceRadius                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECollisionChannel AALSBaseCharacter::GetThirdPersonTraceParams(struct FVector* TraceOrigin, float* TraceRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetThirdPersonTraceParams");

	Params::ALSBaseCharacter_GetThirdPersonTraceParams Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TraceOrigin != nullptr)
		*TraceOrigin = std::move(Parms.TraceOrigin);

	if (TraceRadius != nullptr)
		*TraceRadius = Parms.TraceRadius;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.JumpAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::JumpAction(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "JumpAction");

	Params::ALSBaseCharacter_JumpAction Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.LookingDirectionAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AALSBaseCharacter::LookingDirectionAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "LookingDirectionAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Multicast_OnJumped
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)

void AALSBaseCharacter::Multicast_OnJumped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Multicast_OnJumped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Multicast_OnLanded
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)

void AALSBaseCharacter::Multicast_OnLanded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Multicast_OnLanded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Multicast_PlayMontage
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::Multicast_PlayMontage(class UAnimMontage* Montage, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Multicast_PlayMontage");

	Params::ALSBaseCharacter_Multicast_PlayMontage Parms{};

	Parms.Montage = Montage;
	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Multicast_RagdollEnd
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          CharacterLocation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::Multicast_RagdollEnd(const struct FVector& CharacterLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Multicast_RagdollEnd");

	Params::ALSBaseCharacter_Multicast_RagdollEnd Parms{};

	Parms.CharacterLocation = std::move(CharacterLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Multicast_RagdollStart
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)

void AALSBaseCharacter::Multicast_RagdollStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Multicast_RagdollStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.OnBreakfall
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AALSBaseCharacter::OnBreakfall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "OnBreakfall");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.OnRep_OverlayState
// (Final, Native, Protected)
// Parameters:
// EALSOverlayState                        PrevOverlayState                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::OnRep_OverlayState(EALSOverlayState PrevOverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "OnRep_OverlayState");

	Params::ALSBaseCharacter_OnRep_OverlayState Parms{};

	Parms.PrevOverlayState = PrevOverlayState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.OnRep_RotationMode
// (Final, Native, Protected)
// Parameters:
// EALSRotationMode                        PrevRotMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::OnRep_RotationMode(EALSRotationMode PrevRotMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "OnRep_RotationMode");

	Params::ALSBaseCharacter_OnRep_RotationMode Parms{};

	Parms.PrevRotMode = PrevRotMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.OnRep_ViewMode
// (Final, Native, Protected)
// Parameters:
// EALSViewMode                            PrevViewMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::OnRep_ViewMode(EALSViewMode PrevViewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "OnRep_ViewMode");

	Params::ALSBaseCharacter_OnRep_ViewMode Parms{};

	Parms.PrevViewMode = PrevViewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.OnRep_VisibleMesh
// (Final, Native, Protected)
// Parameters:
// class USkeletalMesh*                    PreviousSkeletalMesh                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::OnRep_VisibleMesh(const class USkeletalMesh* PreviousSkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "OnRep_VisibleMesh");

	Params::ALSBaseCharacter_OnRep_VisibleMesh Parms{};

	Parms.PreviousSkeletalMesh = PreviousSkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.RagdollAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AALSBaseCharacter::RagdollAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "RagdollAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.RagdollEnd
// (Native, Public, BlueprintCallable)

void AALSBaseCharacter::RagdollEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "RagdollEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.RagdollStart
// (Native, Public, BlueprintCallable)

void AALSBaseCharacter::RagdollStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "RagdollStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Replicated_PlayMontage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::Replicated_PlayMontage(class UAnimMontage* Montage, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Replicated_PlayMontage");

	Params::ALSBaseCharacter_Replicated_PlayMontage Parms{};

	Parms.Montage = Montage;
	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.ReplicatedRagdollEnd
// (Final, Native, Public, BlueprintCallable)

void AALSBaseCharacter::ReplicatedRagdollEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "ReplicatedRagdollEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.ReplicatedRagdollStart
// (Final, Native, Public, BlueprintCallable)

void AALSBaseCharacter::ReplicatedRagdollStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "ReplicatedRagdollStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.RightMovementAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::RightMovementAction(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "RightMovementAction");

	Params::ALSBaseCharacter_RightMovementAction Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Server_PlayMontage
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::Server_PlayMontage(class UAnimMontage* Montage, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Server_PlayMontage");

	Params::ALSBaseCharacter_Server_PlayMontage Parms{};

	Parms.Montage = Montage;
	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Server_RagdollEnd
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          CharacterLocation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::Server_RagdollEnd(const struct FVector& CharacterLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Server_RagdollEnd");

	Params::ALSBaseCharacter_Server_RagdollEnd Parms{};

	Parms.CharacterLocation = std::move(CharacterLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Server_RagdollStart
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void AALSBaseCharacter::Server_RagdollStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Server_RagdollStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Server_SetDesiredGait
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// EALSGait                                NewGait                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::Server_SetDesiredGait(EALSGait NewGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Server_SetDesiredGait");

	Params::ALSBaseCharacter_Server_SetDesiredGait Parms{};

	Parms.NewGait = NewGait;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Server_SetDesiredRotationMode
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// EALSRotationMode                        NewRotMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::Server_SetDesiredRotationMode(EALSRotationMode NewRotMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Server_SetDesiredRotationMode");

	Params::ALSBaseCharacter_Server_SetDesiredRotationMode Parms{};

	Parms.NewRotMode = NewRotMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Server_SetDesiredStance
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// EALSStance                              NewStance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::Server_SetDesiredStance(EALSStance NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Server_SetDesiredStance");

	Params::ALSBaseCharacter_Server_SetDesiredStance Parms{};

	Parms.NewStance = NewStance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Server_SetMeshLocationDuringRagdoll
// (Net, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          MeshLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::Server_SetMeshLocationDuringRagdoll(const struct FVector& MeshLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Server_SetMeshLocationDuringRagdoll");

	Params::ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll Parms{};

	Parms.MeshLocation = std::move(MeshLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Server_SetOverlayState
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// EALSOverlayState                        NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::Server_SetOverlayState(EALSOverlayState NewState, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Server_SetOverlayState");

	Params::ALSBaseCharacter_Server_SetOverlayState Parms{};

	Parms.NewState = NewState;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Server_SetRotationMode
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// EALSRotationMode                        NewRotationMode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::Server_SetRotationMode(EALSRotationMode NewRotationMode, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Server_SetRotationMode");

	Params::ALSBaseCharacter_Server_SetRotationMode Parms{};

	Parms.NewRotationMode = NewRotationMode;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Server_SetViewMode
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// EALSViewMode                            NewViewMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::Server_SetViewMode(EALSViewMode NewViewMode, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Server_SetViewMode");

	Params::ALSBaseCharacter_Server_SetViewMode Parms{};

	Parms.NewViewMode = NewViewMode;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.Server_SetVisibleMesh
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    NewSkeletalMesh                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::Server_SetVisibleMesh(class USkeletalMesh* NewSkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "Server_SetVisibleMesh");

	Params::ALSBaseCharacter_Server_SetVisibleMesh Parms{};

	Parms.NewSkeletalMesh = NewSkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetActorLocationAndTargetRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         NewRotation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetActorLocationAndTargetRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetActorLocationAndTargetRotation");

	Params::ALSBaseCharacter_SetActorLocationAndTargetRotation Parms{};

	Parms.NewLocation = std::move(NewLocation);
	Parms.NewRotation = std::move(NewRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetCameraBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UALSPlayerCameraBehavior*         CamBeh                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetCameraBehavior(class UALSPlayerCameraBehavior* CamBeh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetCameraBehavior");

	Params::ALSBaseCharacter_SetCameraBehavior Parms{};

	Parms.CamBeh = CamBeh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetDesiredGait
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EALSGait                                NewGait                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetDesiredGait(EALSGait NewGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetDesiredGait");

	Params::ALSBaseCharacter_SetDesiredGait Parms{};

	Parms.NewGait = NewGait;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetDesiredRotationMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EALSRotationMode                        NewRotMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetDesiredRotationMode(EALSRotationMode NewRotMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetDesiredRotationMode");

	Params::ALSBaseCharacter_SetDesiredRotationMode Parms{};

	Parms.NewRotMode = NewRotMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetDesiredStance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EALSStance                              NewStance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetDesiredStance(EALSStance NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetDesiredStance");

	Params::ALSBaseCharacter_SetDesiredStance Parms{};

	Parms.NewStance = NewStance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetGait
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EALSGait                                NewGait                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetGait(EALSGait NewGait, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetGait");

	Params::ALSBaseCharacter_SetGait Parms{};

	Parms.NewGait = NewGait;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetGroundedEntryState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EALSGroundedEntryState                  NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetGroundedEntryState(EALSGroundedEntryState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetGroundedEntryState");

	Params::ALSBaseCharacter_SetGroundedEntryState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetMovementAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EALSMovementAction                      NewAction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetMovementAction(EALSMovementAction NewAction, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetMovementAction");

	Params::ALSBaseCharacter_SetMovementAction Parms{};

	Parms.NewAction = NewAction;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetMovementState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EALSMovementState                       NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetMovementState(EALSMovementState NewState, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetMovementState");

	Params::ALSBaseCharacter_SetMovementState Parms{};

	Parms.NewState = NewState;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetOverlayOverrideState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetOverlayOverrideState(int32 NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetOverlayOverrideState");

	Params::ALSBaseCharacter_SetOverlayOverrideState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetOverlayState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EALSOverlayState                        NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetOverlayState(EALSOverlayState NewState, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetOverlayState");

	Params::ALSBaseCharacter_SetOverlayState Parms{};

	Parms.NewState = NewState;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetRightShoulder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewRightShoulder                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetRightShoulder(bool bNewRightShoulder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetRightShoulder");

	Params::ALSBaseCharacter_SetRightShoulder Parms{};

	Parms.bNewRightShoulder = bNewRightShoulder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetRotationMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EALSRotationMode                        NewRotationMode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetRotationMode(EALSRotationMode NewRotationMode, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetRotationMode");

	Params::ALSBaseCharacter_SetRotationMode Parms{};

	Parms.NewRotationMode = NewRotationMode;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetStance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EALSStance                              NewStance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetStance(EALSStance NewStance, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetStance");

	Params::ALSBaseCharacter_SetStance Parms{};

	Parms.NewStance = NewStance;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetViewMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EALSViewMode                            NewViewMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetViewMode(EALSViewMode NewViewMode, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetViewMode");

	Params::ALSBaseCharacter_SetViewMode Parms{};

	Parms.NewViewMode = NewViewMode;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SetVisibleMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    NewSkeletalMesh                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SetVisibleMesh(class USkeletalMesh* NewSkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SetVisibleMesh");

	Params::ALSBaseCharacter_SetVisibleMesh Parms{};

	Parms.NewSkeletalMesh = NewSkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.SprintAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::SprintAction(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "SprintAction");

	Params::ALSBaseCharacter_SprintAction Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.StanceAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AALSBaseCharacter::StanceAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "StanceAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.VelocityDirectionAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AALSBaseCharacter::VelocityDirectionAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "VelocityDirectionAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.WalkAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AALSBaseCharacter::WalkAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "WalkAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSBaseCharacter.CanSprint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AALSBaseCharacter::CanSprint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "CanSprint");

	Params::ALSBaseCharacter_CanSprint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetAcceleration
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AALSBaseCharacter::GetAcceleration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetAcceleration");

	Params::ALSBaseCharacter_GetAcceleration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetActualGait
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSGait                                AllowedGait                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EALSGait                                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSGait AALSBaseCharacter::GetActualGait(EALSGait AllowedGait) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetActualGait");

	Params::ALSBaseCharacter_GetActualGait Parms{};

	Parms.AllowedGait = AllowedGait;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetAimingRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AALSBaseCharacter::GetAimingRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetAimingRotation");

	Params::ALSBaseCharacter_GetAimingRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetAimYawRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AALSBaseCharacter::GetAimYawRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetAimYawRate");

	Params::ALSBaseCharacter_GetAimYawRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetAllowedGait
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSGait                                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSGait AALSBaseCharacter::GetAllowedGait() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetAllowedGait");

	Params::ALSBaseCharacter_GetAllowedGait Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetAnimCurveValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             CurveName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AALSBaseCharacter::GetAnimCurveValue(class FName CurveName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetAnimCurveValue");

	Params::ALSBaseCharacter_GetAnimCurveValue Parms{};

	Parms.CurveName = CurveName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetCameraParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   TPFOVOut                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FPFOVOut                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRightShoulderOut                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSBaseCharacter::GetCameraParameters(float* TPFOVOut, float* FPFOVOut, bool* bRightShoulderOut) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetCameraParameters");

	Params::ALSBaseCharacter_GetCameraParameters Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TPFOVOut != nullptr)
		*TPFOVOut = Parms.TPFOVOut;

	if (FPFOVOut != nullptr)
		*FPFOVOut = Parms.FPFOVOut;

	if (bRightShoulderOut != nullptr)
		*bRightShoulderOut = Parms.bRightShoulderOut;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetDesiredGait
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSGait                                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSGait AALSBaseCharacter::GetDesiredGait() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetDesiredGait");

	Params::ALSBaseCharacter_GetDesiredGait Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetDesiredRotationMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSRotationMode                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSRotationMode AALSBaseCharacter::GetDesiredRotationMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetDesiredRotationMode");

	Params::ALSBaseCharacter_GetDesiredRotationMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetDesiredStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSStance                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSStance AALSBaseCharacter::GetDesiredStance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetDesiredStance");

	Params::ALSBaseCharacter_GetDesiredStance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetGait
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSGait                                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSGait AALSBaseCharacter::GetGait() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetGait");

	Params::ALSBaseCharacter_GetGait Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetGroundedEntryState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSGroundedEntryState                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSGroundedEntryState AALSBaseCharacter::GetGroundedEntryState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetGroundedEntryState");

	Params::ALSBaseCharacter_GetGroundedEntryState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetMovementAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSMovementAction                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSMovementAction AALSBaseCharacter::GetMovementAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetMovementAction");

	Params::ALSBaseCharacter_GetMovementAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetMovementInput
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AALSBaseCharacter::GetMovementInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetMovementInput");

	Params::ALSBaseCharacter_GetMovementInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetMovementInputAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AALSBaseCharacter::GetMovementInputAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetMovementInputAmount");

	Params::ALSBaseCharacter_GetMovementInputAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetMovementState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSMovementState                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSMovementState AALSBaseCharacter::GetMovementState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetMovementState");

	Params::ALSBaseCharacter_GetMovementState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetMyMovementComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UALSCharacterMovementComponent*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UALSCharacterMovementComponent* AALSBaseCharacter::GetMyMovementComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetMyMovementComponent");

	Params::ALSBaseCharacter_GetMyMovementComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetOverlayOverrideState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AALSBaseCharacter::GetOverlayOverrideState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetOverlayOverrideState");

	Params::ALSBaseCharacter_GetOverlayOverrideState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetOverlayState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSOverlayState                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSOverlayState AALSBaseCharacter::GetOverlayState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetOverlayState");

	Params::ALSBaseCharacter_GetOverlayState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetPrevMovementState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSMovementState                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSMovementState AALSBaseCharacter::GetPrevMovementState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetPrevMovementState");

	Params::ALSBaseCharacter_GetPrevMovementState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetRotationMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSRotationMode                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSRotationMode AALSBaseCharacter::GetRotationMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetRotationMode");

	Params::ALSBaseCharacter_GetRotationMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AALSBaseCharacter::GetSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetSpeed");

	Params::ALSBaseCharacter_GetSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSStance                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSStance AALSBaseCharacter::GetStance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetStance");

	Params::ALSBaseCharacter_GetStance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetTargetMovementSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FALSMovementSettings             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FALSMovementSettings AALSBaseCharacter::GetTargetMovementSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetTargetMovementSettings");

	Params::ALSBaseCharacter_GetTargetMovementSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.GetViewMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EALSViewMode                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSViewMode AALSBaseCharacter::GetViewMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "GetViewMode");

	Params::ALSBaseCharacter_GetViewMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.HasMovementInput
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AALSBaseCharacter::HasMovementInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "HasMovementInput");

	Params::ALSBaseCharacter_HasMovementInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.IsMoving
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AALSBaseCharacter::IsMoving() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "IsMoving");

	Params::ALSBaseCharacter_IsMoving Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSBaseCharacter.IsRightShoulder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AALSBaseCharacter::IsRightShoulder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSBaseCharacter", "IsRightShoulder");

	Params::ALSBaseCharacter_IsRightShoulder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSCharacter.AttachToHand
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      NewStaticMesh                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    NewSkeletalMesh                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           NewAnimClass                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLeftHand                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSCharacter::AttachToHand(class UStaticMesh* NewStaticMesh, class USkeletalMesh* NewSkeletalMesh, class UClass* NewAnimClass, bool bLeftHand, const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacter", "AttachToHand");

	Params::ALSCharacter_AttachToHand Parms{};

	Parms.NewStaticMesh = NewStaticMesh;
	Parms.NewSkeletalMesh = NewSkeletalMesh;
	Parms.NewAnimClass = NewAnimClass;
	Parms.bLeftHand = bLeftHand;
	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSCharacter.ClearHeldObject
// (Final, Native, Public, BlueprintCallable)

void AALSCharacter::ClearHeldObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacter", "ClearHeldObject");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSCharacter.UpdateHeldObject
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AALSCharacter::UpdateHeldObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacter", "UpdateHeldObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALSV4_CPP.ALSCharacter.UpdateHeldObjectAnimations
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void AALSCharacter::UpdateHeldObjectAnimations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacter", "UpdateHeldObjectAnimations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALSV4_CPP.ALSCharacterAnimInstance.OnJumped
// (Final, Native, Public, BlueprintCallable)

void UALSCharacterAnimInstance::OnJumped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterAnimInstance", "OnJumped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSCharacterAnimInstance.OnPivot
// (Final, Native, Public, BlueprintCallable)

void UALSCharacterAnimInstance::OnPivot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterAnimInstance", "OnPivot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSCharacterAnimInstance.PlayDynamicTransition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReTriggerDelay                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FALSDynamicMontageParams         Parameters                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UALSCharacterAnimInstance::PlayDynamicTransition(float ReTriggerDelay, const struct FALSDynamicMontageParams& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterAnimInstance", "PlayDynamicTransition");

	Params::ALSCharacterAnimInstance_PlayDynamicTransition Parms{};

	Parms.ReTriggerDelay = ReTriggerDelay;
	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSCharacterAnimInstance.PlayTransition
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FALSDynamicMontageParams         Parameters                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UALSCharacterAnimInstance::PlayTransition(const struct FALSDynamicMontageParams& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterAnimInstance", "PlayTransition");

	Params::ALSCharacterAnimInstance_PlayTransition Parms{};

	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSCharacterAnimInstance.PlayTransitionChecked
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FALSDynamicMontageParams         Parameters                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UALSCharacterAnimInstance::PlayTransitionChecked(const struct FALSDynamicMontageParams& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterAnimInstance", "PlayTransitionChecked");

	Params::ALSCharacterAnimInstance_PlayTransitionChecked Parms{};

	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSCharacterAnimInstance.SetGroundedEntryState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EALSGroundedEntryState                  NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSCharacterAnimInstance::SetGroundedEntryState(EALSGroundedEntryState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterAnimInstance", "SetGroundedEntryState");

	Params::ALSCharacterAnimInstance_SetGroundedEntryState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSCharacterAnimInstance.SetTrackedHipsDirection
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EALSHipsDirection                       HipsDirection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSCharacterAnimInstance::SetTrackedHipsDirection(EALSHipsDirection HipsDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterAnimInstance", "SetTrackedHipsDirection");

	Params::ALSCharacterAnimInstance_SetTrackedHipsDirection Parms{};

	Parms.HipsDirection = HipsDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSCharacterAnimInstance.CanDynamicTransition
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UALSCharacterAnimInstance::CanDynamicTransition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterAnimInstance", "CanDynamicTransition");

	Params::ALSCharacterAnimInstance_CanDynamicTransition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSCharacterAnimInstance.CanRotateInPlace
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UALSCharacterAnimInstance::CanRotateInPlace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterAnimInstance", "CanRotateInPlace");

	Params::ALSCharacterAnimInstance_CanRotateInPlace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSCharacterAnimInstance.CanTurnInPlace
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UALSCharacterAnimInstance::CanTurnInPlace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterAnimInstance", "CanTurnInPlace");

	Params::ALSCharacterAnimInstance_CanTurnInPlace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSCharacterAnimInstance.ShouldMoveCheck
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UALSCharacterAnimInstance::ShouldMoveCheck() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSCharacterAnimInstance", "ShouldMoveCheck");

	Params::ALSCharacterAnimInstance_ShouldMoveCheck Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSDebugComponent.DrawDebugSpheres
// (Event, Public, BlueprintEvent)

void UALSDebugComponent::DrawDebugSpheres()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "DrawDebugSpheres");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALSV4_CPP.ALSDebugComponent.FocusedDebugCharacterCycle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSDebugComponent::FocusedDebugCharacterCycle(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "FocusedDebugCharacterCycle");

	Params::ALSDebugComponent_FocusedDebugCharacterCycle Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSDebugComponent.GetDebugView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UALSDebugComponent::GetDebugView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "GetDebugView");

	Params::ALSDebugComponent_GetDebugView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSDebugComponent.GetShowDebugShapes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UALSDebugComponent::GetShowDebugShapes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "GetShowDebugShapes");

	Params::ALSDebugComponent_GetShowDebugShapes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSDebugComponent.GetShowLayerColors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UALSDebugComponent::GetShowLayerColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "GetShowLayerColors");

	Params::ALSDebugComponent_GetShowLayerColors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSDebugComponent.GetShowTraces
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UALSDebugComponent::GetShowTraces()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "GetShowTraces");

	Params::ALSDebugComponent_GetShowTraces Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSDebugComponent.OnPlayerControllerInitialized
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSDebugComponent::OnPlayerControllerInitialized(class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "OnPlayerControllerInitialized");

	Params::ALSDebugComponent_OnPlayerControllerInitialized Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALSV4_CPP.ALSDebugComponent.OpenOverlayMenu
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSDebugComponent::OpenOverlayMenu(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "OpenOverlayMenu");

	Params::ALSDebugComponent_OpenOverlayMenu Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSDebugComponent.OverlayMenuCycle
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSDebugComponent::OverlayMenuCycle(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "OverlayMenuCycle");

	Params::ALSDebugComponent_OverlayMenuCycle Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSDebugComponent.SetDynamicMaterials
// (Event, Public, BlueprintEvent)

void UALSDebugComponent::SetDynamicMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "SetDynamicMaterials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALSV4_CPP.ALSDebugComponent.SetResetColors
// (Event, Public, BlueprintEvent)

void UALSDebugComponent::SetResetColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "SetResetColors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALSV4_CPP.ALSDebugComponent.ToggleCharacterInfo
// (Final, Native, Public, BlueprintCallable)

void UALSDebugComponent::ToggleCharacterInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "ToggleCharacterInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSDebugComponent.ToggleDebugMesh
// (Final, Native, Public, BlueprintCallable)

void UALSDebugComponent::ToggleDebugMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "ToggleDebugMesh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSDebugComponent.ToggleDebugShapes
// (Final, Native, Public, BlueprintCallable)

void UALSDebugComponent::ToggleDebugShapes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "ToggleDebugShapes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSDebugComponent.ToggleDebugView
// (Final, Native, Public, BlueprintCallable)

void UALSDebugComponent::ToggleDebugView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "ToggleDebugView");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSDebugComponent.ToggleGlobalTimeDilationLocal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TimeDilation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSDebugComponent::ToggleGlobalTimeDilationLocal(float TimeDilation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "ToggleGlobalTimeDilationLocal");

	Params::ALSDebugComponent_ToggleGlobalTimeDilationLocal Parms{};

	Parms.TimeDilation = TimeDilation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSDebugComponent.ToggleHud
// (Final, Native, Public, BlueprintCallable)

void UALSDebugComponent::ToggleHud()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "ToggleHud");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSDebugComponent.ToggleLayerColors
// (Final, Native, Public, BlueprintCallable)

void UALSDebugComponent::ToggleLayerColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "ToggleLayerColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSDebugComponent.ToggleSlomo
// (Final, Native, Public, BlueprintCallable)

void UALSDebugComponent::ToggleSlomo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "ToggleSlomo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSDebugComponent.ToggleTraces
// (Final, Native, Public, BlueprintCallable)

void UALSDebugComponent::ToggleTraces()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "ToggleTraces");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSDebugComponent.UpdateColoringSystem
// (Event, Public, BlueprintEvent)

void UALSDebugComponent::UpdateColoringSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSDebugComponent", "UpdateColoringSystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALSV4_CPP.ALSMantleComponent.GetMantleAsset
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALSMantleType                          MantleType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EALSOverlayState                        CurrentOverlayState                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FALSMantleAsset                  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FALSMantleAsset UALSMantleComponent::GetMantleAsset(EALSMantleType MantleType, EALSOverlayState CurrentOverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSMantleComponent", "GetMantleAsset");

	Params::ALSMantleComponent_GetMantleAsset Parms{};

	Parms.MantleType = MantleType;
	Parms.CurrentOverlayState = CurrentOverlayState;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSMantleComponent.MantleCheck
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FALSMantleTraceSettings          TraceSettings                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DebugType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoMantle                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UALSMantleComponent::MantleCheck(const struct FALSMantleTraceSettings& TraceSettings, EDrawDebugTrace DebugType, bool bDoMantle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSMantleComponent", "MantleCheck");

	Params::ALSMantleComponent_MantleCheck Parms{};

	Parms.TraceSettings = std::move(TraceSettings);
	Parms.DebugType = DebugType;
	Parms.bDoMantle = bDoMantle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSMantleComponent.MantleEnd
// (Final, Native, Public, BlueprintCallable)

void UALSMantleComponent::MantleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSMantleComponent", "MantleEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSMantleComponent.MantleStart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   MantleHeight                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FALSComponentAndTransform        MantleLedgeWS                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EALSMantleType                          MantleType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSMantleComponent::MantleStart(float MantleHeight, const struct FALSComponentAndTransform& MantleLedgeWS, EALSMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSMantleComponent", "MantleStart");

	Params::ALSMantleComponent_MantleStart Parms{};

	Parms.MantleHeight = MantleHeight;
	Parms.MantleLedgeWS = std::move(MantleLedgeWS);
	Parms.MantleType = MantleType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSMantleComponent.MantleUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BlendIn                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSMantleComponent::MantleUpdate(float BlendIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSMantleComponent", "MantleUpdate");

	Params::ALSMantleComponent_MantleUpdate Parms{};

	Parms.BlendIn = BlendIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSMantleComponent.Multicast_MantleStart
// (Net, NetReliable, Native, Event, NetMulticast, Protected, BlueprintCallable)
// Parameters:
// float                                   MantleHeight                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FALSComponentAndTransform        MantleLedgeWS                                          (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EALSMantleType                          MantleType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSMantleComponent::Multicast_MantleStart(float MantleHeight, const struct FALSComponentAndTransform& MantleLedgeWS, EALSMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSMantleComponent", "Multicast_MantleStart");

	Params::ALSMantleComponent_Multicast_MantleStart Parms{};

	Parms.MantleHeight = MantleHeight;
	Parms.MantleLedgeWS = std::move(MantleLedgeWS);
	Parms.MantleType = MantleType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSMantleComponent.OnOwnerJumpInput
// (Final, Native, Public, BlueprintCallable)

void UALSMantleComponent::OnOwnerJumpInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSMantleComponent", "OnOwnerJumpInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSMantleComponent.OnOwnerRagdollStateChanged
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRagdollState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSMantleComponent::OnOwnerRagdollStateChanged(bool bRagdollState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSMantleComponent", "OnOwnerRagdollStateChanged");

	Params::ALSMantleComponent_OnOwnerRagdollStateChanged Parms{};

	Parms.bRagdollState = bRagdollState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSMantleComponent.Server_MantleStart
// (Net, NetReliable, Native, Event, Protected, NetServer, BlueprintCallable)
// Parameters:
// float                                   MantleHeight                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FALSComponentAndTransform        MantleLedgeWS                                          (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EALSMantleType                          MantleType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UALSMantleComponent::Server_MantleStart(float MantleHeight, const struct FALSComponentAndTransform& MantleLedgeWS, EALSMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSMantleComponent", "Server_MantleStart");

	Params::ALSMantleComponent_Server_MantleStart Parms{};

	Parms.MantleHeight = MantleHeight;
	Parms.MantleLedgeWS = std::move(MantleLedgeWS);
	Parms.MantleType = MantleType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSMathLibrary.AngleInRange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinAngle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxAngle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Buffer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncreaseBuffer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UALSMathLibrary::AngleInRange(float Angle, float MinAngle, float MaxAngle, float Buffer, bool IncreaseBuffer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ALSMathLibrary", "AngleInRange");

	Params::ALSMathLibrary_AngleInRange Parms{};

	Parms.Angle = Angle;
	Parms.MinAngle = MinAngle;
	Parms.MaxAngle = MaxAngle;
	Parms.Buffer = Buffer;
	Parms.IncreaseBuffer = IncreaseBuffer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSMathLibrary.CalculateQuadrant
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EALSMovementDirection                   Current                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FRThreshold                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FLThreshold                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BRThreshold                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BLThreshold                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Buffer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EALSMovementDirection                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EALSMovementDirection UALSMathLibrary::CalculateQuadrant(EALSMovementDirection Current, float FRThreshold, float FLThreshold, float BRThreshold, float BLThreshold, float Buffer, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ALSMathLibrary", "CalculateQuadrant");

	Params::ALSMathLibrary_CalculateQuadrant Parms{};

	Parms.Current = Current;
	Parms.FRThreshold = FRThreshold;
	Parms.FLThreshold = FLThreshold;
	Parms.BRThreshold = BRThreshold;
	Parms.BLThreshold = BLThreshold;
	Parms.Buffer = Buffer;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSMathLibrary.CapsuleHasRoomCheck
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UCapsuleComponent*                Capsule                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HeightOffset                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RadiusOffset                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DebugType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DrawDebugTrace                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UALSMathLibrary::CapsuleHasRoomCheck(class UCapsuleComponent* Capsule, const struct FVector& TargetLocation, float HeightOffset, float RadiusOffset, EDrawDebugTrace DebugType, bool DrawDebugTrace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ALSMathLibrary", "CapsuleHasRoomCheck");

	Params::ALSMathLibrary_CapsuleHasRoomCheck Parms{};

	Parms.Capsule = Capsule;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.HeightOffset = HeightOffset;
	Parms.RadiusOffset = RadiusOffset;
	Parms.DebugType = DebugType;
	Parms.DrawDebugTrace = DrawDebugTrace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSMathLibrary.GetCapsuleBaseLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   ZOffset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCapsuleComponent*                Capsule                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UALSMathLibrary::GetCapsuleBaseLocation(float ZOffset, class UCapsuleComponent* Capsule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ALSMathLibrary", "GetCapsuleBaseLocation");

	Params::ALSMathLibrary_GetCapsuleBaseLocation Parms{};

	Parms.ZOffset = ZOffset;
	Parms.Capsule = Capsule;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSMathLibrary.GetCapsuleLocationFromBase
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          BaseLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ZOffset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCapsuleComponent*                Capsule                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UALSMathLibrary::GetCapsuleLocationFromBase(const struct FVector& BaseLocation, float ZOffset, class UCapsuleComponent* Capsule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ALSMathLibrary", "GetCapsuleLocationFromBase");

	Params::ALSMathLibrary_GetCapsuleLocationFromBase Parms{};

	Parms.BaseLocation = std::move(BaseLocation);
	Parms.ZOffset = ZOffset;
	Parms.Capsule = Capsule;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSMathLibrary.MantleComponentLocalToWorld
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FALSComponentAndTransform        CompAndTransform                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UALSMathLibrary::MantleComponentLocalToWorld(const struct FALSComponentAndTransform& CompAndTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ALSMathLibrary", "MantleComponentLocalToWorld");

	Params::ALSMathLibrary_MantleComponentLocalToWorld Parms{};

	Parms.CompAndTransform = std::move(CompAndTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSMathLibrary.TransformAdd
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       T1                                                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       T2                                                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UALSMathLibrary::TransformAdd(const struct FTransform& T1, const struct FTransform& T2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ALSMathLibrary", "TransformAdd");

	Params::ALSMathLibrary_TransformAdd Parms{};

	Parms.T1 = std::move(T1);
	Parms.T2 = std::move(T2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSMathLibrary.TransformSub
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       T1                                                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       T2                                                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UALSMathLibrary::TransformSub(const struct FTransform& T1, const struct FTransform& T2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ALSMathLibrary", "TransformSub");

	Params::ALSMathLibrary_TransformSub Parms{};

	Parms.T1 = std::move(T1);
	Parms.T2 = std::move(T2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSPlayerCameraManager.CalculateAxisIndependentLag
// (Final, Native, Static, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          CurrentLocation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CameraRotation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          LagSpeeds                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AALSPlayerCameraManager::CalculateAxisIndependentLag(const struct FVector& CurrentLocation, const struct FVector& TargetLocation, const struct FRotator& CameraRotation, const struct FVector& LagSpeeds, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ALSPlayerCameraManager", "CalculateAxisIndependentLag");

	Params::ALSPlayerCameraManager_CalculateAxisIndependentLag Parms{};

	Parms.CurrentLocation = std::move(CurrentLocation);
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.CameraRotation = std::move(CameraRotation);
	Parms.LagSpeeds = std::move(LagSpeeds);
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSPlayerCameraManager.CustomCameraBehavior
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   FOV                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AALSPlayerCameraManager::CustomCameraBehavior(float DeltaTime, struct FVector* Location, struct FRotator* Rotation, float* FOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerCameraManager", "CustomCameraBehavior");

	Params::ALSPlayerCameraManager_CustomCameraBehavior Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);

	if (FOV != nullptr)
		*FOV = Parms.FOV;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSPlayerCameraManager.DrawDebugTargets
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          PivotTargetLocation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSPlayerCameraManager::DrawDebugTargets(const struct FVector& PivotTargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerCameraManager", "DrawDebugTargets");

	Params::ALSPlayerCameraManager_DrawDebugTargets Parms{};

	Parms.PivotTargetLocation = std::move(PivotTargetLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALSV4_CPP.ALSPlayerCameraManager.OnPossess
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AALSBaseCharacter*                NewCharacter                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AALSPlayerCameraManager::OnPossess(class AALSBaseCharacter* NewCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerCameraManager", "OnPossess");

	Params::ALSPlayerCameraManager_OnPossess Parms{};

	Parms.NewCharacter = NewCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerCameraManager.GetCameraBehaviorParam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             CurveName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AALSPlayerCameraManager::GetCameraBehaviorParam(class FName CurveName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerCameraManager", "GetCameraBehaviorParam");

	Params::ALSPlayerCameraManager_GetCameraBehaviorParam Parms{};

	Parms.CurveName = CurveName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ALSV4_CPP.ALSPlayerController.AimAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::AimAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "AimAction");

	Params::ALSPlayerController_AimAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.CameraHeldAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::CameraHeldAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "CameraHeldAction");

	Params::ALSPlayerController_CameraHeldAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.CameraRightAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::CameraRightAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "CameraRightAction");

	Params::ALSPlayerController_CameraRightAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.CameraTapAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::CameraTapAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "CameraTapAction");

	Params::ALSPlayerController_CameraTapAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.CameraUpAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::CameraUpAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "CameraUpAction");

	Params::ALSPlayerController_CameraUpAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.DebugFocusedCharacterCycleAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::DebugFocusedCharacterCycleAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "DebugFocusedCharacterCycleAction");

	Params::ALSPlayerController_DebugFocusedCharacterCycleAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.DebugOpenOverlayMenuAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::DebugOpenOverlayMenuAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "DebugOpenOverlayMenuAction");

	Params::ALSPlayerController_DebugOpenOverlayMenuAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.DebugOverlayMenuCycleAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::DebugOverlayMenuCycleAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "DebugOverlayMenuCycleAction");

	Params::ALSPlayerController_DebugOverlayMenuCycleAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.DebugToggleCharacterInfoAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::DebugToggleCharacterInfoAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "DebugToggleCharacterInfoAction");

	Params::ALSPlayerController_DebugToggleCharacterInfoAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.DebugToggleDebugViewAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::DebugToggleDebugViewAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "DebugToggleDebugViewAction");

	Params::ALSPlayerController_DebugToggleDebugViewAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.DebugToggleHudAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::DebugToggleHudAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "DebugToggleHudAction");

	Params::ALSPlayerController_DebugToggleHudAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.DebugToggleLayerColorsAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::DebugToggleLayerColorsAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "DebugToggleLayerColorsAction");

	Params::ALSPlayerController_DebugToggleLayerColorsAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.DebugToggleMeshAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::DebugToggleMeshAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "DebugToggleMeshAction");

	Params::ALSPlayerController_DebugToggleMeshAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.DebugToggleShapesAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::DebugToggleShapesAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "DebugToggleShapesAction");

	Params::ALSPlayerController_DebugToggleShapesAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.DebugToggleSlomoAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::DebugToggleSlomoAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "DebugToggleSlomoAction");

	Params::ALSPlayerController_DebugToggleSlomoAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.DebugToggleTracesAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::DebugToggleTracesAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "DebugToggleTracesAction");

	Params::ALSPlayerController_DebugToggleTracesAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.ForwardMovementAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::ForwardMovementAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "ForwardMovementAction");

	Params::ALSPlayerController_ForwardMovementAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.JumpAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::JumpAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "JumpAction");

	Params::ALSPlayerController_JumpAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.LookingDirectionAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::LookingDirectionAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "LookingDirectionAction");

	Params::ALSPlayerController_LookingDirectionAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.RagdollAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::RagdollAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "RagdollAction");

	Params::ALSPlayerController_RagdollAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.RightMovementAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::RightMovementAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "RightMovementAction");

	Params::ALSPlayerController_RightMovementAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.SprintAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::SprintAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "SprintAction");

	Params::ALSPlayerController_SprintAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.StanceAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::StanceAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "StanceAction");

	Params::ALSPlayerController_StanceAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.VelocityDirectionAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::VelocityDirectionAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "VelocityDirectionAction");

	Params::ALSPlayerController_VelocityDirectionAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ALSV4_CPP.ALSPlayerController.WalkAction
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FInputActionValue                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AALSPlayerController::WalkAction(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALSPlayerController", "WalkAction");

	Params::ALSPlayerController_WalkAction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

