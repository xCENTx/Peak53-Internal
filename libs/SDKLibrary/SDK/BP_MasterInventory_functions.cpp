#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterInventory

#include "Basic.hpp"

#include "BP_MasterInventory_classes.hpp"
#include "BP_MasterInventory_parameters.hpp"


namespace SDK
{

// Function BP_MasterInventory.BP_MasterInventory_C.AddItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    StackSearch                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShowNotifications                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RemainingItem                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvItem                       RemainingInvItem                                       (Parm, OutParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// struct FS_InvSlotID                     NewItemSlot                                            (Parm, OutParm, ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_MasterInventory_C::AddItem(const struct FS_InvItem& Item, bool StackSearch, bool ShowNotifications, bool* RemainingItem, struct FS_InvItem* RemainingInvItem, struct FS_InvSlotID* NewItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "AddItem");

	Params::BP_MasterInventory_C_AddItem Parms{};

	Parms.Item = std::move(Item);
	Parms.StackSearch = StackSearch;
	Parms.ShowNotifications = ShowNotifications;

	UObject::ProcessEvent(Func, &Parms);

	if (RemainingItem != nullptr)
		*RemainingItem = Parms.RemainingItem;

	if (RemainingInvItem != nullptr)
		*RemainingInvItem = std::move(Parms.RemainingInvItem);

	if (NewItemSlot != nullptr)
		*NewItemSlot = std::move(Parms.NewItemSlot);
}


// Function BP_MasterInventory.BP_MasterInventory_C.AddItemWeight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AddAll                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AddToParent                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_MasterInventory_C*            Stop_Inventory                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::AddItemWeight(const struct FS_InvItem& Item, int32 Amount, bool AddAll, bool AddToParent, class UBP_MasterInventory_C* Stop_Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "AddItemWeight");

	Params::BP_MasterInventory_C_AddItemWeight Parms{};

	Parms.Item = std::move(Item);
	Parms.Amount = Amount;
	Parms.AddAll = AddAll;
	Parms.AddToParent = AddToParent;
	Parms.Stop_Inventory = Stop_Inventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.AddPanelToUsingPlayers
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::AddPanelToUsingPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "AddPanelToUsingPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.AddStartingItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::AddStartingItems(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "AddStartingItems");

	Params::BP_MasterInventory_C_AddStartingItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_MasterInventory.BP_MasterInventory_C.AddUsingPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_PlayerInventory_C*            Player_Inv                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::AddUsingPlayer(class UBP_PlayerInventory_C* Player_Inv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "AddUsingPlayer");

	Params::BP_MasterInventory_C_AddUsingPlayer Parms{};

	Parms.Player_Inv = Player_Inv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.AddWeight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Weight                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AddToParent                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_MasterInventory_C*            Stop_Inventory                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::AddWeight(double Weight, bool AddToParent, class UBP_MasterInventory_C* Stop_Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "AddWeight");

	Params::BP_MasterInventory_C_AddWeight Parms{};

	Parms.Weight = Weight;
	Parms.AddToParent = AddToParent;
	Parms.Stop_Inventory = Stop_Inventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.AddWeightCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ItemWeight                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CheckParent                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_MasterInventory_C*            ParentIgnore                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    CanAdd                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_ItemCount                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::AddWeightCheck(double ItemWeight, bool CheckParent, class UBP_MasterInventory_C* ParentIgnore, bool* CanAdd, int32* Param_ItemCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "AddWeightCheck");

	Params::BP_MasterInventory_C_AddWeightCheck Parms{};

	Parms.ItemWeight = ItemWeight;
	Parms.CheckParent = CheckParent;
	Parms.ParentIgnore = ParentIgnore;

	UObject::ProcessEvent(Func, &Parms);

	if (CanAdd != nullptr)
		*CanAdd = Parms.CanAdd;

	if (Param_ItemCount != nullptr)
		*Param_ItemCount = Parms.Param_ItemCount;
}


// Function BP_MasterInventory.BP_MasterInventory_C.AllItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_InvSlot>               RootSlots                                              (Parm, OutParm, ContainsInstancedReference)

void UBP_MasterInventory_C::AllItems(TArray<struct FS_InvSlot>* RootSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "AllItems");

	Params::BP_MasterInventory_C_AllItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RootSlots != nullptr)
		*RootSlots = std::move(Parms.RootSlots);
}


// Function BP_MasterInventory.BP_MasterInventory_C.AttemptToAddItemAmount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   AddAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Remainder                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RemainderAmount                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::AttemptToAddItemAmount(const struct FS_InvSlot& InvSlot, int32 AddAmount, bool* Remainder, int32* RemainderAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "AttemptToAddItemAmount");

	Params::BP_MasterInventory_C_AttemptToAddItemAmount Parms{};

	Parms.InvSlot = std::move(InvSlot);
	Parms.AddAmount = AddAmount;

	UObject::ProcessEvent(Func, &Parms);

	if (Remainder != nullptr)
		*Remainder = Parms.Remainder;

	if (RemainderAmount != nullptr)
		*RemainderAmount = Parms.RemainderAmount;
}


// Function BP_MasterInventory.BP_MasterInventory_C.AttemptToAddWeight
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseAllWeight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CheckOnly                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_MasterInventory_C::AttemptToAddWeight(const struct FS_InvItem& Item, int32 Amount, bool UseAllWeight, bool CheckOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "AttemptToAddWeight");

	Params::BP_MasterInventory_C_AttemptToAddWeight Parms{};

	Parms.Item = std::move(Item);
	Parms.Amount = Amount;
	Parms.UseAllWeight = UseAllWeight;
	Parms.CheckOnly = CheckOnly;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterInventory.BP_MasterInventory_C.CancelCraftingRecipe
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_CraftingQueue                 CraftingListing                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::CancelCraftingRecipe(const struct FS_CraftingQueue& CraftingListing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "CancelCraftingRecipe");

	Params::BP_MasterInventory_C_CancelCraftingRecipe Parms{};

	Parms.CraftingListing = std::move(CraftingListing);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ChangeItemCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Add                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::ChangeItemCount(int32 Amount, bool Add)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ChangeItemCount");

	Params::BP_MasterInventory_C_ChangeItemCount Parms{};

	Parms.Amount = Amount;
	Parms.Add = Add;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.CheckCraftingRequirements
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Recipe                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::CheckCraftingRequirements(class FName Recipe, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "CheckCraftingRequirements");

	Params::BP_MasterInventory_C_CheckCraftingRequirements Parms{};

	Parms.Recipe = Recipe;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.CheckFreeSlotCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   FreeSlots                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::CheckFreeSlotCount(int32* FreeSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "CheckFreeSlotCount");

	Params::BP_MasterInventory_C_CheckFreeSlotCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FreeSlots != nullptr)
		*FreeSlots = Parms.FreeSlots;
}


// Function BP_MasterInventory.BP_MasterInventory_C.CheckItemSpawn
// (BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::CheckItemSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "CheckItemSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.CheckRecipeCost
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Recipe                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RemoveItems                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanCraft                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::CheckRecipeCost(class FName Recipe, int32 Amount, bool RemoveItems, bool* CanCraft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "CheckRecipeCost");

	Params::BP_MasterInventory_C_CheckRecipeCost Parms{};

	Parms.Recipe = Recipe;
	Parms.Amount = Amount;
	Parms.RemoveItems = RemoveItems;

	UObject::ProcessEvent(Func, &Parms);

	if (CanCraft != nullptr)
		*CanCraft = Parms.CanCraft;
}


// Function BP_MasterInventory.BP_MasterInventory_C.ClearInventory
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::ClearInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ClearInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ClearInventoryItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::ClearInventoryItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ClearInventoryItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ClearParentInventory
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::ClearParentInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ClearParentInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ClearUsingPlayers
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::ClearUsingPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ClearUsingPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ClientClearInventory
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::ClientClearInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ClientClearInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ClientUpdateInventory
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_InvSlot>               Param_Inventory                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UBP_MasterInventory_C::ClientUpdateInventory(const TArray<struct FS_InvSlot>& Param_Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ClientUpdateInventory");

	Params::BP_MasterInventory_C_ClientUpdateInventory Parms{};

	Parms.Param_Inventory = std::move(Param_Inventory);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.CloseOtherPlayerTabs
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_PlayerInventory_C*            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::CloseOtherPlayerTabs(class UBP_PlayerInventory_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "CloseOtherPlayerTabs");

	Params::BP_MasterInventory_C_CloseOtherPlayerTabs Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ConstructItemSpawnList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_SpawnerList>           SpawnList                                              (Parm, OutParm)

void UBP_MasterInventory_C::ConstructItemSpawnList(TArray<struct FS_SpawnerList>* SpawnList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ConstructItemSpawnList");

	Params::BP_MasterInventory_C_ConstructItemSpawnList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnList != nullptr)
		*SpawnList = std::move(Parms.SpawnList);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ConstructSlots
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::ConstructSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ConstructSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ContainerRestrictionCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Can_Add                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::ContainerRestrictionCheck(class FName ItemId, bool* Can_Add)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ContainerRestrictionCheck");

	Params::BP_MasterInventory_C_ContainerRestrictionCheck Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (Can_Add != nullptr)
		*Can_Add = Parms.Can_Add;
}


// Function BP_MasterInventory.BP_MasterInventory_C.CraftingError
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::CraftingError()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "CraftingError");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.CraftItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Recipe                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::CraftItem(class FName Recipe, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "CraftItem");

	Params::BP_MasterInventory_C_CraftItem Parms{};

	Parms.Recipe = Recipe;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.CreateNewCraftingListing
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Recipe                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CraftingQueue                 Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::CreateNewCraftingListing(class FName Recipe, int32 Amount, struct FS_CraftingQueue* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "CreateNewCraftingListing");

	Params::BP_MasterInventory_C_CreateNewCraftingListing Parms{};

	Parms.Recipe = Recipe;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function BP_MasterInventory.BP_MasterInventory_C.CreateNotificationInChild
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_NotificationDetails           NotificationDetails                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_MasterInventory_C::CreateNotificationInChild(const struct FS_NotificationDetails& NotificationDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "CreateNotificationInChild");

	Params::BP_MasterInventory_C_CreateNotificationInChild Parms{};

	Parms.NotificationDetails = std::move(NotificationDetails);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.DecreaseItemDurability
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// double                                  DecreaseAmount                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::DecreaseItemDurability(const struct FS_InvSlot& InvSlot, double DecreaseAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "DecreaseItemDurability");

	Params::BP_MasterInventory_C_DecreaseItemDurability Parms{};

	Parms.InvSlot = std::move(InvSlot);
	Parms.DecreaseAmount = DecreaseAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.DecreaseWeaponDurability
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_WeaponSlot                    WeaponSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// double                                  DecreaseAmount                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::DecreaseWeaponDurability(const struct FS_WeaponSlot& WeaponSlot, double DecreaseAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "DecreaseWeaponDurability");

	Params::BP_MasterInventory_C_DecreaseWeaponDurability Parms{};

	Parms.WeaponSlot = std::move(WeaponSlot);
	Parms.DecreaseAmount = DecreaseAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.DestroyContainingInventories
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::DestroyContainingInventories()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "DestroyContainingInventories");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.EmptyInventory
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DestroyItems                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_MasterInventory_C*            NewItemInventory                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::EmptyInventory(bool DestroyItems, class UBP_MasterInventory_C* NewItemInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "EmptyInventory");

	Params::BP_MasterInventory_C_EmptyInventory Parms{};

	Parms.DestroyItems = DestroyItems;
	Parms.NewItemInventory = NewItemInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ExecuteUbergraph_BP_MasterInventory
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::ExecuteUbergraph_BP_MasterInventory(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ExecuteUbergraph_BP_MasterInventory");

	Params::BP_MasterInventory_C_ExecuteUbergraph_BP_MasterInventory Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.FindCraftingListing
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Recipe                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CraftingQueue                 CraftingListing                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_MasterInventory_C::FindCraftingListing(class FName Recipe, struct FS_CraftingQueue* CraftingListing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "FindCraftingListing");

	Params::BP_MasterInventory_C_FindCraftingListing Parms{};

	Parms.Recipe = Recipe;

	UObject::ProcessEvent(Func, &Parms);

	if (CraftingListing != nullptr)
		*CraftingListing = std::move(Parms.CraftingListing);

	return Parms.ReturnValue;
}


// Function BP_MasterInventory.BP_MasterInventory_C.FindEmptySlots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AllowRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_WeightCheck                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WeightCheckAmount                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SpaceFound                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotated                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_InvSlot>               FoundSlots                                             (Parm, OutParm, ContainsInstancedReference)

void UBP_MasterInventory_C::FindEmptySlots(bool AllowRotation, class FName ItemId, bool Param_WeightCheck, int32 WeightCheckAmount, bool* SpaceFound, bool* Rotated, TArray<struct FS_InvSlot>* FoundSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "FindEmptySlots");

	Params::BP_MasterInventory_C_FindEmptySlots Parms{};

	Parms.AllowRotation = AllowRotation;
	Parms.ItemId = ItemId;
	Parms.Param_WeightCheck = Param_WeightCheck;
	Parms.WeightCheckAmount = WeightCheckAmount;

	UObject::ProcessEvent(Func, &Parms);

	if (SpaceFound != nullptr)
		*SpaceFound = Parms.SpaceFound;

	if (Rotated != nullptr)
		*Rotated = Parms.Rotated;

	if (FoundSlots != nullptr)
		*FoundSlots = std::move(Parms.FoundSlots);
}


// Function BP_MasterInventory.BP_MasterInventory_C.FindFreeStackSpace
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       InvItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// class UBP_MasterInventory_C*            StopInv                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Reaminder                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvItem                       ReaminderInvItem                                       (Parm, OutParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_MasterInventory_C::FindFreeStackSpace(const struct FS_InvItem& InvItem, class UBP_MasterInventory_C* StopInv, bool* Reaminder, struct FS_InvItem* ReaminderInvItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "FindFreeStackSpace");

	Params::BP_MasterInventory_C_FindFreeStackSpace Parms{};

	Parms.InvItem = std::move(InvItem);
	Parms.StopInv = StopInv;

	UObject::ProcessEvent(Func, &Parms);

	if (Reaminder != nullptr)
		*Reaminder = Parms.Reaminder;

	if (ReaminderInvItem != nullptr)
		*ReaminderInvItem = std::move(Parms.ReaminderInvItem);
}


// Function BP_MasterInventory.BP_MasterInventory_C.FindItemWithUseAmountLeft
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ItemIDs                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    FoundItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvSlot                       ItemSlot                                               (Parm, OutParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_MasterInventory_C::FindItemWithUseAmountLeft(TArray<class FName>& ItemIDs, bool* FoundItem, struct FS_InvSlot* ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "FindItemWithUseAmountLeft");

	Params::BP_MasterInventory_C_FindItemWithUseAmountLeft Parms{};

	Parms.ItemIDs = std::move(ItemIDs);

	UObject::ProcessEvent(Func, &Parms);

	ItemIDs = std::move(Parms.ItemIDs);

	if (FoundItem != nullptr)
		*FoundItem = Parms.FoundItem;

	if (ItemSlot != nullptr)
		*ItemSlot = std::move(Parms.ItemSlot);
}


// Function BP_MasterInventory.BP_MasterInventory_C.FindKeyItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             KeyCode                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::FindKeyItem(class FName KeyCode, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "FindKeyItem");

	Params::BP_MasterInventory_C_FindKeyItem Parms{};

	Parms.KeyCode = KeyCode;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_MasterInventory.BP_MasterInventory_C.FindNotFullUseAmountItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ItemIDs                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    FoundItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvSlot                       ItemSlot                                               (Parm, OutParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_MasterInventory_C::FindNotFullUseAmountItems(TArray<class FName>& ItemIDs, bool* FoundItem, struct FS_InvSlot* ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "FindNotFullUseAmountItems");

	Params::BP_MasterInventory_C_FindNotFullUseAmountItems Parms{};

	Parms.ItemIDs = std::move(ItemIDs);

	UObject::ProcessEvent(Func, &Parms);

	ItemIDs = std::move(Parms.ItemIDs);

	if (FoundItem != nullptr)
		*FoundItem = Parms.FoundItem;

	if (ItemSlot != nullptr)
		*ItemSlot = std::move(Parms.ItemSlot);
}


// Function BP_MasterInventory.BP_MasterInventory_C.FinishedCraftingTimer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Recipe                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::FinishedCraftingTimer(class FName Recipe, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "FinishedCraftingTimer");

	Params::BP_MasterInventory_C_FinishedCraftingTimer Parms{};

	Parms.Recipe = Recipe;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.InGameLoadComponentData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                Save                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::InGameLoadComponentData(class UBP_SGKSaveGame_C* Save)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "InGameLoadComponentData");

	Params::BP_MasterInventory_C_InGameLoadComponentData Parms{};

	Parms.Save = Save;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.InitializeComponentSaveSystem
// (BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::InitializeComponentSaveSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "InitializeComponentSaveSystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.IsItemInParentInv
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       StartInvSlot                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// struct FS_InvSlot                       EndInvSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    IsInInv                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::IsItemInParentInv(const struct FS_InvSlot& StartInvSlot, const struct FS_InvSlot& EndInvSlot, bool* IsInInv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "IsItemInParentInv");

	Params::BP_MasterInventory_C_IsItemInParentInv Parms{};

	Parms.StartInvSlot = std::move(StartInvSlot);
	Parms.EndInvSlot = std::move(EndInvSlot);

	UObject::ProcessEvent(Func, &Parms);

	if (IsInInv != nullptr)
		*IsInInv = Parms.IsInInv;
}


// Function BP_MasterInventory.BP_MasterInventory_C.ItemDecay
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::ItemDecay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ItemDecay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ItemLimitCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_ItemCount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AllowAdd                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AddCount                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Remaining                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::ItemLimitCheck(int32 Param_ItemCount, bool* AllowAdd, int32* AddCount, int32* Remaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ItemLimitCheck");

	Params::BP_MasterInventory_C_ItemLimitCheck Parms{};

	Parms.Param_ItemCount = Param_ItemCount;

	UObject::ProcessEvent(Func, &Parms);

	if (AllowAdd != nullptr)
		*AllowAdd = Parms.AllowAdd;

	if (AddCount != nullptr)
		*AddCount = Parms.AddCount;

	if (Remaining != nullptr)
		*Remaining = Parms.Remaining;
}


// Function BP_MasterInventory.BP_MasterInventory_C.LoadComponent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::LoadComponent(class UBP_SGKSaveGame_C* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "LoadComponent");

	Params::BP_MasterInventory_C_LoadComponent Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.LoadComponentData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadComplete                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::LoadComponentData(class UBP_SGKSaveGame_C* SaveGame, bool* LoadComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "LoadComponentData");

	Params::BP_MasterInventory_C_LoadComponentData Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);

	if (LoadComplete != nullptr)
		*LoadComplete = Parms.LoadComplete;
}


// Function BP_MasterInventory.BP_MasterInventory_C.LoadInventoryData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_StorageSave                   S_StorageSave                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_MasterInventory_C::LoadInventoryData(const struct FS_StorageSave& S_StorageSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "LoadInventoryData");

	Params::BP_MasterInventory_C_LoadInventoryData Parms{};

	Parms.S_StorageSave = std::move(S_StorageSave);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.LoadSavedInventory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_InvSaveSlot>           LoadedInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FS_OtherInvSaves>         OtherInv                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UBP_MasterInventory_C::LoadSavedInventory(TArray<struct FS_InvSaveSlot>& LoadedInventory, TArray<struct FS_OtherInvSaves>& OtherInv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "LoadSavedInventory");

	Params::BP_MasterInventory_C_LoadSavedInventory Parms{};

	Parms.LoadedInventory = std::move(LoadedInventory);
	Parms.OtherInv = std::move(OtherInv);

	UObject::ProcessEvent(Func, &Parms);

	LoadedInventory = std::move(Parms.LoadedInventory);
	OtherInv = std::move(Parms.OtherInv);
}


// Function BP_MasterInventory.BP_MasterInventory_C.MulticastForceItemCount
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_ItemCount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::MulticastForceItemCount(int32 Param_ItemCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "MulticastForceItemCount");

	Params::BP_MasterInventory_C_MulticastForceItemCount Parms{};

	Parms.Param_ItemCount = Param_ItemCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.MulticastSetDetails
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_ContainerDetails              Details                                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_MasterInventory_C::MulticastSetDetails(const struct FS_ContainerDetails& Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "MulticastSetDetails");

	Params::BP_MasterInventory_C_MulticastSetDetails Parms{};

	Parms.Details = std::move(Details);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.OnRep_CurrentWeight
// (BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::OnRep_CurrentWeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "OnRep_CurrentWeight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.OnRep_ItemCount
// (BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::OnRep_ItemCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "OnRep_ItemCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.OwnerDestroyed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::OwnerDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "OwnerDestroyed");

	Params::BP_MasterInventory_C_OwnerDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ParentWeightCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AdditionalWeight                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_MasterInventory_C*            ParentIgnore                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    CanAdd                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CurrentCount                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::ParentWeightCheck(double AdditionalWeight, class UBP_MasterInventory_C* ParentIgnore, bool* CanAdd, int32* CurrentCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ParentWeightCheck");

	Params::BP_MasterInventory_C_ParentWeightCheck Parms{};

	Parms.AdditionalWeight = AdditionalWeight;
	Parms.ParentIgnore = ParentIgnore;

	UObject::ProcessEvent(Func, &Parms);

	if (CanAdd != nullptr)
		*CanAdd = Parms.CanAdd;

	if (CurrentCount != nullptr)
		*CurrentCount = Parms.CurrentCount;
}


// Function BP_MasterInventory.BP_MasterInventory_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_MasterInventory_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.RemainingFreeWeight
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_RemainingFreeWeight                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::RemainingFreeWeight(double* Param_RemainingFreeWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "RemainingFreeWeight");

	Params::BP_MasterInventory_C_RemainingFreeWeight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_RemainingFreeWeight != nullptr)
		*Param_RemainingFreeWeight = Parms.Param_RemainingFreeWeight;
}


// Function BP_MasterInventory.BP_MasterInventory_C.RemainingItemCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   RemainingItemLimit                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::RemainingItemCount(int32* RemainingItemLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "RemainingItemCount");

	Params::BP_MasterInventory_C_RemainingItemCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RemainingItemLimit != nullptr)
		*RemainingItemLimit = Parms.RemainingItemLimit;
}


// Function BP_MasterInventory.BP_MasterInventory_C.RemoveItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    RemoveWeight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RemoveInvAmount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SpecialSlot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::RemoveItem(const struct FS_InvSlot& InvSlot, bool RemoveWeight, bool RemoveInvAmount, bool SpecialSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "RemoveItem");

	Params::BP_MasterInventory_C_RemoveItem Parms{};

	Parms.InvSlot = std::move(InvSlot);
	Parms.RemoveWeight = RemoveWeight;
	Parms.RemoveInvAmount = RemoveInvAmount;
	Parms.SpecialSlot = SpecialSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.RemoveItemAmount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SpecialSlot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ItemRemoved                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::RemoveItemAmount(const struct FS_InvSlot& InvSlot, int32 Amount, bool SpecialSlot, bool* ItemRemoved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "RemoveItemAmount");

	Params::BP_MasterInventory_C_RemoveItemAmount Parms{};

	Parms.InvSlot = std::move(InvSlot);
	Parms.Amount = Amount;
	Parms.SpecialSlot = SpecialSlot;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemRemoved != nullptr)
		*ItemRemoved = Parms.ItemRemoved;
}


// Function BP_MasterInventory.BP_MasterInventory_C.RemoveItemWeight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RemoveAll                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RemoveParentWeight                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_MasterInventory_C*            MasterInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::RemoveItemWeight(const struct FS_InvItem& Item, int32 Amount, bool RemoveAll, bool RemoveParentWeight, class UBP_MasterInventory_C* MasterInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "RemoveItemWeight");

	Params::BP_MasterInventory_C_RemoveItemWeight Parms{};

	Parms.Item = std::move(Item);
	Parms.Amount = Amount;
	Parms.RemoveAll = RemoveAll;
	Parms.RemoveParentWeight = RemoveParentWeight;
	Parms.MasterInventory = MasterInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.RemoveUsingPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_PlayerInventory_C*            Player_Inv                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::RemoveUsingPlayer(class UBP_PlayerInventory_C* Player_Inv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "RemoveUsingPlayer");

	Params::BP_MasterInventory_C_RemoveUsingPlayer Parms{};

	Parms.Player_Inv = Player_Inv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.RemoveWeight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Weight                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RemoveParentWeight                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_MasterInventory_C*            StopInventory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::RemoveWeight(double Weight, bool RemoveParentWeight, class UBP_MasterInventory_C* StopInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "RemoveWeight");

	Params::BP_MasterInventory_C_RemoveWeight Parms{};

	Parms.Weight = Weight;
	Parms.RemoveParentWeight = RemoveParentWeight;
	Parms.StopInventory = StopInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ReplaceUsingPlayers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UBP_PlayerInventory_C*>    Players                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UBP_MasterInventory_C::ReplaceUsingPlayers(TArray<class UBP_PlayerInventory_C*>& Players)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ReplaceUsingPlayers");

	Params::BP_MasterInventory_C_ReplaceUsingPlayers Parms{};

	Parms.Players = std::move(Players);

	UObject::ProcessEvent(Func, &Parms);

	Players = std::move(Parms.Players);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ReplicateContainingInventories
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Replicate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::ReplicateContainingInventories(bool Replicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ReplicateContainingInventories");

	Params::BP_MasterInventory_C_ReplicateContainingInventories Parms{};

	Parms.Replicate = Replicate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.RequiredActorCraftingCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Recipe                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_MasterInventory_C::RequiredActorCraftingCheck(class FName Recipe)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "RequiredActorCraftingCheck");

	Params::BP_MasterInventory_C_RequiredActorCraftingCheck Parms{};

	Parms.Recipe = Recipe;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterInventory.BP_MasterInventory_C.ResetCraftingTimer
// (BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::ResetCraftingTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ResetCraftingTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SaveComponentData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::SaveComponentData(class UBP_SGKSaveGame_C* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SaveComponentData");

	Params::BP_MasterInventory_C_SaveComponentData Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SearchForItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDataTableRowHandle              Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RemoveItems                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ItemFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvSlot                       InvSlot                                                (Parm, OutParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_MasterInventory_C::SearchForItem(const struct FDataTableRowHandle& Item, int32 Amount, bool RemoveItems, bool* ItemFound, struct FS_InvSlot* InvSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SearchForItem");

	Params::BP_MasterInventory_C_SearchForItem Parms{};

	Parms.Item = std::move(Item);
	Parms.Amount = Amount;
	Parms.RemoveItems = RemoveItems;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemFound != nullptr)
		*ItemFound = Parms.ItemFound;

	if (InvSlot != nullptr)
		*InvSlot = std::move(Parms.InvSlot);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ServerAddClientCraftingListing
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_CraftingQueue                 NewQueueListing                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_MasterInventory_C*            CraftingInventory                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::ServerAddClientCraftingListing(const struct FS_CraftingQueue& NewQueueListing, class UBP_MasterInventory_C* CraftingInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ServerAddClientCraftingListing");

	Params::BP_MasterInventory_C_ServerAddClientCraftingListing Parms{};

	Parms.NewQueueListing = std::move(NewQueueListing);
	Parms.CraftingInventory = CraftingInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ServerAddItem
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_MasterInventory_C::ServerAddItem(const struct FS_InvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ServerAddItem");

	Params::BP_MasterInventory_C_ServerAddItem Parms{};

	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ServerCancelCraftingListing
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_CraftingQueue                 CancelQueue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::ServerCancelCraftingListing(const struct FS_CraftingQueue& CancelQueue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ServerCancelCraftingListing");

	Params::BP_MasterInventory_C_ServerCancelCraftingListing Parms{};

	Parms.CancelQueue = std::move(CancelQueue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ServerCreateNewListingCheck
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RecipeName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::ServerCreateNewListingCheck(class FName RecipeName, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ServerCreateNewListingCheck");

	Params::BP_MasterInventory_C_ServerCreateNewListingCheck Parms{};

	Parms.RecipeName = RecipeName;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ServerEmptyInventory
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MasterInventory_C*            StartInventory                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::ServerEmptyInventory(class UBP_MasterInventory_C* StartInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ServerEmptyInventory");

	Params::BP_MasterInventory_C_ServerEmptyInventory Parms{};

	Parms.StartInventory = StartInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ServerForceRootItemUpdate
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::ServerForceRootItemUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ServerForceRootItemUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ServerSpawnDestructionBag
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::ServerSpawnDestructionBag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ServerSpawnDestructionBag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ServerStartClientListingTimer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CraftingRecipe                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_MasterInventory_C*            CraftingInventory                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::ServerStartClientListingTimer(class FName CraftingRecipe, class UBP_MasterInventory_C* CraftingInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ServerStartClientListingTimer");

	Params::BP_MasterInventory_C_ServerStartClientListingTimer Parms{};

	Parms.CraftingRecipe = CraftingRecipe;
	Parms.CraftingInventory = CraftingInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ServerUpdateClientCraftingListing
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_CraftingQueue                 NewQueueListing                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_MasterInventory_C*            CraftingInventory                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::ServerUpdateClientCraftingListing(const struct FS_CraftingQueue& NewQueueListing, class UBP_MasterInventory_C* CraftingInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ServerUpdateClientCraftingListing");

	Params::BP_MasterInventory_C_ServerUpdateClientCraftingListing Parms{};

	Parms.NewQueueListing = std::move(NewQueueListing);
	Parms.CraftingInventory = CraftingInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ServerUpdateItemSlots
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_PlayerInventory_C*            PlayerInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::ServerUpdateItemSlots(class UBP_PlayerInventory_C* PlayerInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ServerUpdateItemSlots");

	Params::BP_MasterInventory_C_ServerUpdateItemSlots Parms{};

	Parms.PlayerInventory = PlayerInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.ServerUpdateRootItems
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::ServerUpdateRootItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "ServerUpdateRootItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SetItemAmount
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   SetAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeCount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Special                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::SetItemAmount(const struct FS_InvSlot& InvSlot, int32 SetAmount, bool ChangeCount, bool Special)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SetItemAmount");

	Params::BP_MasterInventory_C_SetItemAmount Parms{};

	Parms.InvSlot = std::move(InvSlot);
	Parms.SetAmount = SetAmount;
	Parms.ChangeCount = ChangeCount;
	Parms.Special = Special;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SetNewSlotItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       RootSlot                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// struct FS_InvItem                       NewItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    SpecialSlot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::SetNewSlotItem(const struct FS_InvSlot& RootSlot, const struct FS_InvItem& NewItem, bool SpecialSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SetNewSlotItem");

	Params::BP_MasterInventory_C_SetNewSlotItem Parms{};

	Parms.RootSlot = std::move(RootSlot);
	Parms.NewItem = std::move(NewItem);
	Parms.SpecialSlot = SpecialSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK AllowStartingItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AllowStartingItems                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::SGK_AllowStartingItems(bool* AllowStartingItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK AllowStartingItems");

	Params::BP_MasterInventory_C_SGK_AllowStartingItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllowStartingItems != nullptr)
		*AllowStartingItems = Parms.AllowStartingItems;
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK DestroyWeaponAttachments
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::SGK_DestroyWeaponAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK DestroyWeaponAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK ItemMovedInInventory
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::SGK_ItemMovedInInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK ItemMovedInInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK ItemSound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Sounds                                SoundType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::SGK_ItemSound(class FName ItemId, E_Sounds SoundType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK ItemSound");

	Params::BP_MasterInventory_C_SGK_ItemSound Parms{};

	Parms.ItemId = ItemId;
	Parms.SoundType = SoundType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK LoadWeaponAttachments
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::SGK_LoadWeaponAttachments(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK LoadWeaponAttachments");

	Params::BP_MasterInventory_C_SGK_LoadWeaponAttachments Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK RemoveAdditionalChecks
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_MasterInventory_C::SGK_RemoveAdditionalChecks(const struct FS_InvSlot& InvSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK RemoveAdditionalChecks");

	Params::BP_MasterInventory_C_SGK_RemoveAdditionalChecks Parms{};

	Parms.InvSlot = std::move(InvSlot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK RemoveAttachment
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AttachmentType                        Attachment                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::SGK_RemoveAttachment(E_AttachmentType Attachment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK RemoveAttachment");

	Params::BP_MasterInventory_C_SGK_RemoveAttachment Parms{};

	Parms.Attachment = Attachment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK SelfItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       SelfItem                                               (Parm, OutParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_MasterInventory_C::SGK_SelfItem(struct FS_InvItem* SelfItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK SelfItem");

	Params::BP_MasterInventory_C_SGK_SelfItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SelfItem != nullptr)
		*SelfItem = std::move(Parms.SelfItem);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK ShowAttachments
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::SGK_ShowAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK ShowAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK SpawnOverflowItems
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       InvItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_MasterInventory_C::SGK_SpawnOverflowItems(const struct FS_InvItem& InvItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK SpawnOverflowItems");

	Params::BP_MasterInventory_C_SGK_SpawnOverflowItems Parms{};

	Parms.InvItem = std::move(InvItem);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK ToggleComponent
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::SGK_ToggleComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK ToggleComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK UpdateAllAttachments
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::SGK_UpdateAllAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK UpdateAllAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK UpdateCharacterYaw
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::SGK_UpdateCharacterYaw(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK UpdateCharacterYaw");

	Params::BP_MasterInventory_C_SGK_UpdateCharacterYaw Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGK UpdateSpecialSlot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_MasterInventory_C::SGK_UpdateSpecialSlot(const struct FS_InvSlot& InvSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGK UpdateSpecialSlot");

	Params::BP_MasterInventory_C_SGK_UpdateSpecialSlot Parms{};

	Parms.InvSlot = std::move(InvSlot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SGKSave
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                Save                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::SGKSave(class UBP_SGKSaveGame_C* Save)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SGKSave");

	Params::BP_MasterInventory_C_SGKSave Parms{};

	Parms.Save = Save;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SpawnDestructionBag
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::SpawnDestructionBag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SpawnDestructionBag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SpawnItemAtLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvItem                       InvItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_MasterInventory_C::SpawnItemAtLocation(const struct FTransform& Transform, const struct FS_InvItem& InvItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SpawnItemAtLocation");

	Params::BP_MasterInventory_C_SpawnItemAtLocation Parms{};

	Parms.Transform = std::move(Transform);
	Parms.InvItem = std::move(InvItem);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.SpawnItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::SpawnItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "SpawnItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.StartItemEquipment
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::StartItemEquipment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "StartItemEquipment");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.TotalItemAmount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       InvItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   TotalAmount                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::TotalItemAmount(const struct FS_InvItem& InvItem, int32* TotalAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "TotalItemAmount");

	Params::BP_MasterInventory_C_TotalItemAmount Parms{};

	Parms.InvItem = std::move(InvItem);

	UObject::ProcessEvent(Func, &Parms);

	if (TotalAmount != nullptr)
		*TotalAmount = Parms.TotalAmount;
}


// Function BP_MasterInventory.BP_MasterInventory_C.UpdateAllPlayersRootItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FullUpdate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::UpdateAllPlayersRootItems(bool FullUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "UpdateAllPlayersRootItems");

	Params::BP_MasterInventory_C_UpdateAllPlayersRootItems Parms{};

	Parms.FullUpdate = FullUpdate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.UpdateCraftingListing
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_CraftingQueue                 CraftingListing                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AdditionalAmount                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CraftingQueue                 Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::UpdateCraftingListing(const struct FS_CraftingQueue& CraftingListing, int32 AdditionalAmount, struct FS_CraftingQueue* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "UpdateCraftingListing");

	Params::BP_MasterInventory_C_UpdateCraftingListing Parms{};

	Parms.CraftingListing = std::move(CraftingListing);
	Parms.AdditionalAmount = AdditionalAmount;

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function BP_MasterInventory.BP_MasterInventory_C.UpdateCraftingTimes
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::UpdateCraftingTimes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "UpdateCraftingTimes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.UpdateInvSlots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_InvSlot>               InvSlots                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FS_InvItem                       InvItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// TArray<struct FS_InvSlot>               UpdatedSlots                                           (Parm, OutParm, ContainsInstancedReference)

void UBP_MasterInventory_C::UpdateInvSlots(TArray<struct FS_InvSlot>& InvSlots, const struct FS_InvItem& InvItem, TArray<struct FS_InvSlot>* UpdatedSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "UpdateInvSlots");

	Params::BP_MasterInventory_C_UpdateInvSlots Parms{};

	Parms.InvSlots = std::move(InvSlots);
	Parms.InvItem = std::move(InvItem);

	UObject::ProcessEvent(Func, &Parms);

	InvSlots = std::move(Parms.InvSlots);

	if (UpdatedSlots != nullptr)
		*UpdatedSlots = std::move(Parms.UpdatedSlots);
}


// Function BP_MasterInventory.BP_MasterInventory_C.UpdateItemInventory
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::UpdateItemInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "UpdateItemInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.UpdateParentInventory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MasterInventory_C*            Param_Inventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::UpdateParentInventory(class UBP_MasterInventory_C* Param_Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "UpdateParentInventory");

	Params::BP_MasterInventory_C_UpdateParentInventory Parms{};

	Parms.Param_Inventory = Param_Inventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.UpdateSlotOnUsingPlayers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Width                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Was_Rotated                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::UpdateSlotOnUsingPlayers(const struct FS_InvSlot& InvSlot, int32 Height, int32 Width, bool Was_Rotated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "UpdateSlotOnUsingPlayers");

	Params::BP_MasterInventory_C_UpdateSlotOnUsingPlayers Parms{};

	Parms.InvSlot = std::move(InvSlot);
	Parms.Height = Height;
	Parms.Width = Width;
	Parms.Was_Rotated = Was_Rotated;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterInventory.BP_MasterInventory_C.UpdateWeightUI__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_MasterInventory_C::UpdateWeightUI__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "UpdateWeightUI__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterInventory.BP_MasterInventory_C.WeightCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseAllWeight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CheckParent                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_MasterInventory_C*            IgnoreParent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ExceedsMaxWeight                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MasterInventory_C::WeightCheck(const struct FS_InvItem& Item, int32 Amount, bool UseAllWeight, bool CheckParent, class UBP_MasterInventory_C* IgnoreParent, bool* ExceedsMaxWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterInventory_C", "WeightCheck");

	Params::BP_MasterInventory_C_WeightCheck Parms{};

	Parms.Item = std::move(Item);
	Parms.Amount = Amount;
	Parms.UseAllWeight = UseAllWeight;
	Parms.CheckParent = CheckParent;
	Parms.IgnoreParent = IgnoreParent;

	UObject::ProcessEvent(Func, &Parms);

	if (ExceedsMaxWeight != nullptr)
		*ExceedsMaxWeight = Parms.ExceedsMaxWeight;
}

}

