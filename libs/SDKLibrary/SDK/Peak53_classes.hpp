#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Peak53

#include "Basic.hpp"

#include "Peak53_structs.hpp"
#include "ALSV4_CPP_classes.hpp"
#include "Engine_classes.hpp"
#include "UMG_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class Peak53.PKGameState
// 0x0128 (0x0408 - 0x02E0)
class APKGameState : public AGameStateBase
{
public:
	struct FPKChatMessageArray                    ChatMessages;                                      // 0x02E0(0x0118)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnUpdateChatMessages;                              // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

public:
	void OnRep_ChatMessages();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PKGameState">();
	}
	static class APKGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<APKGameState>();
	}
};
static_assert(alignof(APKGameState) == 0x000008, "Wrong alignment on APKGameState");
static_assert(sizeof(APKGameState) == 0x000408, "Wrong size on APKGameState");
static_assert(offsetof(APKGameState, ChatMessages) == 0x0002E0, "Member 'APKGameState::ChatMessages' has a wrong offset!");
static_assert(offsetof(APKGameState, OnUpdateChatMessages) == 0x0003F8, "Member 'APKGameState::OnUpdateChatMessages' has a wrong offset!");

// Class Peak53.PKHoldable
// 0x0100 (0x0390 - 0x0290)
class APKHoldable : public AActor
{
public:
	struct FPKAnimationSetData                    AnimationSet;                                      // 0x0290(0x00F8)(Edit, EditConst, NativeAccessSpecifierPublic)
	bool                                          bLoadedAssets;                                     // 0x0388(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F3F[0x7];                                     // 0x0389(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetAnimationSet(struct FPKAnimationSetData* Animations);
	bool GetEquipMontage(class UAnimMontage** Montage);
	bool GetReloadMontage(class UAnimMontage** Montage);
	bool GetUnEquipMontage(class UAnimMontage** Montage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PKHoldable">();
	}
	static class APKHoldable* GetDefaultObj()
	{
		return GetDefaultObjImpl<APKHoldable>();
	}
};
static_assert(alignof(APKHoldable) == 0x000008, "Wrong alignment on APKHoldable");
static_assert(sizeof(APKHoldable) == 0x000390, "Wrong size on APKHoldable");
static_assert(offsetof(APKHoldable, AnimationSet) == 0x000290, "Member 'APKHoldable::AnimationSet' has a wrong offset!");
static_assert(offsetof(APKHoldable, bLoadedAssets) == 0x000388, "Member 'APKHoldable::bLoadedAssets' has a wrong offset!");

// Class Peak53.PKAnimationSet
// 0x0148 (0x0178 - 0x0030)
class UPKAnimationSet final : public UPrimaryDataAsset
{
public:
	TSet<TSoftClassPtr<class UClass>>             Holdables;                                         // 0x0030(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FPKAnimationSetData                    UpperBodyAnimations;                               // 0x0080(0x00F8)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PKAnimationSet">();
	}
	static class UPKAnimationSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPKAnimationSet>();
	}
};
static_assert(alignof(UPKAnimationSet) == 0x000008, "Wrong alignment on UPKAnimationSet");
static_assert(sizeof(UPKAnimationSet) == 0x000178, "Wrong size on UPKAnimationSet");
static_assert(offsetof(UPKAnimationSet, Holdables) == 0x000030, "Member 'UPKAnimationSet::Holdables' has a wrong offset!");
static_assert(offsetof(UPKAnimationSet, UpperBodyAnimations) == 0x000080, "Member 'UPKAnimationSet::UpperBodyAnimations' has a wrong offset!");

// Class Peak53.PKAssetManager
// 0x0000 (0x04E8 - 0x04E8)
class UPKAssetManager final : public UAssetManager
{
public:
	static void GetHoldableAnimations(const class FName& HoldableClassName, struct FPKAnimationSetData* OutAnimations);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PKAssetManager">();
	}
	static class UPKAssetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPKAssetManager>();
	}
};
static_assert(alignof(UPKAssetManager) == 0x000008, "Wrong alignment on UPKAssetManager");
static_assert(sizeof(UPKAssetManager) == 0x0004E8, "Wrong size on UPKAssetManager");

// Class Peak53.PKCharacter
// 0x0030 (0x0900 - 0x08D0)
class APKCharacter : public AALSBaseCharacter
{
public:
	bool                                          bIsTeam1;                                          // 0x08D0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F43[0x2F];                                    // 0x08D1(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddGameplayTag(const struct FGameplayTag& Tag);
	void OnPossessed_Client();
	void RemoveGameplayTag(const struct FGameplayTag& Tag);

	bool CanDance() const;
	const struct FGameplayTagContainer GetGameplayTags() const;
	bool HasGameplayTagExact(const struct FGameplayTag& Tag) const;
	bool IsAlive() const;
	bool WantsWeaponHot() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PKCharacter">();
	}
	static class APKCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<APKCharacter>();
	}
};
static_assert(alignof(APKCharacter) == 0x000010, "Wrong alignment on APKCharacter");
static_assert(sizeof(APKCharacter) == 0x000900, "Wrong size on APKCharacter");
static_assert(offsetof(APKCharacter, bIsTeam1) == 0x0008D0, "Member 'APKCharacter::bIsTeam1' has a wrong offset!");

// Class Peak53.PKCharacterMovementComponent
// 0x0000 (0x0F20 - 0x0F20)
class UPKCharacterMovementComponent final : public UALSCharacterMovementComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PKCharacterMovementComponent">();
	}
	static class UPKCharacterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPKCharacterMovementComponent>();
	}
};
static_assert(alignof(UPKCharacterMovementComponent) == 0x000010, "Wrong alignment on UPKCharacterMovementComponent");
static_assert(sizeof(UPKCharacterMovementComponent) == 0x000F20, "Wrong size on UPKCharacterMovementComponent");

// Class Peak53.PKChatWidget
// 0x0008 (0x0280 - 0x0278)
class UPKChatWidget : public UUserWidget
{
public:
	bool                                          bIsTeam1;                                          // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTeamChat;                                       // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F45[0x6];                                     // 0x027A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Init();
	void OnUpdateMessages(const struct FPKChatMessageArray& Messages);
	void PrintMessage(const struct FPKChatMessage& Message);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PKChatWidget">();
	}
	static class UPKChatWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPKChatWidget>();
	}
};
static_assert(alignof(UPKChatWidget) == 0x000008, "Wrong alignment on UPKChatWidget");
static_assert(sizeof(UPKChatWidget) == 0x000280, "Wrong size on UPKChatWidget");
static_assert(offsetof(UPKChatWidget, bIsTeam1) == 0x000278, "Member 'UPKChatWidget::bIsTeam1' has a wrong offset!");
static_assert(offsetof(UPKChatWidget, bIsTeamChat) == 0x000279, "Member 'UPKChatWidget::bIsTeamChat' has a wrong offset!");

// Class Peak53.PKDeveloperSettings
// 0x0010 (0x0048 - 0x0038)
class UPKDeveloperSettings final : public UDeveloperSettings
{
public:
	struct FPKWeaponHotSettings                   WeaponHotSettings;                                 // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F46[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PKDeveloperSettings">();
	}
	static class UPKDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPKDeveloperSettings>();
	}
};
static_assert(alignof(UPKDeveloperSettings) == 0x000008, "Wrong alignment on UPKDeveloperSettings");
static_assert(sizeof(UPKDeveloperSettings) == 0x000048, "Wrong size on UPKDeveloperSettings");
static_assert(offsetof(UPKDeveloperSettings, WeaponHotSettings) == 0x000038, "Member 'UPKDeveloperSettings::WeaponHotSettings' has a wrong offset!");

// Class Peak53.PKLocalDeveloperSettings
// 0x0000 (0x0038 - 0x0038)
class UPKLocalDeveloperSettings final : public UDeveloperSettings
{
public:
	static bool ShouldPlayIntro();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PKLocalDeveloperSettings">();
	}
	static class UPKLocalDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPKLocalDeveloperSettings>();
	}
};
static_assert(alignof(UPKLocalDeveloperSettings) == 0x000008, "Wrong alignment on UPKLocalDeveloperSettings");
static_assert(sizeof(UPKLocalDeveloperSettings) == 0x000038, "Wrong size on UPKLocalDeveloperSettings");

// Class Peak53.PKMantleComponent
// 0x0000 (0x02E0 - 0x02E0)
class UPKMantleComponent final : public UALSMantleComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PKMantleComponent">();
	}
	static class UPKMantleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPKMantleComponent>();
	}
};
static_assert(alignof(UPKMantleComponent) == 0x000010, "Wrong alignment on UPKMantleComponent");
static_assert(sizeof(UPKMantleComponent) == 0x0002E0, "Wrong size on UPKMantleComponent");

// Class Peak53.PKPlayerController
// 0x0060 (0x08B0 - 0x0850)
class APKPlayerController : public APlayerController
{
public:
	FMulticastInlineDelegateProperty_             OnUpdateChatMessages;                              // 0x0850(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMap<class FString, struct FPKMapIntroSettings> MapIntros;                                         // 0x0860(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void GetAllMessages(struct FPKChatMessageArray* OutMessages);
	void GetMapIntroSettings(const class FString& LevelName, bool* bFound, struct FPKMapIntroSettings* OutSettings);
	void ListenForMessages();
	void OnUpdateChat(const struct FPKChatMessageArray& Messages);
	void SendChatMessage(const struct FPKChatMessage& Message);
	void SendChatMessage_Server(const struct FPKChatMessage& Message);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PKPlayerController">();
	}
	static class APKPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<APKPlayerController>();
	}
};
static_assert(alignof(APKPlayerController) == 0x000008, "Wrong alignment on APKPlayerController");
static_assert(sizeof(APKPlayerController) == 0x0008B0, "Wrong size on APKPlayerController");
static_assert(offsetof(APKPlayerController, OnUpdateChatMessages) == 0x000850, "Member 'APKPlayerController::OnUpdateChatMessages' has a wrong offset!");
static_assert(offsetof(APKPlayerController, MapIntros) == 0x000860, "Member 'APKPlayerController::MapIntros' has a wrong offset!");

// Class Peak53.PKProfilingWidget
// 0x0008 (0x0280 - 0x0278)
class UPKProfilingWidget final : public UUserWidget
{
public:
	bool                                          bTraceGPU;                                         // 0x0278(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTraceCPU;                                         // 0x0279(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTraceLoadTime;                                    // 0x027A(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F48[0x5];                                     // 0x027B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LoadProfilingConfig();
	void OpenTraceDirectory();
	void ResetProfilingConfig();
	void SaveProfilingConfig();
	void StartTrace();
	void StopTrace();

	class FString GetTraceCommand() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PKProfilingWidget">();
	}
	static class UPKProfilingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPKProfilingWidget>();
	}
};
static_assert(alignof(UPKProfilingWidget) == 0x000008, "Wrong alignment on UPKProfilingWidget");
static_assert(sizeof(UPKProfilingWidget) == 0x000280, "Wrong size on UPKProfilingWidget");
static_assert(offsetof(UPKProfilingWidget, bTraceGPU) == 0x000278, "Member 'UPKProfilingWidget::bTraceGPU' has a wrong offset!");
static_assert(offsetof(UPKProfilingWidget, bTraceCPU) == 0x000279, "Member 'UPKProfilingWidget::bTraceCPU' has a wrong offset!");
static_assert(offsetof(UPKProfilingWidget, bTraceLoadTime) == 0x00027A, "Member 'UPKProfilingWidget::bTraceLoadTime' has a wrong offset!");

// Class Peak53.PeakThanksUnreal
// 0x0008 (0x0298 - 0x0290)
class APeakThanksUnreal final : public AActor
{
public:
	int32                                         NumVerts;                                          // 0x0290(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F49[0x4];                                     // 0x0294(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ThanksUnreal();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PeakThanksUnreal">();
	}
	static class APeakThanksUnreal* GetDefaultObj()
	{
		return GetDefaultObjImpl<APeakThanksUnreal>();
	}
};
static_assert(alignof(APeakThanksUnreal) == 0x000008, "Wrong alignment on APeakThanksUnreal");
static_assert(sizeof(APeakThanksUnreal) == 0x000298, "Wrong size on APeakThanksUnreal");
static_assert(offsetof(APeakThanksUnreal, NumVerts) == 0x000290, "Member 'APeakThanksUnreal::NumVerts' has a wrong offset!");

// Class Peak53.PeakWeaponHotSubsystem
// 0x00F0 (0x0130 - 0x0040)
class UPeakWeaponHotSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_2F4A[0xF0];                                    // 0x0040(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPlayer(bool bIsTeam1, class APKCharacter* Player);
	void RemovePlayer(bool bIsTeam1, const class APKCharacter* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PeakWeaponHotSubsystem">();
	}
	static class UPeakWeaponHotSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPeakWeaponHotSubsystem>();
	}
};
static_assert(alignof(UPeakWeaponHotSubsystem) == 0x000008, "Wrong alignment on UPeakWeaponHotSubsystem");
static_assert(sizeof(UPeakWeaponHotSubsystem) == 0x000130, "Wrong size on UPeakWeaponHotSubsystem");

}

