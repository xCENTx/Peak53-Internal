#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AdvancedSightsAndScopes

#include "Basic.hpp"

#include "AdvancedSightsAndScopes_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class AdvancedSightsAndScopes.SKG_SceneCaptureComponent2D
// 0x0130 (0x0C80 - 0x0B50)
class USKG_SceneCaptureComponent2D final : public USceneCaptureComponent2D
{
public:
	struct FSKGSightOptimization                  ScopeOptimization;                                 // 0x0B50(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSKGSightMagnification                 MagnificationSettings;                             // 0x0B88(0x0038)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSKGReticleSettings                    ReticleSettings;                                   // 0x0BC0(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	ESKGScopeAdjustment                           TurretAdjustmentType;                              // 0x0BD8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1058[0x3];                                     // 0x0BD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRenderTargetSize                      RenderTargetSize;                                  // 0x0BDC(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   RenderTargetMaterialVarName;                       // 0x0BE4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ScopeComponentTag;                                 // 0x0BEC(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1059[0x30];                                    // 0x0BF4(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MilliradianAdjustment;                             // 0x0C24(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MOAAdjustment;                                     // 0x0C28(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_105A[0xC];                                     // 0x0C2C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnElevationChanged;                                // 0x0C38(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnWindageChanged;                                  // 0x0C48(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_105B[0x28];                                    // 0x0C58(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CycleReticle();
	struct FVector2D PointOfImpactDown(uint8 Clicks);
	struct FVector2D PointOfImpactLeft(uint8 Clicks);
	struct FVector2D PointOfImpactRight(uint8 Clicks);
	struct FVector2D PointOfImpactUp(uint8 Clicks);
	void ReturnToZeroElevation();
	void ReturnToZeroWindage();
	void SetNewZeroElevation();
	void SetNewZeroWindage();
	void SetOwningMesh(class UMeshComponent* Mesh);
	void SetReticle(uint8 Param_Index);
	void StartCapture();
	void StopCapture();
	void ZoomIn();
	void ZoomOut();

	float GetMagnification() const;
	float GetMagnificationSensitivity() const;
	struct FSKGSightZero GetSightZero() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SKG_SceneCaptureComponent2D">();
	}
	static class USKG_SceneCaptureComponent2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<USKG_SceneCaptureComponent2D>();
	}
};
static_assert(alignof(USKG_SceneCaptureComponent2D) == 0x000010, "Wrong alignment on USKG_SceneCaptureComponent2D");
static_assert(sizeof(USKG_SceneCaptureComponent2D) == 0x000C80, "Wrong size on USKG_SceneCaptureComponent2D");
static_assert(offsetof(USKG_SceneCaptureComponent2D, ScopeOptimization) == 0x000B50, "Member 'USKG_SceneCaptureComponent2D::ScopeOptimization' has a wrong offset!");
static_assert(offsetof(USKG_SceneCaptureComponent2D, MagnificationSettings) == 0x000B88, "Member 'USKG_SceneCaptureComponent2D::MagnificationSettings' has a wrong offset!");
static_assert(offsetof(USKG_SceneCaptureComponent2D, ReticleSettings) == 0x000BC0, "Member 'USKG_SceneCaptureComponent2D::ReticleSettings' has a wrong offset!");
static_assert(offsetof(USKG_SceneCaptureComponent2D, TurretAdjustmentType) == 0x000BD8, "Member 'USKG_SceneCaptureComponent2D::TurretAdjustmentType' has a wrong offset!");
static_assert(offsetof(USKG_SceneCaptureComponent2D, RenderTargetSize) == 0x000BDC, "Member 'USKG_SceneCaptureComponent2D::RenderTargetSize' has a wrong offset!");
static_assert(offsetof(USKG_SceneCaptureComponent2D, RenderTargetMaterialVarName) == 0x000BE4, "Member 'USKG_SceneCaptureComponent2D::RenderTargetMaterialVarName' has a wrong offset!");
static_assert(offsetof(USKG_SceneCaptureComponent2D, ScopeComponentTag) == 0x000BEC, "Member 'USKG_SceneCaptureComponent2D::ScopeComponentTag' has a wrong offset!");
static_assert(offsetof(USKG_SceneCaptureComponent2D, MilliradianAdjustment) == 0x000C24, "Member 'USKG_SceneCaptureComponent2D::MilliradianAdjustment' has a wrong offset!");
static_assert(offsetof(USKG_SceneCaptureComponent2D, MOAAdjustment) == 0x000C28, "Member 'USKG_SceneCaptureComponent2D::MOAAdjustment' has a wrong offset!");
static_assert(offsetof(USKG_SceneCaptureComponent2D, OnElevationChanged) == 0x000C38, "Member 'USKG_SceneCaptureComponent2D::OnElevationChanged' has a wrong offset!");
static_assert(offsetof(USKG_SceneCaptureComponent2D, OnWindageChanged) == 0x000C48, "Member 'USKG_SceneCaptureComponent2D::OnWindageChanged' has a wrong offset!");

}

