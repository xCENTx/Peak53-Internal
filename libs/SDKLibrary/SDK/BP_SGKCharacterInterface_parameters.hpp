#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SGKCharacterInterface

#include "Basic.hpp"

#include "Peak53Teams_structs.hpp"
#include "E_CameraType_structs.hpp"
#include "E_Sockets_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_BodyMesh_structs.hpp"


namespace SDK::Params
{

// Function BP_SGKCharacterInterface.BP_SGKCharacterInterface_C.Peak_GetTeam
// 0x0001 (0x0001 - 0x0000)
struct BP_SGKCharacterInterface_C_Peak_GetTeam final
{
public:
	EPeak53Teams                                  CharacterTeam;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKCharacterInterface_C_Peak_GetTeam) == 0x000001, "Wrong alignment on BP_SGKCharacterInterface_C_Peak_GetTeam");
static_assert(sizeof(BP_SGKCharacterInterface_C_Peak_GetTeam) == 0x000001, "Wrong size on BP_SGKCharacterInterface_C_Peak_GetTeam");
static_assert(offsetof(BP_SGKCharacterInterface_C_Peak_GetTeam, CharacterTeam) == 0x000000, "Member 'BP_SGKCharacterInterface_C_Peak_GetTeam::CharacterTeam' has a wrong offset!");

// Function BP_SGKCharacterInterface.BP_SGKCharacterInterface_C.SGK CharacterCamera
// 0x0018 (0x0018 - 0x0000)
struct BP_SGKCharacterInterface_C_SGK_CharacterCamera final
{
public:
	E_CameraType                                  CameraType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36B1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       CurrentCamera;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    CurrentSpringArm;                                  // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKCharacterInterface_C_SGK_CharacterCamera) == 0x000008, "Wrong alignment on BP_SGKCharacterInterface_C_SGK_CharacterCamera");
static_assert(sizeof(BP_SGKCharacterInterface_C_SGK_CharacterCamera) == 0x000018, "Wrong size on BP_SGKCharacterInterface_C_SGK_CharacterCamera");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_CharacterCamera, CameraType) == 0x000000, "Member 'BP_SGKCharacterInterface_C_SGK_CharacterCamera::CameraType' has a wrong offset!");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_CharacterCamera, CurrentCamera) == 0x000008, "Member 'BP_SGKCharacterInterface_C_SGK_CharacterCamera::CurrentCamera' has a wrong offset!");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_CharacterCamera, CurrentSpringArm) == 0x000010, "Member 'BP_SGKCharacterInterface_C_SGK_CharacterCamera::CurrentSpringArm' has a wrong offset!");

// Function BP_SGKCharacterInterface.BP_SGKCharacterInterface_C.SGK CharacterSockets
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKCharacterInterface_C_SGK_CharacterSockets final
{
public:
	E_Sockets                                     Sockets;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36B2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Component;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKCharacterInterface_C_SGK_CharacterSockets) == 0x000008, "Wrong alignment on BP_SGKCharacterInterface_C_SGK_CharacterSockets");
static_assert(sizeof(BP_SGKCharacterInterface_C_SGK_CharacterSockets) == 0x000010, "Wrong size on BP_SGKCharacterInterface_C_SGK_CharacterSockets");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_CharacterSockets, Sockets) == 0x000000, "Member 'BP_SGKCharacterInterface_C_SGK_CharacterSockets::Sockets' has a wrong offset!");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_CharacterSockets, Component) == 0x000008, "Member 'BP_SGKCharacterInterface_C_SGK_CharacterSockets::Component' has a wrong offset!");

// Function BP_SGKCharacterInterface.BP_SGKCharacterInterface_C.SGK GetMesh
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKCharacterInterface_C_SGK_GetMesh final
{
public:
	E_BodyMesh                                    MeshType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36B3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Mesh;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKCharacterInterface_C_SGK_GetMesh) == 0x000008, "Wrong alignment on BP_SGKCharacterInterface_C_SGK_GetMesh");
static_assert(sizeof(BP_SGKCharacterInterface_C_SGK_GetMesh) == 0x000010, "Wrong size on BP_SGKCharacterInterface_C_SGK_GetMesh");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_GetMesh, MeshType) == 0x000000, "Member 'BP_SGKCharacterInterface_C_SGK_GetMesh::MeshType' has a wrong offset!");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_GetMesh, Mesh) == 0x000008, "Member 'BP_SGKCharacterInterface_C_SGK_GetMesh::Mesh' has a wrong offset!");

// Function BP_SGKCharacterInterface.BP_SGKCharacterInterface_C.SGK HideComponents
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKCharacterInterface_C_SGK_HideComponents final
{
public:
	TArray<class UPrimitiveComponent*>            Components;                                        // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_SGKCharacterInterface_C_SGK_HideComponents) == 0x000008, "Wrong alignment on BP_SGKCharacterInterface_C_SGK_HideComponents");
static_assert(sizeof(BP_SGKCharacterInterface_C_SGK_HideComponents) == 0x000010, "Wrong size on BP_SGKCharacterInterface_C_SGK_HideComponents");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_HideComponents, Components) == 0x000000, "Member 'BP_SGKCharacterInterface_C_SGK_HideComponents::Components' has a wrong offset!");

// Function BP_SGKCharacterInterface.BP_SGKCharacterInterface_C.SGK LeanLeft
// 0x0018 (0x0018 - 0x0000)
struct BP_SGKCharacterInterface_C_SGK_LeanLeft final
{
public:
	bool                                          Lean;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36B4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CameraLean;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThirdPersonCameraOffset;                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKCharacterInterface_C_SGK_LeanLeft) == 0x000008, "Wrong alignment on BP_SGKCharacterInterface_C_SGK_LeanLeft");
static_assert(sizeof(BP_SGKCharacterInterface_C_SGK_LeanLeft) == 0x000018, "Wrong size on BP_SGKCharacterInterface_C_SGK_LeanLeft");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_LeanLeft, Lean) == 0x000000, "Member 'BP_SGKCharacterInterface_C_SGK_LeanLeft::Lean' has a wrong offset!");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_LeanLeft, CameraLean) == 0x000008, "Member 'BP_SGKCharacterInterface_C_SGK_LeanLeft::CameraLean' has a wrong offset!");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_LeanLeft, ThirdPersonCameraOffset) == 0x000010, "Member 'BP_SGKCharacterInterface_C_SGK_LeanLeft::ThirdPersonCameraOffset' has a wrong offset!");

// Function BP_SGKCharacterInterface.BP_SGKCharacterInterface_C.SGK LeanRight
// 0x0018 (0x0018 - 0x0000)
struct BP_SGKCharacterInterface_C_SGK_LeanRight final
{
public:
	bool                                          Lean;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36B5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CameraLean;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThirdPersonCameraOffset;                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKCharacterInterface_C_SGK_LeanRight) == 0x000008, "Wrong alignment on BP_SGKCharacterInterface_C_SGK_LeanRight");
static_assert(sizeof(BP_SGKCharacterInterface_C_SGK_LeanRight) == 0x000018, "Wrong size on BP_SGKCharacterInterface_C_SGK_LeanRight");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_LeanRight, Lean) == 0x000000, "Member 'BP_SGKCharacterInterface_C_SGK_LeanRight::Lean' has a wrong offset!");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_LeanRight, CameraLean) == 0x000008, "Member 'BP_SGKCharacterInterface_C_SGK_LeanRight::CameraLean' has a wrong offset!");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_LeanRight, ThirdPersonCameraOffset) == 0x000010, "Member 'BP_SGKCharacterInterface_C_SGK_LeanRight::ThirdPersonCameraOffset' has a wrong offset!");

// Function BP_SGKCharacterInterface.BP_SGKCharacterInterface_C.SGK LeanValues
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKCharacterInterface_C_SGK_LeanValues final
{
public:
	double                                        Lean_Alpha;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetCamera;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKCharacterInterface_C_SGK_LeanValues) == 0x000008, "Wrong alignment on BP_SGKCharacterInterface_C_SGK_LeanValues");
static_assert(sizeof(BP_SGKCharacterInterface_C_SGK_LeanValues) == 0x000010, "Wrong size on BP_SGKCharacterInterface_C_SGK_LeanValues");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_LeanValues, Lean_Alpha) == 0x000000, "Member 'BP_SGKCharacterInterface_C_SGK_LeanValues::Lean_Alpha' has a wrong offset!");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_LeanValues, TargetCamera) == 0x000008, "Member 'BP_SGKCharacterInterface_C_SGK_LeanValues::TargetCamera' has a wrong offset!");

// Function BP_SGKCharacterInterface.BP_SGKCharacterInterface_C.SGK LookAtRotation
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKCharacterInterface_C_SGK_LookAtRotation final
{
public:
	struct FVector2D                              LookAtRotation;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKCharacterInterface_C_SGK_LookAtRotation) == 0x000008, "Wrong alignment on BP_SGKCharacterInterface_C_SGK_LookAtRotation");
static_assert(sizeof(BP_SGKCharacterInterface_C_SGK_LookAtRotation) == 0x000010, "Wrong size on BP_SGKCharacterInterface_C_SGK_LookAtRotation");
static_assert(offsetof(BP_SGKCharacterInterface_C_SGK_LookAtRotation, LookAtRotation) == 0x000000, "Member 'BP_SGKCharacterInterface_C_SGK_LookAtRotation::LookAtRotation' has a wrong offset!");

}

