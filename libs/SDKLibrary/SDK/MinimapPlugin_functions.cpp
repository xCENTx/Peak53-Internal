#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinimapPlugin

#include "Basic.hpp"

#include "MinimapPlugin_classes.hpp"
#include "MinimapPlugin_parameters.hpp"


namespace SDK
{

// Function MinimapPlugin.MapRevealerComponent.SetRevealDropOffDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewRevealDropOffDistance                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRevealerComponent::SetRevealDropOffDistance(const float NewRevealDropOffDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRevealerComponent", "SetRevealDropOffDistance");

	Params::MapRevealerComponent_SetRevealDropOffDistance Parms{};

	Parms.NewRevealDropOffDistance = NewRevealDropOffDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRevealerComponent.SetRevealExtent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewRevealExtentX                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewRevealExtentY                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRevealerComponent::SetRevealExtent(const float NewRevealExtentX, const float NewRevealExtentY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRevealerComponent", "SetRevealExtent");

	Params::MapRevealerComponent_SetRevealExtent Parms{};

	Parms.NewRevealExtentX = NewRevealExtentX;
	Parms.NewRevealExtentY = NewRevealExtentY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRevealerComponent.SetRevealMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMapFogRevealMode                       NewRevealMode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRevealerComponent::SetRevealMode(const EMapFogRevealMode NewRevealMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRevealerComponent", "SetRevealMode");

	Params::MapRevealerComponent_SetRevealMode Parms{};

	Parms.NewRevealMode = NewRevealMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRevealerComponent.GetRevealDropOffDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMapRevealerComponent::GetRevealDropOffDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRevealerComponent", "GetRevealDropOffDistance");

	Params::MapRevealerComponent_GetRevealDropOffDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapRevealerComponent.GetRevealExtent
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   RevealExtentX                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RevealExtentY                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRevealerComponent::GetRevealExtent(float* RevealExtentX, float* RevealExtentY) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRevealerComponent", "GetRevealExtent");

	Params::MapRevealerComponent_GetRevealExtent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RevealExtentX != nullptr)
		*RevealExtentX = Parms.RevealExtentX;

	if (RevealExtentY != nullptr)
		*RevealExtentY = Parms.RevealExtentY;
}


// Function MinimapPlugin.MapRevealerComponent.GetRevealMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMapFogRevealMode                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMapFogRevealMode UMapRevealerComponent::GetRevealMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRevealerComponent", "GetRevealMode");

	Params::MapRevealerComponent_GetRevealMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapAreaBase.GetMapViewCornerUVs
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMapViewComponent*                MapView                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector2D>                CornerUVs                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMapAreaBase::GetMapViewCornerUVs(class UMapViewComponent* MapView, TArray<struct FVector2D>* CornerUVs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapAreaBase", "GetMapViewCornerUVs");

	Params::MapAreaBase_GetMapViewCornerUVs Parms{};

	Parms.MapView = MapView;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CornerUVs != nullptr)
		*CornerUVs = std::move(Parms.CornerUVs);

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapAreaBase.GetAreaBounds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBoxComponent*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBoxComponent* AMapAreaBase::GetAreaBounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapAreaBase", "GetAreaBounds");

	Params::MapAreaBase_GetAreaBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapAreaBase.GetLevelAtHeight
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   WorldZ                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMapAreaBase::GetLevelAtHeight(const float WorldZ) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapAreaBase", "GetLevelAtHeight");

	Params::MapAreaBase_GetLevelAtHeight Parms{};

	Parms.WorldZ = WorldZ;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapAreaBase.GetMapAspectRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMapAreaBase::GetMapAspectRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapAreaBase", "GetMapAspectRatio");

	Params::MapAreaBase_GetMapAspectRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapAreaBase.GetMapView
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMapViewComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMapViewComponent* AMapAreaBase::GetMapView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapAreaBase", "GetMapView");

	Params::MapAreaBase_GetMapView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapBackground.GetBackgroundMaterialInstanceForCanvas
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMapRendererComponent*            Renderer                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* AMapBackground::GetBackgroundMaterialInstanceForCanvas(class UMapRendererComponent* Renderer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "GetBackgroundMaterialInstanceForCanvas");

	Params::MapBackground_GetBackgroundMaterialInstanceForCanvas Parms{};

	Parms.Renderer = Renderer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapBackground.RerenderBackground
// (Final, Native, Public, BlueprintCallable)

void AMapBackground::RerenderBackground()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "RerenderBackground");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapBackground.SetBackgroundMaterialForCanvas
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMapBackground::SetBackgroundMaterialForCanvas(class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "SetBackgroundMaterialForCanvas");

	Params::MapBackground_SetBackgroundMaterialForCanvas Parms{};

	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapBackground.SetBackgroundMaterialForUMG
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMapBackground::SetBackgroundMaterialForUMG(class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "SetBackgroundMaterialForUMG");

	Params::MapBackground_SetBackgroundMaterialForUMG Parms{};

	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapBackground.SetBackgroundOverlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           NewBackgroundOverlay                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMapBackground::SetBackgroundOverlay(const int32 Level, class UTextureRenderTarget2D* NewBackgroundOverlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "SetBackgroundOverlay");

	Params::MapBackground_SetBackgroundOverlay Parms{};

	Parms.Level = Level;
	Parms.NewBackgroundOverlay = NewBackgroundOverlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapBackground.SetBackgroundPriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewBackgroundPriority                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMapBackground::SetBackgroundPriority(const int32 NewBackgroundPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "SetBackgroundPriority");

	Params::MapBackground_SetBackgroundPriority Parms{};

	Parms.NewBackgroundPriority = NewBackgroundPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapBackground.SetBackgroundTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       NewBackgroundTexture                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMapBackground::SetBackgroundTexture(const int32 Level, class UTexture2D* NewBackgroundTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "SetBackgroundTexture");

	Params::MapBackground_SetBackgroundTexture Parms{};

	Parms.Level = Level;
	Parms.NewBackgroundTexture = NewBackgroundTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapBackground.SetBackgroundVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisible                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMapBackground::SetBackgroundVisible(const bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "SetBackgroundVisible");

	Params::MapBackground_SetBackgroundVisible Parms{};

	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapBackground.SetBackgroundZOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewBackgroundZOrder                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMapBackground::SetBackgroundZOrder(const int32 NewBackgroundZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "SetBackgroundZOrder");

	Params::MapBackground_SetBackgroundZOrder Parms{};

	Parms.NewBackgroundZOrder = NewBackgroundZOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapBackground.GetBackgroundMaterialForUMG
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* AMapBackground::GetBackgroundMaterialForUMG() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "GetBackgroundMaterialForUMG");

	Params::MapBackground_GetBackgroundMaterialForUMG Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapBackground.GetBackgroundOverlay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* AMapBackground::GetBackgroundOverlay(const int32 Level) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "GetBackgroundOverlay");

	Params::MapBackground_GetBackgroundOverlay Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapBackground.GetBackgroundPriority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMapBackground::GetBackgroundPriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "GetBackgroundPriority");

	Params::MapBackground_GetBackgroundPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapBackground.GetBackgroundTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* AMapBackground::GetBackgroundTexture(const int32 Level) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "GetBackgroundTexture");

	Params::MapBackground_GetBackgroundTexture Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapBackground.GetBackgroundTextureAtHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   WorldZ                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* AMapBackground::GetBackgroundTextureAtHeight(const float WorldZ) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "GetBackgroundTextureAtHeight");

	Params::MapBackground_GetBackgroundTextureAtHeight Parms{};

	Parms.WorldZ = WorldZ;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapBackground.GetBackgroundZOrder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMapBackground::GetBackgroundZOrder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "GetBackgroundZOrder");

	Params::MapBackground_GetBackgroundZOrder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapBackground.IsBackgroundVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMapBackground::IsBackgroundVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "IsBackgroundVisible");

	Params::MapBackground_IsBackgroundVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapBackground.IsMultiLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMapBackground::IsMultiLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapBackground", "IsMultiLevel");

	Params::MapBackground_IsMultiLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapFog.GetFogAtLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRequireCurrentlyRevealing                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RevealFactor                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMapFog::GetFogAtLocation(const struct FVector& WorldLocation, const bool bRequireCurrentlyRevealing, float* RevealFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapFog", "GetFogAtLocation");

	Params::MapFog_GetFogAtLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.bRequireCurrentlyRevealing = bRequireCurrentlyRevealing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RevealFactor != nullptr)
		*RevealFactor = Parms.RevealFactor;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapFog.GetFogMaterialForUMG
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* AMapFog::GetFogMaterialForUMG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapFog", "GetFogMaterialForUMG");

	Params::MapFog_GetFogMaterialForUMG Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapFog.GetFogMaterialInstanceForCanvas
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMapRendererComponent*            Renderer                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* AMapFog::GetFogMaterialInstanceForCanvas(class UMapRendererComponent* Renderer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapFog", "GetFogMaterialInstanceForCanvas");

	Params::MapFog_GetFogMaterialInstanceForCanvas Parms{};

	Parms.Renderer = Renderer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapFog.OnMapRevealerRegistered
// (Final, Native, Private)
// Parameters:
// class UMapRevealerComponent*            MapRevealer                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMapFog::OnMapRevealerRegistered(class UMapRevealerComponent* MapRevealer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapFog", "OnMapRevealerRegistered");

	Params::MapFog_OnMapRevealerRegistered Parms{};

	Parms.MapRevealer = MapRevealer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapFog.OnMapRevealerUnregistered
// (Final, Native, Private)
// Parameters:
// class UMapRevealerComponent*            MapRevealer                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMapFog::OnMapRevealerUnregistered(class UMapRevealerComponent* MapRevealer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapFog", "OnMapRevealerUnregistered");

	Params::MapFog_OnMapRevealerUnregistered Parms{};

	Parms.MapRevealer = MapRevealer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapFog.SetFogMaterialForCanvas
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMapFog::SetFogMaterialForCanvas(class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapFog", "SetFogMaterialForCanvas");

	Params::MapFog_SetFogMaterialForCanvas Parms{};

	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapFog.SetFogMaterialForUMG
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMapFog::SetFogMaterialForUMG(class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapFog", "SetFogMaterialForUMG");

	Params::MapFog_SetFogMaterialForUMG Parms{};

	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapFog.GetDestinationFogRenderTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* AMapFog::GetDestinationFogRenderTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapFog", "GetDestinationFogRenderTarget");

	Params::MapFog_GetDestinationFogRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapFog.GetSourceFogRenderTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* AMapFog::GetSourceFogRenderTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapFog", "GetSourceFogRenderTarget");

	Params::MapFog_GetSourceFogRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapFog.GetWorldToPixelRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMapFog::GetWorldToPixelRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapFog", "GetWorldToPixelRatio");

	Params::MapFog_GetWorldToPixelRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapFunctionLibrary.BoxSelectInView
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        StartUV                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        EndUV                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMapViewComponent*                MapView                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsCircular                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMapIconComponent*>        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UMapIconComponent*> UMapFunctionLibrary::BoxSelectInView(const struct FVector2D& StartUV, const struct FVector2D& EndUV, class UMapViewComponent* MapView, const bool bIsCircular)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MapFunctionLibrary", "BoxSelectInView");

	Params::MapFunctionLibrary_BoxSelectInView Parms{};

	Parms.StartUV = std::move(StartUV);
	Parms.EndUV = std::move(EndUV);
	Parms.MapView = MapView;
	Parms.bIsCircular = bIsCircular;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapFunctionLibrary.ClampIntoView
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        UV                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OuterRadiusUV                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsCircular                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UMapFunctionLibrary::ClampIntoView(const struct FVector2D& UV, const float OuterRadiusUV, const bool bIsCircular)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MapFunctionLibrary", "ClampIntoView");

	Params::MapFunctionLibrary_ClampIntoView Parms{};

	Parms.UV = std::move(UV);
	Parms.OuterRadiusUV = OuterRadiusUV;
	Parms.bIsCircular = bIsCircular;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapFunctionLibrary.ComputeViewFrustum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMapViewComponent*                MapView                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsCircular                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector2D>                CornerUVs                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   FloorDistance                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapFunctionLibrary::ComputeViewFrustum(const class UObject* WorldContextObject, class UMapViewComponent* MapView, const bool bIsCircular, TArray<struct FVector2D>* CornerUVs, const float FloorDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MapFunctionLibrary", "ComputeViewFrustum");

	Params::MapFunctionLibrary_ComputeViewFrustum Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MapView = MapView;
	Parms.bIsCircular = bIsCircular;
	Parms.FloorDistance = FloorDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CornerUVs != nullptr)
		*CornerUVs = std::move(Parms.CornerUVs);

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapFunctionLibrary.DetectIsInView
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        UV                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OuterRadiusUV                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsCircular                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapFunctionLibrary::DetectIsInView(const struct FVector2D& UV, const struct FVector2D& OuterRadiusUV, const bool bIsCircular)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MapFunctionLibrary", "DetectIsInView");

	Params::MapFunctionLibrary_DetectIsInView Parms{};

	Parms.UV = std::move(UV);
	Parms.OuterRadiusUV = std::move(OuterRadiusUV);
	Parms.bIsCircular = bIsCircular;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapFunctionLibrary.FindMapView
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMapViewSearchOption                    MapViewSearchOption                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMapViewComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMapViewComponent* UMapFunctionLibrary::FindMapView(class UObject* WorldContextObject, const EMapViewSearchOption MapViewSearchOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MapFunctionLibrary", "FindMapView");

	Params::MapFunctionLibrary_FindMapView Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MapViewSearchOption = MapViewSearchOption;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapFunctionLibrary.GetFirstMapBackground
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMapBackground*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMapBackground* UMapFunctionLibrary::GetFirstMapBackground(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MapFunctionLibrary", "GetFirstMapBackground");

	Params::MapFunctionLibrary_GetFirstMapBackground Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapFunctionLibrary.GetMapTracker
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMapTrackerComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMapTrackerComponent* UMapFunctionLibrary::GetMapTracker(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MapFunctionLibrary", "GetMapTracker");

	Params::MapFunctionLibrary_GetMapTracker Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetIconMaterialInstancesForCanvas
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UMaterialInstanceDynamic*> MaterialInstances                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMapIconComponent::GetIconMaterialInstancesForCanvas(TArray<class UMaterialInstanceDynamic*>* MaterialInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetIconMaterialInstancesForCanvas");

	Params::MapIconComponent_GetIconMaterialInstancesForCanvas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MaterialInstances != nullptr)
		*MaterialInstances = std::move(Parms.MaterialInstances);
}


// Function MinimapPlugin.MapIconComponent.GetIconMaterialInstancesForUMG
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UMaterialInstanceDynamic*> MaterialInstances                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMapIconComponent::GetIconMaterialInstancesForUMG(TArray<class UMaterialInstanceDynamic*>* MaterialInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetIconMaterialInstancesForUMG");

	Params::MapIconComponent_GetIconMaterialInstancesForUMG Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MaterialInstances != nullptr)
		*MaterialInstances = std::move(Parms.MaterialInstances);
}


// Function MinimapPlugin.MapIconComponent.MarkRenderedInView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMapViewComponent*                View                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewIsRendered                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapIconComponent::MarkRenderedInView(class UMapViewComponent* View, const bool bNewIsRendered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "MarkRenderedInView");

	Params::MapIconComponent_MarkRenderedInView Parms{};

	Parms.View = View;
	Parms.bNewIsRendered = bNewIsRendered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.ReceiveClicked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsLeftMouseButton                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::ReceiveClicked(const bool bIsLeftMouseButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "ReceiveClicked");

	Params::MapIconComponent_ReceiveClicked Parms{};

	Parms.bIsLeftMouseButton = bIsLeftMouseButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.ReceiveHoverEnd
// (Final, Native, Public, BlueprintCallable)

void UMapIconComponent::ReceiveHoverEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "ReceiveHoverEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.ReceiveHoverStart
// (Final, Native, Public, BlueprintCallable)

void UMapIconComponent::ReceiveHoverStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "ReceiveHoverStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.RegisterMaterialInstanceFromUMG
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      IconWidget                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         MatInst                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::RegisterMaterialInstanceFromUMG(class UUserWidget* IconWidget, class UMaterialInstanceDynamic* MatInst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "RegisterMaterialInstanceFromUMG");

	Params::MapIconComponent_RegisterMaterialInstanceFromUMG Parms{};

	Parms.IconWidget = IconWidget;
	Parms.MatInst = MatInst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.ResetIconMaterialForCanvas
// (Final, Native, Public, BlueprintCallable)

void UMapIconComponent::ResetIconMaterialForCanvas()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "ResetIconMaterialForCanvas");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.ResetIconMaterialForUMG
// (Final, Native, Public, BlueprintCallable)

void UMapIconComponent::ResetIconMaterialForUMG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "ResetIconMaterialForUMG");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetIconBackgroundInteraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EIconBackgroundInteraction              NewBackgroundInteraction                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetIconBackgroundInteraction(const EIconBackgroundInteraction NewBackgroundInteraction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetIconBackgroundInteraction");

	Params::MapIconComponent_SetIconBackgroundInteraction Parms{};

	Parms.NewBackgroundInteraction = NewBackgroundInteraction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetIconDrawColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     NewDrawColor                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetIconDrawColor(const struct FLinearColor& NewDrawColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetIconDrawColor");

	Params::MapIconComponent_SetIconDrawColor Parms{};

	Parms.NewDrawColor = std::move(NewDrawColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetIconFogInteraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EIconFogInteraction                     NewFogInteraction                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetIconFogInteraction(const EIconFogInteraction NewFogInteraction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetIconFogInteraction");

	Params::MapIconComponent_SetIconFogInteraction Parms{};

	Parms.NewFogInteraction = NewFogInteraction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetIconFogRevealThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewFogRevealThreshold                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetIconFogRevealThreshold(const float NewFogRevealThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetIconFogRevealThreshold");

	Params::MapIconComponent_SetIconFogRevealThreshold Parms{};

	Parms.NewFogRevealThreshold = NewFogRevealThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetIconInteractable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewInteractable                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetIconInteractable(const bool bNewInteractable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetIconInteractable");

	Params::MapIconComponent_SetIconInteractable Parms{};

	Parms.bNewInteractable = bNewInteractable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetIconMaterialForCanvas
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetIconMaterialForCanvas(class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetIconMaterialForCanvas");

	Params::MapIconComponent_SetIconMaterialForCanvas Parms{};

	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetIconMaterialForUMG
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetIconMaterialForUMG(class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetIconMaterialForUMG");

	Params::MapIconComponent_SetIconMaterialForUMG Parms{};

	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetIconRotates
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewRotates                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetIconRotates(const bool bNewRotates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetIconRotates");

	Params::MapIconComponent_SetIconRotates Parms{};

	Parms.bNewRotates = bNewRotates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetIconSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewIconSize                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EIconSizeUnit                           NewIconSizeUnit                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetIconSize(const float NewIconSize, const EIconSizeUnit NewIconSizeUnit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetIconSize");

	Params::MapIconComponent_SetIconSize Parms{};

	Parms.NewIconSize = NewIconSize;
	Parms.NewIconSizeUnit = NewIconSizeUnit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetIconTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       NewIcon                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetIconTexture(class UTexture2D* NewIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetIconTexture");

	Params::MapIconComponent_SetIconTexture Parms{};

	Parms.NewIcon = NewIcon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetIconTooltipText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewIconName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetIconTooltipText(class FName NewIconName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetIconTooltipText");

	Params::MapIconComponent_SetIconTooltipText Parms{};

	Parms.NewIconName = NewIconName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetIconVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisible                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetIconVisible(const bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetIconVisible");

	Params::MapIconComponent_SetIconVisible Parms{};

	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetIconZOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewZOrder                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetIconZOrder(const int32 NewZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetIconZOrder");

	Params::MapIconComponent_SetIconZOrder Parms{};

	Parms.NewZOrder = NewZOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetObjectiveArrowEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewObjectiveArrowEnabled                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetObjectiveArrowEnabled(const bool bNewObjectiveArrowEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetObjectiveArrowEnabled");

	Params::MapIconComponent_SetObjectiveArrowEnabled Parms{};

	Parms.bNewObjectiveArrowEnabled = bNewObjectiveArrowEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetObjectiveArrowRotates
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewRotates                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetObjectiveArrowRotates(const bool bNewRotates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetObjectiveArrowRotates");

	Params::MapIconComponent_SetObjectiveArrowRotates Parms{};

	Parms.bNewRotates = bNewRotates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetObjectiveArrowSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewObjectiveArrowSize                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetObjectiveArrowSize(const float NewObjectiveArrowSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetObjectiveArrowSize");

	Params::MapIconComponent_SetObjectiveArrowSize Parms{};

	Parms.NewObjectiveArrowSize = NewObjectiveArrowSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.SetObjectiveArrowTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       NewTexture                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconComponent::SetObjectiveArrowTexture(class UTexture2D* NewTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "SetObjectiveArrowTexture");

	Params::MapIconComponent_SetObjectiveArrowTexture Parms{};

	Parms.NewTexture = NewTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapIconComponent.DoesIconRotate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapIconComponent::DoesIconRotate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "DoesIconRotate");

	Params::MapIconComponent_DoesIconRotate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.DoesObjectiveArrowRotate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapIconComponent::DoesObjectiveArrowRotate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "DoesObjectiveArrowRotate");

	Params::MapIconComponent_DoesObjectiveArrowRotate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetIconBackgroundInteraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EIconBackgroundInteraction              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EIconBackgroundInteraction UMapIconComponent::GetIconBackgroundInteraction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetIconBackgroundInteraction");

	Params::MapIconComponent_GetIconBackgroundInteraction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetIconDrawColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UMapIconComponent::GetIconDrawColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetIconDrawColor");

	Params::MapIconComponent_GetIconDrawColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetIconFogInteraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EIconFogInteraction                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EIconFogInteraction UMapIconComponent::GetIconFogInteraction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetIconFogInteraction");

	Params::MapIconComponent_GetIconFogInteraction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetIconFogRevealThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMapIconComponent::GetIconFogRevealThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetIconFogRevealThreshold");

	Params::MapIconComponent_GetIconFogRevealThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetIconMaterialForCanvas
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UMapIconComponent::GetIconMaterialForCanvas() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetIconMaterialForCanvas");

	Params::MapIconComponent_GetIconMaterialForCanvas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetIconMaterialForUMG
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UMapIconComponent::GetIconMaterialForUMG() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetIconMaterialForUMG");

	Params::MapIconComponent_GetIconMaterialForUMG Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetIconSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMapIconComponent::GetIconSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetIconSize");

	Params::MapIconComponent_GetIconSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetIconSizeUnit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EIconSizeUnit                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EIconSizeUnit UMapIconComponent::GetIconSizeUnit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetIconSizeUnit");

	Params::MapIconComponent_GetIconSizeUnit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetIconTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UMapIconComponent::GetIconTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetIconTexture");

	Params::MapIconComponent_GetIconTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetIconTooltipText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UMapIconComponent::GetIconTooltipText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetIconTooltipText");

	Params::MapIconComponent_GetIconTooltipText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetIconZOrder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMapIconComponent::GetIconZOrder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetIconZOrder");

	Params::MapIconComponent_GetIconZOrder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetObjectiveArrowMaterialForCanvas
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UMapIconComponent::GetObjectiveArrowMaterialForCanvas() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetObjectiveArrowMaterialForCanvas");

	Params::MapIconComponent_GetObjectiveArrowMaterialForCanvas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetObjectiveArrowMaterialForUMG
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UMapIconComponent::GetObjectiveArrowMaterialForUMG() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetObjectiveArrowMaterialForUMG");

	Params::MapIconComponent_GetObjectiveArrowMaterialForUMG Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetObjectiveArrowSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMapIconComponent::GetObjectiveArrowSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetObjectiveArrowSize");

	Params::MapIconComponent_GetObjectiveArrowSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.GetObjectiveArrowTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UMapIconComponent::GetObjectiveArrowTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "GetObjectiveArrowTexture");

	Params::MapIconComponent_GetObjectiveArrowTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.IsIconInteractable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapIconComponent::IsIconInteractable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "IsIconInteractable");

	Params::MapIconComponent_IsIconInteractable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.IsIconVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapIconComponent::IsIconVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "IsIconVisible");

	Params::MapIconComponent_IsIconVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.IsObjectiveArrowEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapIconComponent::IsObjectiveArrowEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "IsObjectiveArrowEnabled");

	Params::MapIconComponent_IsObjectiveArrowEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapIconComponent.IsRenderedInView
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMapViewComponent*                View                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapIconComponent::IsRenderedInView(class UMapViewComponent* View) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconComponent", "IsRenderedInView");

	Params::MapIconComponent_IsRenderedInView Parms{};

	Parms.View = View;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapRendererComponent.SetAutoLocateMapView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMapViewSearchOption                    InAutoLocateMapView                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRendererComponent::SetAutoLocateMapView(const EMapViewSearchOption InAutoLocateMapView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "SetAutoLocateMapView");

	Params::MapRendererComponent_SetAutoLocateMapView Parms{};

	Parms.InAutoLocateMapView = InAutoLocateMapView;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRendererComponent.SetBackgroundFillColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     NewBackgroundFillColor                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRendererComponent::SetBackgroundFillColor(const struct FLinearColor& NewBackgroundFillColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "SetBackgroundFillColor");

	Params::MapRendererComponent_SetBackgroundFillColor Parms{};

	Parms.NewBackgroundFillColor = std::move(NewBackgroundFillColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRendererComponent.SetDrawFrustum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewDrawFrustum                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRendererComponent::SetDrawFrustum(const bool bNewDrawFrustum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "SetDrawFrustum");

	Params::MapRendererComponent_SetDrawFrustum Parms{};

	Parms.bNewDrawFrustum = bNewDrawFrustum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRendererComponent.SetFrustumFloorDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewFrustumFloorDistance                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRendererComponent::SetFrustumFloorDistance(const float NewFrustumFloorDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "SetFrustumFloorDistance");

	Params::MapRendererComponent_SetFrustumFloorDistance Parms{};

	Parms.NewFrustumFloorDistance = NewFrustumFloorDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRendererComponent.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRendererComponent::SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "SetHorizontalAlignment");

	Params::MapRendererComponent_SetHorizontalAlignment Parms{};

	Parms.InHorizontalAlignment = InHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRendererComponent.SetIsCircular
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsCircular                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRendererComponent::SetIsCircular(const bool bNewIsCircular)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "SetIsCircular");

	Params::MapRendererComponent_SetIsCircular Parms{};

	Parms.bNewIsCircular = bNewIsCircular;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRendererComponent.SetIsRendered
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsRendered                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRendererComponent::SetIsRendered(const bool bNewIsRendered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "SetIsRendered");

	Params::MapRendererComponent_SetIsRendered Parms{};

	Parms.bNewIsRendered = bNewIsRendered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRendererComponent.SetMapView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMapViewComponent*                InMapView                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRendererComponent::SetMapView(class UMapViewComponent* InMapView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "SetMapView");

	Params::MapRendererComponent_SetMapView Parms{};

	Parms.InMapView = InMapView;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRendererComponent.SetMargin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Left                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Top                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Right                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Bottom                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRendererComponent::SetMargin(const int32 Left, const int32 Top, const int32 Right, const int32 Bottom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "SetMargin");

	Params::MapRendererComponent_SetMargin Parms{};

	Parms.Left = Left;
	Parms.Top = Top;
	Parms.Right = Right;
	Parms.Bottom = Bottom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRendererComponent.SetSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Width                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRendererComponent::SetSize(const int32 Width, const int32 Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "SetSize");

	Params::MapRendererComponent_SetSize Parms{};

	Parms.Width = Width;
	Parms.Height = Height;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRendererComponent.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      InVerticalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapRendererComponent::SetVerticalAlignment(EVerticalAlignment InVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "SetVerticalAlignment");

	Params::MapRendererComponent_SetVerticalAlignment Parms{};

	Parms.InVerticalAlignment = InVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapRendererComponent.GetBackgroundFillColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UMapRendererComponent::GetBackgroundFillColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "GetBackgroundFillColor");

	Params::MapRendererComponent_GetBackgroundFillColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapRendererComponent.GetDrawFrustum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapRendererComponent::GetDrawFrustum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "GetDrawFrustum");

	Params::MapRendererComponent_GetDrawFrustum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapRendererComponent.GetFrustumFloorDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMapRendererComponent::GetFrustumFloorDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "GetFrustumFloorDistance");

	Params::MapRendererComponent_GetFrustumFloorDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapRendererComponent.IsCircular
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapRendererComponent::IsCircular() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "IsCircular");

	Params::MapRendererComponent_IsCircular Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapRendererComponent.IsRendered
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapRendererComponent::IsRendered() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapRendererComponent", "IsRendered");

	Params::MapRendererComponent_IsRendered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapTrackerComponent.GetFogRevealedFactor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRequireCurrentlyRevealing                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInsideFogVolume                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMapTrackerComponent::GetFogRevealedFactor(const struct FVector& WorldLocation, const bool bRequireCurrentlyRevealing, bool* bIsInsideFogVolume) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapTrackerComponent", "GetFogRevealedFactor");

	Params::MapTrackerComponent_GetFogRevealedFactor Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.bRequireCurrentlyRevealing = bRequireCurrentlyRevealing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsInsideFogVolume != nullptr)
		*bIsInsideFogVolume = Parms.bIsInsideFogVolume;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapTrackerComponent.GetMapBackgrounds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class AMapBackground*>     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class AMapBackground*> UMapTrackerComponent::GetMapBackgrounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapTrackerComponent", "GetMapBackgrounds");

	Params::MapTrackerComponent_GetMapBackgrounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapTrackerComponent.GetMapFogs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class AMapFog*>            ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class AMapFog*> UMapTrackerComponent::GetMapFogs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapTrackerComponent", "GetMapFogs");

	Params::MapTrackerComponent_GetMapFogs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapTrackerComponent.GetMapIcons
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UMapIconComponent*>  ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class UMapIconComponent*> UMapTrackerComponent::GetMapIcons() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapTrackerComponent", "GetMapIcons");

	Params::MapTrackerComponent_GetMapIcons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapTrackerComponent.GetMapRevealers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UMapRevealerComponent*>ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class UMapRevealerComponent*> UMapTrackerComponent::GetMapRevealers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapTrackerComponent", "GetMapRevealers");

	Params::MapTrackerComponent_GetMapRevealers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapTrackerComponent.HasMapFog
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapTrackerComponent::HasMapFog() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapTrackerComponent", "HasMapFog");

	Params::MapTrackerComponent_HasMapFog Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapViewComponent.DeprojectViewToWorld
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   U                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   V                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldPos                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapViewComponent::DeprojectViewToWorld(const float U, const float V, struct FVector* WorldPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "DeprojectViewToWorld");

	Params::MapViewComponent_DeprojectViewToWorld Parms{};

	Parms.U = U;
	Parms.V = V;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WorldPos != nullptr)
		*WorldPos = std::move(Parms.WorldPos);
}


// Function MinimapPlugin.MapViewComponent.GetActiveBackgroundLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AMapBackground*                   MapBackground                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMapViewComponent::GetActiveBackgroundLevel(const class AMapBackground* MapBackground)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "GetActiveBackgroundLevel");

	Params::MapViewComponent_GetActiveBackgroundLevel Parms{};

	Parms.MapBackground = MapBackground;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapViewComponent.GetActiveBackgroundPriority
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    IsInsideAnyBackground                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMapViewComponent::GetActiveBackgroundPriority(bool* IsInsideAnyBackground)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "GetActiveBackgroundPriority");

	Params::MapViewComponent_GetActiveBackgroundPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsInsideAnyBackground != nullptr)
		*IsInsideAnyBackground = Parms.IsInsideAnyBackground;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapViewComponent.GetViewCoordinates
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldPos                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceRectangular                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   U                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   V                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapViewComponent::GetViewCoordinates(const struct FVector& WorldPos, bool bForceRectangular, float* U, float* V)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "GetViewCoordinates");

	Params::MapViewComponent_GetViewCoordinates Parms{};

	Parms.WorldPos = std::move(WorldPos);
	Parms.bForceRectangular = bForceRectangular;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (U != nullptr)
		*U = Parms.U;

	if (V != nullptr)
		*V = Parms.V;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapViewComponent.GetViewYaw
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   WorldYaw                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Yaw                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapViewComponent::GetViewYaw(const float WorldYaw, float* Yaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "GetViewYaw");

	Params::MapViewComponent_GetViewYaw Parms{};

	Parms.WorldYaw = WorldYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Yaw != nullptr)
		*Yaw = Parms.Yaw;
}


// Function MinimapPlugin.MapViewComponent.GetWorldCorners
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> UMapViewComponent::GetWorldCorners()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "GetWorldCorners");

	Params::MapViewComponent_GetWorldCorners Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapViewComponent.IsSameBackgroundLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMapIconComponent*                MapIcon                                                (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapViewComponent::IsSameBackgroundLevel(const class UMapIconComponent* MapIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "IsSameBackgroundLevel");

	Params::MapViewComponent_IsSameBackgroundLevel Parms{};

	Parms.MapIcon = MapIcon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapViewComponent.RegisterMultiLevelMapBackground
// (Final, Native, Private)
// Parameters:
// class AMapBackground*                   MapBackground                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapViewComponent::RegisterMultiLevelMapBackground(class AMapBackground* MapBackground)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "RegisterMultiLevelMapBackground");

	Params::MapViewComponent_RegisterMultiLevelMapBackground Parms{};

	Parms.MapBackground = MapBackground;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapViewComponent.SetIconCategoryVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             IconCategory                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewVisible                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapViewComponent::SetIconCategoryVisible(class FName IconCategory, const bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "SetIconCategoryVisible");

	Params::MapViewComponent_SetIconCategoryVisible Parms{};

	Parms.IconCategory = IconCategory;
	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapViewComponent.SetViewExtent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewViewExtentX                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewViewExtentY                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapViewComponent::SetViewExtent(const float NewViewExtentX, const float NewViewExtentY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "SetViewExtent");

	Params::MapViewComponent_SetViewExtent Parms{};

	Parms.NewViewExtentX = NewViewExtentX;
	Parms.NewViewExtentY = NewViewExtentY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapViewComponent.SetZoomScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewZoomScale                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapViewComponent::SetZoomScale(const float NewZoomScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "SetZoomScale");

	Params::MapViewComponent_SetZoomScale Parms{};

	Parms.NewZoomScale = NewZoomScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapViewComponent.UnregisterMultiLevelMapBackground
// (Final, Native, Private)
// Parameters:
// class AMapBackground*                   MapBackground                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapViewComponent::UnregisterMultiLevelMapBackground(class AMapBackground* MapBackground)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "UnregisterMultiLevelMapBackground");

	Params::MapViewComponent_UnregisterMultiLevelMapBackground Parms{};

	Parms.MapBackground = MapBackground;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MinimapPlugin.MapViewComponent.GetViewAspectRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMapViewComponent::GetViewAspectRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "GetViewAspectRatio");

	Params::MapViewComponent_GetViewAspectRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapViewComponent.GetViewExtent
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ViewExtentX                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ViewExtentY                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapViewComponent::GetViewExtent(float* ViewExtentX, float* ViewExtentY) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "GetViewExtent");

	Params::MapViewComponent_GetViewExtent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ViewExtentX != nullptr)
		*ViewExtentX = Parms.ViewExtentX;

	if (ViewExtentY != nullptr)
		*ViewExtentY = Parms.ViewExtentY;
}


// Function MinimapPlugin.MapViewComponent.GetZoomScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMapViewComponent::GetZoomScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "GetZoomScale");

	Params::MapViewComponent_GetZoomScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapViewComponent.IsIconCategoryVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             IconCategory                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapViewComponent::IsIconCategoryVisible(class FName IconCategory) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "IsIconCategoryVisible");

	Params::MapViewComponent_IsIconCategoryVisible Parms{};

	Parms.IconCategory = IconCategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MinimapPlugin.MapViewComponent.ViewContains
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WorldPos                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WorldRadius                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMapViewComponent::ViewContains(const struct FVector& WorldPos, const float WorldRadius) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapViewComponent", "ViewContains");

	Params::MapViewComponent_ViewContains Parms{};

	Parms.WorldPos = std::move(WorldPos);
	Parms.WorldRadius = WorldRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

