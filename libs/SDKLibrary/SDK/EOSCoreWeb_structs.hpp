#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EOSCoreWeb

#include "Basic.hpp"


namespace SDK
{

// Enum EOSCoreWeb.EWebGrantType
// NumValues: 0x0007
enum class EWebGrantType : uint8
{
	NOT_SET                                  = 0,
	ExchangeCode                             = 1,
	Password                                 = 2,
	RefreshToken                             = 3,
	AuthorizationCode                        = 4,
	ClientCredentials                        = 5,
	EWebGrantType_MAX                        = 6,
};

// Enum EOSCoreWeb.ESubjectType
// NumValues: 0x0006
enum class ESubjectType : uint8
{
	NOT_SET                                  = 0,
	BAN_APPEAL                               = 1,
	CHEAT_REPORT                             = 2,
	OPEN_QUESTION                            = 3,
	TECHNICAL_SUPPORT                        = 4,
	ESubjectType_MAX                         = 5,
};

// ScriptStruct EOSCoreWeb.WebResponse
// 0x0018 (0x0018 - 0x0000)
struct FWebResponse final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWebResponse) == 0x000008, "Wrong alignment on FWebResponse");
static_assert(sizeof(FWebResponse) == 0x000018, "Wrong size on FWebResponse");
static_assert(offsetof(FWebResponse, Code) == 0x000000, "Member 'FWebResponse::Code' has a wrong offset!");
static_assert(offsetof(FWebResponse, Message) == 0x000008, "Member 'FWebResponse::Message' has a wrong offset!");

// ScriptStruct EOSCoreWeb.AccessTokenCallbackData
// 0x0098 (0x0098 - 0x0000)
struct FAccessTokenCallbackData final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TokenType;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExpiresAt;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpiresIn;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA6[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Nonce;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Features;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 OrganizationId;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductId;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SandboxId;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeploymentId;                                      // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccessTokenCallbackData) == 0x000008, "Wrong alignment on FAccessTokenCallbackData");
static_assert(sizeof(FAccessTokenCallbackData) == 0x000098, "Wrong size on FAccessTokenCallbackData");
static_assert(offsetof(FAccessTokenCallbackData, AccessToken) == 0x000000, "Member 'FAccessTokenCallbackData::AccessToken' has a wrong offset!");
static_assert(offsetof(FAccessTokenCallbackData, TokenType) == 0x000010, "Member 'FAccessTokenCallbackData::TokenType' has a wrong offset!");
static_assert(offsetof(FAccessTokenCallbackData, ExpiresAt) == 0x000020, "Member 'FAccessTokenCallbackData::ExpiresAt' has a wrong offset!");
static_assert(offsetof(FAccessTokenCallbackData, ExpiresIn) == 0x000030, "Member 'FAccessTokenCallbackData::ExpiresIn' has a wrong offset!");
static_assert(offsetof(FAccessTokenCallbackData, Nonce) == 0x000038, "Member 'FAccessTokenCallbackData::Nonce' has a wrong offset!");
static_assert(offsetof(FAccessTokenCallbackData, Features) == 0x000048, "Member 'FAccessTokenCallbackData::Features' has a wrong offset!");
static_assert(offsetof(FAccessTokenCallbackData, OrganizationId) == 0x000058, "Member 'FAccessTokenCallbackData::OrganizationId' has a wrong offset!");
static_assert(offsetof(FAccessTokenCallbackData, ProductId) == 0x000068, "Member 'FAccessTokenCallbackData::ProductId' has a wrong offset!");
static_assert(offsetof(FAccessTokenCallbackData, SandboxId) == 0x000078, "Member 'FAccessTokenCallbackData::SandboxId' has a wrong offset!");
static_assert(offsetof(FAccessTokenCallbackData, DeploymentId) == 0x000088, "Member 'FAccessTokenCallbackData::DeploymentId' has a wrong offset!");

// ScriptStruct EOSCoreWeb.WebClientCredentials
// 0x0020 (0x0020 - 0x0000)
struct FWebClientCredentials final
{
public:
	class FString                                 ClientId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientSecret;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWebClientCredentials) == 0x000008, "Wrong alignment on FWebClientCredentials");
static_assert(sizeof(FWebClientCredentials) == 0x000020, "Wrong size on FWebClientCredentials");
static_assert(offsetof(FWebClientCredentials, ClientId) == 0x000000, "Member 'FWebClientCredentials::ClientId' has a wrong offset!");
static_assert(offsetof(FWebClientCredentials, ClientSecret) == 0x000010, "Member 'FWebClientCredentials::ClientSecret' has a wrong offset!");

// ScriptStruct EOSCoreWeb.AuthAccessTokenCallbackData
// 0x0098 (0x0098 - 0x0000)
struct FAuthAccessTokenCallbackData final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpiresIn;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA7[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExpiresAt;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientId;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApplicationId;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TokenId;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RefreshToken;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RefreshExpires;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RefreshExpiresAt;                                  // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAuthAccessTokenCallbackData) == 0x000008, "Wrong alignment on FAuthAccessTokenCallbackData");
static_assert(sizeof(FAuthAccessTokenCallbackData) == 0x000098, "Wrong size on FAuthAccessTokenCallbackData");
static_assert(offsetof(FAuthAccessTokenCallbackData, AccessToken) == 0x000000, "Member 'FAuthAccessTokenCallbackData::AccessToken' has a wrong offset!");
static_assert(offsetof(FAuthAccessTokenCallbackData, ExpiresIn) == 0x000010, "Member 'FAuthAccessTokenCallbackData::ExpiresIn' has a wrong offset!");
static_assert(offsetof(FAuthAccessTokenCallbackData, ExpiresAt) == 0x000018, "Member 'FAuthAccessTokenCallbackData::ExpiresAt' has a wrong offset!");
static_assert(offsetof(FAuthAccessTokenCallbackData, AccountId) == 0x000028, "Member 'FAuthAccessTokenCallbackData::AccountId' has a wrong offset!");
static_assert(offsetof(FAuthAccessTokenCallbackData, ClientId) == 0x000038, "Member 'FAuthAccessTokenCallbackData::ClientId' has a wrong offset!");
static_assert(offsetof(FAuthAccessTokenCallbackData, ApplicationId) == 0x000048, "Member 'FAuthAccessTokenCallbackData::ApplicationId' has a wrong offset!");
static_assert(offsetof(FAuthAccessTokenCallbackData, TokenId) == 0x000058, "Member 'FAuthAccessTokenCallbackData::TokenId' has a wrong offset!");
static_assert(offsetof(FAuthAccessTokenCallbackData, RefreshToken) == 0x000068, "Member 'FAuthAccessTokenCallbackData::RefreshToken' has a wrong offset!");
static_assert(offsetof(FAuthAccessTokenCallbackData, RefreshExpires) == 0x000078, "Member 'FAuthAccessTokenCallbackData::RefreshExpires' has a wrong offset!");
static_assert(offsetof(FAuthAccessTokenCallbackData, RefreshExpiresAt) == 0x000088, "Member 'FAuthAccessTokenCallbackData::RefreshExpiresAt' has a wrong offset!");

// ScriptStruct EOSCoreWeb.CreateRoomTokenCallback
// 0x0050 (0x0050 - 0x0000)
struct FCreateRoomTokenCallback final
{
public:
	class FString                                 RoomName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeploymentId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientBaseUrl;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Puid;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreateRoomTokenCallback) == 0x000008, "Wrong alignment on FCreateRoomTokenCallback");
static_assert(sizeof(FCreateRoomTokenCallback) == 0x000050, "Wrong size on FCreateRoomTokenCallback");
static_assert(offsetof(FCreateRoomTokenCallback, RoomName) == 0x000000, "Member 'FCreateRoomTokenCallback::RoomName' has a wrong offset!");
static_assert(offsetof(FCreateRoomTokenCallback, DeploymentId) == 0x000010, "Member 'FCreateRoomTokenCallback::DeploymentId' has a wrong offset!");
static_assert(offsetof(FCreateRoomTokenCallback, ClientBaseUrl) == 0x000020, "Member 'FCreateRoomTokenCallback::ClientBaseUrl' has a wrong offset!");
static_assert(offsetof(FCreateRoomTokenCallback, Token) == 0x000030, "Member 'FCreateRoomTokenCallback::Token' has a wrong offset!");
static_assert(offsetof(FCreateRoomTokenCallback, Puid) == 0x000040, "Member 'FCreateRoomTokenCallback::Puid' has a wrong offset!");

// ScriptStruct EOSCoreWeb.SubmitTicketRequest
// 0x0088 (0x0088 - 0x0000)
struct FSubmitTicketRequest final
{
public:
	ESubjectType                                  Subject;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderEmail;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderName;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Guid;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorCode;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SystemOS;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SystemAntiMalware;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SystemOther;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubmitTicketRequest) == 0x000008, "Wrong alignment on FSubmitTicketRequest");
static_assert(sizeof(FSubmitTicketRequest) == 0x000088, "Wrong size on FSubmitTicketRequest");
static_assert(offsetof(FSubmitTicketRequest, Subject) == 0x000000, "Member 'FSubmitTicketRequest::Subject' has a wrong offset!");
static_assert(offsetof(FSubmitTicketRequest, Message) == 0x000008, "Member 'FSubmitTicketRequest::Message' has a wrong offset!");
static_assert(offsetof(FSubmitTicketRequest, SenderEmail) == 0x000018, "Member 'FSubmitTicketRequest::SenderEmail' has a wrong offset!");
static_assert(offsetof(FSubmitTicketRequest, SenderName) == 0x000028, "Member 'FSubmitTicketRequest::SenderName' has a wrong offset!");
static_assert(offsetof(FSubmitTicketRequest, Guid) == 0x000038, "Member 'FSubmitTicketRequest::Guid' has a wrong offset!");
static_assert(offsetof(FSubmitTicketRequest, ErrorCode) == 0x000048, "Member 'FSubmitTicketRequest::ErrorCode' has a wrong offset!");
static_assert(offsetof(FSubmitTicketRequest, SystemOS) == 0x000058, "Member 'FSubmitTicketRequest::SystemOS' has a wrong offset!");
static_assert(offsetof(FSubmitTicketRequest, SystemAntiMalware) == 0x000068, "Member 'FSubmitTicketRequest::SystemAntiMalware' has a wrong offset!");
static_assert(offsetof(FSubmitTicketRequest, SystemOther) == 0x000078, "Member 'FSubmitTicketRequest::SystemOther' has a wrong offset!");

// ScriptStruct EOSCoreWeb.SubmitTicketResponse
// 0x00C0 (0x00C0 - 0x0000)
struct FSubmitTicketResponse final
{
public:
	class FString                                 ProdName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProdSlug;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Guid;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderName;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderEmail;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Subject;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorCode;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SystemOS;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SystemAntiMalware;                                 // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SystemOther;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timestamp;                                         // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubmitTicketResponse) == 0x000008, "Wrong alignment on FSubmitTicketResponse");
static_assert(sizeof(FSubmitTicketResponse) == 0x0000C0, "Wrong size on FSubmitTicketResponse");
static_assert(offsetof(FSubmitTicketResponse, ProdName) == 0x000000, "Member 'FSubmitTicketResponse::ProdName' has a wrong offset!");
static_assert(offsetof(FSubmitTicketResponse, ProdSlug) == 0x000010, "Member 'FSubmitTicketResponse::ProdSlug' has a wrong offset!");
static_assert(offsetof(FSubmitTicketResponse, Guid) == 0x000020, "Member 'FSubmitTicketResponse::Guid' has a wrong offset!");
static_assert(offsetof(FSubmitTicketResponse, SenderName) == 0x000030, "Member 'FSubmitTicketResponse::SenderName' has a wrong offset!");
static_assert(offsetof(FSubmitTicketResponse, SenderEmail) == 0x000040, "Member 'FSubmitTicketResponse::SenderEmail' has a wrong offset!");
static_assert(offsetof(FSubmitTicketResponse, Subject) == 0x000050, "Member 'FSubmitTicketResponse::Subject' has a wrong offset!");
static_assert(offsetof(FSubmitTicketResponse, Message) == 0x000060, "Member 'FSubmitTicketResponse::Message' has a wrong offset!");
static_assert(offsetof(FSubmitTicketResponse, ErrorCode) == 0x000070, "Member 'FSubmitTicketResponse::ErrorCode' has a wrong offset!");
static_assert(offsetof(FSubmitTicketResponse, SystemOS) == 0x000080, "Member 'FSubmitTicketResponse::SystemOS' has a wrong offset!");
static_assert(offsetof(FSubmitTicketResponse, SystemAntiMalware) == 0x000090, "Member 'FSubmitTicketResponse::SystemAntiMalware' has a wrong offset!");
static_assert(offsetof(FSubmitTicketResponse, SystemOther) == 0x0000A0, "Member 'FSubmitTicketResponse::SystemOther' has a wrong offset!");
static_assert(offsetof(FSubmitTicketResponse, Timestamp) == 0x0000B0, "Member 'FSubmitTicketResponse::Timestamp' has a wrong offset!");

// ScriptStruct EOSCoreWeb.WebRequestParticipantData
// 0x0028 (0x0028 - 0x0000)
struct FWebRequestParticipantData final
{
public:
	class FString                                 ProductUserId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientIp;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHardMuted;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA9[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWebRequestParticipantData) == 0x000008, "Wrong alignment on FWebRequestParticipantData");
static_assert(sizeof(FWebRequestParticipantData) == 0x000028, "Wrong size on FWebRequestParticipantData");
static_assert(offsetof(FWebRequestParticipantData, ProductUserId) == 0x000000, "Member 'FWebRequestParticipantData::ProductUserId' has a wrong offset!");
static_assert(offsetof(FWebRequestParticipantData, ClientIp) == 0x000010, "Member 'FWebRequestParticipantData::ClientIp' has a wrong offset!");
static_assert(offsetof(FWebRequestParticipantData, bHardMuted) == 0x000020, "Member 'FWebRequestParticipantData::bHardMuted' has a wrong offset!");

// ScriptStruct EOSCoreWeb.InitiateEpicAuthenticationRequest
// 0x0038 (0x0038 - 0x0000)
struct FInitiateEpicAuthenticationRequest final
{
public:
	class FString                                 ClientId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectURI;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Scope;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timeout;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AAA[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInitiateEpicAuthenticationRequest) == 0x000008, "Wrong alignment on FInitiateEpicAuthenticationRequest");
static_assert(sizeof(FInitiateEpicAuthenticationRequest) == 0x000038, "Wrong size on FInitiateEpicAuthenticationRequest");
static_assert(offsetof(FInitiateEpicAuthenticationRequest, ClientId) == 0x000000, "Member 'FInitiateEpicAuthenticationRequest::ClientId' has a wrong offset!");
static_assert(offsetof(FInitiateEpicAuthenticationRequest, RedirectURI) == 0x000010, "Member 'FInitiateEpicAuthenticationRequest::RedirectURI' has a wrong offset!");
static_assert(offsetof(FInitiateEpicAuthenticationRequest, Scope) == 0x000020, "Member 'FInitiateEpicAuthenticationRequest::Scope' has a wrong offset!");
static_assert(offsetof(FInitiateEpicAuthenticationRequest, Timeout) == 0x000030, "Member 'FInitiateEpicAuthenticationRequest::Timeout' has a wrong offset!");

// ScriptStruct EOSCoreWeb.RequestAccessTokenRequest
// 0x0040 (0x0040 - 0x0000)
struct FRequestAccessTokenRequest final
{
public:
	struct FWebClientCredentials                  Credentials;                                       // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 DeploymentId;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdditionalData;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestAccessTokenRequest) == 0x000008, "Wrong alignment on FRequestAccessTokenRequest");
static_assert(sizeof(FRequestAccessTokenRequest) == 0x000040, "Wrong size on FRequestAccessTokenRequest");
static_assert(offsetof(FRequestAccessTokenRequest, Credentials) == 0x000000, "Member 'FRequestAccessTokenRequest::Credentials' has a wrong offset!");
static_assert(offsetof(FRequestAccessTokenRequest, DeploymentId) == 0x000020, "Member 'FRequestAccessTokenRequest::DeploymentId' has a wrong offset!");
static_assert(offsetof(FRequestAccessTokenRequest, AdditionalData) == 0x000030, "Member 'FRequestAccessTokenRequest::AdditionalData' has a wrong offset!");

// ScriptStruct EOSCoreWeb.RequestAuthAccessTokenRequest
// 0x0088 (0x0088 - 0x0000)
struct FRequestAuthAccessTokenRequest final
{
public:
	EWebGrantType                                 GrantType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AAB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeploymentId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExchangeCode;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Code;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWebClientCredentials                  Credentials;                                       // 0x0058(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Scope;                                             // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestAuthAccessTokenRequest) == 0x000008, "Wrong alignment on FRequestAuthAccessTokenRequest");
static_assert(sizeof(FRequestAuthAccessTokenRequest) == 0x000088, "Wrong size on FRequestAuthAccessTokenRequest");
static_assert(offsetof(FRequestAuthAccessTokenRequest, GrantType) == 0x000000, "Member 'FRequestAuthAccessTokenRequest::GrantType' has a wrong offset!");
static_assert(offsetof(FRequestAuthAccessTokenRequest, DeploymentId) == 0x000008, "Member 'FRequestAuthAccessTokenRequest::DeploymentId' has a wrong offset!");
static_assert(offsetof(FRequestAuthAccessTokenRequest, Username) == 0x000018, "Member 'FRequestAuthAccessTokenRequest::Username' has a wrong offset!");
static_assert(offsetof(FRequestAuthAccessTokenRequest, Password) == 0x000028, "Member 'FRequestAuthAccessTokenRequest::Password' has a wrong offset!");
static_assert(offsetof(FRequestAuthAccessTokenRequest, ExchangeCode) == 0x000038, "Member 'FRequestAuthAccessTokenRequest::ExchangeCode' has a wrong offset!");
static_assert(offsetof(FRequestAuthAccessTokenRequest, Code) == 0x000048, "Member 'FRequestAuthAccessTokenRequest::Code' has a wrong offset!");
static_assert(offsetof(FRequestAuthAccessTokenRequest, Credentials) == 0x000058, "Member 'FRequestAuthAccessTokenRequest::Credentials' has a wrong offset!");
static_assert(offsetof(FRequestAuthAccessTokenRequest, Scope) == 0x000078, "Member 'FRequestAuthAccessTokenRequest::Scope' has a wrong offset!");

}

