#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Keybind

#include "Basic.hpp"

#include "BP_Keybind_classes.hpp"
#include "BP_Keybind_parameters.hpp"


namespace SDK
{

// Function BP_Keybind.BP_Keybind_C.BndEvt__KeySelector1_K2Node_ComponentBoundEvent_0_OnIsSelectingKeyChanged__DelegateSignature
// (BlueprintEvent)

void UBP_Keybind_C::BndEvt__KeySelector1_K2Node_ComponentBoundEvent_0_OnIsSelectingKeyChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "BndEvt__KeySelector1_K2Node_ComponentBoundEvent_0_OnIsSelectingKeyChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Keybind.BP_Keybind_C.BndEvt__KeySelector1_K2Node_ComponentBoundEvent_1_OnKeySelected__DelegateSignature
// (BlueprintEvent)
// Parameters:
// struct FInputChord                      SelectedKey                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_Keybind_C::BndEvt__KeySelector1_K2Node_ComponentBoundEvent_1_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "BndEvt__KeySelector1_K2Node_ComponentBoundEvent_1_OnKeySelected__DelegateSignature");

	Params::BP_Keybind_C_BndEvt__KeySelector1_K2Node_ComponentBoundEvent_1_OnKeySelected__DelegateSignature Parms{};

	Parms.SelectedKey = std::move(SelectedKey);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Keybind.BP_Keybind_C.BndEvt__KeySelector2_K2Node_ComponentBoundEvent_1_OnIsSelectingKeyChanged__DelegateSignature
// (BlueprintEvent)

void UBP_Keybind_C::BndEvt__KeySelector2_K2Node_ComponentBoundEvent_1_OnIsSelectingKeyChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "BndEvt__KeySelector2_K2Node_ComponentBoundEvent_1_OnIsSelectingKeyChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Keybind.BP_Keybind_C.BndEvt__KeySelector2_K2Node_ComponentBoundEvent_2_OnKeySelected__DelegateSignature
// (BlueprintEvent)
// Parameters:
// struct FInputChord                      SelectedKey                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_Keybind_C::BndEvt__KeySelector2_K2Node_ComponentBoundEvent_2_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "BndEvt__KeySelector2_K2Node_ComponentBoundEvent_2_OnKeySelected__DelegateSignature");

	Params::BP_Keybind_C_BndEvt__KeySelector2_K2Node_ComponentBoundEvent_2_OnKeySelected__DelegateSignature Parms{};

	Parms.SelectedKey = std::move(SelectedKey);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Keybind.BP_Keybind_C.ExecuteUbergraph_BP_Keybind
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Keybind_C::ExecuteUbergraph_BP_Keybind(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "ExecuteUbergraph_BP_Keybind");

	Params::BP_Keybind_C_ExecuteUbergraph_BP_Keybind Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Keybind.BP_Keybind_C.Find Action Keys
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FEnhancedActionKeyMapping>ActionKeys                                             (Parm, OutParm, ContainsInstancedReference)

void UBP_Keybind_C::Find_Action_Keys(TArray<struct FEnhancedActionKeyMapping>* ActionKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "Find Action Keys");

	Params::BP_Keybind_C_Find_Action_Keys Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActionKeys != nullptr)
		*ActionKeys = std::move(Parms.ActionKeys);
}


// Function BP_Keybind.BP_Keybind_C.FindActionBind
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionBindName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BindIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BindFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FInputActionKeyMapping           ActionBind                                             (Parm, OutParm)

void UBP_Keybind_C::FindActionBind(class FName ActionBindName, int32 BindIndex, bool* BindFound, struct FInputActionKeyMapping* ActionBind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "FindActionBind");

	Params::BP_Keybind_C_FindActionBind Parms{};

	Parms.ActionBindName = ActionBindName;
	Parms.BindIndex = BindIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (BindFound != nullptr)
		*BindFound = Parms.BindFound;

	if (ActionBind != nullptr)
		*ActionBind = std::move(Parms.ActionBind);
}


// Function BP_Keybind.BP_Keybind_C.FindAxisBind
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionBindName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BindIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BindFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FInputAxisKeyMapping             ActionBind                                             (Parm, OutParm)

void UBP_Keybind_C::FindAxisBind(class FName ActionBindName, int32 BindIndex, bool* BindFound, struct FInputAxisKeyMapping* ActionBind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "FindAxisBind");

	Params::BP_Keybind_C_FindAxisBind Parms{};

	Parms.ActionBindName = ActionBindName;
	Parms.BindIndex = BindIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (BindFound != nullptr)
		*BindFound = Parms.BindFound;

	if (ActionBind != nullptr)
		*ActionBind = std::move(Parms.ActionBind);
}


// Function BP_Keybind.BP_Keybind_C.InitializeKeybind
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_BindName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAxis                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     Param_Action                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UInputMappingContext*             Param_Mapping                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_Keybind_C::InitializeKeybind(class FName Param_BindName, bool IsAxis, class UInputAction* Param_Action, class UInputMappingContext* Param_Mapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "InitializeKeybind");

	Params::BP_Keybind_C_InitializeKeybind Parms{};

	Parms.Param_BindName = Param_BindName;
	Parms.IsAxis = IsAxis;
	Parms.Param_Action = Param_Action;
	Parms.Param_Mapping = Param_Mapping;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Keybind.BP_Keybind_C.KeySelect1Scroll
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Up                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Keybind_C::KeySelect1Scroll(bool Up)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "KeySelect1Scroll");

	Params::BP_Keybind_C_KeySelect1Scroll Parms{};

	Parms.Up = Up;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Keybind.BP_Keybind_C.KeySelect2Scroll
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Up                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Keybind_C::KeySelect2Scroll(bool Up)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "KeySelect2Scroll");

	Params::BP_Keybind_C_KeySelect2Scroll Parms{};

	Parms.Up = Up;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Keybind.BP_Keybind_C.OnMouseWheel
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBP_Keybind_C::OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "OnMouseWheel");

	Params::BP_Keybind_C_OnMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Keybind.BP_Keybind_C.RebindAction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInputChord                      Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// int32                                   RebindIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Keybind_C::RebindAction(const struct FInputChord& Key, int32 RebindIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "RebindAction");

	Params::BP_Keybind_C_RebindAction Parms{};

	Parms.Key = std::move(Key);
	Parms.RebindIndex = RebindIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Keybind.BP_Keybind_C.RebindAxis
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInputChord                      Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// int32                                   RebindIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Keybind_C::RebindAxis(const struct FInputChord& Key, int32 RebindIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Keybind_C", "RebindAxis");

	Params::BP_Keybind_C_RebindAxis Parms{};

	Parms.Key = std::move(Key);
	Parms.RebindIndex = RebindIndex;

	UObject::ProcessEvent(Func, &Parms);
}

}

