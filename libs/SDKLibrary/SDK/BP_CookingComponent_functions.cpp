#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CookingComponent

#include "Basic.hpp"

#include "BP_CookingComponent_classes.hpp"
#include "BP_CookingComponent_parameters.hpp"


namespace SDK
{

// Function BP_CookingComponent.BP_CookingComponent_C.Add Burnt Fuel Item
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::Add_Burnt_Fuel_Item()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "Add Burnt Fuel Item");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.AddReturnedItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_CookingSlot                   CookingSlot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::AddReturnedItems(const struct FS_CookingSlot& CookingSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "AddReturnedItems");

	Params::BP_CookingComponent_C_AddReturnedItems Parms{};

	Parms.CookingSlot = std::move(CookingSlot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CookingComponent.BP_CookingComponent_C.AddStartingFuelItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::AddStartingFuelItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "AddStartingFuelItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.AddStartingItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::AddStartingItems(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "AddStartingItems");

	Params::BP_CookingComponent_C_AddStartingItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_CookingComponent.BP_CookingComponent_C.BurnFuel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::BurnFuel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "BurnFuel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ClearCookingItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// struct FS_CookingSlot                   CookingSlot                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::ClearCookingItem(const struct FS_InvSlot& InvSlot, struct FS_CookingSlot* CookingSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ClearCookingItem");

	Params::BP_CookingComponent_C_ClearCookingItem Parms{};

	Parms.InvSlot = std::move(InvSlot);

	UObject::ProcessEvent(Func, &Parms);

	if (CookingSlot != nullptr)
		*CookingSlot = std::move(Parms.CookingSlot);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ClientPauseAllCookingSlotTimer
// (BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::ClientPauseAllCookingSlotTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ClientPauseAllCookingSlotTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ClientResumeAllConvertSlots
// (BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::ClientResumeAllConvertSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ClientResumeAllConvertSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ConstructContainsSlots
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::ConstructContainsSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ConstructContainsSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ConstructCookingSlots
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::ConstructCookingSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ConstructCookingSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ConstructSlots
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::ConstructSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ConstructSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ExecuteUbergraph_BP_CookingComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::ExecuteUbergraph_BP_CookingComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ExecuteUbergraph_BP_CookingComponent");

	Params::BP_CookingComponent_C_ExecuteUbergraph_BP_CookingComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CookingComponent.BP_CookingComponent_C.FreeSlotCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_CraftingCost                  Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvSlot                       InvSlot                                                (Parm, OutParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

bool UBP_CookingComponent_C::FreeSlotCheck(const struct FS_CraftingCost& Item, struct FS_InvSlot* InvSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "FreeSlotCheck");

	Params::BP_CookingComponent_C_FreeSlotCheck Parms{};

	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);

	if (InvSlot != nullptr)
		*InvSlot = std::move(Parms.InvSlot);

	return Parms.ReturnValue;
}


// Function BP_CookingComponent.BP_CookingComponent_C.GetContentsSlots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_InvSlot>               ContentsSlots                                          (Parm, OutParm, ContainsInstancedReference)

bool UBP_CookingComponent_C::GetContentsSlots(TArray<struct FS_InvSlot>* ContentsSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "GetContentsSlots");

	Params::BP_CookingComponent_C_GetContentsSlots Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ContentsSlots != nullptr)
		*ContentsSlots = std::move(Parms.ContentsSlots);

	return Parms.ReturnValue;
}


// Function BP_CookingComponent.BP_CookingComponent_C.GetCookingInvSlots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_InvSlot>               Param_CookingSlots                                     (Parm, OutParm, ContainsInstancedReference)

bool UBP_CookingComponent_C::GetCookingInvSlots(TArray<struct FS_InvSlot>* Param_CookingSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "GetCookingInvSlots");

	Params::BP_CookingComponent_C_GetCookingInvSlots Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_CookingSlots != nullptr)
		*Param_CookingSlots = std::move(Parms.Param_CookingSlots);

	return Parms.ReturnValue;
}


// Function BP_CookingComponent.BP_CookingComponent_C.GetFuelSlots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_InvSlot>               FuelSlots                                              (Parm, OutParm, ContainsInstancedReference)

bool UBP_CookingComponent_C::GetFuelSlots(TArray<struct FS_InvSlot>* FuelSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "GetFuelSlots");

	Params::BP_CookingComponent_C_GetFuelSlots Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FuelSlots != nullptr)
		*FuelSlots = std::move(Parms.FuelSlots);

	return Parms.ReturnValue;
}


// Function BP_CookingComponent.BP_CookingComponent_C.IsCookingSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_IsCookingSlot                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::IsCookingSlot(int32 Param_Index, bool* Param_IsCookingSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "IsCookingSlot");

	Params::BP_CookingComponent_C_IsCookingSlot Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsCookingSlot != nullptr)
		*Param_IsCookingSlot = Parms.Param_IsCookingSlot;
}


// Function BP_CookingComponent.BP_CookingComponent_C.IsFuelItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_IsFuelItem                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::IsFuelItem(class FName ItemId, bool* Param_IsFuelItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "IsFuelItem");

	Params::BP_CookingComponent_C_IsFuelItem Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsFuelItem != nullptr)
		*Param_IsFuelItem = Parms.Param_IsFuelItem;
}


// Function BP_CookingComponent.BP_CookingComponent_C.IsIndexFuelSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFuelSlot                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::IsIndexFuelSlot(int32 Param_Index, bool* IsFuelSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "IsIndexFuelSlot");

	Params::BP_CookingComponent_C_IsIndexFuelSlot Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (IsFuelSlot != nullptr)
		*IsFuelSlot = Parms.IsFuelSlot;
}


// Function BP_CookingComponent.BP_CookingComponent_C.LoadComponentData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadComplete                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::LoadComponentData(class UBP_SGKSaveGame_C* SaveGame, bool* LoadComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "LoadComponentData");

	Params::BP_CookingComponent_C_LoadComponentData Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);

	if (LoadComplete != nullptr)
		*LoadComplete = Parms.LoadComplete;
}


// Function BP_CookingComponent.BP_CookingComponent_C.LoadCookingData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_StorageSave                   S_StorageSave                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_CookingComponent_C::LoadCookingData(const struct FS_StorageSave& S_StorageSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "LoadCookingData");

	Params::BP_CookingComponent_C_LoadCookingData Parms{};

	Parms.S_StorageSave = std::move(S_StorageSave);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CookingComponent.BP_CookingComponent_C.LoadInventoryData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_StorageSave                   S_StorageSave                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_CookingComponent_C::LoadInventoryData(const struct FS_StorageSave& S_StorageSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "LoadInventoryData");

	Params::BP_CookingComponent_C_LoadInventoryData Parms{};

	Parms.S_StorageSave = std::move(S_StorageSave);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CookingComponent.BP_CookingComponent_C.MoveCookingItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       ContentElement                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// struct FS_InvSlot                       CookingSlot                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_CookingComponent_C::MoveCookingItem(const struct FS_InvSlot& ContentElement, const struct FS_InvSlot& CookingSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "MoveCookingItem");

	Params::BP_CookingComponent_C_MoveCookingItem Parms{};

	Parms.ContentElement = std::move(ContentElement);
	Parms.CookingSlot = std::move(CookingSlot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CookingComponent.BP_CookingComponent_C.UnPauseSingleSlot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Pause                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::UnPauseSingleSlot(int32 Param_Index, bool Pause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "UnPauseSingleSlot");

	Params::BP_CookingComponent_C_UnPauseSingleSlot Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Pause = Pause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CookingComponent.BP_CookingComponent_C.PauseAllPlayerCookingSlots
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::PauseAllPlayerCookingSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "PauseAllPlayerCookingSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_CookingComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.RestartPlayerCookingSlot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_CookingSlot                   CookingSlot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::RestartPlayerCookingSlot(const struct FS_CookingSlot& CookingSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "RestartPlayerCookingSlot");

	Params::BP_CookingComponent_C_RestartPlayerCookingSlot Parms{};

	Parms.CookingSlot = std::move(CookingSlot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ResumeAllPlayerCookingSlots
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::ResumeAllPlayerCookingSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ResumeAllPlayerCookingSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.SaveComponentData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::SaveComponentData(class UBP_SGKSaveGame_C* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "SaveComponentData");

	Params::BP_CookingComponent_C_SaveComponentData Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CookingComponent.BP_CookingComponent_C.SaveCookingData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::SaveCookingData(class UBP_SGKSaveGame_C* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "SaveCookingData");

	Params::BP_CookingComponent_C_SaveCookingData Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ServerBurnFuel
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::ServerBurnFuel(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ServerBurnFuel");

	Params::BP_CookingComponent_C_ServerBurnFuel Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ServerConvertTimerCheck
// (BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::ServerConvertTimerCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ServerConvertTimerCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ServerPauseBurnFuel
// (BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::ServerPauseBurnFuel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ServerPauseBurnFuel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ServerStartFuelBurn
// (BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::ServerStartFuelBurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ServerStartFuelBurn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.ServerStopBurningFuel
// (BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::ServerStopBurningFuel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "ServerStopBurningFuel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.SetNewCookingItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CookingSlot                   CookingSlot                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_CookingComponent_C::SetNewCookingItem(const struct FS_InvSlot& InvSlot, struct FS_CookingSlot* CookingSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "SetNewCookingItem");

	Params::BP_CookingComponent_C_SetNewCookingItem Parms{};

	Parms.InvSlot = std::move(InvSlot);

	UObject::ProcessEvent(Func, &Parms);

	if (CookingSlot != nullptr)
		*CookingSlot = std::move(Parms.CookingSlot);

	return Parms.ReturnValue;
}


// Function BP_CookingComponent.BP_CookingComponent_C.SetNewCookingSlotItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// struct FS_InvItem                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    SpecialSlot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::SetNewCookingSlotItem(const struct FS_InvSlot& InvSlot, const struct FS_InvItem& Item, bool SpecialSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "SetNewCookingSlotItem");

	Params::BP_CookingComponent_C_SetNewCookingSlotItem Parms{};

	Parms.InvSlot = std::move(InvSlot);
	Parms.Item = std::move(Item);
	Parms.SpecialSlot = SpecialSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CookingComponent.BP_CookingComponent_C.SetSwitchedOn
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::SetSwitchedOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "SetSwitchedOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.SGK ItemMovedInInventory
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::SGK_ItemMovedInInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "SGK ItemMovedInInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.SGK ToggleComponent
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::SGK_ToggleComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "SGK ToggleComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.SGK UpdateSpecialSlot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_CookingComponent_C::SGK_UpdateSpecialSlot(const struct FS_InvSlot& InvSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "SGK UpdateSpecialSlot");

	Params::BP_CookingComponent_C_SGK_UpdateSpecialSlot Parms{};

	Parms.InvSlot = std::move(InvSlot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CookingComponent.BP_CookingComponent_C.StartPlayerCookingSlot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_CookingSlot                   CookingSlot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CookingComponent_C::StartPlayerCookingSlot(const struct FS_CookingSlot& CookingSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "StartPlayerCookingSlot");

	Params::BP_CookingComponent_C_StartPlayerCookingSlot Parms{};

	Parms.CookingSlot = std::move(CookingSlot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CookingComponent.BP_CookingComponent_C.TurnOn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::TurnOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "TurnOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.UpdateCookingItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::UpdateCookingItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "UpdateCookingItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.UpdateCookingTimes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CookingComponent_C::UpdateCookingTimes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "UpdateCookingTimes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CookingComponent.BP_CookingComponent_C.UpdateFuelBurn
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_CookingComponent_C::UpdateFuelBurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CookingComponent_C", "UpdateFuelBurn");

	Params::BP_CookingComponent_C_UpdateFuelBurn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

