#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Peak53GameState

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Peak53_classes.hpp"
#include "Peak53Teams_structs.hpp"
#include "ENU_ScoreCategory_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Peak53GameState.Peak53GameState_C
// 0x0130 (0x0538 - 0x0408)
class APeak53GameState_C final : public APKGameState
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0408(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AGameManager_C*                         GameManagerRef;                                    // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        RoundTimer;                                        // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConnectedPlayers;                                  // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A8F[0x4];                                     // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   GameManagerMessage;                                // 0x0430(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	double                                        StartCountdown;                                    // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SealsScore;                                        // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InsurgentsScore;                                   // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           PrematchTimer;                                     // 0x0458(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         PrematchTime;                                      // 0x0460(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameIsActive;                                      // 0x0464(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A90[0x3];                                     // 0x0465(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MatchTime;                                         // 0x0468(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A91[0x4];                                     // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           MatchTimer;                                        // 0x0470(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         RoundHardReset;                                    // 0x0478(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRoundEnding_;                                     // 0x047C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRoundEnded;                                      // 0x047D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A92[0x2];                                     // 0x047E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DisconnectTime;                                    // 0x0480(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GameTimer;                                         // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Kill_Confirmed_Cue;                                // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SealsVictoriousCue;                                // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Insurgents_Victorious_Cue;                         // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HQ_Draw_Cue;                                       // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Unable_To_Plant_The_Bomb_Cue;                      // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         BreachActors;                                      // 0x04B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class APlayerController*>              ReadyPlayers;                                      // 0x04C0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          GameIsInWarmup;                                    // 0x04D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A93[0x7];                                     // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MapRotation;                                       // 0x04D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsBombPlanted_;                                    // 0x04E8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldLookForDraw_;                               // 0x04E9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A94[0x2];                                     // 0x04EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentVoteYes;                                    // 0x04EC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentVoteNo;                                     // 0x04F0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentVoteMembers;                                // 0x04F4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APeak53PlayerState_C*                   CurrentVotePlayerObject;                           // 0x04F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVoteInUse;                                       // 0x0500(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPeak53Teams                                  CurrentVoteTeam;                                   // 0x0501(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A95[0x6];                                     // 0x0502(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerController*>              PlayersAlreadyVoted;                               // 0x0508(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	class USoundBase*                             Begin_Round_Warning_Cue;                           // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         RoundToWin;                                        // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A96[0x4];                                     // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 VotableMapsCounter;                                // 0x0528(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)

public:
	void AddDeathsServer(class APeak53PlayerState_C* PlayerState);
	void AddKillsServer(class APeak53PlayerState_C* PlayerState, bool IsTeamMember);
	void AddPlayerToLobby(const TArray<class APlayerController*>& PlayerListGamemode);
	void AddPlayerToReadyList(const class APlayerController*& NewItem);
	void AddScoreMulticast(bool SealsTrue);
	void AddScorePlayerServer(class APeak53PlayerState_C* PlayerState, ENU_ScoreCategory ScoreCategory);
	void AddScoreScoreboardServer(bool SealsTrue);
	void CallVoteForPlayer(EPeak53Teams Team, class APeak53PlayerState_C* CurrentPlayerPlayerstate);
	void CheckFFA(bool* FFA_);
	void CheckHardReset();
	void CMDSetupMapVote();
	void CMDVoteForMap(int32 LevelIndex);
	void DecrementMatchTimer();
	void DecrementPrematchTimer();
	void ExecuteUbergraph_Peak53GameState(int32 EntryPoint);
	void Get_Votable_Map_Result(int32* MapIndex, struct FS_VotableLevels* Out_Row);
	void HQ_Draw(class USoundBase* Sound);
	void HQ_Kill_Confirmed(class USoundBase* Sound);
	void Insurgents_Victorious(class USoundBase* Sound);
	void LateJoinersServer();
	void MulticastSound(class USoundBase* Sound);
	void NextRoundGameState();
	void OnRep_GameManagerMessage();
	void PlaySound(class USoundBase* Sound);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ResetBreachActors();
	void ResetScoresServer();
	void SealsVictorious(class USoundBase* Sound);
	void StartGame();
	void StartGameTimer();
	void Unable_To_Plant(class USoundBase* Sound);
	void VoteNo(const class APlayerController*& ItemToFind);
	void VoteYes(const class APlayerController*& ItemToFind);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Peak53GameState_C">();
	}
	static class APeak53GameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APeak53GameState_C>();
	}
};
static_assert(alignof(APeak53GameState_C) == 0x000008, "Wrong alignment on APeak53GameState_C");
static_assert(sizeof(APeak53GameState_C) == 0x000538, "Wrong size on APeak53GameState_C");
static_assert(offsetof(APeak53GameState_C, UberGraphFrame) == 0x000408, "Member 'APeak53GameState_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, DefaultSceneRoot) == 0x000410, "Member 'APeak53GameState_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, GameManagerRef) == 0x000418, "Member 'APeak53GameState_C::GameManagerRef' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, RoundTimer) == 0x000420, "Member 'APeak53GameState_C::RoundTimer' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, ConnectedPlayers) == 0x000428, "Member 'APeak53GameState_C::ConnectedPlayers' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, GameManagerMessage) == 0x000430, "Member 'APeak53GameState_C::GameManagerMessage' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, StartCountdown) == 0x000448, "Member 'APeak53GameState_C::StartCountdown' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, SealsScore) == 0x000450, "Member 'APeak53GameState_C::SealsScore' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, InsurgentsScore) == 0x000454, "Member 'APeak53GameState_C::InsurgentsScore' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, PrematchTimer) == 0x000458, "Member 'APeak53GameState_C::PrematchTimer' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, PrematchTime) == 0x000460, "Member 'APeak53GameState_C::PrematchTime' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, GameIsActive) == 0x000464, "Member 'APeak53GameState_C::GameIsActive' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, MatchTime) == 0x000468, "Member 'APeak53GameState_C::MatchTime' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, MatchTimer) == 0x000470, "Member 'APeak53GameState_C::MatchTimer' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, RoundHardReset) == 0x000478, "Member 'APeak53GameState_C::RoundHardReset' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, bRoundEnding_) == 0x00047C, "Member 'APeak53GameState_C::bRoundEnding_' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, IsRoundEnded) == 0x00047D, "Member 'APeak53GameState_C::IsRoundEnded' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, DisconnectTime) == 0x000480, "Member 'APeak53GameState_C::DisconnectTime' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, GameTimer) == 0x000484, "Member 'APeak53GameState_C::GameTimer' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, Kill_Confirmed_Cue) == 0x000488, "Member 'APeak53GameState_C::Kill_Confirmed_Cue' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, SealsVictoriousCue) == 0x000490, "Member 'APeak53GameState_C::SealsVictoriousCue' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, Insurgents_Victorious_Cue) == 0x000498, "Member 'APeak53GameState_C::Insurgents_Victorious_Cue' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, HQ_Draw_Cue) == 0x0004A0, "Member 'APeak53GameState_C::HQ_Draw_Cue' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, Unable_To_Plant_The_Bomb_Cue) == 0x0004A8, "Member 'APeak53GameState_C::Unable_To_Plant_The_Bomb_Cue' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, BreachActors) == 0x0004B0, "Member 'APeak53GameState_C::BreachActors' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, ReadyPlayers) == 0x0004C0, "Member 'APeak53GameState_C::ReadyPlayers' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, GameIsInWarmup) == 0x0004D0, "Member 'APeak53GameState_C::GameIsInWarmup' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, MapRotation) == 0x0004D8, "Member 'APeak53GameState_C::MapRotation' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, IsBombPlanted_) == 0x0004E8, "Member 'APeak53GameState_C::IsBombPlanted_' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, bShouldLookForDraw_) == 0x0004E9, "Member 'APeak53GameState_C::bShouldLookForDraw_' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, CurrentVoteYes) == 0x0004EC, "Member 'APeak53GameState_C::CurrentVoteYes' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, CurrentVoteNo) == 0x0004F0, "Member 'APeak53GameState_C::CurrentVoteNo' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, CurrentVoteMembers) == 0x0004F4, "Member 'APeak53GameState_C::CurrentVoteMembers' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, CurrentVotePlayerObject) == 0x0004F8, "Member 'APeak53GameState_C::CurrentVotePlayerObject' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, IsVoteInUse) == 0x000500, "Member 'APeak53GameState_C::IsVoteInUse' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, CurrentVoteTeam) == 0x000501, "Member 'APeak53GameState_C::CurrentVoteTeam' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, PlayersAlreadyVoted) == 0x000508, "Member 'APeak53GameState_C::PlayersAlreadyVoted' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, Begin_Round_Warning_Cue) == 0x000518, "Member 'APeak53GameState_C::Begin_Round_Warning_Cue' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, RoundToWin) == 0x000520, "Member 'APeak53GameState_C::RoundToWin' has a wrong offset!");
static_assert(offsetof(APeak53GameState_C, VotableMapsCounter) == 0x000528, "Member 'APeak53GameState_C::VotableMapsCounter' has a wrong offset!");

}

