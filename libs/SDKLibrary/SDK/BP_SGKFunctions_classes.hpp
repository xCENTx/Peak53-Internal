#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SGKFunctions

#include "Basic.hpp"

#include "E_AttachmentType_structs.hpp"
#include "E_Hitbox_structs.hpp"
#include "Engine_classes.hpp"
#include "E_BuildType_structs.hpp"
#include "E_CookingType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SGKFunctions.BP_SGKFunctions_C
// 0x0000 (0x0028 - 0x0028)
class UBP_SGKFunctions_C final : public UBlueprintFunctionLibrary
{
public:
	static void AddKeyToSave(class UInputMappingContext* MappingContext, const struct FEnhancedActionKeyMapping& KeyAction, class UObject* __WorldContext);
	static void LoadControls(class UObject* __WorldContext);
	static void SGK_AllowStacking(const struct FS_InvSlot& InvSlot, class UObject* __WorldContext, bool* AllowStacking);
	static void SGK_AttachmentCompatibilityCheck(const struct FS_InvItem& WeaponItem, const struct FS_InvItem& AttachmentItem, class UObject* __WorldContext, bool* AllowAttachment);
	static void SGK_AttachmentDetails(const struct FS_InvItem& Item, class UObject* __WorldContext, bool* Is_Attachment, struct FS_AttachmentDetails* Attachment_Details);
	static void SGK_BuildPartDetails(class FName BuildPartID, class UObject* __WorldContext, bool* BuildPartFound, struct FS_BuildPartDetails* BuildPartDetails);
	static int32 SGK_BuildPartRepairCost(class AActor* Actor, class UObject* __WorldContext);
	static void SGK_DurabilityDetails(const struct FS_InvItem& InvItem, class UObject* __WorldContext, bool* ItemFound, struct FS_DurabilityDetails* DurabilityDetails);
	static void SGK_GetInvSlot(class UBP_MasterInventory_C* MasterInventory, int32 Param_Index, class UObject* __WorldContext, bool* SlotFound, struct FS_InvSlot* InvSlot);
	static bool SGK_GetItemRangeClass(const struct FS_InvItem& Item, class UObject* __WorldContext, class UClass** RangeWeapon);
	static bool SGK_GetItemWeaponClass(const struct FS_InvItem& Item, class UObject* __WorldContext, class UClass** RangeWeapon);
	static void SGK_GetRootSlot(const struct FS_InvSlot& InvSlot, class UObject* __WorldContext, struct FS_InvSlot* RootInvSlot);
	static void SGK_GridClasses(E_BuildType BuildType, class UObject* __WorldContext, class UClass** Grid);
	static void SGK_HitboxDamage(TArray<struct FS_Damage>& HitboxDamage, E_Hitbox HitBox, class UObject* __WorldContext, int32* Damage);
	static void SGK_InventoryGridDetails(const struct FDataTableRowHandle& RowHandle, class UObject* __WorldContext, bool* FoundGrid, struct FS_CustomGridLayoutData* InventoryGridData);
	static void SGK_InvSlotAmount(const struct FS_InvSlot& InvSlot, class UObject* __WorldContext, bool* ItemValid, int32* Amount);
	static void SGK_InvSlotFromSlotID(const struct FS_InvSlotID& SlotID, class UObject* __WorldContext, struct FS_InvSlot* InvSlot);
	static void SGK_InvSlotItem(const struct FS_InvSlot& Inv_Slot, class UObject* __WorldContext, struct FS_InvItem* InvItem);
	static void SGK_InvSlotOccupied(const struct FS_InvSlot& InvSlot, class UObject* __WorldContext, bool* Occupied);
	static void SGK_IsHitbox(class FName BoneName, class UObject* __WorldContext, E_Hitbox* HitBox);
	static void SGK_IsMaxAmount(const struct FS_InvSlot& InvSlot, class UObject* __WorldContext, bool* MaxCount);
	static void SGK_IsRootSlot(const struct FS_InvSlot& Inv_Slot, class UObject* __WorldContext, bool* IsRootSlot, int32* RootIndex);
	static void SGK_IsSlotsSameItem(const struct FS_InvSlot& SlotOne, const struct FS_InvSlot& SlotTwo, class UObject* __WorldContext, bool* IsSameItem);
	static void SGK_ItemAmmoDetails(const struct FS_InvItem& InvItem, class UObject* __WorldContext, bool* ItemFound, struct FS_AmmoDetails* ItemAmmoDetails);
	static void SGK_ItemBuildPartDetails(const struct FS_InvItem& InvItem, class UObject* __WorldContext, bool* ItemFound, struct FS_BuildPartDetails* Build_Part_Details);
	static void SGK_ItemConsumableDetails(const struct FS_InvItem& InvItem, class UObject* __WorldContext, bool* ItemFound, struct FS_ConsumableDetails* ItemDetails);
	static void SGK_ItemContainerDetails(const struct FS_InvItem& InvItem, class UObject* __WorldContext, bool* ItemFound, struct FS_ContainerDetails* ItemContainerDetails);
	static bool SGK_ItemCookingRecipe(const struct FS_InvItem& Item, E_CookingType CookingType, class UObject* __WorldContext, struct FS_CookingRecipe* CookingRecipe);
	static void SGK_ItemDetails(const struct FS_InvItem& InvItem, class UObject* __WorldContext, bool* ItemFound, struct FS_ItemDetails* ItemDetails);
	static void SGK_ItemEquipmentDetails(const struct FS_InvItem& S_InvItem, class UObject* __WorldContext, bool* IsEquipmentItem, struct FS_EquipmentDetails* EquipmentDetails);
	static void SGK_ItemHoldableDetails(const struct FS_InvItem& InvItem, class UObject* __WorldContext, bool* ItemFound, struct FS_HoldableDetails* ItemHoldableDetails);
	static void SGK_ItemRecipeDetails(const struct FS_InvItem& InvItem, class UObject* __WorldContext, bool* ItemFound, struct FS_RecipeDetails* ItemRecipeDetails);
	static void SGK_ItemRepairCost(const struct FS_CraftingCost& RepairItems, double Durability, double Max_Durability, class UObject* __WorldContext, int32* ItemCount);
	static void SGK_ItemSize(const struct FS_InvItem& InvItem, class UObject* __WorldContext, int32* Height, int32* Width);
	static void SGK_ItemUIDetails(const struct FS_InvItem& InvItem, class UObject* __WorldContext, bool* ItemFound, struct FS_UIDetails* ItemUIDetails);
	static void SGK_ItemWeight(const struct FS_InvItem& Item, class UObject* __WorldContext, double* TotalWeight);
	static bool SGK_RecipeDetails(class FName RecipeRowName, class UObject* __WorldContext, struct FS_CraftingRecipe* CraftingRecipe);
	static void SGK_RootSpaceCheck(const struct FS_InvSlot& RootInvSlot, int32 Height, int32 Width, const struct FS_InvSlotID& IgnoreItem, bool Rotated, class UObject* __WorldContext, bool* SlotsBlocked, TArray<struct FS_InvSlot>* FoundSlots);
	static void SGK_SlotFinder(const struct FS_InvSlot& RootInvSlot, int32 Height, int32 Width, bool Rotated, class UObject* __WorldContext, TArray<struct FS_InvSlot>* FoundSlots);
	static void SGK_SlotItemDetails(class UBP_MasterInventory_C* Inventory, int32 Param_Index, class UObject* __WorldContext, bool* ItemFound, struct FS_ItemDetails* ItemDetails);
	static struct FVector SGK_VectorTransform(const struct FTransform& InTransform, double Forward, double Right, double Up, class UObject* __WorldContext);
	static void UpdateAimedSense(double MouseSence, class UObject* __WorldContext);
	static void UpdateMouseSense(double AimedSense, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SGKFunctions_C">();
	}
	static class UBP_SGKFunctions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SGKFunctions_C>();
	}
};
static_assert(alignof(UBP_SGKFunctions_C) == 0x000008, "Wrong alignment on UBP_SGKFunctions_C");
static_assert(sizeof(UBP_SGKFunctions_C) == 0x000028, "Wrong size on UBP_SGKFunctions_C");

}

