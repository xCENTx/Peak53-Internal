#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FirstPersonArms_Anim

#include "Basic.hpp"

#include "BP_FirstPersonArms_Anim_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_AimOffset_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "S_AimOffsets_structs.hpp"
#include "S_FirstPersonArmsAnims_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_AnimationMode_structs.hpp"
#include "E_AnimationState_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass BP_FirstPersonArms_Anim.BP_FirstPersonArms_Anim_C
// 0x3F70 (0x42C0 - 0x0350)
class UBP_FirstPersonArms_Anim_C final : public UAnimInstance
{
public:
	uint8                                         Pad_37C5[0x8];                                     // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct BP_FirstPersonArms_Anim::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0358(0x0024)(HasGetValueTypeHash)
	uint8                                         Pad_37C6[0x4];                                     // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0380(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0388(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0390(0x0020)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_6;                    // 0x03B0(0x0108)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_15;                    // 0x04B8(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x04E0(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_5;                    // 0x0528(0x0108)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_4;                    // 0x0630(0x0108)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_14;                    // 0x0738(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_5;                   // 0x0760(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_2;                  // 0x07A8(0x00E0)()
	struct FAnimNode_RotationOffsetBlendSpace     AnimGraphNode_RotationOffsetBlendSpace;            // 0x0888(0x0118)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x09A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x09C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x09F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x0A18(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x0A40(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x0A68(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0A90(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0AB8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0AE0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0B08(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0B30(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0B58(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0B80(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0BA8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_56;                   // 0x0BD0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_55;                   // 0x0C18(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_54;                   // 0x0C60(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_22;                  // 0x0CA8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_53;                   // 0x0CF0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_52;                   // 0x0D38(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_51;                   // 0x0D80(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_21;                  // 0x0DC8(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_20;                  // 0x0E10(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_50;                   // 0x0E58(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_49;                   // 0x0EA0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_48;                   // 0x0EE8(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_19;                  // 0x0F30(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x0F78(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_47;                   // 0x0F98(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_46;                   // 0x0FE0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_45;                   // 0x1028(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_18;                  // 0x1070(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_44;                   // 0x10B8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_43;                   // 0x1100(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_42;                   // 0x1148(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_17;                  // 0x1190(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_16;                  // 0x11D8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_41;                   // 0x1220(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_40;                   // 0x1268(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_39;                   // 0x12B0(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_15;                  // 0x12F8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x1340(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_38;                   // 0x1360(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_37;                   // 0x13A8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_36;                   // 0x13F0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_35;                   // 0x1438(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_34;                   // 0x1480(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_14;                  // 0x14C8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_33;                   // 0x1510(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_32;                   // 0x1558(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_13;                  // 0x15A0(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_12;                  // 0x15E8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_31;                   // 0x1630(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_30;                   // 0x1678(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_11;                  // 0x16C0(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_4;                   // 0x1708(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_29;                   // 0x1750(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_28;                   // 0x1798(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_27;                   // 0x17E0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_26;                   // 0x1828(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_25;                   // 0x1870(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_10;                  // 0x18B8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_24;                   // 0x1900(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_23;                   // 0x1948(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_9;                   // 0x1990(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_8;                   // 0x19D8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_22;                   // 0x1A20(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_21;                   // 0x1A68(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_7;                   // 0x1AB0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x1AF8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_20;                   // 0x1B18(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_19;                   // 0x1B60(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_18;                   // 0x1BA8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_17;                   // 0x1BF0(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_6;                   // 0x1C38(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x1C80(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_16;                   // 0x1CA0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_15;                   // 0x1CE8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_14;                   // 0x1D30(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_13;                   // 0x1D78(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_5;                   // 0x1DC0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x1E08(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_12;                   // 0x1E28(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_11;                   // 0x1E70(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_10;                   // 0x1EB8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_9;                    // 0x1F00(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_4;                   // 0x1F48(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x1F90(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x1FB0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x1FF8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x2040(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_3;                   // 0x2088(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x20D0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x2118(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x2160(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_2;                   // 0x21A8(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_1;                   // 0x21F0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x2238(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x2280(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x22C8(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum;                     // 0x2310(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x2358(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x2378(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_3;                    // 0x2440(0x0108)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_13;                    // 0x2548(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_12;                    // 0x2570(0x0028)()
	uint8                                         Pad_37C7[0x8];                                     // 0x2598(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_Fabrik                       AnimGraphNode_Fabrik;                              // 0x25A0(0x01F0)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_2;                         // 0x2790(0x0270)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x2A00(0x0128)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x2B28(0x0108)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_11;                    // 0x2C30(0x0028)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_3;             // 0x2C58(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_10;                    // 0x2C78(0x0028)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x2CA0(0x0108)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_9;                     // 0x2DA8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_8;                     // 0x2DD0(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x2DF8(0x0048)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x2E40(0x0128)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_3;             // 0x2F68(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2;             // 0x2F88(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2;             // 0x2FA8(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x2FC8(0x0128)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x30F0(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_7;                     // 0x3138(0x0028)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_1;                         // 0x3160(0x0270)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x33D0(0x0128)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x34F8(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x3518(0x0020)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x3538(0x0108)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x3640(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x3668(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x36B0(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x36F8(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x3720(0x00E0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x3800(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x3828(0x0048)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK;                           // 0x3870(0x0270)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x3AE0(0x00E0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x3BC0(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x3BE8(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x3C30(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x3C58(0x0028)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x3C80(0x00C8)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x3D48(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x3D68(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x3D88(0x0028)()
	bool                                          IsInAir_;                                          // 0x3DB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHoldingWeapon;                                   // 0x3DB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCrouched;                                        // 0x3DB2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAccelerating;                                    // 0x3DB3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAimOffset;                                      // 0x3DB4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRightHandIK;                                    // 0x3DB5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseLeftHandIK;                                     // 0x3DB6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C8[0x1];                                     // 0x3DB7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             OwningPawn;                                        // 0x3DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AimOffset;                                         // 0x3DC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                              LookAtRotation;                                    // 0x3DD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x3DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Direction;                                         // 0x3DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AimPitch;                                          // 0x3DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AimYaw;                                            // 0x3E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RootYawOffset;                                     // 0x3E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        YawLastTick;                                       // 0x3E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Yaw;                                               // 0x3E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        YawChangeOverFrame;                                // 0x3E20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurveValue;                                        // 0x3E28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurveValueLastFrame;                               // 0x3E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C9[0x8];                                     // 0x3E38(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LeftHandIKTransform;                               // 0x3E40(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RightHandIKTransform;                              // 0x3EA0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AnimationMode                               CurrentAnimMode;                                   // 0x3F00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37CA[0x7];                                     // 0x3F01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAimOffsetBlendSpace*                   EmptyHandsAimOffset;                               // 0x3F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          JumpingStart;                                      // 0x3F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          JumpingLoop;                                       // 0x3F18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          JumpLand;                                          // 0x3F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerInventory_C*                  PlayerInventory;                                   // 0x3F28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterComponent_C*               CharacterComponent;                                // 0x3F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FS_FirstPersonArmsAnims                HoldableAnims1;                                    // 0x3F38(0x0098)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHoldingItem;                                     // 0x3FD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Aimed;                                             // 0x3FD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37CB[0x6];                                     // 0x3FD2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RightHandIKLocationOffsetADS;                      // 0x3FD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_AimOffsets                          HoldableAimOffsets;                                // 0x3FF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SightOffset;                                       // 0x4008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InAction;                                          // 0x4020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37CC[0x7];                                     // 0x4021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAimOffsetBlendSpace*                   HoldableAimOffset;                                 // 0x4028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_AnimationState                              AnimationState;                                    // 0x4030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRightHandADSOffset;                             // 0x4031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37CD[0x6];                                     // 0x4032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Lean;                                              // 0x4038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             SightTransform;                                    // 0x4040(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AimOffset                                   AimOffsetType;                                     // 0x40A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37CE[0x7];                                     // 0x40A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RightHandSway;                                     // 0x40A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        WeaponCollision;                                   // 0x40C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RightHandIkEnabled;                                // 0x40C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ClippingRotation;                                  // 0x40D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Sprinting;                                         // 0x40E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37CF[0x7];                                     // 0x40E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ElbowOffset;                                       // 0x40F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLock;                                             // 0x4108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightHandIK;                                       // 0x4109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HeadAO;                                            // 0x410A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowHandIKs;                                      // 0x410B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37D0[0x4];                                     // 0x410C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Spine2AOAlpha;                                     // 0x4110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spine3AOAlpha;                                     // 0x4118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HeadAOAlpha;                                       // 0x4120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSway;                                           // 0x4128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftHandIK;                                        // 0x4129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37D1[0x6];                                     // 0x412A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Spine1AOAlpha;                                     // 0x4130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeftHandIkEnabled;                                 // 0x4138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpecalAO;                                          // 0x4140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_FirstPersonArmsAnims                HoldableAnims2;                                    // 0x4148(0x0098)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_MasterHoldable_C*                   HoldingItem;                                       // 0x41E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_MasterHoldable_C*                   NewHoldable;                                       // 0x41E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HoldingItemMesh;                                   // 0x41F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FS_FirstPersonArmsAnims                EmptyHandsUpperBody;                               // 0x41F8(0x0098)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeftElbowOffset;                                   // 0x4290(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MasterAttachment_C*                 LastSight;                                         // 0x42A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SprintLeftHand;                                    // 0x42B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void AnimNotify_DisableHandIK();
	void AnimNotify_EnableHandIK();
	void AnimNotify_EndAnimInAction();
	void AnimNotify_StartAnimInAction();
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void CalculateAimOffset();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_ModifyBone_66D2D2154FF69728F639AD9D22A64A5F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_ModifyBone_6B85F4B6426A1A9C67CAEBAB7B8AB2AA();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_TransitionResult_0DB43E6A4E078AD0877E6A9DFAF1988C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_TransitionResult_1CABD84E4D040B72FEA1A68BBB2E1C4C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_TransitionResult_8F4F39FA4DA81E6C2CC11F8866BC8E76();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_TransitionResult_98D9E062462F951C1FD6CC80A65D1F4C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_TransitionResult_9FB07C9B406444B13C04D7B27A979A31();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_TransitionResult_A3AF4BC042EFBF256B80CF96C3556DCB();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_TransitionResult_A73A8A7A40869C88F24B12951C038882();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_TransitionResult_E15168274668F42198870884F5B3E234();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_TransitionResult_F0B996DE47010D050D66A18EB819CBE8();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_TwoBoneIK_144E7E53475E6D5845CBAC9FD5C45CA9();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_TwoBoneIK_5EF7B0E5483436531C611683A4701054();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_FirstPersonArms_Anim_AnimGraphNode_TwoBoneIK_F707D91F45BFA11C639004BB3126C472();
	void ExecuteUbergraph_BP_FirstPersonArms_Anim(int32 EntryPoint);
	void SelectAnims(TArray<struct FS_FirstPersonArmsAnims>& FirstPersonAnims, bool* AnimsFound, struct FS_FirstPersonArmsAnims* Anims);
	void SGK_EndChamberMontage();
	void SGK_UpdateAnimationState(E_AnimationState Param_AnimationState);
	void SGK_UpdateHoldableAnimations(class ABP_MasterHoldable_C* Holdable);
	void UpdateAOWeights();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FirstPersonArms_Anim_C">();
	}
	static class UBP_FirstPersonArms_Anim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FirstPersonArms_Anim_C>();
	}
};
static_assert(alignof(UBP_FirstPersonArms_Anim_C) == 0x000010, "Wrong alignment on UBP_FirstPersonArms_Anim_C");
static_assert(sizeof(UBP_FirstPersonArms_Anim_C) == 0x0042C0, "Wrong size on UBP_FirstPersonArms_Anim_C");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, UberGraphFrame) == 0x000350, "Member 'UBP_FirstPersonArms_Anim_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, __AnimBlueprintMutables) == 0x000358, "Member 'UBP_FirstPersonArms_Anim_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimBlueprintExtension_PropertyAccess) == 0x000380, "Member 'UBP_FirstPersonArms_Anim_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimBlueprintExtension_Base) == 0x000388, "Member 'UBP_FirstPersonArms_Anim_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_Root) == 0x000390, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SaveCachedPose_6) == 0x0003B0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SaveCachedPose_6' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_15) == 0x0004B8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_15' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_Slot_2) == 0x0004E0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SaveCachedPose_5) == 0x000528, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SaveCachedPose_5' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SaveCachedPose_4) == 0x000630, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SaveCachedPose_4' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_14) == 0x000738, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_14' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByBool_5) == 0x000760, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByBool_5' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_LayeredBoneBlend_2) == 0x0007A8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_LayeredBoneBlend_2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_RotationOffsetBlendSpace) == 0x000888, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_RotationOffsetBlendSpace' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult_13) == 0x0009A0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult_12) == 0x0009C8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult_11) == 0x0009F0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult_10) == 0x000A18, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult_9) == 0x000A40, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult_8) == 0x000A68, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult_7) == 0x000A90, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult_6) == 0x000AB8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult_5) == 0x000AE0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult_4) == 0x000B08, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult_3) == 0x000B30, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult_2) == 0x000B58, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult_1) == 0x000B80, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TransitionResult) == 0x000BA8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_56) == 0x000BD0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_56' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_55) == 0x000C18, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_55' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_54) == 0x000C60, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_54' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_22) == 0x000CA8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_22' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_53) == 0x000CF0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_53' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_52) == 0x000D38, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_52' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_51) == 0x000D80, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_51' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_21) == 0x000DC8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_21' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_20) == 0x000E10, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_20' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_50) == 0x000E58, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_50' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_49) == 0x000EA0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_49' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_48) == 0x000EE8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_48' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_19) == 0x000F30, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_19' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_StateResult_6) == 0x000F78, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_47) == 0x000F98, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_47' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_46) == 0x000FE0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_46' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_45) == 0x001028, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_45' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_18) == 0x001070, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_18' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_44) == 0x0010B8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_44' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_43) == 0x001100, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_43' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_42) == 0x001148, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_42' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_17) == 0x001190, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_17' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_16) == 0x0011D8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_16' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_41) == 0x001220, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_41' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_40) == 0x001268, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_40' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_39) == 0x0012B0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_39' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_15) == 0x0012F8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_15' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_StateResult_5) == 0x001340, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_38) == 0x001360, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_38' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_37) == 0x0013A8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_37' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_36) == 0x0013F0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_36' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_35) == 0x001438, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_35' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_34) == 0x001480, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_34' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_14) == 0x0014C8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_14' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_33) == 0x001510, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_33' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_32) == 0x001558, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_32' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_13) == 0x0015A0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_13' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_12) == 0x0015E8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_12' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_31) == 0x001630, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_31' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_30) == 0x001678, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_30' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_11) == 0x0016C0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_11' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByBool_4) == 0x001708, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByBool_4' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_29) == 0x001750, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_29' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_28) == 0x001798, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_28' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_27) == 0x0017E0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_27' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_26) == 0x001828, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_26' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_25) == 0x001870, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_25' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_10) == 0x0018B8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_10' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_24) == 0x001900, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_24' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_23) == 0x001948, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_23' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_9) == 0x001990, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_9' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_8) == 0x0019D8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_8' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_22) == 0x001A20, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_22' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_21) == 0x001A68, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_21' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_7) == 0x001AB0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_7' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_StateResult_4) == 0x001AF8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_20) == 0x001B18, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_20' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_19) == 0x001B60, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_19' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_18) == 0x001BA8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_18' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_17) == 0x001BF0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_17' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_6) == 0x001C38, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_6' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_StateResult_3) == 0x001C80, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_16) == 0x001CA0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_16' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_15) == 0x001CE8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_15' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_14) == 0x001D30, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_14' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_13) == 0x001D78, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_13' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_5) == 0x001DC0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_5' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_StateResult_2) == 0x001E08, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_12) == 0x001E28, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_12' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_11) == 0x001E70, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_11' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_10) == 0x001EB8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_10' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_9) == 0x001F00, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_9' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_4) == 0x001F48, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_4' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_StateResult_1) == 0x001F90, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_8) == 0x001FB0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_7) == 0x001FF8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_6) == 0x002040, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_3) == 0x002088, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_3' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_5) == 0x0020D0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_4) == 0x002118, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_3) == 0x002160, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_2) == 0x0021A8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum_1) == 0x0021F0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum_1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_2) == 0x002238, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer_1) == 0x002280, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SequencePlayer) == 0x0022C8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByEnum) == 0x002310, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByEnum' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_StateResult) == 0x002358, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_StateMachine) == 0x002378, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SaveCachedPose_3) == 0x002440, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SaveCachedPose_3' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_13) == 0x002548, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_13' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_12) == 0x002570, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_12' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_Fabrik) == 0x0025A0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_Fabrik' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TwoBoneIK_2) == 0x002790, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TwoBoneIK_2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_ModifyBone_3) == 0x002A00, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SaveCachedPose_2) == 0x002B28, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_11) == 0x002C30, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_11' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_LocalToComponentSpace_3) == 0x002C58, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_LocalToComponentSpace_3' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_10) == 0x002C78, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_10' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SaveCachedPose_1) == 0x002CA0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_9) == 0x002DA8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_9' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_8) == 0x002DD0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_8' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByBool_3) == 0x002DF8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_ModifyBone_2) == 0x002E40, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_ComponentToLocalSpace_3) == 0x002F68, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_ComponentToLocalSpace_3' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_ComponentToLocalSpace_2) == 0x002F88, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_ComponentToLocalSpace_2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_LocalToComponentSpace_2) == 0x002FA8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_LocalToComponentSpace_2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_ModifyBone_1) == 0x002FC8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByBool_2) == 0x0030F0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_7) == 0x003138, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_7' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TwoBoneIK_1) == 0x003160, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TwoBoneIK_1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_ModifyBone) == 0x0033D0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_LocalToComponentSpace_1) == 0x0034F8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x003518, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_SaveCachedPose) == 0x003538, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_6) == 0x003640, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_Slot_1) == 0x003668, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_Slot) == 0x0036B0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_5) == 0x0036F8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_LayeredBoneBlend_1) == 0x003720, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_4) == 0x003800, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByBool_1) == 0x003828, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TwoBoneIK) == 0x003870, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TwoBoneIK' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_LayeredBoneBlend) == 0x003AE0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_3) == 0x003BC0, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_BlendListByBool) == 0x003BE8, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_2) == 0x003C30, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose_1) == 0x003C58, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_TwoWayBlend) == 0x003C80, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_ComponentToLocalSpace) == 0x003D48, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_LocalToComponentSpace) == 0x003D68, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimGraphNode_UseCachedPose) == 0x003D88, "Member 'UBP_FirstPersonArms_Anim_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, IsInAir_) == 0x003DB0, "Member 'UBP_FirstPersonArms_Anim_C::IsInAir_' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, IsHoldingWeapon) == 0x003DB1, "Member 'UBP_FirstPersonArms_Anim_C::IsHoldingWeapon' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, IsCrouched) == 0x003DB2, "Member 'UBP_FirstPersonArms_Anim_C::IsCrouched' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, IsAccelerating) == 0x003DB3, "Member 'UBP_FirstPersonArms_Anim_C::IsAccelerating' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, UseAimOffset) == 0x003DB4, "Member 'UBP_FirstPersonArms_Anim_C::UseAimOffset' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, UseRightHandIK) == 0x003DB5, "Member 'UBP_FirstPersonArms_Anim_C::UseRightHandIK' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, UseLeftHandIK) == 0x003DB6, "Member 'UBP_FirstPersonArms_Anim_C::UseLeftHandIK' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, OwningPawn) == 0x003DB8, "Member 'UBP_FirstPersonArms_Anim_C::OwningPawn' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AimOffset) == 0x003DC0, "Member 'UBP_FirstPersonArms_Anim_C::AimOffset' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, LookAtRotation) == 0x003DD8, "Member 'UBP_FirstPersonArms_Anim_C::LookAtRotation' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, Speed) == 0x003DE8, "Member 'UBP_FirstPersonArms_Anim_C::Speed' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, Direction) == 0x003DF0, "Member 'UBP_FirstPersonArms_Anim_C::Direction' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AimPitch) == 0x003DF8, "Member 'UBP_FirstPersonArms_Anim_C::AimPitch' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AimYaw) == 0x003E00, "Member 'UBP_FirstPersonArms_Anim_C::AimYaw' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, RootYawOffset) == 0x003E08, "Member 'UBP_FirstPersonArms_Anim_C::RootYawOffset' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, YawLastTick) == 0x003E10, "Member 'UBP_FirstPersonArms_Anim_C::YawLastTick' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, Yaw) == 0x003E18, "Member 'UBP_FirstPersonArms_Anim_C::Yaw' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, YawChangeOverFrame) == 0x003E20, "Member 'UBP_FirstPersonArms_Anim_C::YawChangeOverFrame' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, CurveValue) == 0x003E28, "Member 'UBP_FirstPersonArms_Anim_C::CurveValue' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, CurveValueLastFrame) == 0x003E30, "Member 'UBP_FirstPersonArms_Anim_C::CurveValueLastFrame' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, LeftHandIKTransform) == 0x003E40, "Member 'UBP_FirstPersonArms_Anim_C::LeftHandIKTransform' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, RightHandIKTransform) == 0x003EA0, "Member 'UBP_FirstPersonArms_Anim_C::RightHandIKTransform' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, CurrentAnimMode) == 0x003F00, "Member 'UBP_FirstPersonArms_Anim_C::CurrentAnimMode' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, EmptyHandsAimOffset) == 0x003F08, "Member 'UBP_FirstPersonArms_Anim_C::EmptyHandsAimOffset' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, JumpingStart) == 0x003F10, "Member 'UBP_FirstPersonArms_Anim_C::JumpingStart' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, JumpingLoop) == 0x003F18, "Member 'UBP_FirstPersonArms_Anim_C::JumpingLoop' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, JumpLand) == 0x003F20, "Member 'UBP_FirstPersonArms_Anim_C::JumpLand' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, PlayerInventory) == 0x003F28, "Member 'UBP_FirstPersonArms_Anim_C::PlayerInventory' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, CharacterComponent) == 0x003F30, "Member 'UBP_FirstPersonArms_Anim_C::CharacterComponent' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, HoldableAnims1) == 0x003F38, "Member 'UBP_FirstPersonArms_Anim_C::HoldableAnims1' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, IsHoldingItem) == 0x003FD0, "Member 'UBP_FirstPersonArms_Anim_C::IsHoldingItem' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, Aimed) == 0x003FD1, "Member 'UBP_FirstPersonArms_Anim_C::Aimed' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, RightHandIKLocationOffsetADS) == 0x003FD8, "Member 'UBP_FirstPersonArms_Anim_C::RightHandIKLocationOffsetADS' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, HoldableAimOffsets) == 0x003FF0, "Member 'UBP_FirstPersonArms_Anim_C::HoldableAimOffsets' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, SightOffset) == 0x004008, "Member 'UBP_FirstPersonArms_Anim_C::SightOffset' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, InAction) == 0x004020, "Member 'UBP_FirstPersonArms_Anim_C::InAction' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, HoldableAimOffset) == 0x004028, "Member 'UBP_FirstPersonArms_Anim_C::HoldableAimOffset' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AnimationState) == 0x004030, "Member 'UBP_FirstPersonArms_Anim_C::AnimationState' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, UseRightHandADSOffset) == 0x004031, "Member 'UBP_FirstPersonArms_Anim_C::UseRightHandADSOffset' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, Lean) == 0x004038, "Member 'UBP_FirstPersonArms_Anim_C::Lean' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, SightTransform) == 0x004040, "Member 'UBP_FirstPersonArms_Anim_C::SightTransform' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AimOffsetType) == 0x0040A0, "Member 'UBP_FirstPersonArms_Anim_C::AimOffsetType' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, RightHandSway) == 0x0040A8, "Member 'UBP_FirstPersonArms_Anim_C::RightHandSway' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, WeaponCollision) == 0x0040C0, "Member 'UBP_FirstPersonArms_Anim_C::WeaponCollision' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, RightHandIkEnabled) == 0x0040C8, "Member 'UBP_FirstPersonArms_Anim_C::RightHandIkEnabled' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, ClippingRotation) == 0x0040D0, "Member 'UBP_FirstPersonArms_Anim_C::ClippingRotation' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, Sprinting) == 0x0040E8, "Member 'UBP_FirstPersonArms_Anim_C::Sprinting' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, ElbowOffset) == 0x0040F0, "Member 'UBP_FirstPersonArms_Anim_C::ElbowOffset' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, bLock) == 0x004108, "Member 'UBP_FirstPersonArms_Anim_C::bLock' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, RightHandIK) == 0x004109, "Member 'UBP_FirstPersonArms_Anim_C::RightHandIK' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, HeadAO) == 0x00410A, "Member 'UBP_FirstPersonArms_Anim_C::HeadAO' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, AllowHandIKs) == 0x00410B, "Member 'UBP_FirstPersonArms_Anim_C::AllowHandIKs' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, Spine2AOAlpha) == 0x004110, "Member 'UBP_FirstPersonArms_Anim_C::Spine2AOAlpha' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, Spine3AOAlpha) == 0x004118, "Member 'UBP_FirstPersonArms_Anim_C::Spine3AOAlpha' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, HeadAOAlpha) == 0x004120, "Member 'UBP_FirstPersonArms_Anim_C::HeadAOAlpha' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, UseSway) == 0x004128, "Member 'UBP_FirstPersonArms_Anim_C::UseSway' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, LeftHandIK) == 0x004129, "Member 'UBP_FirstPersonArms_Anim_C::LeftHandIK' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, Spine1AOAlpha) == 0x004130, "Member 'UBP_FirstPersonArms_Anim_C::Spine1AOAlpha' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, LeftHandIkEnabled) == 0x004138, "Member 'UBP_FirstPersonArms_Anim_C::LeftHandIkEnabled' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, SpecalAO) == 0x004140, "Member 'UBP_FirstPersonArms_Anim_C::SpecalAO' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, HoldableAnims2) == 0x004148, "Member 'UBP_FirstPersonArms_Anim_C::HoldableAnims2' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, HoldingItem) == 0x0041E0, "Member 'UBP_FirstPersonArms_Anim_C::HoldingItem' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, NewHoldable) == 0x0041E8, "Member 'UBP_FirstPersonArms_Anim_C::NewHoldable' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, HoldingItemMesh) == 0x0041F0, "Member 'UBP_FirstPersonArms_Anim_C::HoldingItemMesh' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, EmptyHandsUpperBody) == 0x0041F8, "Member 'UBP_FirstPersonArms_Anim_C::EmptyHandsUpperBody' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, LeftElbowOffset) == 0x004290, "Member 'UBP_FirstPersonArms_Anim_C::LeftElbowOffset' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, LastSight) == 0x0042A8, "Member 'UBP_FirstPersonArms_Anim_C::LastSight' has a wrong offset!");
static_assert(offsetof(UBP_FirstPersonArms_Anim_C, SprintLeftHand) == 0x0042B0, "Member 'UBP_FirstPersonArms_Anim_C::SprintLeftHand' has a wrong offset!");

}

