#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CircleStat

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_CircleStat.BP_CircleStat_C.ExecuteUbergraph_BP_CircleStat
// 0x0018 (0x0018 - 0x0000)
struct BP_CircleStat_C_ExecuteUbergraph_BP_CircleStat final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_370F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleStat_C_ExecuteUbergraph_BP_CircleStat) == 0x000008, "Wrong alignment on BP_CircleStat_C_ExecuteUbergraph_BP_CircleStat");
static_assert(sizeof(BP_CircleStat_C_ExecuteUbergraph_BP_CircleStat) == 0x000018, "Wrong size on BP_CircleStat_C_ExecuteUbergraph_BP_CircleStat");
static_assert(offsetof(BP_CircleStat_C_ExecuteUbergraph_BP_CircleStat, EntryPoint) == 0x000000, "Member 'BP_CircleStat_C_ExecuteUbergraph_BP_CircleStat::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_ExecuteUbergraph_BP_CircleStat, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'BP_CircleStat_C_ExecuteUbergraph_BP_CircleStat::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_ExecuteUbergraph_BP_CircleStat, K2Node_Event_IsDesignTime) == 0x000010, "Member 'BP_CircleStat_C_ExecuteUbergraph_BP_CircleStat::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function BP_CircleStat.BP_CircleStat_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_CircleStat_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleStat_C_PreConstruct) == 0x000001, "Wrong alignment on BP_CircleStat_C_PreConstruct");
static_assert(sizeof(BP_CircleStat_C_PreConstruct) == 0x000001, "Wrong size on BP_CircleStat_C_PreConstruct");
static_assert(offsetof(BP_CircleStat_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_CircleStat_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_CircleStat.BP_CircleStat_C.UpdateFloat
// 0x0050 (0x0050 - 0x0000)
struct BP_CircleStat_C_UpdateFloat final
{
public:
	double                                        Stat;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StatMax;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3710[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3711[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleStat_C_UpdateFloat) == 0x000008, "Wrong alignment on BP_CircleStat_C_UpdateFloat");
static_assert(sizeof(BP_CircleStat_C_UpdateFloat) == 0x000050, "Wrong size on BP_CircleStat_C_UpdateFloat");
static_assert(offsetof(BP_CircleStat_C_UpdateFloat, Stat) == 0x000000, "Member 'BP_CircleStat_C_UpdateFloat::Stat' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateFloat, StatMax) == 0x000008, "Member 'BP_CircleStat_C_UpdateFloat::StatMax' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateFloat, Temp_bool_Variable) == 0x000010, "Member 'BP_CircleStat_C_UpdateFloat::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateFloat, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_CircleStat_C_UpdateFloat::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateFloat, Temp_real_Variable) == 0x000020, "Member 'BP_CircleStat_C_UpdateFloat::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateFloat, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_CircleStat_C_UpdateFloat::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateFloat, Temp_real_Variable_1) == 0x000030, "Member 'BP_CircleStat_C_UpdateFloat::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateFloat, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000038, "Member 'BP_CircleStat_C_UpdateFloat::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateFloat, K2Node_Select_Default) == 0x000040, "Member 'BP_CircleStat_C_UpdateFloat::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateFloat, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000048, "Member 'BP_CircleStat_C_UpdateFloat::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateFloat, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x00004C, "Member 'BP_CircleStat_C_UpdateFloat::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");

// Function BP_CircleStat.BP_CircleStat_C.UpdateIconSize
// 0x0038 (0x0038 - 0x0000)
struct BP_CircleStat_C_UpdateIconSize final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleStat_C_UpdateIconSize) == 0x000008, "Wrong alignment on BP_CircleStat_C_UpdateIconSize");
static_assert(sizeof(BP_CircleStat_C_UpdateIconSize) == 0x000038, "Wrong size on BP_CircleStat_C_UpdateIconSize");
static_assert(offsetof(BP_CircleStat_C_UpdateIconSize, Size) == 0x000000, "Member 'BP_CircleStat_C_UpdateIconSize::Size' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateIconSize, CallFunc_BreakVector2D_X) == 0x000010, "Member 'BP_CircleStat_C_UpdateIconSize::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateIconSize, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_CircleStat_C_UpdateIconSize::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateIconSize, CallFunc_BreakVector2D_X_1) == 0x000020, "Member 'BP_CircleStat_C_UpdateIconSize::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateIconSize, CallFunc_BreakVector2D_Y_1) == 0x000028, "Member 'BP_CircleStat_C_UpdateIconSize::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateIconSize, CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast) == 0x000030, "Member 'BP_CircleStat_C_UpdateIconSize::CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateIconSize, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x000034, "Member 'BP_CircleStat_C_UpdateIconSize::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");

// Function BP_CircleStat.BP_CircleStat_C.UpdateInteger
// 0x0060 (0x0060 - 0x0000)
struct BP_CircleStat_C_UpdateInteger final
{
public:
	int32                                         Stat;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StatMax;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3712[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3713[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3714[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleStat_C_UpdateInteger) == 0x000008, "Wrong alignment on BP_CircleStat_C_UpdateInteger");
static_assert(sizeof(BP_CircleStat_C_UpdateInteger) == 0x000060, "Wrong size on BP_CircleStat_C_UpdateInteger");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, Stat) == 0x000000, "Member 'BP_CircleStat_C_UpdateInteger::Stat' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, StatMax) == 0x000004, "Member 'BP_CircleStat_C_UpdateInteger::StatMax' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, Temp_bool_Variable) == 0x000008, "Member 'BP_CircleStat_C_UpdateInteger::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00000C, "Member 'BP_CircleStat_C_UpdateInteger::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000010, "Member 'BP_CircleStat_C_UpdateInteger::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, Temp_real_Variable) == 0x000018, "Member 'BP_CircleStat_C_UpdateInteger::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_CircleStat_C_UpdateInteger::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_CircleStat_C_UpdateInteger::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, Temp_real_Variable_1) == 0x000030, "Member 'BP_CircleStat_C_UpdateInteger::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, K2Node_Select_Default) == 0x000038, "Member 'BP_CircleStat_C_UpdateInteger::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000040, "Member 'BP_CircleStat_C_UpdateInteger::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x000048, "Member 'BP_CircleStat_C_UpdateInteger::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000050, "Member 'BP_CircleStat_C_UpdateInteger::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000058, "Member 'BP_CircleStat_C_UpdateInteger::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CircleStat_C_UpdateInteger, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x00005C, "Member 'BP_CircleStat_C_UpdateInteger::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");

}

