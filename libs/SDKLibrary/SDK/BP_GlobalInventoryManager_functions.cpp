#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalInventoryManager

#include "Basic.hpp"

#include "BP_GlobalInventoryManager_classes.hpp"
#include "BP_GlobalInventoryManager_parameters.hpp"


namespace SDK
{

// Function BP_GlobalInventoryManager.BP_GlobalInventoryManager_C.ClearContainerInventories
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GlobalInventoryManager_C::ClearContainerInventories()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalInventoryManager_C", "ClearContainerInventories");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GlobalInventoryManager.BP_GlobalInventoryManager_C.CreateNewInventory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    Replicate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AllowStartingItems                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_MasterInventory_C*            Inventory                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalInventoryManager_C::CreateNewInventory(const struct FS_InvItem& Item, bool Replicate, bool AllowStartingItems, class UBP_MasterInventory_C** Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalInventoryManager_C", "CreateNewInventory");

	Params::BP_GlobalInventoryManager_C_CreateNewInventory Parms{};

	Parms.Item = std::move(Item);
	Parms.Replicate = Replicate;
	Parms.AllowStartingItems = AllowStartingItems;

	UObject::ProcessEvent(Func, &Parms);

	if (Inventory != nullptr)
		*Inventory = Parms.Inventory;
}


// Function BP_GlobalInventoryManager.BP_GlobalInventoryManager_C.CreateNewItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AddDefaults                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AddStartingItems                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotated                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Replicated                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvItem                       NewItem                                                (Parm, OutParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_GlobalInventoryManager_C::CreateNewItem(class FName ItemId, int32 Amount, bool AddDefaults, bool AddStartingItems, bool Rotated, bool Replicated, struct FS_InvItem* NewItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalInventoryManager_C", "CreateNewItem");

	Params::BP_GlobalInventoryManager_C_CreateNewItem Parms{};

	Parms.ItemId = ItemId;
	Parms.Amount = Amount;
	Parms.AddDefaults = AddDefaults;
	Parms.AddStartingItems = AddStartingItems;
	Parms.Rotated = Rotated;
	Parms.Replicated = Replicated;

	UObject::ProcessEvent(Func, &Parms);

	if (NewItem != nullptr)
		*NewItem = std::move(Parms.NewItem);
}


// Function BP_GlobalInventoryManager.BP_GlobalInventoryManager_C.CreateNewWeaponInventory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    Replicate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AllowStartingItems                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_WeaponInventory_C*            WeaponInventory                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalInventoryManager_C::CreateNewWeaponInventory(const struct FS_InvItem& Item, bool Replicate, bool AllowStartingItems, class UBP_WeaponInventory_C** WeaponInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalInventoryManager_C", "CreateNewWeaponInventory");

	Params::BP_GlobalInventoryManager_C_CreateNewWeaponInventory Parms{};

	Parms.Item = std::move(Item);
	Parms.Replicate = Replicate;
	Parms.AllowStartingItems = AllowStartingItems;

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponInventory != nullptr)
		*WeaponInventory = Parms.WeaponInventory;
}


// Function BP_GlobalInventoryManager.BP_GlobalInventoryManager_C.DestroyItemInventory
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MasterInventory_C*            MasterInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalInventoryManager_C::DestroyItemInventory(class UBP_MasterInventory_C* MasterInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalInventoryManager_C", "DestroyItemInventory");

	Params::BP_GlobalInventoryManager_C_DestroyItemInventory Parms{};

	Parms.MasterInventory = MasterInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GlobalInventoryManager.BP_GlobalInventoryManager_C.ExecuteUbergraph_BP_GlobalInventoryManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalInventoryManager_C::ExecuteUbergraph_BP_GlobalInventoryManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalInventoryManager_C", "ExecuteUbergraph_BP_GlobalInventoryManager");

	Params::BP_GlobalInventoryManager_C_ExecuteUbergraph_BP_GlobalInventoryManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GlobalInventoryManager.BP_GlobalInventoryManager_C.InitializeGlobalInventory
// (BlueprintCallable, BlueprintEvent)

void ABP_GlobalInventoryManager_C::InitializeGlobalInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalInventoryManager_C", "InitializeGlobalInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GlobalInventoryManager.BP_GlobalInventoryManager_C.LoadSave
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalInventoryManager_C::LoadSave(class UBP_SGKSaveGame_C* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalInventoryManager_C", "LoadSave");

	Params::BP_GlobalInventoryManager_C_LoadSave Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}

}

