#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UserSettings_Functions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UserSettings_Functions.BP_UserSettings_Functions_C
// 0x0000 (0x0028 - 0x0028)
class UBP_UserSettings_Functions_C final : public UBlueprintFunctionLibrary
{
public:
	static void ApplyHardwareBenchmarkResults(class UObject* __WorldContext);
	static void ApplyNonResolutionSettings(class UObject* __WorldContext);
	static void ApplyResolutionSettings(bool bCheckForCommandLineOverrides, class UObject* __WorldContext);
	static void ApplySettings(bool bCheckForCommandLineOverrides, class UObject* __WorldContext);
	static void ConfirmVideoMode(class UObject* __WorldContext);
	static void EnableHDR_DisplayOutput(bool bEnable, int32 DisplayNits, class UObject* __WorldContext);
	static int32 GetAntiAliasingQuality(class UObject* __WorldContext);
	static int32 GetAudioQualityLevel(class UObject* __WorldContext);
	static int32 GetCurrentHDR_DisplayNits(class UObject* __WorldContext);
	static struct FIntPoint GetDefaultResolution(class UObject* __WorldContext);
	static float GetDefaultResolutionScale(class UObject* __WorldContext);
	static EWindowMode GetDefaultWindowMode(class UObject* __WorldContext);
	static struct FIntPoint GetDefaultWindowPosition(class UObject* __WorldContext);
	static struct FIntPoint GetDesktopResolution(class UObject* __WorldContext);
	static int32 GetFoliageQuality(class UObject* __WorldContext);
	static int32 GetFramePace(class UObject* __WorldContext);
	static float GetFrameRateLimit(class UObject* __WorldContext);
	static EWindowMode GetFullscreenMode(class UObject* __WorldContext);
	static int32 GetGlobalIlluminationQuality(class UObject* __WorldContext);
	static bool GetIsDirty(class UObject* __WorldContext);
	static bool GetIsDynamicResolutionDirty(class UObject* __WorldContext);
	static bool GetIsDynamicResolutionEnabled(class UObject* __WorldContext);
	static bool GetIsFullscreenModeDirty(class UObject* __WorldContext);
	static bool GetIsHDR_Enabled(class UObject* __WorldContext);
	static bool GetIsScreenResolutionDirty(class UObject* __WorldContext);
	static bool GetIsVsyncDirty(class UObject* __WorldContext);
	static bool GetIsVsyncEnabled(class UObject* __WorldContext);
	static EWindowMode GetLastConfirmedFullscreenMode(class UObject* __WorldContext);
	static struct FIntPoint GetLastConfirmedScreenResolution(class UObject* __WorldContext);
	static int32 GetOverallScalabilityLevel(class UObject* __WorldContext);
	static int32 GetPostProcessQuality(class UObject* __WorldContext);
	static EWindowMode GetPreferredFullscreenMode(class UObject* __WorldContext);
	static float GetRecommendedResolutionScale(class UObject* __WorldContext);
	static int32 GetReflectionQuality(class UObject* __WorldContext);
	static void GetResolutionScaleInfo(class UObject* __WorldContext, float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue);
	static float GetResolutionScaleNormalized(class UObject* __WorldContext);
	static struct FIntPoint GetScreenResolution(class UObject* __WorldContext);
	static int32 GetShadingQuality(class UObject* __WorldContext);
	static int32 GetShadowQuality(class UObject* __WorldContext);
	static bool GetSupportsHDR_DisplayOutput(class UObject* __WorldContext);
	static int32 GetSyncInterval(class UObject* __WorldContext);
	static int32 GetTextureQuality(class UObject* __WorldContext);
	static int32 GetViewDistanceQuality(class UObject* __WorldContext);
	static int32 GetVisualEffectQuality(class UObject* __WorldContext);
	static void LoadSettings(bool bForceReload, class UObject* __WorldContext);
	static void ResetToCurrentSettings(class UObject* __WorldContext);
	static void RevertVideoMode(bool RevertManually, class UObject* __WorldContext);
	static void RunHardwareBenchmark(int32 WorkScale, float CPUMultiplier, float GPUMultiplier, class UObject* __WorldContext);
	static void SaveSettings(class UObject* __WorldContext);
	static void SetAntiAliasingQuality(int32 Value, class UObject* __WorldContext);
	static void SetAudioQualityLevel(int32 QualityLevel, class UObject* __WorldContext);
	static void SetBenchmarkFallbackValues(class UObject* __WorldContext);
	static void SetDynamicResolutionEnabled(bool bEnable, class UObject* __WorldContext);
	static void SetFoliageQuality(int32 Value, class UObject* __WorldContext);
	static void SetFrameRateLimit(float NewLimit, class UObject* __WorldContext);
	static void SetFullscreenMode(EWindowMode InFullscreenMode, class UObject* __WorldContext);
	static void SetGlobalIlluminationQuality(int32 Value, class UObject* __WorldContext);
	static void SetOverallScalabilityLevel(int32 Value, class UObject* __WorldContext);
	static void SetPostProcessQuality(int32 Value, class UObject* __WorldContext);
	static void SetReflectionQuality(int32 Value, class UObject* __WorldContext);
	static void SetResolutionScaleNormalized(float NewScaleNormalized, class UObject* __WorldContext);
	static void SetResolutionScaleValue(float NewScaleValue, class UObject* __WorldContext);
	static void SetScreenResolution(const struct FIntPoint& Resolution, class UObject* __WorldContext);
	static void SetShadingQuality(int32 Value, class UObject* __WorldContext);
	static void SetShadowQuality(int32 Value, class UObject* __WorldContext);
	static void SetTextureQuality(int32 Value, class UObject* __WorldContext);
	static void SetToDefaults(class UObject* __WorldContext);
	static void SetViewDistanceQuality(int32 Value, class UObject* __WorldContext);
	static void SetVisualEffectQuality(int32 Value, class UObject* __WorldContext);
	static void SetVSyncEnabled(bool bEnable, class UObject* __WorldContext);
	static void ValidateSettings(class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UserSettings_Functions_C">();
	}
	static class UBP_UserSettings_Functions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_UserSettings_Functions_C>();
	}
};
static_assert(alignof(UBP_UserSettings_Functions_C) == 0x000008, "Wrong alignment on UBP_UserSettings_Functions_C");
static_assert(sizeof(UBP_UserSettings_Functions_C) == 0x000028, "Wrong size on UBP_UserSettings_Functions_C");

}

