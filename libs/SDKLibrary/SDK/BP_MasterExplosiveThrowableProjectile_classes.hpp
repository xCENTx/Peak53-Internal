#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterExplosiveThrowableProjectile

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_MasterThrowableProjectile_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterExplosiveThrowableProjectile.BP_MasterExplosiveThrowableProjectile_C
// 0x00A0 (0x0340 - 0x02A0)
class ABP_MasterExplosiveThrowableProjectile_C : public ABP_MasterThrowableProjectile_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        TimeToExplode;                                     // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinDamage;                                         // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExplosionInnerRadius;                              // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExplosionOuterRadius;                              // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DamageFalloff;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ExplosionEffect;                                   // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EffectScale;                                       // 0x02D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMode;                                         // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C8[0x7];                                     // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             ExplosionSound;                                    // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             OwningCharacter;                                   // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PathTraceLastLoc;                                  // 0x0308(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMolotov_;                                         // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C9[0x7];                                     // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MolotovTimer;                                      // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MolotovTimeHandle;                                 // 0x0330(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             BurnMulticastSound;                                // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BurnSound();
	void ExecuteUbergraph_BP_MasterExplosiveThrowableProjectile(int32 EntryPoint);
	void Explode();
	void InitializeThownProjectile();
	void MolotovDamageLogic();
	void MolotovDamageTimer();
	void MolotovDelete();
	void MulticastExplodeEffect(class UParticleSystem* Particle, class USoundBase* Sound, const struct FVector& Scale);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterExplosiveThrowableProjectile_C">();
	}
	static class ABP_MasterExplosiveThrowableProjectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MasterExplosiveThrowableProjectile_C>();
	}
};
static_assert(alignof(ABP_MasterExplosiveThrowableProjectile_C) == 0x000008, "Wrong alignment on ABP_MasterExplosiveThrowableProjectile_C");
static_assert(sizeof(ABP_MasterExplosiveThrowableProjectile_C) == 0x000340, "Wrong size on ABP_MasterExplosiveThrowableProjectile_C");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_MasterExplosiveThrowableProjectile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, TimeToExplode) == 0x0002A8, "Member 'ABP_MasterExplosiveThrowableProjectile_C::TimeToExplode' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, Damage) == 0x0002B0, "Member 'ABP_MasterExplosiveThrowableProjectile_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, MinDamage) == 0x0002B4, "Member 'ABP_MasterExplosiveThrowableProjectile_C::MinDamage' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, ExplosionInnerRadius) == 0x0002B8, "Member 'ABP_MasterExplosiveThrowableProjectile_C::ExplosionInnerRadius' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, ExplosionOuterRadius) == 0x0002C0, "Member 'ABP_MasterExplosiveThrowableProjectile_C::ExplosionOuterRadius' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, DamageFalloff) == 0x0002C8, "Member 'ABP_MasterExplosiveThrowableProjectile_C::DamageFalloff' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, ExplosionEffect) == 0x0002D0, "Member 'ABP_MasterExplosiveThrowableProjectile_C::ExplosionEffect' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, EffectScale) == 0x0002D8, "Member 'ABP_MasterExplosiveThrowableProjectile_C::EffectScale' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, DebugMode) == 0x0002F0, "Member 'ABP_MasterExplosiveThrowableProjectile_C::DebugMode' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, ExplosionSound) == 0x0002F8, "Member 'ABP_MasterExplosiveThrowableProjectile_C::ExplosionSound' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, OwningCharacter) == 0x000300, "Member 'ABP_MasterExplosiveThrowableProjectile_C::OwningCharacter' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, PathTraceLastLoc) == 0x000308, "Member 'ABP_MasterExplosiveThrowableProjectile_C::PathTraceLastLoc' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, bMolotov_) == 0x000320, "Member 'ABP_MasterExplosiveThrowableProjectile_C::bMolotov_' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, MolotovTimer) == 0x000328, "Member 'ABP_MasterExplosiveThrowableProjectile_C::MolotovTimer' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, MolotovTimeHandle) == 0x000330, "Member 'ABP_MasterExplosiveThrowableProjectile_C::MolotovTimeHandle' has a wrong offset!");
static_assert(offsetof(ABP_MasterExplosiveThrowableProjectile_C, BurnMulticastSound) == 0x000338, "Member 'ABP_MasterExplosiveThrowableProjectile_C::BurnMulticastSound' has a wrong offset!");

}

