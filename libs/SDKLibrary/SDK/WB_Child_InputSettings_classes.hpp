#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_Child_InputSettings

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "WB_Child_Base_classes.hpp"
#include "Slate_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_Child_InputSettings.WB_Child_InputSettings_C
// 0x0150 (0x0430 - 0x02E0)
class UWB_Child_InputSettings_C final : public UWB_Child_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WB_Child_InputSettings_C;           // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWB_Infofield_C*                        Info_Field;                                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActionWidget*                    InputSwitchListener;                               // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             Scroll_Buttons;                                    // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonAnimatedSwitcher*                SwitchByInput;                                     // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_Button_Input_C*                     WB_Button_Input;                                   // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_Input_Gamepad_C*                    WB_Input_Gamepad;                                  // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bUsingGamepad;                                     // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BF2[0x3];                                     // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewState_InvMouse;                                 // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentState_InvMouse;                             // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewState_InvGamepad;                               // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentState_InvGamepad;                           // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BF3[0x4];                                     // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue_MouseSensitivity;                         // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentValue_MouseSensitivity;                     // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewValue_GamepadSensitivity;                       // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentValue_GamepadSensitivity;                   // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class FText>                Default_Input_Mappings;                            // 0x0350(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   SelectedMappingName;                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInputChord                            SelectedAction_OldKey;                             // 0x03A8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FInputChord                            SelectedAction_NewKey;                             // 0x03C8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FText                                   SelectedMappingText;                               // 0x03E8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   OccupiedMappingName;                               // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   OccupiedMappingKey;                                // 0x0408(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        SelectedAxisValue;                                 // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSelectedAxisMapping;                             // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActionMappingToInputChord(const struct FInputActionKeyMapping& InputActionKeyMapping, struct FInputChord* InputChord);
	void AxisToInputChord(const struct FInputAxisKeyMapping& InputAxisKeyMapping, struct FInputChord* InputChord, float* Scale);
	void BindPanelWidgetChildren_ButtonOnHovered(class UPanelWidget* Panel_Widget, bool Bind_Unbind, const TDelegate<void(class UCommonButtonBase* Button)>& EventToBind);
	void BindPanelWidgetChildren_ButtonOnUnhovered(class UPanelWidget* Panel_Widget, bool Bind_Unbind, const TDelegate<void(class UCommonButtonBase* Button)>& EventToBind);
	void Construct();
	void ExecuteUbergraph_WB_Child_InputSettings(int32 EntryPoint);
	TArray<class UWidget*> FilterByVisibility(class UPanelWidget* PanelWidget, ESlateVisibility Filter);
	bool Find_PC_ActionKey(const class FName InActionName, struct FInputActionKeyMapping* Key1, struct FInputActionKeyMapping* Key2);
	bool Find_PC_AxisKey(const class FName InActionName, struct FInputAxisKeyMapping* Key1, struct FInputAxisKeyMapping* Key2);
	bool FindActionKey_PC(const class FName InActionName, int32 Param_Index, struct FKey* Key);
	TArray<class FName> FindActiveActionMappingNames();
	TArray<class FName> FindActiveAxisMappingNames();
	bool FindAxisKey_PC(const class FName InAxisName, int32 Param_Index, struct FKey* Key);
	void FindDefaultAxisValueByName(const class FName& AxisMapping, double* DefaultAxis);
	void GetActionMappingByName(const class FName InputPin, TArray<struct FInputActionKeyMapping>* OutMappings);
	void GetAxisMappingByName(const class FName InputPin, TArray<struct FInputAxisKeyMapping>* OutMappings);
	void GetDefaultInputMappingInfo(class FName MappingName, class FText* Value);
	void GetDefaultInputNames(TArray<class FName>* Names);
	void GetDefaultInputText(TArray<class FText>* Text);
	void GetStateButtonInfo(class UCommonButtonBase* Button, class FText* Head, class FText* Body);
	void InputChordToActionMapping(const struct FInputChord& InputChord, struct FInputActionKeyMapping* InputActionKeyMapping);
	void InputChordToAxisMapping(const struct FInputChord& InputChord, float Scale, struct FInputAxisKeyMapping* InputActionKeyMapping);
	bool IsActionMapping(const class FName& ItemToFind);
	bool IsActionPC_Key(const struct FInputActionKeyMapping& Mapping);
	bool IsAxisPC_Key(const struct FInputAxisKeyMapping& Mapping);
	void IsOccupied(const struct FInputChord& Input, bool* IsMapped, struct FKey* MappedKey, class FName* MappedMappingName, class FText* MappedMappingNameText);
	void OnAnyButtonHovered(class UCommonButtonBase* Button);
	void OnAnyButtonUnhovered(class UCommonButtonBase* Button);
	void OnInputMethodChanged(bool Param_bUsingGamepad);
	void OnKeySelected(const struct FInputChord& OldKey, const struct FInputChord& NewKey, class UWB_Button_Input_C* Button, class FName MappingName, const class FText& MappingNameText, double AxisValue, bool IsAxisMapping);
	void OnOverrideRequestReac(bool Confirmed);
	void OnResetDefaults();
	void SetInfoFieldInfo(const class FText& Head, const class FText& Body);
	void SetupButtons();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_Child_InputSettings_C">();
	}
	static class UWB_Child_InputSettings_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_Child_InputSettings_C>();
	}
};
static_assert(alignof(UWB_Child_InputSettings_C) == 0x000008, "Wrong alignment on UWB_Child_InputSettings_C");
static_assert(sizeof(UWB_Child_InputSettings_C) == 0x000430, "Wrong size on UWB_Child_InputSettings_C");
static_assert(offsetof(UWB_Child_InputSettings_C, UberGraphFrame_WB_Child_InputSettings_C) == 0x0002E0, "Member 'UWB_Child_InputSettings_C::UberGraphFrame_WB_Child_InputSettings_C' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, Info_Field) == 0x0002E8, "Member 'UWB_Child_InputSettings_C::Info_Field' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, InputSwitchListener) == 0x0002F0, "Member 'UWB_Child_InputSettings_C::InputSwitchListener' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, Scroll_Buttons) == 0x0002F8, "Member 'UWB_Child_InputSettings_C::Scroll_Buttons' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, SwitchByInput) == 0x000300, "Member 'UWB_Child_InputSettings_C::SwitchByInput' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, WB_Button_Input) == 0x000308, "Member 'UWB_Child_InputSettings_C::WB_Button_Input' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, WB_Input_Gamepad) == 0x000310, "Member 'UWB_Child_InputSettings_C::WB_Input_Gamepad' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, bUsingGamepad) == 0x000318, "Member 'UWB_Child_InputSettings_C::bUsingGamepad' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, NewState_InvMouse) == 0x00031C, "Member 'UWB_Child_InputSettings_C::NewState_InvMouse' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, CurrentState_InvMouse) == 0x000320, "Member 'UWB_Child_InputSettings_C::CurrentState_InvMouse' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, NewState_InvGamepad) == 0x000324, "Member 'UWB_Child_InputSettings_C::NewState_InvGamepad' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, CurrentState_InvGamepad) == 0x000328, "Member 'UWB_Child_InputSettings_C::CurrentState_InvGamepad' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, NewValue_MouseSensitivity) == 0x000330, "Member 'UWB_Child_InputSettings_C::NewValue_MouseSensitivity' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, CurrentValue_MouseSensitivity) == 0x000338, "Member 'UWB_Child_InputSettings_C::CurrentValue_MouseSensitivity' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, NewValue_GamepadSensitivity) == 0x000340, "Member 'UWB_Child_InputSettings_C::NewValue_GamepadSensitivity' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, CurrentValue_GamepadSensitivity) == 0x000348, "Member 'UWB_Child_InputSettings_C::CurrentValue_GamepadSensitivity' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, Default_Input_Mappings) == 0x000350, "Member 'UWB_Child_InputSettings_C::Default_Input_Mappings' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, SelectedMappingName) == 0x0003A0, "Member 'UWB_Child_InputSettings_C::SelectedMappingName' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, SelectedAction_OldKey) == 0x0003A8, "Member 'UWB_Child_InputSettings_C::SelectedAction_OldKey' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, SelectedAction_NewKey) == 0x0003C8, "Member 'UWB_Child_InputSettings_C::SelectedAction_NewKey' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, SelectedMappingText) == 0x0003E8, "Member 'UWB_Child_InputSettings_C::SelectedMappingText' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, OccupiedMappingName) == 0x000400, "Member 'UWB_Child_InputSettings_C::OccupiedMappingName' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, OccupiedMappingKey) == 0x000408, "Member 'UWB_Child_InputSettings_C::OccupiedMappingKey' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, SelectedAxisValue) == 0x000420, "Member 'UWB_Child_InputSettings_C::SelectedAxisValue' has a wrong offset!");
static_assert(offsetof(UWB_Child_InputSettings_C, IsSelectedAxisMapping) == 0x000428, "Member 'UWB_Child_InputSettings_C::IsSelectedAxisMapping' has a wrong offset!");

}

