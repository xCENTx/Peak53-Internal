#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeaponInventory

#include "Basic.hpp"

#include "BP_WeaponInventory_classes.hpp"
#include "BP_WeaponInventory_parameters.hpp"


namespace SDK
{

// Function BP_WeaponInventory.BP_WeaponInventory_C.AddAttachmentUsingPlayers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_WeaponInventory_C::AddAttachmentUsingPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "AddAttachmentUsingPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.AddDefaultAttachments
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_WeaponInventory_C::AddDefaultAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "AddDefaultAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.AddWeaponAttachment
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       InvItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    PlayAnim                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponInventory_C::AddWeaponAttachment(const struct FS_InvItem& InvItem, bool PlayAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "AddWeaponAttachment");

	Params::BP_WeaponInventory_C_AddWeaponAttachment Parms{};

	Parms.InvItem = std::move(InvItem);
	Parms.PlayAnim = PlayAnim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.AmmoTypeCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_WeaponInventory_C::AmmoTypeCheck(const struct FS_InvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "AmmoTypeCheck");

	Params::BP_WeaponInventory_C_AmmoTypeCheck Parms{};

	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.ChamberRoundFromMag
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_WeaponInventory_C::ChamberRoundFromMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "ChamberRoundFromMag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.CreateAllAttachments
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_WeaponInventory_C::CreateAllAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "CreateAllAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.ExecuteUbergraph_BP_WeaponInventory
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponInventory_C::ExecuteUbergraph_BP_WeaponInventory(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "ExecuteUbergraph_BP_WeaponInventory");

	Params::BP_WeaponInventory_C_ExecuteUbergraph_BP_WeaponInventory Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.LoadSavedAttachments
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_AttachmentSaveSlot>    Attachments                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FS_OtherInvSaves>         OtherInventorys                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UBP_WeaponInventory_C::LoadSavedAttachments(TArray<struct FS_AttachmentSaveSlot>& Attachments, TArray<struct FS_OtherInvSaves>& OtherInventorys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "LoadSavedAttachments");

	Params::BP_WeaponInventory_C_LoadSavedAttachments Parms{};

	Parms.Attachments = std::move(Attachments);
	Parms.OtherInventorys = std::move(OtherInventorys);

	UObject::ProcessEvent(Func, &Parms);

	Attachments = std::move(Parms.Attachments);
	OtherInventorys = std::move(Parms.OtherInventorys);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.MulticastUpdateAttachmentItem
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AttachmentType                        Attachment                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvItem                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// class ABP_MasterAttachment_C*           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponInventory_C::MulticastUpdateAttachmentItem(E_AttachmentType Attachment, const struct FS_InvItem& Item, class ABP_MasterAttachment_C* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "MulticastUpdateAttachmentItem");

	Params::BP_WeaponInventory_C_MulticastUpdateAttachmentItem Parms{};

	Parms.Attachment = Attachment;
	Parms.Item = std::move(Item);
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.NextRound
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvSlot                       Item                                                   (Parm, OutParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

bool UBP_WeaponInventory_C::NextRound(struct FS_InvSlot* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "NextRound");

	Params::BP_WeaponInventory_C_NextRound Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Item != nullptr)
		*Item = std::move(Parms.Item);

	return Parms.ReturnValue;
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_WeaponInventory_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.RemoveAttachment
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AttachmentType                        Attachment                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponInventory_C::RemoveAttachment(E_AttachmentType Attachment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "RemoveAttachment");

	Params::BP_WeaponInventory_C_RemoveAttachment Parms{};

	Parms.Attachment = Attachment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.ReplicateContainingInventories
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Replicate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponInventory_C::ReplicateContainingInventories(bool Replicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "ReplicateContainingInventories");

	Params::BP_WeaponInventory_C_ReplicateContainingInventories Parms{};

	Parms.Replicate = Replicate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.SelectAttachmentItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_AttachmentType                        Attachment                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_AttachmentSlot                ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

struct FS_AttachmentSlot UBP_WeaponInventory_C::SelectAttachmentItem(E_AttachmentType Attachment, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "SelectAttachmentItem");

	Params::BP_WeaponInventory_C_SelectAttachmentItem Parms{};

	Parms.Attachment = Attachment;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	return Parms.ReturnValue;
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.ServerAddWeaponAttachment
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       AttachmentItem                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    AnimationSocket                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponInventory_C::ServerAddWeaponAttachment(const struct FS_InvItem& AttachmentItem, bool AnimationSocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "ServerAddWeaponAttachment");

	Params::BP_WeaponInventory_C_ServerAddWeaponAttachment Parms{};

	Parms.AttachmentItem = std::move(AttachmentItem);
	Parms.AnimationSocket = AnimationSocket;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.SGK DestroyWeaponAttachments
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_WeaponInventory_C::SGK_DestroyWeaponAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "SGK DestroyWeaponAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.SGK LoadWeaponAttachments
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponInventory_C::SGK_LoadWeaponAttachments(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "SGK LoadWeaponAttachments");

	Params::BP_WeaponInventory_C_SGK_LoadWeaponAttachments Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.SGK RemoveAttachment
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AttachmentType                        Attachment                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponInventory_C::SGK_RemoveAttachment(E_AttachmentType Attachment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "SGK RemoveAttachment");

	Params::BP_WeaponInventory_C_SGK_RemoveAttachment Parms{};

	Parms.Attachment = Attachment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.SGK ShowAttachments
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_WeaponInventory_C::SGK_ShowAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "SGK ShowAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.SGK UpdateAllAttachments
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_WeaponInventory_C::SGK_UpdateAllAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "SGK UpdateAllAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.TotalAmmo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_WeaponInventory_C::TotalAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "TotalAmmo");

	Params::BP_WeaponInventory_C_TotalAmmo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.TotalMaxAmmo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MaxAmmo                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponInventory_C::TotalMaxAmmo(int32* MaxAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "TotalMaxAmmo");

	Params::BP_WeaponInventory_C_TotalMaxAmmo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxAmmo != nullptr)
		*MaxAmmo = Parms.MaxAmmo;
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.UpdateAllAttachments
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_AttachmentSlot>        Attachments                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UBP_WeaponInventory_C::UpdateAllAttachments(TArray<struct FS_AttachmentSlot>& Attachments)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "UpdateAllAttachments");

	Params::BP_WeaponInventory_C_UpdateAllAttachments Parms{};

	Parms.Attachments = std::move(Attachments);

	UObject::ProcessEvent(Func, &Parms);

	Attachments = std::move(Parms.Attachments);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.UpdateAllClientAttachments
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_WeaponInventory_C::UpdateAllClientAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "UpdateAllClientAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.UpdateAttachmentItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AttachmentType                        AttachmentType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvItem                       AttachmentItem                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// class ABP_MasterAttachment_C*           Attachment                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponInventory_C::UpdateAttachmentItem(E_AttachmentType AttachmentType, const struct FS_InvItem& AttachmentItem, class ABP_MasterAttachment_C* Attachment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "UpdateAttachmentItem");

	Params::BP_WeaponInventory_C_UpdateAttachmentItem Parms{};

	Parms.AttachmentType = AttachmentType;
	Parms.AttachmentItem = std::move(AttachmentItem);
	Parms.Attachment = Attachment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponInventory.BP_WeaponInventory_C.UpdateAttachmentUsingPlayers
// (BlueprintCallable, BlueprintEvent)

void UBP_WeaponInventory_C::UpdateAttachmentUsingPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponInventory_C", "UpdateAttachmentUsingPlayers");

	UObject::ProcessEvent(Func, nullptr);
}

}

