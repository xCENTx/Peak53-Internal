#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QuickSlotKey

#include "Basic.hpp"

#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function BP_QuickSlotKey.BP_QuickSlotKey_C.ExecuteUbergraph_BP_QuickSlotKey
// 0x0060 (0x0060 - 0x0000)
struct BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3836[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_CustomEvent_SlotNumber;                     // 0x0028(0x0018)(HasGetValueTypeHash)
	class FText                                   CallFunc_Key_GetDisplayName_ReturnValue;           // 0x0040(0x0018)()
	float                                         CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey) == 0x000008, "Wrong alignment on BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey");
static_assert(sizeof(BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey) == 0x000060, "Wrong size on BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey");
static_assert(offsetof(BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey, EntryPoint) == 0x000000, "Member 'BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey, CallFunc_BreakVector2D_X) == 0x000008, "Member 'BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey, CallFunc_BreakVector2D_X_1) == 0x000018, "Member 'BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey, CallFunc_BreakVector2D_Y_1) == 0x000020, "Member 'BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey, K2Node_CustomEvent_SlotNumber) == 0x000028, "Member 'BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey::K2Node_CustomEvent_SlotNumber' has a wrong offset!");
static_assert(offsetof(BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey, CallFunc_Key_GetDisplayName_ReturnValue) == 0x000040, "Member 'BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey::CallFunc_Key_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey, CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast) == 0x000058, "Member 'BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey::CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x00005C, "Member 'BP_QuickSlotKey_C_ExecuteUbergraph_BP_QuickSlotKey::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");

// Function BP_QuickSlotKey.BP_QuickSlotKey_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_QuickSlotKey_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuickSlotKey_C_PreConstruct) == 0x000001, "Wrong alignment on BP_QuickSlotKey_C_PreConstruct");
static_assert(sizeof(BP_QuickSlotKey_C_PreConstruct) == 0x000001, "Wrong size on BP_QuickSlotKey_C_PreConstruct");
static_assert(offsetof(BP_QuickSlotKey_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_QuickSlotKey_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_QuickSlotKey.BP_QuickSlotKey_C.SetNumber
// 0x0018 (0x0018 - 0x0000)
struct BP_QuickSlotKey_C_SetNumber final
{
public:
	struct FKey                                   SlotNumber;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuickSlotKey_C_SetNumber) == 0x000008, "Wrong alignment on BP_QuickSlotKey_C_SetNumber");
static_assert(sizeof(BP_QuickSlotKey_C_SetNumber) == 0x000018, "Wrong size on BP_QuickSlotKey_C_SetNumber");
static_assert(offsetof(BP_QuickSlotKey_C_SetNumber, SlotNumber) == 0x000000, "Member 'BP_QuickSlotKey_C_SetNumber::SlotNumber' has a wrong offset!");

}

