#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinimapComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function MinimapComponent.MinimapComponent_C.AddActor
// 0x0068 (0x0068 - 0x0000)
struct MinimapComponent_C_AddActor final
{
public:
	class AActor*                                 POIActors;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          FollowActorRotation;                               // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TextureSize;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Color;                                             // 0x0028(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          bShowHeightIndicator;                              // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421F[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ToolTipOnHover;                                    // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Blink;                                             // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4220[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlinkSpeed;                                        // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_AddActor) == 0x000008, "Wrong alignment on MinimapComponent_C_AddActor");
static_assert(sizeof(MinimapComponent_C_AddActor) == 0x000068, "Wrong size on MinimapComponent_C_AddActor");
static_assert(offsetof(MinimapComponent_C_AddActor, POIActors) == 0x000000, "Member 'MinimapComponent_C_AddActor::POIActors' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActor, FollowActorRotation) == 0x000008, "Member 'MinimapComponent_C_AddActor::FollowActorRotation' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActor, Texture) == 0x000010, "Member 'MinimapComponent_C_AddActor::Texture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActor, TextureSize) == 0x000018, "Member 'MinimapComponent_C_AddActor::TextureSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActor, Color) == 0x000028, "Member 'MinimapComponent_C_AddActor::Color' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActor, bShowHeightIndicator) == 0x00003C, "Member 'MinimapComponent_C_AddActor::bShowHeightIndicator' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActor, ToolTipOnHover) == 0x000040, "Member 'MinimapComponent_C_AddActor::ToolTipOnHover' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActor, Blink) == 0x000058, "Member 'MinimapComponent_C_AddActor::Blink' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActor, BlinkSpeed) == 0x000060, "Member 'MinimapComponent_C_AddActor::BlinkSpeed' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.AddActors
// 0x0090 (0x0090 - 0x0000)
struct MinimapComponent_C_AddActors final
{
public:
	TArray<class AActor*>                         POIActors;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          FollowActorRotation;                               // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4221[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TextureSize;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Color;                                             // 0x0030(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          bShowHeightIndicator;                              // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4222[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ToolTipOnHover;                                    // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Blink;                                             // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4223[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlinkSpeed;                                        // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4224[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4225[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_AddActors) == 0x000008, "Wrong alignment on MinimapComponent_C_AddActors");
static_assert(sizeof(MinimapComponent_C_AddActors) == 0x000090, "Wrong size on MinimapComponent_C_AddActors");
static_assert(offsetof(MinimapComponent_C_AddActors, POIActors) == 0x000000, "Member 'MinimapComponent_C_AddActors::POIActors' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, FollowActorRotation) == 0x000010, "Member 'MinimapComponent_C_AddActors::FollowActorRotation' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, Texture) == 0x000018, "Member 'MinimapComponent_C_AddActors::Texture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, TextureSize) == 0x000020, "Member 'MinimapComponent_C_AddActors::TextureSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, Color) == 0x000030, "Member 'MinimapComponent_C_AddActors::Color' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, bShowHeightIndicator) == 0x000044, "Member 'MinimapComponent_C_AddActors::bShowHeightIndicator' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, ToolTipOnHover) == 0x000048, "Member 'MinimapComponent_C_AddActors::ToolTipOnHover' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, Blink) == 0x000060, "Member 'MinimapComponent_C_AddActors::Blink' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, BlinkSpeed) == 0x000068, "Member 'MinimapComponent_C_AddActors::BlinkSpeed' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'MinimapComponent_C_AddActors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, Temp_int_Array_Index_Variable) == 0x000074, "Member 'MinimapComponent_C_AddActors::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, Temp_int_Loop_Counter_Variable) == 0x000078, "Member 'MinimapComponent_C_AddActors::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, CallFunc_Array_Get_Item) == 0x000080, "Member 'MinimapComponent_C_AddActors::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'MinimapComponent_C_AddActors::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddActors, CallFunc_Add_IntInt_ReturnValue) == 0x00008C, "Member 'MinimapComponent_C_AddActors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.AddMarker
// 0x02E0 (0x02E0 - 0x0000)
struct MinimapComponent_C_AddMarker final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Persistent;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4226[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TextureSize;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Color;                                             // 0x0038(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	uint8                                         Pad_4227[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ToolTipOnHover;                                    // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UTexture2D*                             OffMinimapTexture__If_persistent_;                 // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              OffMinimapTextureSize;                             // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADummyMarker_C*                         MarkerRef;                                         // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4228[0x8];                                     // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0090(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADummyMarker_C*                         CallFunc_FinishSpawningActor_ReturnValue;          // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0100(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4229[0x6];                                     // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult_1;     // 0x01F0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue_1;        // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_AddMarker) == 0x000010, "Wrong alignment on MinimapComponent_C_AddMarker");
static_assert(sizeof(MinimapComponent_C_AddMarker) == 0x0002E0, "Wrong size on MinimapComponent_C_AddMarker");
static_assert(offsetof(MinimapComponent_C_AddMarker, Location) == 0x000000, "Member 'MinimapComponent_C_AddMarker::Location' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, Persistent) == 0x000018, "Member 'MinimapComponent_C_AddMarker::Persistent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, Texture) == 0x000020, "Member 'MinimapComponent_C_AddMarker::Texture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, TextureSize) == 0x000028, "Member 'MinimapComponent_C_AddMarker::TextureSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, Color) == 0x000038, "Member 'MinimapComponent_C_AddMarker::Color' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, ToolTipOnHover) == 0x000050, "Member 'MinimapComponent_C_AddMarker::ToolTipOnHover' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, OffMinimapTexture__If_persistent_) == 0x000068, "Member 'MinimapComponent_C_AddMarker::OffMinimapTexture__If_persistent_' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, OffMinimapTextureSize) == 0x000070, "Member 'MinimapComponent_C_AddMarker::OffMinimapTextureSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, MarkerRef) == 0x000080, "Member 'MinimapComponent_C_AddMarker::MarkerRef' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, CallFunc_MakeTransform_ReturnValue) == 0x000090, "Member 'MinimapComponent_C_AddMarker::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000F0, "Member 'MinimapComponent_C_AddMarker::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000F8, "Member 'MinimapComponent_C_AddMarker::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000100, "Member 'MinimapComponent_C_AddMarker::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0001E8, "Member 'MinimapComponent_C_AddMarker::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, CallFunc_IsValid_ReturnValue) == 0x0001E9, "Member 'MinimapComponent_C_AddMarker::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, CallFunc_K2_SetActorLocation_SweepHitResult_1) == 0x0001F0, "Member 'MinimapComponent_C_AddMarker::CallFunc_K2_SetActorLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMarker, CallFunc_K2_SetActorLocation_ReturnValue_1) == 0x0002D8, "Member 'MinimapComponent_C_AddMarker::CallFunc_K2_SetActorLocation_ReturnValue_1' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.AddMultiplePointOfInterest
// 0x0070 (0x0070 - 0x0000)
struct MinimapComponent_C_AddMultiplePointOfInterest final
{
public:
	struct FSlateColor                            Color;                                             // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	uint8                                         Pad_422A[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Actors;                                            // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bIsPersistent;                                     // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FollowActorRotation;                               // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_422B[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TextureSize;                                       // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             OutOfMapTextureIfPersistent;                       // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bKeepOutOfMinimapTexStraightIfPersistent;          // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOnlyShowWhenOutOfMinimapIfPersistent;             // 0x0051(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_422C[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_422D[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_AddMultiplePointOfInterest) == 0x000008, "Wrong alignment on MinimapComponent_C_AddMultiplePointOfInterest");
static_assert(sizeof(MinimapComponent_C_AddMultiplePointOfInterest) == 0x000070, "Wrong size on MinimapComponent_C_AddMultiplePointOfInterest");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, Color) == 0x000000, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::Color' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, Actors) == 0x000018, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::Actors' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, bIsPersistent) == 0x000028, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::bIsPersistent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, FollowActorRotation) == 0x000029, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::FollowActorRotation' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, Texture) == 0x000030, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::Texture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, TextureSize) == 0x000038, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::TextureSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, OutOfMapTextureIfPersistent) == 0x000048, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::OutOfMapTextureIfPersistent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, bKeepOutOfMinimapTexStraightIfPersistent) == 0x000050, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::bKeepOutOfMinimapTexStraightIfPersistent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, bOnlyShowWhenOutOfMinimapIfPersistent) == 0x000051, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::bOnlyShowWhenOutOfMinimapIfPersistent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, Temp_int_Array_Index_Variable) == 0x000058, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, CallFunc_Array_Get_Item) == 0x000060, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddMultiplePointOfInterest, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'MinimapComponent_C_AddMultiplePointOfInterest::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.AddPersistentActor
// 0x0088 (0x0088 - 0x0000)
struct MinimapComponent_C_AddPersistentActor final
{
public:
	class AActor*                                 POIActors;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          FollowActorRotation;                               // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_422E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TextureSize;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Color;                                             // 0x0028(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	uint8                                         Pad_422F[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             OffMinimapTexture;                                 // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              OffMinimapTextureSize;                             // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bKeepOffMinimapTextureStraight;                    // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOnlyShowWhenOffMinimap;                           // 0x0059(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowHeightIndicator;                              // 0x005A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4230[0x5];                                     // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ToolTipOnHover;                                    // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Blink;                                             // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4231[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlinkSpeed;                                        // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_AddPersistentActor) == 0x000008, "Wrong alignment on MinimapComponent_C_AddPersistentActor");
static_assert(sizeof(MinimapComponent_C_AddPersistentActor) == 0x000088, "Wrong size on MinimapComponent_C_AddPersistentActor");
static_assert(offsetof(MinimapComponent_C_AddPersistentActor, POIActors) == 0x000000, "Member 'MinimapComponent_C_AddPersistentActor::POIActors' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActor, FollowActorRotation) == 0x000008, "Member 'MinimapComponent_C_AddPersistentActor::FollowActorRotation' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActor, Texture) == 0x000010, "Member 'MinimapComponent_C_AddPersistentActor::Texture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActor, TextureSize) == 0x000018, "Member 'MinimapComponent_C_AddPersistentActor::TextureSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActor, Color) == 0x000028, "Member 'MinimapComponent_C_AddPersistentActor::Color' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActor, OffMinimapTexture) == 0x000040, "Member 'MinimapComponent_C_AddPersistentActor::OffMinimapTexture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActor, OffMinimapTextureSize) == 0x000048, "Member 'MinimapComponent_C_AddPersistentActor::OffMinimapTextureSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActor, bKeepOffMinimapTextureStraight) == 0x000058, "Member 'MinimapComponent_C_AddPersistentActor::bKeepOffMinimapTextureStraight' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActor, bOnlyShowWhenOffMinimap) == 0x000059, "Member 'MinimapComponent_C_AddPersistentActor::bOnlyShowWhenOffMinimap' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActor, bShowHeightIndicator) == 0x00005A, "Member 'MinimapComponent_C_AddPersistentActor::bShowHeightIndicator' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActor, ToolTipOnHover) == 0x000060, "Member 'MinimapComponent_C_AddPersistentActor::ToolTipOnHover' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActor, Blink) == 0x000078, "Member 'MinimapComponent_C_AddPersistentActor::Blink' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActor, BlinkSpeed) == 0x000080, "Member 'MinimapComponent_C_AddPersistentActor::BlinkSpeed' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.AddPersistentActors
// 0x00B0 (0x00B0 - 0x0000)
struct MinimapComponent_C_AddPersistentActors final
{
public:
	TArray<class AActor*>                         POIActors;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          FollowActorRotation;                               // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4232[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TextureSize;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Color;                                             // 0x0030(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	uint8                                         Pad_4233[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             OffMinimapTexture;                                 // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              OffScreenTextureSize;                              // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bKeepOffMinimapTextureStraight;                    // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOnlyShowWhenOffMinimap;                           // 0x0061(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowHeightIndicator;                              // 0x0062(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4234[0x5];                                     // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ToolTipOnHover;                                    // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Blink;                                             // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4235[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlinkSpeed;                                        // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4236[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4237[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_AddPersistentActors) == 0x000008, "Wrong alignment on MinimapComponent_C_AddPersistentActors");
static_assert(sizeof(MinimapComponent_C_AddPersistentActors) == 0x0000B0, "Wrong size on MinimapComponent_C_AddPersistentActors");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, POIActors) == 0x000000, "Member 'MinimapComponent_C_AddPersistentActors::POIActors' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, FollowActorRotation) == 0x000010, "Member 'MinimapComponent_C_AddPersistentActors::FollowActorRotation' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, Texture) == 0x000018, "Member 'MinimapComponent_C_AddPersistentActors::Texture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, TextureSize) == 0x000020, "Member 'MinimapComponent_C_AddPersistentActors::TextureSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, Color) == 0x000030, "Member 'MinimapComponent_C_AddPersistentActors::Color' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, OffMinimapTexture) == 0x000048, "Member 'MinimapComponent_C_AddPersistentActors::OffMinimapTexture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, OffScreenTextureSize) == 0x000050, "Member 'MinimapComponent_C_AddPersistentActors::OffScreenTextureSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, bKeepOffMinimapTextureStraight) == 0x000060, "Member 'MinimapComponent_C_AddPersistentActors::bKeepOffMinimapTextureStraight' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, bOnlyShowWhenOffMinimap) == 0x000061, "Member 'MinimapComponent_C_AddPersistentActors::bOnlyShowWhenOffMinimap' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, bShowHeightIndicator) == 0x000062, "Member 'MinimapComponent_C_AddPersistentActors::bShowHeightIndicator' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, ToolTipOnHover) == 0x000068, "Member 'MinimapComponent_C_AddPersistentActors::ToolTipOnHover' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, Blink) == 0x000080, "Member 'MinimapComponent_C_AddPersistentActors::Blink' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, BlinkSpeed) == 0x000088, "Member 'MinimapComponent_C_AddPersistentActors::BlinkSpeed' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, CallFunc_Array_Length_ReturnValue) == 0x000090, "Member 'MinimapComponent_C_AddPersistentActors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, Temp_int_Array_Index_Variable) == 0x000094, "Member 'MinimapComponent_C_AddPersistentActors::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, Temp_int_Loop_Counter_Variable) == 0x000098, "Member 'MinimapComponent_C_AddPersistentActors::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'MinimapComponent_C_AddPersistentActors::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, CallFunc_Less_IntInt_ReturnValue) == 0x0000A8, "Member 'MinimapComponent_C_AddPersistentActors::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPersistentActors, CallFunc_Add_IntInt_ReturnValue) == 0x0000AC, "Member 'MinimapComponent_C_AddPersistentActors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.AddPointOfInterest
// 0x00C0 (0x00C0 - 0x0000)
struct MinimapComponent_C_AddPointOfInterest final
{
public:
	struct FSlateColor                            Color;                                             // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	uint8                                         Pad_4238[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 POIActor;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPersistent;                                     // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FollowActorRotation;                               // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4239[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TextureSize;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             OutOfMinniMapTextureIfPersistent;                  // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              OffScreenTexSize;                                  // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bKeepOutOfMinimapTexStraightIfPersistent;          // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOnlyShowWhenOutOfMinimapIfPersistent;             // 0x0059(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLocation;                                       // 0x005A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_423A[0x5];                                     // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowHeightIndicator;                              // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_423B[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Tooltip;                                           // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Blink;                                             // 0x0098(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_423C[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlinkSpeed;                                        // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPOIW_C*                                CallFunc_Create_ReturnValue;                       // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_423D[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_AddPointOfInterest) == 0x000008, "Wrong alignment on MinimapComponent_C_AddPointOfInterest");
static_assert(sizeof(MinimapComponent_C_AddPointOfInterest) == 0x0000C0, "Wrong size on MinimapComponent_C_AddPointOfInterest");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, Color) == 0x000000, "Member 'MinimapComponent_C_AddPointOfInterest::Color' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, POIActor) == 0x000018, "Member 'MinimapComponent_C_AddPointOfInterest::POIActor' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, bIsPersistent) == 0x000020, "Member 'MinimapComponent_C_AddPointOfInterest::bIsPersistent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, FollowActorRotation) == 0x000021, "Member 'MinimapComponent_C_AddPointOfInterest::FollowActorRotation' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, Texture) == 0x000028, "Member 'MinimapComponent_C_AddPointOfInterest::Texture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, TextureSize) == 0x000030, "Member 'MinimapComponent_C_AddPointOfInterest::TextureSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, OutOfMinniMapTextureIfPersistent) == 0x000040, "Member 'MinimapComponent_C_AddPointOfInterest::OutOfMinniMapTextureIfPersistent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, OffScreenTexSize) == 0x000048, "Member 'MinimapComponent_C_AddPointOfInterest::OffScreenTexSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, bKeepOutOfMinimapTexStraightIfPersistent) == 0x000058, "Member 'MinimapComponent_C_AddPointOfInterest::bKeepOutOfMinimapTexStraightIfPersistent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, bOnlyShowWhenOutOfMinimapIfPersistent) == 0x000059, "Member 'MinimapComponent_C_AddPointOfInterest::bOnlyShowWhenOutOfMinimapIfPersistent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, bIsLocation) == 0x00005A, "Member 'MinimapComponent_C_AddPointOfInterest::bIsLocation' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, Location) == 0x000060, "Member 'MinimapComponent_C_AddPointOfInterest::Location' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, bShowHeightIndicator) == 0x000078, "Member 'MinimapComponent_C_AddPointOfInterest::bShowHeightIndicator' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, Tooltip) == 0x000080, "Member 'MinimapComponent_C_AddPointOfInterest::Tooltip' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, Blink) == 0x000098, "Member 'MinimapComponent_C_AddPointOfInterest::Blink' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, BlinkSpeed) == 0x0000A0, "Member 'MinimapComponent_C_AddPointOfInterest::BlinkSpeed' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, CallFunc_Create_ReturnValue) == 0x0000A8, "Member 'MinimapComponent_C_AddPointOfInterest::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, CallFunc_Not_PreBool_ReturnValue) == 0x0000B0, "Member 'MinimapComponent_C_AddPointOfInterest::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, CallFunc_Array_AddUnique_ReturnValue) == 0x0000B4, "Member 'MinimapComponent_C_AddPointOfInterest::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AddPointOfInterest, CallFunc_AddChildToOverlay_ReturnValue) == 0x0000B8, "Member 'MinimapComponent_C_AddPointOfInterest::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.AdjustHeightIndicatorSettings
// 0x0058 (0x0058 - 0x0000)
struct MinimapComponent_C_AdjustHeightIndicatorSettings final
{
public:
	class UTexture2D*                             ArrowUP;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            ArrowUpColor;                                      // 0x0008(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	uint8                                         Pad_423E[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ArrowDown;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            ArrowDownColor;                                    // 0x0028(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	uint8                                         Pad_423F[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Size;                                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_AcceptableHeightDifference;                  // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_AdjustHeightIndicatorSettings) == 0x000008, "Wrong alignment on MinimapComponent_C_AdjustHeightIndicatorSettings");
static_assert(sizeof(MinimapComponent_C_AdjustHeightIndicatorSettings) == 0x000058, "Wrong size on MinimapComponent_C_AdjustHeightIndicatorSettings");
static_assert(offsetof(MinimapComponent_C_AdjustHeightIndicatorSettings, ArrowUP) == 0x000000, "Member 'MinimapComponent_C_AdjustHeightIndicatorSettings::ArrowUP' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AdjustHeightIndicatorSettings, ArrowUpColor) == 0x000008, "Member 'MinimapComponent_C_AdjustHeightIndicatorSettings::ArrowUpColor' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AdjustHeightIndicatorSettings, ArrowDown) == 0x000020, "Member 'MinimapComponent_C_AdjustHeightIndicatorSettings::ArrowDown' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AdjustHeightIndicatorSettings, ArrowDownColor) == 0x000028, "Member 'MinimapComponent_C_AdjustHeightIndicatorSettings::ArrowDownColor' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AdjustHeightIndicatorSettings, Size) == 0x000040, "Member 'MinimapComponent_C_AdjustHeightIndicatorSettings::Size' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_AdjustHeightIndicatorSettings, Param_AcceptableHeightDifference) == 0x000050, "Member 'MinimapComponent_C_AdjustHeightIndicatorSettings::Param_AcceptableHeightDifference' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.CenterOverviewMapOnOwner
// 0x0038 (0x0038 - 0x0000)
struct MinimapComponent_C_CenterOverviewMapOnOwner final
{
public:
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4240[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_CenterOverviewMapOnOwner) == 0x000008, "Wrong alignment on MinimapComponent_C_CenterOverviewMapOnOwner");
static_assert(sizeof(MinimapComponent_C_CenterOverviewMapOnOwner) == 0x000038, "Wrong size on MinimapComponent_C_CenterOverviewMapOnOwner");
static_assert(offsetof(MinimapComponent_C_CenterOverviewMapOnOwner, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000000, "Member 'MinimapComponent_C_CenterOverviewMapOnOwner::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_CenterOverviewMapOnOwner, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'MinimapComponent_C_CenterOverviewMapOnOwner::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_CenterOverviewMapOnOwner, CallFunc_BreakVector_X) == 0x000020, "Member 'MinimapComponent_C_CenterOverviewMapOnOwner::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_CenterOverviewMapOnOwner, CallFunc_BreakVector_Y) == 0x000028, "Member 'MinimapComponent_C_CenterOverviewMapOnOwner::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_CenterOverviewMapOnOwner, CallFunc_BreakVector_Z) == 0x000030, "Member 'MinimapComponent_C_CenterOverviewMapOnOwner::CallFunc_BreakVector_Z' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ChangeBlinkSpeed
// 0x0038 (0x0038 - 0x0000)
struct MinimapComponent_C_ChangeBlinkSpeed final
{
public:
	class AActor*                                 POIActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4241[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPOIW_C*                                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ChangeBlinkSpeed) == 0x000008, "Wrong alignment on MinimapComponent_C_ChangeBlinkSpeed");
static_assert(sizeof(MinimapComponent_C_ChangeBlinkSpeed) == 0x000038, "Wrong size on MinimapComponent_C_ChangeBlinkSpeed");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, POIActor) == 0x000000, "Member 'MinimapComponent_C_ChangeBlinkSpeed::POIActor' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, Speed) == 0x000008, "Member 'MinimapComponent_C_ChangeBlinkSpeed::Speed' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, Found) == 0x000010, "Member 'MinimapComponent_C_ChangeBlinkSpeed::Found' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'MinimapComponent_C_ChangeBlinkSpeed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, Temp_bool_True_if_break_was_hit_Variable) == 0x000012, "Member 'MinimapComponent_C_ChangeBlinkSpeed::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, CallFunc_Not_PreBool_ReturnValue) == 0x000013, "Member 'MinimapComponent_C_ChangeBlinkSpeed::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, Temp_int_Array_Index_Variable) == 0x000014, "Member 'MinimapComponent_C_ChangeBlinkSpeed::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'MinimapComponent_C_ChangeBlinkSpeed::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'MinimapComponent_C_ChangeBlinkSpeed::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'MinimapComponent_C_ChangeBlinkSpeed::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, CallFunc_Array_Get_Item) == 0x000028, "Member 'MinimapComponent_C_ChangeBlinkSpeed::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'MinimapComponent_C_ChangeBlinkSpeed::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, CallFunc_BooleanAND_ReturnValue) == 0x000031, "Member 'MinimapComponent_C_ChangeBlinkSpeed::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeed, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000032, "Member 'MinimapComponent_C_ChangeBlinkSpeed::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ChangeBlinkSpeedMultiplePOI
// 0x0040 (0x0040 - 0x0000)
struct MinimapComponent_C_ChangeBlinkSpeedMultiplePOI final
{
public:
	TArray<class AActor*>                         POIs;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	double                                        NewSpeed;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4242[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4243[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPOIW_C*                                CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI) == 0x000008, "Wrong alignment on MinimapComponent_C_ChangeBlinkSpeedMultiplePOI");
static_assert(sizeof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI) == 0x000040, "Wrong size on MinimapComponent_C_ChangeBlinkSpeedMultiplePOI");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI, POIs) == 0x000000, "Member 'MinimapComponent_C_ChangeBlinkSpeedMultiplePOI::POIs' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI, NewSpeed) == 0x000010, "Member 'MinimapComponent_C_ChangeBlinkSpeedMultiplePOI::NewSpeed' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI, Temp_bool_True_if_break_was_hit_Variable) == 0x000018, "Member 'MinimapComponent_C_ChangeBlinkSpeedMultiplePOI::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'MinimapComponent_C_ChangeBlinkSpeedMultiplePOI::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'MinimapComponent_C_ChangeBlinkSpeedMultiplePOI::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'MinimapComponent_C_ChangeBlinkSpeedMultiplePOI::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'MinimapComponent_C_ChangeBlinkSpeedMultiplePOI::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'MinimapComponent_C_ChangeBlinkSpeedMultiplePOI::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI, CallFunc_Array_Get_Item) == 0x000030, "Member 'MinimapComponent_C_ChangeBlinkSpeedMultiplePOI::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'MinimapComponent_C_ChangeBlinkSpeedMultiplePOI::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI, CallFunc_BooleanAND_ReturnValue) == 0x000039, "Member 'MinimapComponent_C_ChangeBlinkSpeedMultiplePOI::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBlinkSpeedMultiplePOI, CallFunc_Array_Contains_ReturnValue) == 0x00003A, "Member 'MinimapComponent_C_ChangeBlinkSpeedMultiplePOI::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ChangeBorderSize
// 0x0018 (0x0018 - 0x0000)
struct MinimapComponent_C_ChangeBorderSize final
{
public:
	double                                        NewSize;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ChangeBorderSize) == 0x000008, "Wrong alignment on MinimapComponent_C_ChangeBorderSize");
static_assert(sizeof(MinimapComponent_C_ChangeBorderSize) == 0x000018, "Wrong size on MinimapComponent_C_ChangeBorderSize");
static_assert(offsetof(MinimapComponent_C_ChangeBorderSize, NewSize) == 0x000000, "Member 'MinimapComponent_C_ChangeBorderSize::NewSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBorderSize, CallFunc_MakeVector2D_ReturnValue) == 0x000008, "Member 'MinimapComponent_C_ChangeBorderSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ChangeBorderTextureAndSize
// 0x0038 (0x0038 - 0x0000)
struct MinimapComponent_C_ChangeBorderTextureAndSize final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Param_Border_Size;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4244[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4245[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ChangeBorderTextureAndSize) == 0x000008, "Wrong alignment on MinimapComponent_C_ChangeBorderTextureAndSize");
static_assert(sizeof(MinimapComponent_C_ChangeBorderTextureAndSize) == 0x000038, "Wrong size on MinimapComponent_C_ChangeBorderTextureAndSize");
static_assert(offsetof(MinimapComponent_C_ChangeBorderTextureAndSize, Texture) == 0x000000, "Member 'MinimapComponent_C_ChangeBorderTextureAndSize::Texture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBorderTextureAndSize, Param_Border_Size) == 0x000008, "Member 'MinimapComponent_C_ChangeBorderTextureAndSize::Param_Border_Size' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBorderTextureAndSize, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'MinimapComponent_C_ChangeBorderTextureAndSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBorderTextureAndSize, CallFunc_SelectColor_ReturnValue) == 0x000014, "Member 'MinimapComponent_C_ChangeBorderTextureAndSize::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeBorderTextureAndSize, CallFunc_MakeVector2D_ReturnValue) == 0x000028, "Member 'MinimapComponent_C_ChangeBorderTextureAndSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ChangeMinimapBorder
// 0x0040 (0x0040 - 0x0000)
struct MinimapComponent_C_ChangeMinimapBorder final
{
public:
	class UTexture2D*                             BorderTexture;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Size;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBorderRotates_;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4246[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4247[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ChangeMinimapBorder) == 0x000008, "Wrong alignment on MinimapComponent_C_ChangeMinimapBorder");
static_assert(sizeof(MinimapComponent_C_ChangeMinimapBorder) == 0x000040, "Wrong size on MinimapComponent_C_ChangeMinimapBorder");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapBorder, BorderTexture) == 0x000000, "Member 'MinimapComponent_C_ChangeMinimapBorder::BorderTexture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapBorder, Size) == 0x000008, "Member 'MinimapComponent_C_ChangeMinimapBorder::Size' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapBorder, bBorderRotates_) == 0x000010, "Member 'MinimapComponent_C_ChangeMinimapBorder::bBorderRotates_' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapBorder, CallFunc_MakeVector2D_ReturnValue) == 0x000018, "Member 'MinimapComponent_C_ChangeMinimapBorder::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapBorder, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'MinimapComponent_C_ChangeMinimapBorder::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapBorder, CallFunc_SelectColor_ReturnValue) == 0x00002C, "Member 'MinimapComponent_C_ChangeMinimapBorder::CallFunc_SelectColor_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ChangeMinimapTexture
// 0x0050 (0x0050 - 0x0000)
struct MinimapComponent_C_ChangeMinimapTexture final
{
public:
	class UTexture2D*                             Param_MapTexture;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 OrRenderTarget;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        MapLength;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_bIsDesignTime;                               // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4248[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4249[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ChangeMinimapTexture) == 0x000008, "Wrong alignment on MinimapComponent_C_ChangeMinimapTexture");
static_assert(sizeof(MinimapComponent_C_ChangeMinimapTexture) == 0x000050, "Wrong size on MinimapComponent_C_ChangeMinimapTexture");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapTexture, Param_MapTexture) == 0x000000, "Member 'MinimapComponent_C_ChangeMinimapTexture::Param_MapTexture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapTexture, OrRenderTarget) == 0x000008, "Member 'MinimapComponent_C_ChangeMinimapTexture::OrRenderTarget' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapTexture, MapLength) == 0x000010, "Member 'MinimapComponent_C_ChangeMinimapTexture::MapLength' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapTexture, Param_bIsDesignTime) == 0x000018, "Member 'MinimapComponent_C_ChangeMinimapTexture::Param_bIsDesignTime' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapTexture, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'MinimapComponent_C_ChangeMinimapTexture::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapTexture, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000028, "Member 'MinimapComponent_C_ChangeMinimapTexture::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapTexture, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'MinimapComponent_C_ChangeMinimapTexture::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapTexture, Temp_bool_Variable) == 0x000031, "Member 'MinimapComponent_C_ChangeMinimapTexture::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapTexture, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000038, "Member 'MinimapComponent_C_ChangeMinimapTexture::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapTexture, K2Node_Select_Default) == 0x000040, "Member 'MinimapComponent_C_ChangeMinimapTexture::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMinimapTexture, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000048, "Member 'MinimapComponent_C_ChangeMinimapTexture::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ChangeMyLocationColor
// 0x0014 (0x0014 - 0x0000)
struct MinimapComponent_C_ChangeMyLocationColor final
{
public:
	struct FSlateColor                            Color;                                             // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(MinimapComponent_C_ChangeMyLocationColor) == 0x000004, "Wrong alignment on MinimapComponent_C_ChangeMyLocationColor");
static_assert(sizeof(MinimapComponent_C_ChangeMyLocationColor) == 0x000014, "Wrong size on MinimapComponent_C_ChangeMyLocationColor");
static_assert(offsetof(MinimapComponent_C_ChangeMyLocationColor, Color) == 0x000000, "Member 'MinimapComponent_C_ChangeMyLocationColor::Color' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ChangeMyLocationTexture
// 0x0018 (0x0018 - 0x0000)
struct MinimapComponent_C_ChangeMyLocationTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Size;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ChangeMyLocationTexture) == 0x000008, "Wrong alignment on MinimapComponent_C_ChangeMyLocationTexture");
static_assert(sizeof(MinimapComponent_C_ChangeMyLocationTexture) == 0x000018, "Wrong size on MinimapComponent_C_ChangeMyLocationTexture");
static_assert(offsetof(MinimapComponent_C_ChangeMyLocationTexture, Texture) == 0x000000, "Member 'MinimapComponent_C_ChangeMyLocationTexture::Texture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangeMyLocationTexture, Size) == 0x000008, "Member 'MinimapComponent_C_ChangeMyLocationTexture::Size' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ChangePOIColor
// 0x0048 (0x0048 - 0x0000)
struct MinimapComponent_C_ChangePOIColor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Tint;                                              // 0x0008(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424A[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424B[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424C[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPOIW_C*                                CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424D[0x1];                                     // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ChangePOIColor) == 0x000008, "Wrong alignment on MinimapComponent_C_ChangePOIColor");
static_assert(sizeof(MinimapComponent_C_ChangePOIColor) == 0x000048, "Wrong size on MinimapComponent_C_ChangePOIColor");
static_assert(offsetof(MinimapComponent_C_ChangePOIColor, Actor) == 0x000000, "Member 'MinimapComponent_C_ChangePOIColor::Actor' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOIColor, Tint) == 0x000008, "Member 'MinimapComponent_C_ChangePOIColor::Tint' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOIColor, Temp_bool_True_if_break_was_hit_Variable) == 0x00001C, "Member 'MinimapComponent_C_ChangePOIColor::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOIColor, Temp_int_Array_Index_Variable) == 0x000020, "Member 'MinimapComponent_C_ChangePOIColor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOIColor, CallFunc_Not_PreBool_ReturnValue) == 0x000024, "Member 'MinimapComponent_C_ChangePOIColor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOIColor, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'MinimapComponent_C_ChangePOIColor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOIColor, CallFunc_Array_Get_Item) == 0x000030, "Member 'MinimapComponent_C_ChangePOIColor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOIColor, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'MinimapComponent_C_ChangePOIColor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOIColor, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'MinimapComponent_C_ChangePOIColor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOIColor, CallFunc_BooleanAND_ReturnValue) == 0x00003D, "Member 'MinimapComponent_C_ChangePOIColor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOIColor, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00003E, "Member 'MinimapComponent_C_ChangePOIColor::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOIColor, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'MinimapComponent_C_ChangePOIColor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ChangePOITexture
// 0x0048 (0x0048 - 0x0000)
struct MinimapComponent_C_ChangePOITexture final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Texture_Size;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Changed;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424E[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424F[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPOIW_C*                                CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ChangePOITexture) == 0x000008, "Wrong alignment on MinimapComponent_C_ChangePOITexture");
static_assert(sizeof(MinimapComponent_C_ChangePOITexture) == 0x000048, "Wrong size on MinimapComponent_C_ChangePOITexture");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, Actor) == 0x000000, "Member 'MinimapComponent_C_ChangePOITexture::Actor' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, Texture) == 0x000008, "Member 'MinimapComponent_C_ChangePOITexture::Texture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, Texture_Size) == 0x000010, "Member 'MinimapComponent_C_ChangePOITexture::Texture_Size' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, Changed) == 0x000020, "Member 'MinimapComponent_C_ChangePOITexture::Changed' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, Temp_bool_True_if_break_was_hit_Variable) == 0x000021, "Member 'MinimapComponent_C_ChangePOITexture::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, Temp_int_Array_Index_Variable) == 0x000024, "Member 'MinimapComponent_C_ChangePOITexture::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'MinimapComponent_C_ChangePOITexture::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'MinimapComponent_C_ChangePOITexture::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'MinimapComponent_C_ChangePOITexture::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'MinimapComponent_C_ChangePOITexture::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, CallFunc_Array_Get_Item) == 0x000038, "Member 'MinimapComponent_C_ChangePOITexture::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'MinimapComponent_C_ChangePOITexture::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, CallFunc_BooleanAND_ReturnValue) == 0x000041, "Member 'MinimapComponent_C_ChangePOITexture::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITexture, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000042, "Member 'MinimapComponent_C_ChangePOITexture::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ChangePOITextureAndColor
// 0x0060 (0x0060 - 0x0000)
struct MinimapComponent_C_ChangePOITextureAndColor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Texture_Size;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Tint;                                              // 0x0020(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Changed;                                           // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4250[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4251[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4252[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPOIW_C*                                CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ChangePOITextureAndColor) == 0x000008, "Wrong alignment on MinimapComponent_C_ChangePOITextureAndColor");
static_assert(sizeof(MinimapComponent_C_ChangePOITextureAndColor) == 0x000060, "Wrong size on MinimapComponent_C_ChangePOITextureAndColor");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, Actor) == 0x000000, "Member 'MinimapComponent_C_ChangePOITextureAndColor::Actor' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, Texture) == 0x000008, "Member 'MinimapComponent_C_ChangePOITextureAndColor::Texture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, Texture_Size) == 0x000010, "Member 'MinimapComponent_C_ChangePOITextureAndColor::Texture_Size' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, Tint) == 0x000020, "Member 'MinimapComponent_C_ChangePOITextureAndColor::Tint' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, Changed) == 0x000034, "Member 'MinimapComponent_C_ChangePOITextureAndColor::Changed' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, Temp_bool_True_if_break_was_hit_Variable) == 0x000035, "Member 'MinimapComponent_C_ChangePOITextureAndColor::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, Temp_int_Array_Index_Variable) == 0x000038, "Member 'MinimapComponent_C_ChangePOITextureAndColor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, CallFunc_Not_PreBool_ReturnValue) == 0x00003C, "Member 'MinimapComponent_C_ChangePOITextureAndColor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'MinimapComponent_C_ChangePOITextureAndColor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'MinimapComponent_C_ChangePOITextureAndColor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'MinimapComponent_C_ChangePOITextureAndColor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, CallFunc_Array_Get_Item) == 0x000050, "Member 'MinimapComponent_C_ChangePOITextureAndColor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'MinimapComponent_C_ChangePOITextureAndColor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, CallFunc_BooleanAND_ReturnValue) == 0x000059, "Member 'MinimapComponent_C_ChangePOITextureAndColor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ChangePOITextureAndColor, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00005A, "Member 'MinimapComponent_C_ChangePOITextureAndColor::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ChangeToCircularMinimap
// 0x0001 (0x0001 - 0x0000)
struct MinimapComponent_C_ChangeToCircularMinimap final
{
public:
	bool                                          bMinimapRotates_;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ChangeToCircularMinimap) == 0x000001, "Wrong alignment on MinimapComponent_C_ChangeToCircularMinimap");
static_assert(sizeof(MinimapComponent_C_ChangeToCircularMinimap) == 0x000001, "Wrong size on MinimapComponent_C_ChangeToCircularMinimap");
static_assert(offsetof(MinimapComponent_C_ChangeToCircularMinimap, bMinimapRotates_) == 0x000000, "Member 'MinimapComponent_C_ChangeToCircularMinimap::bMinimapRotates_' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ChangeToRectangularMinimap
// 0x0001 (0x0001 - 0x0000)
struct MinimapComponent_C_ChangeToRectangularMinimap final
{
public:
	bool                                          bMinimapRotates_;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ChangeToRectangularMinimap) == 0x000001, "Wrong alignment on MinimapComponent_C_ChangeToRectangularMinimap");
static_assert(sizeof(MinimapComponent_C_ChangeToRectangularMinimap) == 0x000001, "Wrong size on MinimapComponent_C_ChangeToRectangularMinimap");
static_assert(offsetof(MinimapComponent_C_ChangeToRectangularMinimap, bMinimapRotates_) == 0x000000, "Member 'MinimapComponent_C_ChangeToRectangularMinimap::bMinimapRotates_' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ClampXY
// 0x0088 (0x0088 - 0x0000)
struct MinimapComponent_C_ClampXY final
{
public:
	double                                        X;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Y;                                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BorderSize;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExtraClamp;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsOutside;                                        // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4253[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ClampXY) == 0x000008, "Wrong alignment on MinimapComponent_C_ClampXY");
static_assert(sizeof(MinimapComponent_C_ClampXY) == 0x000088, "Wrong size on MinimapComponent_C_ClampXY");
static_assert(offsetof(MinimapComponent_C_ClampXY, X) == 0x000000, "Member 'MinimapComponent_C_ClampXY::X' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, Y) == 0x000008, "Member 'MinimapComponent_C_ClampXY::Y' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, BorderSize) == 0x000010, "Member 'MinimapComponent_C_ClampXY::BorderSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, ExtraClamp) == 0x000018, "Member 'MinimapComponent_C_ClampXY::ExtraClamp' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, bIsOutside) == 0x000020, "Member 'MinimapComponent_C_ClampXY::bIsOutside' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000028, "Member 'MinimapComponent_C_ClampXY::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'MinimapComponent_C_ClampXY::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000038, "Member 'MinimapComponent_C_ClampXY::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'MinimapComponent_C_ClampXY::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000048, "Member 'MinimapComponent_C_ClampXY::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'MinimapComponent_C_ClampXY::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_FClamp_ReturnValue) == 0x000058, "Member 'MinimapComponent_C_ClampXY::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_FClamp_ReturnValue_1) == 0x000060, "Member 'MinimapComponent_C_ClampXY::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_Abs_ReturnValue) == 0x000068, "Member 'MinimapComponent_C_ClampXY::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_Abs_ReturnValue_1) == 0x000070, "Member 'MinimapComponent_C_ClampXY::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000078, "Member 'MinimapComponent_C_ClampXY::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000080, "Member 'MinimapComponent_C_ClampXY::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000081, "Member 'MinimapComponent_C_ClampXY::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClampXY, CallFunc_BooleanOR_ReturnValue) == 0x000082, "Member 'MinimapComponent_C_ClampXY::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ClearAllPOI
// 0x0020 (0x0020 - 0x0000)
struct MinimapComponent_C_ClearAllPOI final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4254[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPOIW_C*                                CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ClearAllPOI) == 0x000008, "Wrong alignment on MinimapComponent_C_ClearAllPOI");
static_assert(sizeof(MinimapComponent_C_ClearAllPOI) == 0x000020, "Wrong size on MinimapComponent_C_ClearAllPOI");
static_assert(offsetof(MinimapComponent_C_ClearAllPOI, Temp_int_Array_Index_Variable) == 0x000000, "Member 'MinimapComponent_C_ClearAllPOI::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClearAllPOI, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'MinimapComponent_C_ClearAllPOI::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClearAllPOI, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'MinimapComponent_C_ClearAllPOI::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClearAllPOI, CallFunc_Array_Get_Item) == 0x000010, "Member 'MinimapComponent_C_ClearAllPOI::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClearAllPOI, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'MinimapComponent_C_ClearAllPOI::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClearAllPOI, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'MinimapComponent_C_ClearAllPOI::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ClonePOIArray
// 0x0068 (0x0068 - 0x0000)
struct MinimapComponent_C_ClonePOIArray final
{
public:
	TArray<class UPOIW_C*>                        Source;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          KeepPersistentActors;                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          KeepHeightIndicator;                               // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4255[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4256[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4257[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPOIW_C*                                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4258[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4259[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPOIW_C*                                CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_425A[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_2;                           // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ClonePOIArray) == 0x000008, "Wrong alignment on MinimapComponent_C_ClonePOIArray");
static_assert(sizeof(MinimapComponent_C_ClonePOIArray) == 0x000068, "Wrong size on MinimapComponent_C_ClonePOIArray");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, Source) == 0x000000, "Member 'MinimapComponent_C_ClonePOIArray::Source' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, KeepPersistentActors) == 0x000010, "Member 'MinimapComponent_C_ClonePOIArray::KeepPersistentActors' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, KeepHeightIndicator) == 0x000011, "Member 'MinimapComponent_C_ClonePOIArray::KeepHeightIndicator' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, Temp_bool_Variable) == 0x000012, "Member 'MinimapComponent_C_ClonePOIArray::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'MinimapComponent_C_ClonePOIArray::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, CallFunc_Array_Length_ReturnValue_1) == 0x000018, "Member 'MinimapComponent_C_ClonePOIArray::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, Temp_bool_Variable_1) == 0x00001C, "Member 'MinimapComponent_C_ClonePOIArray::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, Temp_int_Array_Index_Variable) == 0x000020, "Member 'MinimapComponent_C_ClonePOIArray::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, CallFunc_Array_Get_Item) == 0x000028, "Member 'MinimapComponent_C_ClonePOIArray::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'MinimapComponent_C_ClonePOIArray::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'MinimapComponent_C_ClonePOIArray::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'MinimapComponent_C_ClonePOIArray::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, Temp_int_Array_Index_Variable_1) == 0x00003C, "Member 'MinimapComponent_C_ClonePOIArray::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, Temp_bool_Variable_2) == 0x000040, "Member 'MinimapComponent_C_ClonePOIArray::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'MinimapComponent_C_ClonePOIArray::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, K2Node_Select_Default) == 0x000050, "Member 'MinimapComponent_C_ClonePOIArray::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, Temp_bool_Variable_3) == 0x000051, "Member 'MinimapComponent_C_ClonePOIArray::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, Temp_bool_Variable_4) == 0x000052, "Member 'MinimapComponent_C_ClonePOIArray::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, K2Node_Select_Default_1) == 0x000053, "Member 'MinimapComponent_C_ClonePOIArray::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, Temp_int_Loop_Counter_Variable_1) == 0x000054, "Member 'MinimapComponent_C_ClonePOIArray::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, CallFunc_Less_IntInt_ReturnValue_1) == 0x000058, "Member 'MinimapComponent_C_ClonePOIArray::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'MinimapComponent_C_ClonePOIArray::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, Temp_bool_Variable_5) == 0x000060, "Member 'MinimapComponent_C_ClonePOIArray::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ClonePOIArray, K2Node_Select_Default_2) == 0x000061, "Member 'MinimapComponent_C_ClonePOIArray::K2Node_Select_Default_2' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.EValidateMinimapClick
// 0x0030 (0x0030 - 0x0000)
struct MinimapComponent_C_EValidateMinimapClick final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Button;                                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_EValidateMinimapClick) == 0x000008, "Wrong alignment on MinimapComponent_C_EValidateMinimapClick");
static_assert(sizeof(MinimapComponent_C_EValidateMinimapClick) == 0x000030, "Wrong size on MinimapComponent_C_EValidateMinimapClick");
static_assert(offsetof(MinimapComponent_C_EValidateMinimapClick, Location) == 0x000000, "Member 'MinimapComponent_C_EValidateMinimapClick::Location' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_EValidateMinimapClick, Button) == 0x000018, "Member 'MinimapComponent_C_EValidateMinimapClick::Button' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ExecuteUbergraph_MinimapComponent
// 0x0430 (0x0430 - 0x0000)
struct MinimapComponent_C_ExecuteUbergraph_MinimapComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_425B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry_1;                         // 0x0008(0x0040)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_425C[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_425D[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_425E[0x1];                                     // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_425F[0x1];                                     // 0x00EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0100(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0110(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0138(0x0040)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0178(0x0098)(ConstParm)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x0228(0x0098)(ConstParm)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4260[0x7];                                     // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4261[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x02E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_CustomEvent_Button;                         // 0x0300(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0319(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x031A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x031B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x031D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x031E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x031F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0320(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0339(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x033A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x033B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x033C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x033D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4262[0x2];                                     // 0x033E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x0340(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4263[0x2];                                     // 0x035A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4264[0x7];                                     // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4265[0x7];                                     // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0399(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x039A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4266[0x5];                                     // 0x039B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_3;                // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4267[0x7];                                     // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x03C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x03D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_A_ImplicitCast_1;             // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_2; // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_3; // 0x040C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_B_ImplicitCast;               // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_B_ImplicitCast_1;             // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast_1; // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast_2; // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent) == 0x000008, "Wrong alignment on MinimapComponent_C_ExecuteUbergraph_MinimapComponent");
static_assert(sizeof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent) == 0x000430, "Wrong size on MinimapComponent_C_ExecuteUbergraph_MinimapComponent");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, EntryPoint) == 0x000000, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, K2Node_Event_MyGeometry_1) == 0x000008, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::K2Node_Event_MyGeometry_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, K2Node_Event_InDeltaTime) == 0x000048, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_GetControlRotation_ReturnValue) == 0x000050, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000068, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakVector_X) == 0x000080, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakVector_Y) == 0x000088, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakVector_Z) == 0x000090, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, Temp_bool_Has_Been_Initd_Variable) == 0x000098, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0000A0, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakRotator_Roll) == 0x0000B8, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakRotator_Pitch) == 0x0000BC, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakRotator_Yaw) == 0x0000C0, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_IsValid_ReturnValue) == 0x0000C4, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_IsValid_ReturnValue_1) == 0x0000C5, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_IsValid_ReturnValue_2) == 0x0000C6, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SelectColor_ReturnValue) == 0x0000C8, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_MakeVector2D_ReturnValue) == 0x0000D8, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, K2Node_Event_IsDesignTime) == 0x0000E8, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_Not_PreBool_ReturnValue) == 0x0000E9, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_IsValid_ReturnValue_3) == 0x0000EA, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakRotator_Roll_1) == 0x0000EC, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakRotator_Pitch_1) == 0x0000F0, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakRotator_Yaw_1) == 0x0000F4, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0000F8, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000100, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000110, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000118, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakVector_X_1) == 0x000120, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakVector_Y_1) == 0x000128, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakVector_Z_1) == 0x000130, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, K2Node_Event_MyGeometry) == 0x000138, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, K2Node_Event_MouseEvent_1) == 0x000178, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000210, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000218, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000220, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, K2Node_Event_MouseEvent) == 0x000228, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, Temp_byte_Variable) == 0x0002C0, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_MakeVector_ReturnValue) == 0x0002C8, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, Temp_bool_Variable) == 0x0002E0, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, K2Node_CustomEvent_Location) == 0x0002E8, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, K2Node_CustomEvent_Button) == 0x000300, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::K2Node_CustomEvent_Button' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000318, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000319, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_Not_PreBool_ReturnValue_1) == 0x00031A, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, Temp_byte_Variable_1) == 0x00031B, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BooleanAND_ReturnValue) == 0x00031C, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_Not_PreBool_ReturnValue_2) == 0x00031D, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BooleanAND_ReturnValue_1) == 0x00031E, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00031F, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SelectVector_ReturnValue) == 0x000320, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000338, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, Temp_bool_Variable_1) == 0x000339, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_Not_PreBool_ReturnValue_3) == 0x00033A, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BooleanOR_ReturnValue) == 0x00033B, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x00033C, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BooleanAND_ReturnValue_2) == 0x00033D, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x000340, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, K2Node_Select_Default) == 0x000358, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, Temp_byte_Variable_2) == 0x000359, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakRotator_Roll_2) == 0x00035C, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakRotator_Pitch_2) == 0x000360, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakRotator_Yaw_2) == 0x000364, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SelectFloat_ReturnValue) == 0x000368, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x000370, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000378, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BooleanAND_ReturnValue_3) == 0x000380, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SelectFloat_ReturnValue_1) == 0x000388, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SelectFloat_ReturnValue_2) == 0x000390, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, Temp_byte_Variable_3) == 0x000398, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, K2Node_Select_Default_1) == 0x000399, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x00039A, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SelectFloat_ReturnValue_3) == 0x0003A0, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, Temp_bool_IsClosed_Variable) == 0x0003A8, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakVector2D_X) == 0x0003B0, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_BreakVector2D_Y) == 0x0003B8, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_MakeVector_ReturnValue_1) == 0x0003C0, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0003D8, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x0003F0, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x0003F4, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SelectFloat_A_ImplicitCast) == 0x0003F8, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SelectFloat_A_ImplicitCast_1) == 0x000400, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SelectFloat_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SetScalarParameterValue_Value_ImplicitCast_2) == 0x000408, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SetScalarParameterValue_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SetScalarParameterValue_Value_ImplicitCast_3) == 0x00040C, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SetScalarParameterValue_Value_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SelectFloat_B_ImplicitCast) == 0x000410, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SelectFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SelectFloat_B_ImplicitCast_1) == 0x000418, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SelectFloat_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000420, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast_1) == 0x000424, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ExecuteUbergraph_MinimapComponent, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast_2) == 0x000428, "Member 'MinimapComponent_C_ExecuteUbergraph_MinimapComponent::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast_2' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.GetBorderSize
// 0x0008 (0x0008 - 0x0000)
struct MinimapComponent_C_GetBorderSize final
{
public:
	double                                        BorderSize;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_GetBorderSize) == 0x000008, "Wrong alignment on MinimapComponent_C_GetBorderSize");
static_assert(sizeof(MinimapComponent_C_GetBorderSize) == 0x000008, "Wrong size on MinimapComponent_C_GetBorderSize");
static_assert(offsetof(MinimapComponent_C_GetBorderSize, BorderSize) == 0x000000, "Member 'MinimapComponent_C_GetBorderSize::BorderSize' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.GetMarker
// 0x0008 (0x0008 - 0x0000)
struct MinimapComponent_C_GetMarker final
{
public:
	class AActor*                                 Param_Marker;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_GetMarker) == 0x000008, "Wrong alignment on MinimapComponent_C_GetMarker");
static_assert(sizeof(MinimapComponent_C_GetMarker) == 0x000008, "Wrong size on MinimapComponent_C_GetMarker");
static_assert(offsetof(MinimapComponent_C_GetMarker, Param_Marker) == 0x000000, "Member 'MinimapComponent_C_GetMarker::Param_Marker' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.GetPOIArray
// 0x0010 (0x0010 - 0x0000)
struct MinimapComponent_C_GetPOIArray final
{
public:
	TArray<class UPOIW_C*>                        Param_ArrayOfPOI;                                  // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(MinimapComponent_C_GetPOIArray) == 0x000008, "Wrong alignment on MinimapComponent_C_GetPOIArray");
static_assert(sizeof(MinimapComponent_C_GetPOIArray) == 0x000010, "Wrong size on MinimapComponent_C_GetPOIArray");
static_assert(offsetof(MinimapComponent_C_GetPOIArray, Param_ArrayOfPOI) == 0x000000, "Member 'MinimapComponent_C_GetPOIArray::Param_ArrayOfPOI' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.IsOutsideOfCircle
// 0x0048 (0x0048 - 0x0000)
struct MinimapComponent_C_IsOutsideOfCircle final
{
public:
	double                                        X;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Y;                                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R;                                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOutside;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4268[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Square_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Square_ReturnValue_1;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Sqrt_ReturnValue;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_IsOutsideOfCircle) == 0x000008, "Wrong alignment on MinimapComponent_C_IsOutsideOfCircle");
static_assert(sizeof(MinimapComponent_C_IsOutsideOfCircle) == 0x000048, "Wrong size on MinimapComponent_C_IsOutsideOfCircle");
static_assert(offsetof(MinimapComponent_C_IsOutsideOfCircle, X) == 0x000000, "Member 'MinimapComponent_C_IsOutsideOfCircle::X' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOutsideOfCircle, Y) == 0x000008, "Member 'MinimapComponent_C_IsOutsideOfCircle::Y' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOutsideOfCircle, R) == 0x000010, "Member 'MinimapComponent_C_IsOutsideOfCircle::R' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOutsideOfCircle, IsOutside) == 0x000018, "Member 'MinimapComponent_C_IsOutsideOfCircle::IsOutside' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOutsideOfCircle, CallFunc_Square_ReturnValue) == 0x000020, "Member 'MinimapComponent_C_IsOutsideOfCircle::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOutsideOfCircle, CallFunc_Square_ReturnValue_1) == 0x000028, "Member 'MinimapComponent_C_IsOutsideOfCircle::CallFunc_Square_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOutsideOfCircle, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000030, "Member 'MinimapComponent_C_IsOutsideOfCircle::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOutsideOfCircle, CallFunc_Sqrt_ReturnValue) == 0x000038, "Member 'MinimapComponent_C_IsOutsideOfCircle::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOutsideOfCircle, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000040, "Member 'MinimapComponent_C_IsOutsideOfCircle::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.IsOwnerAdded
// 0x0028 (0x0028 - 0x0000)
struct MinimapComponent_C_IsOwnerAdded final
{
public:
	bool                                          Found;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4269[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_426A[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPOIW_C*                                CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_IsOwnerAdded) == 0x000008, "Wrong alignment on MinimapComponent_C_IsOwnerAdded");
static_assert(sizeof(MinimapComponent_C_IsOwnerAdded) == 0x000028, "Wrong size on MinimapComponent_C_IsOwnerAdded");
static_assert(offsetof(MinimapComponent_C_IsOwnerAdded, Found) == 0x000000, "Member 'MinimapComponent_C_IsOwnerAdded::Found' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOwnerAdded, Temp_int_Array_Index_Variable) == 0x000004, "Member 'MinimapComponent_C_IsOwnerAdded::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOwnerAdded, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'MinimapComponent_C_IsOwnerAdded::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOwnerAdded, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'MinimapComponent_C_IsOwnerAdded::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOwnerAdded, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'MinimapComponent_C_IsOwnerAdded::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOwnerAdded, CallFunc_Array_Get_Item) == 0x000018, "Member 'MinimapComponent_C_IsOwnerAdded::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOwnerAdded, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'MinimapComponent_C_IsOwnerAdded::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_IsOwnerAdded, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000021, "Member 'MinimapComponent_C_IsOwnerAdded::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.MiniMapClicked__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct MinimapComponent_C_MiniMapClicked__DelegateSignature final
{
public:
	struct FVector                                WolrdLocation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   ButtonUsed;                                        // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_MiniMapClicked__DelegateSignature) == 0x000008, "Wrong alignment on MinimapComponent_C_MiniMapClicked__DelegateSignature");
static_assert(sizeof(MinimapComponent_C_MiniMapClicked__DelegateSignature) == 0x000030, "Wrong size on MinimapComponent_C_MiniMapClicked__DelegateSignature");
static_assert(offsetof(MinimapComponent_C_MiniMapClicked__DelegateSignature, WolrdLocation) == 0x000000, "Member 'MinimapComponent_C_MiniMapClicked__DelegateSignature::WolrdLocation' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MiniMapClicked__DelegateSignature, ButtonUsed) == 0x000018, "Member 'MinimapComponent_C_MiniMapClicked__DelegateSignature::ButtonUsed' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.MinimapStartUpdate
// 0x0018 (0x0018 - 0x0000)
struct MinimapComponent_C_MinimapStartUpdate final
{
public:
	class APawn*                                  OwnerPawn;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveActor_Removed;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOwnerAdded_Found;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_MinimapStartUpdate) == 0x000008, "Wrong alignment on MinimapComponent_C_MinimapStartUpdate");
static_assert(sizeof(MinimapComponent_C_MinimapStartUpdate) == 0x000018, "Wrong size on MinimapComponent_C_MinimapStartUpdate");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, OwnerPawn) == 0x000000, "Member 'MinimapComponent_C_MinimapStartUpdate::OwnerPawn' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, Success) == 0x000008, "Member 'MinimapComponent_C_MinimapStartUpdate::Success' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'MinimapComponent_C_MinimapStartUpdate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00000A, "Member 'MinimapComponent_C_MinimapStartUpdate::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, CallFunc_RemoveActor_Removed) == 0x00000B, "Member 'MinimapComponent_C_MinimapStartUpdate::CallFunc_RemoveActor_Removed' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, CallFunc_IsValid_ReturnValue_1) == 0x00000C, "Member 'MinimapComponent_C_MinimapStartUpdate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000D, "Member 'MinimapComponent_C_MinimapStartUpdate::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, CallFunc_BooleanAND_ReturnValue) == 0x00000E, "Member 'MinimapComponent_C_MinimapStartUpdate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00000F, "Member 'MinimapComponent_C_MinimapStartUpdate::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, CallFunc_IsOwnerAdded_Found) == 0x000010, "Member 'MinimapComponent_C_MinimapStartUpdate::CallFunc_IsOwnerAdded_Found' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'MinimapComponent_C_MinimapStartUpdate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, CallFunc_BooleanAND_ReturnValue_1) == 0x000012, "Member 'MinimapComponent_C_MinimapStartUpdate::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, CallFunc_IsValid_ReturnValue_2) == 0x000013, "Member 'MinimapComponent_C_MinimapStartUpdate::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapStartUpdate, CallFunc_BooleanAND_ReturnValue_2) == 0x000014, "Member 'MinimapComponent_C_MinimapStartUpdate::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.MinimapStopUpdate
// 0x0001 (0x0001 - 0x0000)
struct MinimapComponent_C_MinimapStopUpdate final
{
public:
	bool                                          ClearPOIs;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_MinimapStopUpdate) == 0x000001, "Wrong alignment on MinimapComponent_C_MinimapStopUpdate");
static_assert(sizeof(MinimapComponent_C_MinimapStopUpdate) == 0x000001, "Wrong size on MinimapComponent_C_MinimapStopUpdate");
static_assert(offsetof(MinimapComponent_C_MinimapStopUpdate, ClearPOIs) == 0x000000, "Member 'MinimapComponent_C_MinimapStopUpdate::ClearPOIs' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.MinimapZoomIn
// 0x0030 (0x0030 - 0x0000)
struct MinimapComponent_C_MinimapZoomIn final
{
public:
	double                                        CurrentZoom;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_426B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_426C[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_MinimapZoomIn) == 0x000008, "Wrong alignment on MinimapComponent_C_MinimapZoomIn");
static_assert(sizeof(MinimapComponent_C_MinimapZoomIn) == 0x000030, "Wrong size on MinimapComponent_C_MinimapZoomIn");
static_assert(offsetof(MinimapComponent_C_MinimapZoomIn, CurrentZoom) == 0x000000, "Member 'MinimapComponent_C_MinimapZoomIn::CurrentZoom' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomIn, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000008, "Member 'MinimapComponent_C_MinimapZoomIn::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomIn, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000009, "Member 'MinimapComponent_C_MinimapZoomIn::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomIn, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x00000A, "Member 'MinimapComponent_C_MinimapZoomIn::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomIn, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'MinimapComponent_C_MinimapZoomIn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomIn, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'MinimapComponent_C_MinimapZoomIn::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomIn, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'MinimapComponent_C_MinimapZoomIn::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomIn, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'MinimapComponent_C_MinimapZoomIn::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomIn, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000028, "Member 'MinimapComponent_C_MinimapZoomIn::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.MinimapZoomOut
// 0x0030 (0x0030 - 0x0000)
struct MinimapComponent_C_MinimapZoomOut final
{
public:
	double                                        CurrentZoom;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_426D[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_426E[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_MinimapZoomOut) == 0x000008, "Wrong alignment on MinimapComponent_C_MinimapZoomOut");
static_assert(sizeof(MinimapComponent_C_MinimapZoomOut) == 0x000030, "Wrong size on MinimapComponent_C_MinimapZoomOut");
static_assert(offsetof(MinimapComponent_C_MinimapZoomOut, CurrentZoom) == 0x000000, "Member 'MinimapComponent_C_MinimapZoomOut::CurrentZoom' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomOut, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000008, "Member 'MinimapComponent_C_MinimapZoomOut::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomOut, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000009, "Member 'MinimapComponent_C_MinimapZoomOut::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomOut, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00000A, "Member 'MinimapComponent_C_MinimapZoomOut::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomOut, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'MinimapComponent_C_MinimapZoomOut::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomOut, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'MinimapComponent_C_MinimapZoomOut::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomOut, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'MinimapComponent_C_MinimapZoomOut::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomOut, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000020, "Member 'MinimapComponent_C_MinimapZoomOut::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_MinimapZoomOut, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000028, "Member 'MinimapComponent_C_MinimapZoomOut::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.On_MinimapClick
// 0x0410 (0x0410 - 0x0000)
struct MinimapComponent_C_On_MinimapClick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0098)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector                                LocationToUse;                                     // 0x0190(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x01A8(0x0018)(HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_426F[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_AbsoluteToLocal_ReturnValue;              // 0x01D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4270[0x6];                                     // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0208(0x00B8)()
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4271[0x7];                                     // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_1;               // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0310(0x0040)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0350(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x0360(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0380(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x03F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_On_MinimapClick) == 0x000008, "Wrong alignment on MinimapComponent_C_On_MinimapClick");
static_assert(sizeof(MinimapComponent_C_On_MinimapClick) == 0x000410, "Wrong size on MinimapComponent_C_On_MinimapClick");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, MyGeometry) == 0x000000, "Member 'MinimapComponent_C_On_MinimapClick::MyGeometry' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, MouseEvent) == 0x000040, "Member 'MinimapComponent_C_On_MinimapClick::MouseEvent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, ReturnValue) == 0x0000D8, "Member 'MinimapComponent_C_On_MinimapClick::ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, LocationToUse) == 0x000190, "Member 'MinimapComponent_C_On_MinimapClick::LocationToUse' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x0001A8, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x0001C0, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001D0, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_AbsoluteToLocal_ReturnValue) == 0x0001D8, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_AbsoluteToLocal_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0001E8, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x0001E9, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_BreakVector_X) == 0x0001F0, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_BreakVector_Y) == 0x0001F8, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_BreakVector_Z) == 0x000200, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Handled_ReturnValue) == 0x000208, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0002C0, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_IsValid_ReturnValue) == 0x0002D8, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_SelectVector_ReturnValue) == 0x0002E0, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_SelectVector_ReturnValue_1) == 0x0002F8, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_SelectVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_GetCachedGeometry_ReturnValue) == 0x000310, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_GetLocalSize_ReturnValue) == 0x000350, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x000360, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_BreakVector2D_X) == 0x000370, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_BreakVector2D_Y) == 0x000378, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000380, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000390, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_BreakVector2D_X_1) == 0x000398, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_BreakVector2D_Y_1) == 0x0003A0, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0003A8, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0003B0, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0003B8, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0003C0, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0003C8, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x0003D0, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0003D8, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x0003E0, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0003E8, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x0003F0, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_On_MinimapClick, CallFunc_MakeVector_ReturnValue) == 0x0003F8, "Member 'MinimapComponent_C_On_MinimapClick::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.OnMouseButtonDown
// 0x0248 (0x0248 - 0x0000)
struct MinimapComponent_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0190(0x00B8)()
};
static_assert(alignof(MinimapComponent_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on MinimapComponent_C_OnMouseButtonDown");
static_assert(sizeof(MinimapComponent_C_OnMouseButtonDown) == 0x000248, "Wrong size on MinimapComponent_C_OnMouseButtonDown");
static_assert(offsetof(MinimapComponent_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'MinimapComponent_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseButtonDown, MouseEvent) == 0x000040, "Member 'MinimapComponent_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseButtonDown, ReturnValue) == 0x0000D8, "Member 'MinimapComponent_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000190, "Member 'MinimapComponent_C_OnMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.OnMouseButtonUp
// 0x0268 (0x0268 - 0x0000)
struct MinimapComponent_C_OnMouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0190(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x01A8(0x00B8)()
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_OnMouseButtonUp) == 0x000008, "Wrong alignment on MinimapComponent_C_OnMouseButtonUp");
static_assert(sizeof(MinimapComponent_C_OnMouseButtonUp) == 0x000268, "Wrong size on MinimapComponent_C_OnMouseButtonUp");
static_assert(offsetof(MinimapComponent_C_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'MinimapComponent_C_OnMouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseButtonUp, MouseEvent) == 0x000040, "Member 'MinimapComponent_C_OnMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseButtonUp, ReturnValue) == 0x0000D8, "Member 'MinimapComponent_C_OnMouseButtonUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseButtonUp, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000190, "Member 'MinimapComponent_C_OnMouseButtonUp::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue) == 0x0001A8, "Member 'MinimapComponent_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000260, "Member 'MinimapComponent_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.OnMouseEnter
// 0x00D8 (0x00D8 - 0x0000)
struct MinimapComponent_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(MinimapComponent_C_OnMouseEnter) == 0x000008, "Wrong alignment on MinimapComponent_C_OnMouseEnter");
static_assert(sizeof(MinimapComponent_C_OnMouseEnter) == 0x0000D8, "Wrong size on MinimapComponent_C_OnMouseEnter");
static_assert(offsetof(MinimapComponent_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'MinimapComponent_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseEnter, MouseEvent) == 0x000040, "Member 'MinimapComponent_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.OnMouseLeave
// 0x0098 (0x0098 - 0x0000)
struct MinimapComponent_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(MinimapComponent_C_OnMouseLeave) == 0x000008, "Wrong alignment on MinimapComponent_C_OnMouseLeave");
static_assert(sizeof(MinimapComponent_C_OnMouseLeave) == 0x000098, "Wrong size on MinimapComponent_C_OnMouseLeave");
static_assert(offsetof(MinimapComponent_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'MinimapComponent_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.OnMouseMove
// 0x0560 (0x0560 - 0x0000)
struct MinimapComponent_C_OnMouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D8(0x00B8)(Parm, OutParm, ReturnParm)
	double                                        DiffY;                                             // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DiffX;                                             // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DragDown;                                          // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DragLeft;                                          // 0x01A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4272[0x6];                                     // 0x01A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MatY;                                              // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MatX;                                              // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TempLY;                                            // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TempLX;                                            // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1; // 0x01D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_2; // 0x01E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4273[0x7];                                     // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0228(0x00B8)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4274[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x02FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x02FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x02FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x02FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x02FF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0302(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0303(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0305(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4275[0x2];                                     // 0x0306(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_3;       // 0x0311(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4276[0x6];                                     // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_4;       // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0321(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4277[0x6];                                     // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0350(0x00B8)()
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0409(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x040A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_5;       // 0x040B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x040C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x040D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x040E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4278[0x1];                                     // 0x040F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_3;                        // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_3;                        // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4279[0x7];                                     // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_427A[0x7];                                     // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue_2;                        // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_6;       // 0x0441(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_427B[0x6];                                     // 0x0442(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_4;      // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_3;                        // 0x0450(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue;   // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_7;       // 0x045C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x045D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_427C[0x2];                                     // 0x045E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue_1; // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_2;          // 0x0464(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_427D[0x3];                                     // 0x0465(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x0490(0x00B8)()
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x0548(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0549(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_427E[0x6];                                     // 0x054A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_MatY_ImplicitCast;              // 0x0550(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_MatX_ImplicitCast;              // 0x0558(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_OnMouseMove) == 0x000008, "Wrong alignment on MinimapComponent_C_OnMouseMove");
static_assert(sizeof(MinimapComponent_C_OnMouseMove) == 0x000560, "Wrong size on MinimapComponent_C_OnMouseMove");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, MyGeometry) == 0x000000, "Member 'MinimapComponent_C_OnMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, MouseEvent) == 0x000040, "Member 'MinimapComponent_C_OnMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, ReturnValue) == 0x0000D8, "Member 'MinimapComponent_C_OnMouseMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, DiffY) == 0x000190, "Member 'MinimapComponent_C_OnMouseMove::DiffY' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, DiffX) == 0x000198, "Member 'MinimapComponent_C_OnMouseMove::DiffX' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, DragDown) == 0x0001A0, "Member 'MinimapComponent_C_OnMouseMove::DragDown' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, DragLeft) == 0x0001A1, "Member 'MinimapComponent_C_OnMouseMove::DragLeft' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, MatY) == 0x0001A8, "Member 'MinimapComponent_C_OnMouseMove::MatY' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, MatX) == 0x0001B0, "Member 'MinimapComponent_C_OnMouseMove::MatX' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, TempLY) == 0x0001B8, "Member 'MinimapComponent_C_OnMouseMove::TempLY' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, TempLX) == 0x0001C0, "Member 'MinimapComponent_C_OnMouseMove::TempLX' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x0001C8, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1) == 0x0001D8, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_2) == 0x0001E8, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BreakVector2D_X) == 0x0001F8, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BreakVector2D_Y) == 0x000200, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BreakVector2D_X_1) == 0x000208, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BreakVector2D_Y_1) == 0x000210, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000218, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000220, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Unhandled_ReturnValue) == 0x000228, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0002E0, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0002E8, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0002F0, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanAND_ReturnValue) == 0x0002F8, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanAND_ReturnValue_1) == 0x0002F9, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0002FA, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0002FB, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Not_PreBool_ReturnValue) == 0x0002FC, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x0002FD, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Not_PreBool_ReturnValue_1) == 0x0002FE, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanAND_ReturnValue_2) == 0x0002FF, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000300, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x000301, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanAND_ReturnValue_3) == 0x000302, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000303, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanAND_ReturnValue_4) == 0x000304, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanOR_ReturnValue) == 0x000305, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Abs_ReturnValue) == 0x000308, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanOR_ReturnValue_1) == 0x000310, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Greater_DoubleDouble_ReturnValue_3) == 0x000311, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Greater_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Abs_ReturnValue_1) == 0x000318, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Greater_DoubleDouble_ReturnValue_4) == 0x000320, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Greater_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanAND_ReturnValue_5) == 0x000321, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BreakVector2D_X_2) == 0x000328, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BreakVector2D_Y_2) == 0x000330, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000338, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000340, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000348, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Handled_ReturnValue) == 0x000350, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000408, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanAND_ReturnValue_6) == 0x000409, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x00040A, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Greater_DoubleDouble_ReturnValue_5) == 0x00040B, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Greater_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanAND_ReturnValue_7) == 0x00040C, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x00040D, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanAND_ReturnValue_8) == 0x00040E, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BreakVector2D_X_3) == 0x000410, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BreakVector2D_Y_3) == 0x000418, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanOR_ReturnValue_2) == 0x000420, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x000428, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanOR_ReturnValue_3) == 0x000430, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Abs_ReturnValue_2) == 0x000438, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanAND_ReturnValue_9) == 0x000440, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Greater_DoubleDouble_ReturnValue_6) == 0x000441, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Greater_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Subtract_DoubleDouble_ReturnValue_4) == 0x000448, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Subtract_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Abs_ReturnValue_3) == 0x000450, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Abs_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_K2_GetScalarParameterValue_ReturnValue) == 0x000458, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_K2_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Greater_DoubleDouble_ReturnValue_7) == 0x00045C, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Greater_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanOR_ReturnValue_4) == 0x00045D, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_K2_GetScalarParameterValue_ReturnValue_1) == 0x000460, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_K2_GetScalarParameterValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Less_DoubleDouble_ReturnValue_2) == 0x000464, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Less_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000468, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000470, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000478, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000480, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000488, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Handled_ReturnValue_1) == 0x000490, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Handled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_BooleanAND_ReturnValue_10) == 0x000548, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, CallFunc_Not_PreBool_ReturnValue_2) == 0x000549, "Member 'MinimapComponent_C_OnMouseMove::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, K2Node_VariableSet_MatY_ImplicitCast) == 0x000550, "Member 'MinimapComponent_C_OnMouseMove::K2Node_VariableSet_MatY_ImplicitCast' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseMove, K2Node_VariableSet_MatX_ImplicitCast) == 0x000558, "Member 'MinimapComponent_C_OnMouseMove::K2Node_VariableSet_MatX_ImplicitCast' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.OnMouseWheel
// 0x0270 (0x0270 - 0x0000)
struct MinimapComponent_C_OnMouseWheel final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D8(0x00B8)(Parm, OutParm, ReturnParm)
	float                                         CallFunc_PointerEvent_GetWheelDelta_ReturnValue;   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_427F[0x4];                                     // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4280[0x6];                                     // 0x01AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x01B0(0x00B8)()
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_OnMouseWheel) == 0x000008, "Wrong alignment on MinimapComponent_C_OnMouseWheel");
static_assert(sizeof(MinimapComponent_C_OnMouseWheel) == 0x000270, "Wrong size on MinimapComponent_C_OnMouseWheel");
static_assert(offsetof(MinimapComponent_C_OnMouseWheel, MyGeometry) == 0x000000, "Member 'MinimapComponent_C_OnMouseWheel::MyGeometry' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseWheel, MouseEvent) == 0x000040, "Member 'MinimapComponent_C_OnMouseWheel::MouseEvent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseWheel, ReturnValue) == 0x0000D8, "Member 'MinimapComponent_C_OnMouseWheel::ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseWheel, CallFunc_PointerEvent_GetWheelDelta_ReturnValue) == 0x000190, "Member 'MinimapComponent_C_OnMouseWheel::CallFunc_PointerEvent_GetWheelDelta_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseWheel, CallFunc_BreakVector2D_X) == 0x000198, "Member 'MinimapComponent_C_OnMouseWheel::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseWheel, CallFunc_BreakVector2D_Y) == 0x0001A0, "Member 'MinimapComponent_C_OnMouseWheel::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseWheel, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0001A8, "Member 'MinimapComponent_C_OnMouseWheel::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseWheel, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0001A9, "Member 'MinimapComponent_C_OnMouseWheel::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseWheel, CallFunc_Handled_ReturnValue) == 0x0001B0, "Member 'MinimapComponent_C_OnMouseWheel::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_OnMouseWheel, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000268, "Member 'MinimapComponent_C_OnMouseWheel::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct MinimapComponent_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_PreConstruct) == 0x000001, "Wrong alignment on MinimapComponent_C_PreConstruct");
static_assert(sizeof(MinimapComponent_C_PreConstruct) == 0x000001, "Wrong size on MinimapComponent_C_PreConstruct");
static_assert(offsetof(MinimapComponent_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'MinimapComponent_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.RemoveActor
// 0x0038 (0x0038 - 0x0000)
struct MinimapComponent_C_RemoveActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Removed;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4281[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentIndex;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActorRemoved;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4282[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4283[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4284[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPOIW_C*                                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_RemoveActor) == 0x000008, "Wrong alignment on MinimapComponent_C_RemoveActor");
static_assert(sizeof(MinimapComponent_C_RemoveActor) == 0x000038, "Wrong size on MinimapComponent_C_RemoveActor");
static_assert(offsetof(MinimapComponent_C_RemoveActor, Actor) == 0x000000, "Member 'MinimapComponent_C_RemoveActor::Actor' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RemoveActor, Removed) == 0x000008, "Member 'MinimapComponent_C_RemoveActor::Removed' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RemoveActor, CurrentIndex) == 0x00000C, "Member 'MinimapComponent_C_RemoveActor::CurrentIndex' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RemoveActor, ActorRemoved) == 0x000010, "Member 'MinimapComponent_C_RemoveActor::ActorRemoved' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RemoveActor, Temp_bool_True_if_break_was_hit_Variable) == 0x000011, "Member 'MinimapComponent_C_RemoveActor::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RemoveActor, Temp_int_Array_Index_Variable) == 0x000014, "Member 'MinimapComponent_C_RemoveActor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RemoveActor, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'MinimapComponent_C_RemoveActor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RemoveActor, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'MinimapComponent_C_RemoveActor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RemoveActor, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'MinimapComponent_C_RemoveActor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RemoveActor, CallFunc_Array_Get_Item) == 0x000028, "Member 'MinimapComponent_C_RemoveActor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RemoveActor, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'MinimapComponent_C_RemoveActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RemoveActor, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'MinimapComponent_C_RemoveActor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RemoveActor, CallFunc_BooleanAND_ReturnValue) == 0x000035, "Member 'MinimapComponent_C_RemoveActor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RemoveActor, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000036, "Member 'MinimapComponent_C_RemoveActor::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.RemoveMarker
// 0x0001 (0x0001 - 0x0000)
struct MinimapComponent_C_RemoveMarker final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_RemoveMarker) == 0x000001, "Wrong alignment on MinimapComponent_C_RemoveMarker");
static_assert(sizeof(MinimapComponent_C_RemoveMarker) == 0x000001, "Wrong size on MinimapComponent_C_RemoveMarker");
static_assert(offsetof(MinimapComponent_C_RemoveMarker, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'MinimapComponent_C_RemoveMarker::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.RoundMapAdjsuter
// 0x0078 (0x0078 - 0x0000)
struct MinimapComponent_C_RoundMapAdjsuter final
{
public:
	double                                        X;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Y;                                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BorderSize;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Clamp;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Left;                                              // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Bottom;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4285[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SquareCoorToCircle_xCircle;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SquareCoorToCircle_yCircle;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_RoundMapAdjsuter) == 0x000008, "Wrong alignment on MinimapComponent_C_RoundMapAdjsuter");
static_assert(sizeof(MinimapComponent_C_RoundMapAdjsuter) == 0x000078, "Wrong size on MinimapComponent_C_RoundMapAdjsuter");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, X) == 0x000000, "Member 'MinimapComponent_C_RoundMapAdjsuter::X' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, Y) == 0x000008, "Member 'MinimapComponent_C_RoundMapAdjsuter::Y' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, BorderSize) == 0x000010, "Member 'MinimapComponent_C_RoundMapAdjsuter::BorderSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, Clamp) == 0x000018, "Member 'MinimapComponent_C_RoundMapAdjsuter::Clamp' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, Left) == 0x000020, "Member 'MinimapComponent_C_RoundMapAdjsuter::Left' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, Bottom) == 0x000028, "Member 'MinimapComponent_C_RoundMapAdjsuter::Bottom' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000030, "Member 'MinimapComponent_C_RoundMapAdjsuter::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000038, "Member 'MinimapComponent_C_RoundMapAdjsuter::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'MinimapComponent_C_RoundMapAdjsuter::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, CallFunc_SquareCoorToCircle_xCircle) == 0x000048, "Member 'MinimapComponent_C_RoundMapAdjsuter::CallFunc_SquareCoorToCircle_xCircle' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, CallFunc_SquareCoorToCircle_yCircle) == 0x000050, "Member 'MinimapComponent_C_RoundMapAdjsuter::CallFunc_SquareCoorToCircle_yCircle' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000058, "Member 'MinimapComponent_C_RoundMapAdjsuter::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000060, "Member 'MinimapComponent_C_RoundMapAdjsuter::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000068, "Member 'MinimapComponent_C_RoundMapAdjsuter::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_RoundMapAdjsuter, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000070, "Member 'MinimapComponent_C_RoundMapAdjsuter::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.SetBlinkEnabled
// 0x0030 (0x0030 - 0x0000)
struct MinimapComponent_C_SetBlinkEnabled final
{
public:
	class AActor*                                 POIActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4286[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPOIW_C*                                CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_SetBlinkEnabled) == 0x000008, "Wrong alignment on MinimapComponent_C_SetBlinkEnabled");
static_assert(sizeof(MinimapComponent_C_SetBlinkEnabled) == 0x000030, "Wrong size on MinimapComponent_C_SetBlinkEnabled");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, POIActor) == 0x000000, "Member 'MinimapComponent_C_SetBlinkEnabled::POIActor' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, Enabled) == 0x000008, "Member 'MinimapComponent_C_SetBlinkEnabled::Enabled' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, Found) == 0x000009, "Member 'MinimapComponent_C_SetBlinkEnabled::Found' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'MinimapComponent_C_SetBlinkEnabled::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, Temp_bool_True_if_break_was_hit_Variable) == 0x00000B, "Member 'MinimapComponent_C_SetBlinkEnabled::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'MinimapComponent_C_SetBlinkEnabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, Temp_int_Array_Index_Variable) == 0x000010, "Member 'MinimapComponent_C_SetBlinkEnabled::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'MinimapComponent_C_SetBlinkEnabled::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'MinimapComponent_C_SetBlinkEnabled::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'MinimapComponent_C_SetBlinkEnabled::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, CallFunc_Array_Get_Item) == 0x000020, "Member 'MinimapComponent_C_SetBlinkEnabled::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'MinimapComponent_C_SetBlinkEnabled::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, CallFunc_BooleanAND_ReturnValue) == 0x000029, "Member 'MinimapComponent_C_SetBlinkEnabled::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabled, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00002A, "Member 'MinimapComponent_C_SetBlinkEnabled::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.SetBlinkEnabledMultiplePOI
// 0x0038 (0x0038 - 0x0000)
struct MinimapComponent_C_SetBlinkEnabledMultiplePOI final
{
public:
	TArray<class AActor*>                         POIs;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Enabled;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4287[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4288[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPOIW_C*                                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_SetBlinkEnabledMultiplePOI) == 0x000008, "Wrong alignment on MinimapComponent_C_SetBlinkEnabledMultiplePOI");
static_assert(sizeof(MinimapComponent_C_SetBlinkEnabledMultiplePOI) == 0x000038, "Wrong size on MinimapComponent_C_SetBlinkEnabledMultiplePOI");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabledMultiplePOI, POIs) == 0x000000, "Member 'MinimapComponent_C_SetBlinkEnabledMultiplePOI::POIs' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabledMultiplePOI, Enabled) == 0x000010, "Member 'MinimapComponent_C_SetBlinkEnabledMultiplePOI::Enabled' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabledMultiplePOI, Temp_bool_True_if_break_was_hit_Variable) == 0x000011, "Member 'MinimapComponent_C_SetBlinkEnabledMultiplePOI::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabledMultiplePOI, Temp_int_Array_Index_Variable) == 0x000014, "Member 'MinimapComponent_C_SetBlinkEnabledMultiplePOI::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabledMultiplePOI, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'MinimapComponent_C_SetBlinkEnabledMultiplePOI::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabledMultiplePOI, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'MinimapComponent_C_SetBlinkEnabledMultiplePOI::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabledMultiplePOI, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'MinimapComponent_C_SetBlinkEnabledMultiplePOI::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabledMultiplePOI, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'MinimapComponent_C_SetBlinkEnabledMultiplePOI::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabledMultiplePOI, CallFunc_Array_Get_Item) == 0x000028, "Member 'MinimapComponent_C_SetBlinkEnabledMultiplePOI::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabledMultiplePOI, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'MinimapComponent_C_SetBlinkEnabledMultiplePOI::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabledMultiplePOI, CallFunc_BooleanAND_ReturnValue) == 0x000031, "Member 'MinimapComponent_C_SetBlinkEnabledMultiplePOI::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetBlinkEnabledMultiplePOI, CallFunc_Array_Contains_ReturnValue) == 0x000032, "Member 'MinimapComponent_C_SetBlinkEnabledMultiplePOI::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.SetMarkerRef
// 0x0078 (0x0078 - 0x0000)
struct MinimapComponent_C_SetMarkerRef final
{
public:
	class ADummyMarker_C*                         Param_Marker;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TextureSize;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Color;                                             // 0x0020(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	uint8                                         Pad_4289[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ToolTipOnHover;                                    // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Persistent;                                        // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_428A[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             OffMinimapTexture__If_persistent_;                 // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              OffMinimapTextureSize;                             // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_SetMarkerRef) == 0x000008, "Wrong alignment on MinimapComponent_C_SetMarkerRef");
static_assert(sizeof(MinimapComponent_C_SetMarkerRef) == 0x000078, "Wrong size on MinimapComponent_C_SetMarkerRef");
static_assert(offsetof(MinimapComponent_C_SetMarkerRef, Param_Marker) == 0x000000, "Member 'MinimapComponent_C_SetMarkerRef::Param_Marker' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetMarkerRef, Texture) == 0x000008, "Member 'MinimapComponent_C_SetMarkerRef::Texture' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetMarkerRef, TextureSize) == 0x000010, "Member 'MinimapComponent_C_SetMarkerRef::TextureSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetMarkerRef, Color) == 0x000020, "Member 'MinimapComponent_C_SetMarkerRef::Color' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetMarkerRef, ToolTipOnHover) == 0x000038, "Member 'MinimapComponent_C_SetMarkerRef::ToolTipOnHover' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetMarkerRef, Persistent) == 0x000050, "Member 'MinimapComponent_C_SetMarkerRef::Persistent' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetMarkerRef, OffMinimapTexture__If_persistent_) == 0x000058, "Member 'MinimapComponent_C_SetMarkerRef::OffMinimapTexture__If_persistent_' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetMarkerRef, OffMinimapTextureSize) == 0x000060, "Member 'MinimapComponent_C_SetMarkerRef::OffMinimapTextureSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetMarkerRef, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'MinimapComponent_C_SetMarkerRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.SetOpacity
// 0x0018 (0x0018 - 0x0000)
struct MinimapComponent_C_SetOpacity final
{
public:
	double                                        Opacity;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_SetOpacity) == 0x000008, "Wrong alignment on MinimapComponent_C_SetOpacity");
static_assert(sizeof(MinimapComponent_C_SetOpacity) == 0x000018, "Wrong size on MinimapComponent_C_SetOpacity");
static_assert(offsetof(MinimapComponent_C_SetOpacity, Opacity) == 0x000000, "Member 'MinimapComponent_C_SetOpacity::Opacity' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetOpacity, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'MinimapComponent_C_SetOpacity::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetOpacity, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000010, "Member 'MinimapComponent_C_SetOpacity::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.SetZoomValue
// 0x0018 (0x0018 - 0x0000)
struct MinimapComponent_C_SetZoomValue final
{
public:
	double                                        Param_Zoom;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_SetZoomValue) == 0x000008, "Wrong alignment on MinimapComponent_C_SetZoomValue");
static_assert(sizeof(MinimapComponent_C_SetZoomValue) == 0x000018, "Wrong size on MinimapComponent_C_SetZoomValue");
static_assert(offsetof(MinimapComponent_C_SetZoomValue, Param_Zoom) == 0x000000, "Member 'MinimapComponent_C_SetZoomValue::Param_Zoom' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetZoomValue, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'MinimapComponent_C_SetZoomValue::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SetZoomValue, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000010, "Member 'MinimapComponent_C_SetZoomValue::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.SquareCoorToCircle
// 0x0090 (0x0090 - 0x0000)
struct MinimapComponent_C_SquareCoorToCircle final
{
public:
	double                                        XSquare;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        YSquare;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XCircle;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        YCircle;                                           // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_428B[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Square_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_428C[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Square_ReturnValue_1;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Sqrt_ReturnValue;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Sqrt_ReturnValue_1;                       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_SquareCoorToCircle) == 0x000008, "Wrong alignment on MinimapComponent_C_SquareCoorToCircle");
static_assert(sizeof(MinimapComponent_C_SquareCoorToCircle) == 0x000090, "Wrong size on MinimapComponent_C_SquareCoorToCircle");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, XSquare) == 0x000000, "Member 'MinimapComponent_C_SquareCoorToCircle::XSquare' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, YSquare) == 0x000008, "Member 'MinimapComponent_C_SquareCoorToCircle::YSquare' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, XCircle) == 0x000010, "Member 'MinimapComponent_C_SquareCoorToCircle::XCircle' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, YCircle) == 0x000018, "Member 'MinimapComponent_C_SquareCoorToCircle::YCircle' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000020, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_Square_ReturnValue) == 0x000028, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000038, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000040, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_Square_ReturnValue_1) == 0x000048, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_Square_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_Sqrt_ReturnValue) == 0x000050, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000058, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000060, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_SelectFloat_ReturnValue) == 0x000070, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_Sqrt_ReturnValue_1) == 0x000078, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_Sqrt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000080, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_SquareCoorToCircle, CallFunc_SelectFloat_ReturnValue_1) == 0x000088, "Member 'MinimapComponent_C_SquareCoorToCircle::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.Tick
// 0x0048 (0x0048 - 0x0000)
struct MinimapComponent_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_Tick) == 0x000008, "Wrong alignment on MinimapComponent_C_Tick");
static_assert(sizeof(MinimapComponent_C_Tick) == 0x000048, "Wrong size on MinimapComponent_C_Tick");
static_assert(offsetof(MinimapComponent_C_Tick, MyGeometry) == 0x000000, "Member 'MinimapComponent_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_Tick, InDeltaTime) == 0x000040, "Member 'MinimapComponent_C_Tick::InDeltaTime' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ToggleMyLocationVisibility
// 0x0002 (0x0002 - 0x0000)
struct MinimapComponent_C_ToggleMyLocationVisibility final
{
public:
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ToggleMyLocationVisibility) == 0x000001, "Wrong alignment on MinimapComponent_C_ToggleMyLocationVisibility");
static_assert(sizeof(MinimapComponent_C_ToggleMyLocationVisibility) == 0x000002, "Wrong size on MinimapComponent_C_ToggleMyLocationVisibility");
static_assert(offsetof(MinimapComponent_C_ToggleMyLocationVisibility, CallFunc_GetVisibility_ReturnValue) == 0x000000, "Member 'MinimapComponent_C_ToggleMyLocationVisibility::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ToggleMyLocationVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'MinimapComponent_C_ToggleMyLocationVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.ToggleViewAngleVisibility
// 0x0002 (0x0002 - 0x0000)
struct MinimapComponent_C_ToggleViewAngleVisibility final
{
public:
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_ToggleViewAngleVisibility) == 0x000001, "Wrong alignment on MinimapComponent_C_ToggleViewAngleVisibility");
static_assert(sizeof(MinimapComponent_C_ToggleViewAngleVisibility) == 0x000002, "Wrong size on MinimapComponent_C_ToggleViewAngleVisibility");
static_assert(offsetof(MinimapComponent_C_ToggleViewAngleVisibility, CallFunc_GetVisibility_ReturnValue) == 0x000000, "Member 'MinimapComponent_C_ToggleViewAngleVisibility::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_ToggleViewAngleVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'MinimapComponent_C_ToggleViewAngleVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.UpdateMarker
// 0x0108 (0x0108 - 0x0000)
struct MinimapComponent_C_UpdateMarker final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0018(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_UpdateMarker) == 0x000008, "Wrong alignment on MinimapComponent_C_UpdateMarker");
static_assert(sizeof(MinimapComponent_C_UpdateMarker) == 0x000108, "Wrong size on MinimapComponent_C_UpdateMarker");
static_assert(offsetof(MinimapComponent_C_UpdateMarker, NewLocation) == 0x000000, "Member 'MinimapComponent_C_UpdateMarker::NewLocation' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdateMarker, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000018, "Member 'MinimapComponent_C_UpdateMarker::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdateMarker, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000100, "Member 'MinimapComponent_C_UpdateMarker::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdateMarker, CallFunc_IsValid_ReturnValue) == 0x000101, "Member 'MinimapComponent_C_UpdateMarker::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinimapComponent.MinimapComponent_C.UpdatePOIs
// 0x0300 (0x0300 - 0x0000)
struct MinimapComponent_C_UpdatePOIs final
{
public:
	TArray<class UPOIW_C*>                        ToBeDeleted;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	double                                        BorderSize;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BottomPadd;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeftPadd;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Y;                                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        X;                                                 // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_428D[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_SelectRotator_ReturnValue;                // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_428E[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_SelectRotator_ReturnValue_1;              // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_428F[0x5];                                     // 0x00BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_SelectRotator_ReturnValue_2;              // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector_X;                            // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x00F0(0x0040)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPOIW_C*                                CallFunc_Array_Get_Item;                           // 0x0158(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4290[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4291[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4292[0x3];                                     // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClampXY_bIsOutside;                       // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4293[0x6];                                     // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4294[0x7];                                     // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClampXY_bIsOutside_1;                     // 0x01A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4295[0x1];                                     // 0x01A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x01A4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4296[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MakeLiteralDouble_ReturnValue;            // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_2;                        // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOutsideOfCircle_isOutside;              // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4297[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RoundMapAdjsuter_Left;                    // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RoundMapAdjsuter_Bottom;                  // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_4;        // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_5;        // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPOIW_C*                                CallFunc_Array_Get_Item_1;                         // 0x0230(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0242(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0243(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4298[0x3];                                     // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4299[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_429A[0x7];                                     // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_6;        // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_7;        // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_429B[0x7];                                     // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_8;        // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_9;        // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Left_ImplicitCast;               // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Bottom_ImplicitCast;             // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Left_ImplicitCast_1;             // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Bottom_ImplicitCast_1;           // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Bottom_ImplicitCast_2;           // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Left_ImplicitCast_2;             // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinimapComponent_C_UpdatePOIs) == 0x000008, "Wrong alignment on MinimapComponent_C_UpdatePOIs");
static_assert(sizeof(MinimapComponent_C_UpdatePOIs) == 0x000300, "Wrong size on MinimapComponent_C_UpdatePOIs");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, ToBeDeleted) == 0x000000, "Member 'MinimapComponent_C_UpdatePOIs::ToBeDeleted' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, BorderSize) == 0x000010, "Member 'MinimapComponent_C_UpdatePOIs::BorderSize' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, BottomPadd) == 0x000018, "Member 'MinimapComponent_C_UpdatePOIs::BottomPadd' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, LeftPadd) == 0x000020, "Member 'MinimapComponent_C_UpdatePOIs::LeftPadd' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, Y) == 0x000028, "Member 'MinimapComponent_C_UpdatePOIs::Y' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, X) == 0x000030, "Member 'MinimapComponent_C_UpdatePOIs::X' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, Temp_int_Array_Index_Variable) == 0x000038, "Member 'MinimapComponent_C_UpdatePOIs::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'MinimapComponent_C_UpdatePOIs::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'MinimapComponent_C_UpdatePOIs::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BreakVector2D_X) == 0x000048, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BreakVector2D_Y) == 0x000050, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000070, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_SelectRotator_ReturnValue) == 0x000078, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_SelectRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000090, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_SelectRotator_ReturnValue_1) == 0x000098, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_SelectRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0000B0, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0000B1, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x0000B2, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x0000B3, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x0000B4, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Not_PreBool_ReturnValue) == 0x0000B5, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BooleanAND_ReturnValue) == 0x0000B6, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000B7, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BooleanAND_ReturnValue_1) == 0x0000B8, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000B9, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BooleanAND_ReturnValue_2) == 0x0000BA, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_SelectRotator_ReturnValue_2) == 0x0000C0, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_SelectRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BreakVector_X) == 0x0000D8, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BreakVector_Y) == 0x0000E0, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BreakVector_Z) == 0x0000E8, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_GetCachedGeometry_ReturnValue) == 0x0000F0, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_GetLocalSize_ReturnValue) == 0x000130, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BreakVector2D_X_1) == 0x000140, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BreakVector2D_Y_1) == 0x000148, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000150, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Array_Get_Item) == 0x000158, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Array_RemoveItem_ReturnValue) == 0x000160, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Array_Length_ReturnValue) == 0x000164, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000168, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, Temp_int_Loop_Counter_Variable_1) == 0x00016C, "Member 'MinimapComponent_C_UpdatePOIs::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000170, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Less_IntInt_ReturnValue) == 0x000178, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Add_IntInt_ReturnValue_1) == 0x00017C, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_ClampXY_bIsOutside) == 0x000180, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_ClampXY_bIsOutside' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Not_PreBool_ReturnValue_3) == 0x000181, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Abs_ReturnValue) == 0x000188, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000190, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Abs_ReturnValue_1) == 0x000198, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x0001A0, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BooleanOR_ReturnValue) == 0x0001A1, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_ClampXY_bIsOutside_1) == 0x0001A2, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_ClampXY_bIsOutside_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, K2Node_MakeStruct_Margin) == 0x0001A4, "Member 'MinimapComponent_C_UpdatePOIs::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_MakeLiteralDouble_ReturnValue) == 0x0001B8, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_MakeLiteralDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, K2Node_MakeStruct_Margin_1) == 0x0001C0, "Member 'MinimapComponent_C_UpdatePOIs::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, K2Node_MakeStruct_Margin_2) == 0x0001D0, "Member 'MinimapComponent_C_UpdatePOIs::K2Node_MakeStruct_Margin_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0001E0, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x0001E8, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_IsOutsideOfCircle_isOutside) == 0x0001F0, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_IsOutsideOfCircle_isOutside' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_RoundMapAdjsuter_Left) == 0x0001F8, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_RoundMapAdjsuter_Left' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_RoundMapAdjsuter_Bottom) == 0x000200, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_RoundMapAdjsuter_Bottom' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x000208, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Divide_DoubleDouble_ReturnValue_4) == 0x000210, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Divide_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000218, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Divide_DoubleDouble_ReturnValue_5) == 0x000220, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Divide_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000228, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Array_Get_Item_1) == 0x000230, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000238, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BooleanAND_ReturnValue_3) == 0x000240, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BooleanAND_ReturnValue_4) == 0x000241, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BooleanAND_ReturnValue_5) == 0x000242, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Not_PreBool_ReturnValue_4) == 0x000243, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BooleanAND_ReturnValue_6) == 0x000244, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Array_Add_ReturnValue) == 0x000248, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Array_Length_ReturnValue_1) == 0x00024C, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000250, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Less_IntInt_ReturnValue_1) == 0x000268, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000270, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BreakVector_X_1) == 0x000288, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BreakVector_Y_1) == 0x000290, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_BreakVector_Z_1) == 0x000298, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0002A0, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0002A8, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Divide_DoubleDouble_ReturnValue_6) == 0x0002B0, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Divide_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0002B8, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Divide_DoubleDouble_ReturnValue_7) == 0x0002C0, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Divide_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_IsValid_ReturnValue) == 0x0002C8, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x0002D0, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Divide_DoubleDouble_ReturnValue_8) == 0x0002D8, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Divide_DoubleDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, CallFunc_Divide_DoubleDouble_ReturnValue_9) == 0x0002E0, "Member 'MinimapComponent_C_UpdatePOIs::CallFunc_Divide_DoubleDouble_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, K2Node_MakeStruct_Left_ImplicitCast) == 0x0002E8, "Member 'MinimapComponent_C_UpdatePOIs::K2Node_MakeStruct_Left_ImplicitCast' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, K2Node_MakeStruct_Bottom_ImplicitCast) == 0x0002EC, "Member 'MinimapComponent_C_UpdatePOIs::K2Node_MakeStruct_Bottom_ImplicitCast' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, K2Node_MakeStruct_Left_ImplicitCast_1) == 0x0002F0, "Member 'MinimapComponent_C_UpdatePOIs::K2Node_MakeStruct_Left_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, K2Node_MakeStruct_Bottom_ImplicitCast_1) == 0x0002F4, "Member 'MinimapComponent_C_UpdatePOIs::K2Node_MakeStruct_Bottom_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, K2Node_MakeStruct_Bottom_ImplicitCast_2) == 0x0002F8, "Member 'MinimapComponent_C_UpdatePOIs::K2Node_MakeStruct_Bottom_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(MinimapComponent_C_UpdatePOIs, K2Node_MakeStruct_Left_ImplicitCast_2) == 0x0002FC, "Member 'MinimapComponent_C_UpdatePOIs::K2Node_MakeStruct_Left_ImplicitCast_2' has a wrong offset!");

}

