#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_CompassIndicatorMaster

#include "Basic.hpp"

#include "E_C_CalculateDistanceFrom_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_CompassIndicatorMaster.W_CompassIndicatorMaster_C
// 0x00E0 (0x0358 - 0x0278)
class UW_CompassIndicatorMaster_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_Indicator;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_Root;                                      // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             T_DistanceToTarget;                                // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_CompassIndicatorComponent_C*        CompassTargetComponent;                            // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UW_CompassMaster_C*                     CompassMaster;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             IndicatorTexture;                                  // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           IndicatorColor;                                    // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            DistanceTextColor;                                 // 0x02C0(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_376C[0x4];                                     // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              IndicatorSize;                                     // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Indicator_OffsetY;                                 // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FSlateFontInfo                         DistanceTextFont;                                  // 0x02F0(0x0058)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        DistanceText_OffsetY;                              // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Distance;                                          // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_W_CompassIndicatorMaster(int32 EntryPoint);
	struct FVector GetPlayerNearestLocation(E_C_CalculateDistanceFrom GetDistanceMode);
	void PreConstruct(bool IsDesignTime);
	void SetDistance(int32 Dist);
	void UpdateIndicator();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_CompassIndicatorMaster_C">();
	}
	static class UW_CompassIndicatorMaster_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_CompassIndicatorMaster_C>();
	}
};
static_assert(alignof(UW_CompassIndicatorMaster_C) == 0x000008, "Wrong alignment on UW_CompassIndicatorMaster_C");
static_assert(sizeof(UW_CompassIndicatorMaster_C) == 0x000358, "Wrong size on UW_CompassIndicatorMaster_C");
static_assert(offsetof(UW_CompassIndicatorMaster_C, UberGraphFrame) == 0x000278, "Member 'UW_CompassIndicatorMaster_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, Image_Indicator) == 0x000280, "Member 'UW_CompassIndicatorMaster_C::Image_Indicator' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, SizeBox_Root) == 0x000288, "Member 'UW_CompassIndicatorMaster_C::SizeBox_Root' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, T_DistanceToTarget) == 0x000290, "Member 'UW_CompassIndicatorMaster_C::T_DistanceToTarget' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, CompassTargetComponent) == 0x000298, "Member 'UW_CompassIndicatorMaster_C::CompassTargetComponent' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, CompassMaster) == 0x0002A0, "Member 'UW_CompassIndicatorMaster_C::CompassMaster' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, IndicatorTexture) == 0x0002A8, "Member 'UW_CompassIndicatorMaster_C::IndicatorTexture' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, IndicatorColor) == 0x0002B0, "Member 'UW_CompassIndicatorMaster_C::IndicatorColor' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, DistanceTextColor) == 0x0002C0, "Member 'UW_CompassIndicatorMaster_C::DistanceTextColor' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, IndicatorSize) == 0x0002D8, "Member 'UW_CompassIndicatorMaster_C::IndicatorSize' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, Indicator_OffsetY) == 0x0002E8, "Member 'UW_CompassIndicatorMaster_C::Indicator_OffsetY' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, DistanceTextFont) == 0x0002F0, "Member 'UW_CompassIndicatorMaster_C::DistanceTextFont' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, DistanceText_OffsetY) == 0x000348, "Member 'UW_CompassIndicatorMaster_C::DistanceText_OffsetY' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, Distance) == 0x000350, "Member 'UW_CompassIndicatorMaster_C::Distance' has a wrong offset!");

}

