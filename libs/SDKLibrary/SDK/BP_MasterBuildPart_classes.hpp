#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterBuildPart

#include "Basic.hpp"

#include "E_Hitbox_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_WorldActions_structs.hpp"
#include "E_DamageType_structs.hpp"
#include "E_BuildType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterBuildPart.BP_MasterBuildPart_C
// 0x00F0 (0x0380 - 0x0290)
class ABP_MasterBuildPart_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UGeometryCollectionComponent*           GeometryCollection;                                // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ArrowMesh;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           Owners;                                            // 0x02B8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          PendingDestroy;                                    // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InCheck;                                           // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InUpgrade;                                         // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B13[0x5];                                     // 0x02CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SaveSystem_C*                       SaveSystem;                                        // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SaveLoaded;                                        // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SupportingDestroyedDone;                           // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Preview;                                           // 0x02DA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B14[0x5];                                     // 0x02DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    BuildPart;                                         // 0x02E0(0x0010)(Edit, BlueprintVisible, NoDestructor)
	class UClass*                                 BuildingOptionMenu;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowHealthBarUI;                                   // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B15[0x3];                                     // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentHealth;                                     // 0x02FC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxHealth;                                         // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B16[0x4];                                     // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DestroySound;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FurnitureCheckSize;                                // 0x0310(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowDamage;                                       // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnlyOneOwner;                                      // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B17[0x6];                                     // 0x032A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_GridComponent_C*>            GridComponents;                                    // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UPrimitiveComponent*>            BuildCollisionComponents;                          // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class AActor*                                 NewBuildPart;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         AttachedActors;                                    // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class AActor*                                 AttachCheck;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadSaveDestroy;                                   // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B18[0x7];                                     // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Wood_Sound_Destroy_Sound_Cue;                      // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ActorKill();
	void AdjacentFloorSupportCheck();
	void DeleteBuildPart(class UBP_PlayerBuildingComponent_C* PlayerBuildingComponent, bool ForceDestroy);
	void DestroySupportingBuildParts();
	void ExecuteUbergraph_BP_MasterBuildPart(int32 EntryPoint);
	void FloorSupportCheck(bool DirectSupportOnly, bool* Supported, bool* IndirectSupportOnly);
	void GetHit();
	bool IsInNoDamageZone();
	bool IsOwner(const class FText& PlayerName);
	void LoadBuildPart(class UBP_SGKSaveGame_C* SaveGame);
	void LoadExtraData(class UBP_SGKSaveGame_C* SaveGame, int32 Param_Index);
	void MulticastBuildPartPlaced();
	void MulticastDestroyed();
	void MulticastSound(class USoundBase* Sound);
	void PlaySound(class USoundBase* Sound);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void SaveBuildPartData(class UBP_SGKSaveGame_C* SaveGame);
	void SaveExtraData(class UBP_SGKSaveGame_C* SaveGame, const struct FS_LevelSaveData& LevelSaveData, int32* ExtraDataIndex, struct FS_LevelSaveData* NewLevelSaveData);
	void ServerBuildingOptions(class UBP_PlayerInventory_C* PlayerInventory);
	bool SGK_AddMultipleOwners(TArray<class FText>& Param_Owners);
	bool SGK_AddOwner(const class FText& PlayerName);
	void SGK_AllowInteraction(bool* AllowInteraction);
	void SGK_BleedDamage(int32 TickDamage, double TickTime, double BleedLength);
	void SGK_BPBuildCollision(TArray<class UPrimitiveComponent*>* Collision);
	void SGK_BPGrids(TArray<class UBP_GridComponent_C*>* Grids);
	void SGK_BuildingOptions(class UBP_PlayerInventory_C* PlayerInventory);
	void SGK_BuildPart(struct FDataTableRowHandle* Param_BuildPart);
	void SGK_BuildPartPlaced(class UBP_PlayerInventory_C* PlayerInventory, bool FromSaveGame);
	void SGK_BuildPartType(E_BuildType* Type);
	bool SGK_ClearOwners();
	void SGK_CodeCheck(const class FText& Code, bool* CodeAccepted);
	void SGK_CurrentHealth(int32* Health);
	void SGK_Damage(int32 BaseDamage, class AActor* EventInstigator, class AActor* DamageCauser, E_DamageType DamageType, E_Hitbox HitBox);
	void SGK_DeleteBuildPart(class UBP_PlayerBuildingComponent_C* PlayerBuildingComponent, bool ForceDestroy);
	bool SGK_DropItem(const struct FS_InvItem& InvItem, bool Dropped, bool Spawned, bool Param_SaveLoaded);
	bool SGK_EndInteraction(class UBP_PlayerInventory_C* PlayerInventory);
	void SGK_GetVerifiedPlayers(TArray<class FText>* VerifiedPlayers);
	bool SGK_Interact(class UBP_PlayerInventory_C* PlayerInventory, E_WorldActions Action);
	void SGK_InteractName(class FText* InteractName);
	void SGK_InvItem(bool* IsItem, struct FS_InvItem* InvItem);
	void SGK_IsOwner(const class FText& PlayerName, bool* IsOwner);
	void SGK_IsPendingDestroy(bool* IsPendingDestroy);
	void SGK_IsPlaced(bool* IsPlaced);
	void SGK_ItemAmount(int32* Amount);
	void SGK_LoadExtraData(class UBP_SGKSaveGame_C* SaveGame, int32 Param_Index);
	void SGK_MaxHealth(int32* Param_MaxHealth);
	void SGK_Mesh(class UPrimitiveComponent** Mesh);
	void SGK_PlayerInProximity();
	void SGK_PlayerOutProximity();
	void SGK_PossibleActions(class UBP_PlayerInventory_C* PlayerInventory, bool* ActionsFound, TArray<struct FS_WorldAction>* PossibleActions);
	bool SGK_Preview(bool Param_Preview);
	bool SGK_SetCurrentHealth(int32 NewHealthAmount);
	void SGK_SetVerifiedPlayers(TArray<class FText>& VerifiedPlayers);
	void SGK_ShowHealthWidget(bool* ShowHealthWidget, class FText* HealthWidgetName);
	void SGK_SupportCheck(bool DestroyOnFail, bool DirectSupportOnly, bool* Supported, bool* IndirectSupportOnly);
	void SGK_TurnedOnEffect(bool TurnedOn);
	bool SGK_UpdateCode(const class FText& Code);
	void SGK_Upgrade();
	bool SGK_VerifyPlayer(const class FText& Text);
	void SGKSave(class UBP_SGKSaveGame_C* Save);
	void SupportCheck(bool DirectSupportOnly, bool* Supported);
	void TakeDamage(int32 Damage);
	void Wood_Box_Destroy_Event(class USoundBase* Sound);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterBuildPart_C">();
	}
	static class ABP_MasterBuildPart_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MasterBuildPart_C>();
	}
};
static_assert(alignof(ABP_MasterBuildPart_C) == 0x000008, "Wrong alignment on ABP_MasterBuildPart_C");
static_assert(sizeof(ABP_MasterBuildPart_C) == 0x000380, "Wrong size on ABP_MasterBuildPart_C");
static_assert(offsetof(ABP_MasterBuildPart_C, UberGraphFrame) == 0x000290, "Member 'ABP_MasterBuildPart_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, GeometryCollection) == 0x000298, "Member 'ABP_MasterBuildPart_C::GeometryCollection' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, ArrowMesh) == 0x0002A0, "Member 'ABP_MasterBuildPart_C::ArrowMesh' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, StaticMesh) == 0x0002A8, "Member 'ABP_MasterBuildPart_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_MasterBuildPart_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, Owners) == 0x0002B8, "Member 'ABP_MasterBuildPart_C::Owners' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, PendingDestroy) == 0x0002C8, "Member 'ABP_MasterBuildPart_C::PendingDestroy' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, InCheck) == 0x0002C9, "Member 'ABP_MasterBuildPart_C::InCheck' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, InUpgrade) == 0x0002CA, "Member 'ABP_MasterBuildPart_C::InUpgrade' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, SaveSystem) == 0x0002D0, "Member 'ABP_MasterBuildPart_C::SaveSystem' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, SaveLoaded) == 0x0002D8, "Member 'ABP_MasterBuildPart_C::SaveLoaded' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, SupportingDestroyedDone) == 0x0002D9, "Member 'ABP_MasterBuildPart_C::SupportingDestroyedDone' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, Preview) == 0x0002DA, "Member 'ABP_MasterBuildPart_C::Preview' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, BuildPart) == 0x0002E0, "Member 'ABP_MasterBuildPart_C::BuildPart' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, BuildingOptionMenu) == 0x0002F0, "Member 'ABP_MasterBuildPart_C::BuildingOptionMenu' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, ShowHealthBarUI) == 0x0002F8, "Member 'ABP_MasterBuildPart_C::ShowHealthBarUI' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, CurrentHealth) == 0x0002FC, "Member 'ABP_MasterBuildPart_C::CurrentHealth' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, MaxHealth) == 0x000300, "Member 'ABP_MasterBuildPart_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, DestroySound) == 0x000308, "Member 'ABP_MasterBuildPart_C::DestroySound' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, FurnitureCheckSize) == 0x000310, "Member 'ABP_MasterBuildPart_C::FurnitureCheckSize' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, AllowDamage) == 0x000328, "Member 'ABP_MasterBuildPart_C::AllowDamage' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, OnlyOneOwner) == 0x000329, "Member 'ABP_MasterBuildPart_C::OnlyOneOwner' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, GridComponents) == 0x000330, "Member 'ABP_MasterBuildPart_C::GridComponents' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, BuildCollisionComponents) == 0x000340, "Member 'ABP_MasterBuildPart_C::BuildCollisionComponents' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, NewBuildPart) == 0x000350, "Member 'ABP_MasterBuildPart_C::NewBuildPart' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, AttachedActors) == 0x000358, "Member 'ABP_MasterBuildPart_C::AttachedActors' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, AttachCheck) == 0x000368, "Member 'ABP_MasterBuildPart_C::AttachCheck' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, LoadSaveDestroy) == 0x000370, "Member 'ABP_MasterBuildPart_C::LoadSaveDestroy' has a wrong offset!");
static_assert(offsetof(ABP_MasterBuildPart_C, Wood_Sound_Destroy_Sound_Cue) == 0x000378, "Member 'ABP_MasterBuildPart_C::Wood_Sound_Destroy_Sound_Cue' has a wrong offset!");

}

