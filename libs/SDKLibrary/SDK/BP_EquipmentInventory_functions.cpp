#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EquipmentInventory

#include "Basic.hpp"

#include "BP_EquipmentInventory_classes.hpp"
#include "BP_EquipmentInventory_parameters.hpp"


namespace SDK
{

// Function BP_EquipmentInventory.BP_EquipmentInventory_C.AddUserToEquipmentItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_PlayerInventory_C*            Player_Inv                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::AddUserToEquipmentItems(class UBP_PlayerInventory_C* Player_Inv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "AddUserToEquipmentItems");

	Params::BP_EquipmentInventory_C_AddUserToEquipmentItems Parms{};

	Parms.Player_Inv = Player_Inv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.AllEquipmentActors
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_EquipmentType                         IgnoreSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_MasterClothingAttchment_C*>Actors                                                 (Parm, OutParm)

void UBP_EquipmentInventory_C::AllEquipmentActors(E_EquipmentType IgnoreSlot, TArray<class ABP_MasterClothingAttchment_C*>* Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "AllEquipmentActors");

	Params::BP_EquipmentInventory_C_AllEquipmentActors Parms{};

	Parms.IgnoreSlot = IgnoreSlot;

	UObject::ProcessEvent(Func, &Parms);

	if (Actors != nullptr)
		*Actors = std::move(Parms.Actors);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.AllEquipmentItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_EquipmentType                         IgnoreSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_InvItem>               Items                                                  (Parm, OutParm, ContainsInstancedReference)

void UBP_EquipmentInventory_C::AllEquipmentItems(E_EquipmentType IgnoreSlot, TArray<struct FS_InvItem>* Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "AllEquipmentItems");

	Params::BP_EquipmentInventory_C_AllEquipmentItems Parms{};

	Parms.IgnoreSlot = IgnoreSlot;

	UObject::ProcessEvent(Func, &Parms);

	if (Items != nullptr)
		*Items = std::move(Parms.Items);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.AllWeaponActors
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (Parm, OutParm)

void UBP_EquipmentInventory_C::AllWeaponActors(TArray<class AActor*>* Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "AllWeaponActors");

	Params::BP_EquipmentInventory_C_AllWeaponActors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actors != nullptr)
		*Actors = std::move(Parms.Actors);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.ApplyRandomEquipment
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FDataTableRowHandle>      TargetArray                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// E_EquipmentType                         EquipmentType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::ApplyRandomEquipment(const TArray<struct FDataTableRowHandle>& TargetArray, E_EquipmentType EquipmentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "ApplyRandomEquipment");

	Params::BP_EquipmentInventory_C_ApplyRandomEquipment Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.EquipmentType = EquipmentType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.ApplyRandomWeapons
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_StartingWeaponItem>    TargetArray                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// E_WeaponSlots                           WeaponSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::ApplyRandomWeapons(const TArray<struct FS_StartingWeaponItem>& TargetArray, E_WeaponSlots WeaponSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "ApplyRandomWeapons");

	Params::BP_EquipmentInventory_C_ApplyRandomWeapons Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.WeaponSlot = WeaponSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.ArmourDamageReduction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_DamageType                            DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Hitbox                                HitBox                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FinalDamage                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::ArmourDamageReduction(int32 Damage, E_DamageType DamageType, E_Hitbox HitBox, int32* FinalDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "ArmourDamageReduction");

	Params::BP_EquipmentInventory_C_ArmourDamageReduction Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.HitBox = HitBox;

	UObject::ProcessEvent(Func, &Parms);

	if (FinalDamage != nullptr)
		*FinalDamage = Parms.FinalDamage;
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.CheckEquipmentSlot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_EquipmentType                         EquipmentType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SlotFull                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::CheckEquipmentSlot(E_EquipmentType EquipmentType, bool* SlotFull)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "CheckEquipmentSlot");

	Params::BP_EquipmentInventory_C_CheckEquipmentSlot Parms{};

	Parms.EquipmentType = EquipmentType;

	UObject::ProcessEvent(Func, &Parms);

	if (SlotFull != nullptr)
		*SlotFull = Parms.SlotFull;
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.CheckIfCanEquip
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       InvItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    CanEquip                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_EquipmentType                         FreeSlot                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::CheckIfCanEquip(const struct FS_InvItem& InvItem, bool* CanEquip, E_EquipmentType* FreeSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "CheckIfCanEquip");

	Params::BP_EquipmentInventory_C_CheckIfCanEquip Parms{};

	Parms.InvItem = std::move(InvItem);

	UObject::ProcessEvent(Func, &Parms);

	if (CanEquip != nullptr)
		*CanEquip = Parms.CanEquip;

	if (FreeSlot != nullptr)
		*FreeSlot = Parms.FreeSlot;
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.DamageEquipment
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_DamageType                            DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Hitbox                                HitBox                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::DamageEquipment(int32 Damage, E_DamageType DamageType, E_Hitbox HitBox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "DamageEquipment");

	Params::BP_EquipmentInventory_C_DamageEquipment Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.HitBox = HitBox;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.DecreaseEquipmentDurability
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DecreaseAmount                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_EquipmentType                         EquipmentSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::DecreaseEquipmentDurability(double DecreaseAmount, E_EquipmentType EquipmentSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "DecreaseEquipmentDurability");

	Params::BP_EquipmentInventory_C_DecreaseEquipmentDurability Parms{};

	Parms.DecreaseAmount = DecreaseAmount;
	Parms.EquipmentSlot = EquipmentSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.DestroyAttachedActors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::DestroyAttachedActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "DestroyAttachedActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.DestroyEquipmentItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_EquipmentType                         EquipmentSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::DestroyEquipmentItem(E_EquipmentType EquipmentSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "DestroyEquipmentItem");

	Params::BP_EquipmentInventory_C_DestroyEquipmentItem Parms{};

	Parms.EquipmentSlot = EquipmentSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.EquipItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       InvItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// struct FS_EquipmentSlotID               EquipmentSlotID                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_SaveLoaded                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ItemEquipped                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::EquipItem(const struct FS_InvItem& InvItem, const struct FS_EquipmentSlotID& EquipmentSlotID, bool Force, bool Param_SaveLoaded, bool* ItemEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "EquipItem");

	Params::BP_EquipmentInventory_C_EquipItem Parms{};

	Parms.InvItem = std::move(InvItem);
	Parms.EquipmentSlotID = std::move(EquipmentSlotID);
	Parms.Force = Force;
	Parms.Param_SaveLoaded = Param_SaveLoaded;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemEquipped != nullptr)
		*ItemEquipped = Parms.ItemEquipped;
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.EquipmentInventoryReplication
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Replicate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::EquipmentInventoryReplication(bool Replicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "EquipmentInventoryReplication");

	Params::BP_EquipmentInventory_C_EquipmentInventoryReplication Parms{};

	Parms.Replicate = Replicate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.EquipWeapon
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       Inv_Item                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// struct FS_WeaponSlotID                  Weapon_Slot_ID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    ClearQuickSlot                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::EquipWeapon(const struct FS_InvItem& Inv_Item, const struct FS_WeaponSlotID& Weapon_Slot_ID, bool ClearQuickSlot, bool Force, bool* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "EquipWeapon");

	Params::BP_EquipmentInventory_C_EquipWeapon Parms{};

	Parms.Inv_Item = std::move(Inv_Item);
	Parms.Weapon_Slot_ID = std::move(Weapon_Slot_ID);
	Parms.ClearQuickSlot = ClearQuickSlot;
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.ExecuteUbergraph_BP_EquipmentInventory
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::ExecuteUbergraph_BP_EquipmentInventory(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "ExecuteUbergraph_BP_EquipmentInventory");

	Params::BP_EquipmentInventory_C_ExecuteUbergraph_BP_EquipmentInventory Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.HasItemEquipped
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_EquipmentSlot                 EquipmentSlot                                          (Parm, OutParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

bool UBP_EquipmentInventory_C::HasItemEquipped(class FName ItemId, struct FS_EquipmentSlot* EquipmentSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "HasItemEquipped");

	Params::BP_EquipmentInventory_C_HasItemEquipped Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (EquipmentSlot != nullptr)
		*EquipmentSlot = std::move(Parms.EquipmentSlot);

	return Parms.ReturnValue;
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.HideComponentCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_EquipmentType                         Ignore                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::HideComponentCheck(const class FString& Tag, E_EquipmentType Ignore, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "HideComponentCheck");

	Params::BP_EquipmentInventory_C_HideComponentCheck Parms{};

	Parms.Tag = std::move(Tag);
	Parms.Ignore = Ignore;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.HideEquipmentComponents
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvItem                       InvItem                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// E_EquipmentType                         IgnoreSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::HideEquipmentComponents(bool Hide, const struct FS_InvItem& InvItem, E_EquipmentType IgnoreSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "HideEquipmentComponents");

	Params::BP_EquipmentInventory_C_HideEquipmentComponents Parms{};

	Parms.Hide = Hide;
	Parms.InvItem = std::move(InvItem);
	Parms.IgnoreSlot = IgnoreSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.InitializeEquipmentInventory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_OwningCharacter                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::InitializeEquipmentInventory(class AActor* Param_OwningCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "InitializeEquipmentInventory");

	Params::BP_EquipmentInventory_C_InitializeEquipmentInventory Parms{};

	Parms.Param_OwningCharacter = Param_OwningCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.ItemDecay
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::ItemDecay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "ItemDecay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.LoadComponentData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadComplete                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::LoadComponentData(class UBP_SGKSaveGame_C* SaveGame, bool* LoadComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "LoadComponentData");

	Params::BP_EquipmentInventory_C_LoadComponentData Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);

	if (LoadComplete != nullptr)
		*LoadComplete = Parms.LoadComplete;
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.LoadEquipmentData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_EquipmentInvSave              StorageSave                                            (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::LoadEquipmentData(const struct FS_EquipmentInvSave& StorageSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "LoadEquipmentData");

	Params::BP_EquipmentInventory_C_LoadEquipmentData Parms{};

	Parms.StorageSave = std::move(StorageSave);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.LoadInventoryData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_StorageSave                   S_StorageSave                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::LoadInventoryData(const struct FS_StorageSave& S_StorageSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "LoadInventoryData");

	Params::BP_EquipmentInventory_C_LoadInventoryData Parms{};

	Parms.S_StorageSave = std::move(S_StorageSave);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.OnRep_BackpackEquipmentSlot
// (BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::OnRep_BackpackEquipmentSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "OnRep_BackpackEquipmentSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.OnRep_EyewearEquipmentSlot
// (BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::OnRep_EyewearEquipmentSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "OnRep_EyewearEquipmentSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.OnRep_GlovesEquipmentSlot
// (BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::OnRep_GlovesEquipmentSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "OnRep_GlovesEquipmentSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.OnRep_HelmetEquipmentSlot
// (BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::OnRep_HelmetEquipmentSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "OnRep_HelmetEquipmentSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.OnRep_PantsEquipmentSlot
// (BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::OnRep_PantsEquipmentSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "OnRep_PantsEquipmentSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.OnRep_PrimaryEquipmentSlot
// (BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::OnRep_PrimaryEquipmentSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "OnRep_PrimaryEquipmentSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.OnRep_SecondaryWeaponSlot
// (BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::OnRep_SecondaryWeaponSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "OnRep_SecondaryWeaponSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.OnRep_ShirtEquipmentSlot
// (BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::OnRep_ShirtEquipmentSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "OnRep_ShirtEquipmentSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.OnRep_ShoesEquipmentSlot
// (BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::OnRep_ShoesEquipmentSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "OnRep_ShoesEquipmentSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.OnRep_TacticalRigEquipmentSlot
// (BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::OnRep_TacticalRigEquipmentSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "OnRep_TacticalRigEquipmentSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.RandomStartingEquipment
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::RandomStartingEquipment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "RandomStartingEquipment");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.RandomStartingWeapons
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::RandomStartingWeapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "RandomStartingWeapons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_EquipmentInventory_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.RemoveUserToEquipmentItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RemoveAll                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_PlayerInventory_C*            Player_Inv                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::RemoveUserToEquipmentItems(bool RemoveAll, class UBP_PlayerInventory_C* Player_Inv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "RemoveUserToEquipmentItems");

	Params::BP_EquipmentInventory_C_RemoveUserToEquipmentItems Parms{};

	Parms.RemoveAll = RemoveAll;
	Parms.Player_Inv = Player_Inv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.SaveComponentData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::SaveComponentData(class UBP_SGKSaveGame_C* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "SaveComponentData");

	Params::BP_EquipmentInventory_C_SaveComponentData Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.SaveEquipmentData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::SaveEquipmentData(class UBP_SGKSaveGame_C* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "SaveEquipmentData");

	Params::BP_EquipmentInventory_C_SaveEquipmentData Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.SearchEquipmentForEmptySlots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AllowRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_EquipmentType                         IgnoreEquipment                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_WeightCheck                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WeightCheckAmount                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SpaceFound                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_InvSlot>               FoundSlots                                             (Parm, OutParm, ContainsInstancedReference)

void UBP_EquipmentInventory_C::SearchEquipmentForEmptySlots(bool AllowRotation, class FName ItemId, E_EquipmentType IgnoreEquipment, bool Param_WeightCheck, int32 WeightCheckAmount, bool* SpaceFound, bool* Rotation, TArray<struct FS_InvSlot>* FoundSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "SearchEquipmentForEmptySlots");

	Params::BP_EquipmentInventory_C_SearchEquipmentForEmptySlots Parms{};

	Parms.AllowRotation = AllowRotation;
	Parms.ItemId = ItemId;
	Parms.IgnoreEquipment = IgnoreEquipment;
	Parms.Param_WeightCheck = Param_WeightCheck;
	Parms.WeightCheckAmount = WeightCheckAmount;

	UObject::ProcessEvent(Func, &Parms);

	if (SpaceFound != nullptr)
		*SpaceFound = Parms.SpaceFound;

	if (Rotation != nullptr)
		*Rotation = Parms.Rotation;

	if (FoundSlots != nullptr)
		*FoundSlots = std::move(Parms.FoundSlots);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.SelectedWeaponSlot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_WeaponSlots                           Weapon_Slot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_WeaponSlot                    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

struct FS_WeaponSlot UBP_EquipmentInventory_C::SelectedWeaponSlot(E_WeaponSlots Weapon_Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "SelectedWeaponSlot");

	Params::BP_EquipmentInventory_C_SelectedWeaponSlot Parms{};

	Parms.Weapon_Slot = Weapon_Slot;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.SelectEquipmentSlot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_EquipmentType                         EquipmentSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_EquipmentSlot                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

struct FS_EquipmentSlot UBP_EquipmentInventory_C::SelectEquipmentSlot(E_EquipmentType EquipmentSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "SelectEquipmentSlot");

	Params::BP_EquipmentInventory_C_SelectEquipmentSlot Parms{};

	Parms.EquipmentSlot = EquipmentSlot;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.ServerAddUserToEquipmentItems
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_PlayerInventory_C*            PlayerInventory                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::ServerAddUserToEquipmentItems(const class UBP_PlayerInventory_C*& PlayerInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "ServerAddUserToEquipmentItems");

	Params::BP_EquipmentInventory_C_ServerAddUserToEquipmentItems Parms{};

	Parms.PlayerInventory = PlayerInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.ServerRemoveUserToEquipmentItems
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_PlayerInventory_C*            PlayerInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    RemoveAll                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::ServerRemoveUserToEquipmentItems(class UBP_PlayerInventory_C* PlayerInventory, bool RemoveAll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "ServerRemoveUserToEquipmentItems");

	Params::BP_EquipmentInventory_C_ServerRemoveUserToEquipmentItems Parms{};

	Parms.PlayerInventory = PlayerInventory;
	Parms.RemoveAll = RemoveAll;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.ServerUpdateEquipmentSlot
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_EquipmentSlot                 EquipmentSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::ServerUpdateEquipmentSlot(const struct FS_EquipmentSlot& EquipmentSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "ServerUpdateEquipmentSlot");

	Params::BP_EquipmentInventory_C_ServerUpdateEquipmentSlot Parms{};

	Parms.EquipmentSlot = std::move(EquipmentSlot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.ServerUpdateWeaponSlot
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_WeaponSlot                    Weapon_Slot                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::ServerUpdateWeaponSlot(const struct FS_WeaponSlot& Weapon_Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "ServerUpdateWeaponSlot");

	Params::BP_EquipmentInventory_C_ServerUpdateWeaponSlot Parms{};

	Parms.Weapon_Slot = std::move(Weapon_Slot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.SGK AllowStartingItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AllowStartingItems                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::SGK_AllowStartingItems(bool* AllowStartingItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "SGK AllowStartingItems");

	Params::BP_EquipmentInventory_C_SGK_AllowStartingItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllowStartingItems != nullptr)
		*AllowStartingItems = Parms.AllowStartingItems;
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.SpawnDestructionBag
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::SpawnDestructionBag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "SpawnDestructionBag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.SpawnEquipmentDestructionBag
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::SpawnEquipmentDestructionBag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "SpawnEquipmentDestructionBag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.StartItemEquipment
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_EquipmentInventory_C::StartItemEquipment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "StartItemEquipment");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.UpdateEquipmentSlotItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       InvItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// struct FS_EquipmentSlotID               EquipmentSlotID                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// class ABP_MasterClothingAttchment_C*    EquipmentActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::UpdateEquipmentSlotItem(const struct FS_InvItem& InvItem, const struct FS_EquipmentSlotID& EquipmentSlotID, class ABP_MasterClothingAttchment_C* EquipmentActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "UpdateEquipmentSlotItem");

	Params::BP_EquipmentInventory_C_UpdateEquipmentSlotItem Parms{};

	Parms.InvItem = std::move(InvItem);
	Parms.EquipmentSlotID = std::move(EquipmentSlotID);
	Parms.EquipmentActor = EquipmentActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EquipmentInventory.BP_EquipmentInventory_C.UpdateWeaponSlotItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       InvItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// struct FS_WeaponSlotID                  Weapon_Slot_ID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// class ABP_MasterHoldable_C*             Holdable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   QuickSlot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EquipmentInventory_C::UpdateWeaponSlotItem(const struct FS_InvItem& InvItem, const struct FS_WeaponSlotID& Weapon_Slot_ID, class ABP_MasterHoldable_C* Holdable, int32 QuickSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EquipmentInventory_C", "UpdateWeaponSlotItem");

	Params::BP_EquipmentInventory_C_UpdateWeaponSlotItem Parms{};

	Parms.InvItem = std::move(InvItem);
	Parms.Weapon_Slot_ID = std::move(Weapon_Slot_ID);
	Parms.Holdable = Holdable;
	Parms.QuickSlot = QuickSlot;

	UObject::ProcessEvent(Func, &Parms);
}

}

