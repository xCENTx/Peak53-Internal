#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EOSCoreWeb

#include "Basic.hpp"

#include "EOSCoreWeb_structs.hpp"


namespace SDK::Params
{

// Function EOSCoreWeb.EOSWebAuthLibrary.InitiateEpicAuthentication
// 0x0048 (0x0048 - 0x0000)
struct EOSWebAuthLibrary_InitiateEpicAuthentication final
{
public:
	TDelegate<void(bool bWasSuccessful, const class FString& AuthenticationCode, const class FString& ErrorMessage)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInitiateEpicAuthenticationRequest     Request;                                           // 0x0010(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSWebAuthLibrary_InitiateEpicAuthentication) == 0x000008, "Wrong alignment on EOSWebAuthLibrary_InitiateEpicAuthentication");
static_assert(sizeof(EOSWebAuthLibrary_InitiateEpicAuthentication) == 0x000048, "Wrong size on EOSWebAuthLibrary_InitiateEpicAuthentication");
static_assert(offsetof(EOSWebAuthLibrary_InitiateEpicAuthentication, Callback) == 0x000000, "Member 'EOSWebAuthLibrary_InitiateEpicAuthentication::Callback' has a wrong offset!");
static_assert(offsetof(EOSWebAuthLibrary_InitiateEpicAuthentication, Request) == 0x000010, "Member 'EOSWebAuthLibrary_InitiateEpicAuthentication::Request' has a wrong offset!");

// Function EOSCoreWeb.EOSWebAuthLibrary.RequestAuthAccessToken
// 0x0098 (0x0098 - 0x0000)
struct EOSWebAuthLibrary_RequestAuthAccessToken final
{
public:
	TDelegate<void(bool bWasSuccessful, struct FAuthAccessTokenCallbackData& Data, struct FWebResponse& WebResponse)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRequestAuthAccessTokenRequest         Request;                                           // 0x0010(0x0088)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSWebAuthLibrary_RequestAuthAccessToken) == 0x000008, "Wrong alignment on EOSWebAuthLibrary_RequestAuthAccessToken");
static_assert(sizeof(EOSWebAuthLibrary_RequestAuthAccessToken) == 0x000098, "Wrong size on EOSWebAuthLibrary_RequestAuthAccessToken");
static_assert(offsetof(EOSWebAuthLibrary_RequestAuthAccessToken, Callback) == 0x000000, "Member 'EOSWebAuthLibrary_RequestAuthAccessToken::Callback' has a wrong offset!");
static_assert(offsetof(EOSWebAuthLibrary_RequestAuthAccessToken, Request) == 0x000010, "Member 'EOSWebAuthLibrary_RequestAuthAccessToken::Request' has a wrong offset!");

// Function EOSCoreWeb.EOSWebConnectLibrary.RequestAccessToken
// 0x0050 (0x0050 - 0x0000)
struct EOSWebConnectLibrary_RequestAccessToken final
{
public:
	struct FRequestAccessTokenRequest             Request;                                           // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(bool bWasSuccessful, struct FAccessTokenCallbackData& Data, struct FWebResponse& WebResponse)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSWebConnectLibrary_RequestAccessToken) == 0x000008, "Wrong alignment on EOSWebConnectLibrary_RequestAccessToken");
static_assert(sizeof(EOSWebConnectLibrary_RequestAccessToken) == 0x000050, "Wrong size on EOSWebConnectLibrary_RequestAccessToken");
static_assert(offsetof(EOSWebConnectLibrary_RequestAccessToken, Request) == 0x000000, "Member 'EOSWebConnectLibrary_RequestAccessToken::Request' has a wrong offset!");
static_assert(offsetof(EOSWebConnectLibrary_RequestAccessToken, Callback) == 0x000040, "Member 'EOSWebConnectLibrary_RequestAccessToken::Callback' has a wrong offset!");

// Function EOSCoreWeb.EOSWebPlayerTicketLibrary.SubmitTicket
// 0x00A8 (0x00A8 - 0x0000)
struct EOSWebPlayerTicketLibrary_SubmitTicket final
{
public:
	class FString                                 WebApiKey;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSubmitTicketRequest                   Request;                                           // 0x0010(0x0088)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(bool bWasSuccessful, struct FSubmitTicketResponse& Response, struct FWebResponse& WebResponse)> Callback;                                          // 0x0098(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSWebPlayerTicketLibrary_SubmitTicket) == 0x000008, "Wrong alignment on EOSWebPlayerTicketLibrary_SubmitTicket");
static_assert(sizeof(EOSWebPlayerTicketLibrary_SubmitTicket) == 0x0000A8, "Wrong size on EOSWebPlayerTicketLibrary_SubmitTicket");
static_assert(offsetof(EOSWebPlayerTicketLibrary_SubmitTicket, WebApiKey) == 0x000000, "Member 'EOSWebPlayerTicketLibrary_SubmitTicket::WebApiKey' has a wrong offset!");
static_assert(offsetof(EOSWebPlayerTicketLibrary_SubmitTicket, Request) == 0x000010, "Member 'EOSWebPlayerTicketLibrary_SubmitTicket::Request' has a wrong offset!");
static_assert(offsetof(EOSWebPlayerTicketLibrary_SubmitTicket, Callback) == 0x000098, "Member 'EOSWebPlayerTicketLibrary_SubmitTicket::Callback' has a wrong offset!");

// Function EOSCoreWeb.EOSWebShared.GetPublicIp
// 0x0010 (0x0010 - 0x0000)
struct EOSWebShared_GetPublicIp final
{
public:
	TDelegate<void(const class FString& Response)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSWebShared_GetPublicIp) == 0x000004, "Wrong alignment on EOSWebShared_GetPublicIp");
static_assert(sizeof(EOSWebShared_GetPublicIp) == 0x000010, "Wrong size on EOSWebShared_GetPublicIp");
static_assert(offsetof(EOSWebShared_GetPublicIp, Callback) == 0x000000, "Member 'EOSWebShared_GetPublicIp::Callback' has a wrong offset!");

// Function EOSCoreWeb.EOSWebVoiceLibrary.CreateRoomToken
// 0x0050 (0x0050 - 0x0000)
struct EOSWebVoiceLibrary_CreateRoomToken final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWebRequestParticipantData>     Participants;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 DeploymentId;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoomName;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bWasSuccessful, struct FCreateRoomTokenCallback& Data, struct FWebResponse& WebResponse)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSWebVoiceLibrary_CreateRoomToken) == 0x000008, "Wrong alignment on EOSWebVoiceLibrary_CreateRoomToken");
static_assert(sizeof(EOSWebVoiceLibrary_CreateRoomToken) == 0x000050, "Wrong size on EOSWebVoiceLibrary_CreateRoomToken");
static_assert(offsetof(EOSWebVoiceLibrary_CreateRoomToken, AccessToken) == 0x000000, "Member 'EOSWebVoiceLibrary_CreateRoomToken::AccessToken' has a wrong offset!");
static_assert(offsetof(EOSWebVoiceLibrary_CreateRoomToken, Participants) == 0x000010, "Member 'EOSWebVoiceLibrary_CreateRoomToken::Participants' has a wrong offset!");
static_assert(offsetof(EOSWebVoiceLibrary_CreateRoomToken, DeploymentId) == 0x000020, "Member 'EOSWebVoiceLibrary_CreateRoomToken::DeploymentId' has a wrong offset!");
static_assert(offsetof(EOSWebVoiceLibrary_CreateRoomToken, RoomName) == 0x000030, "Member 'EOSWebVoiceLibrary_CreateRoomToken::RoomName' has a wrong offset!");
static_assert(offsetof(EOSWebVoiceLibrary_CreateRoomToken, Callback) == 0x000040, "Member 'EOSWebVoiceLibrary_CreateRoomToken::Callback' has a wrong offset!");

// Function EOSCoreWeb.EOSWebVoiceLibrary.ModifyParticipant
// 0x0058 (0x0058 - 0x0000)
struct EOSWebVoiceLibrary_ModifyParticipant final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeploymentId;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoomName;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHardMuted;                                        // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AAC[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bWasSuccessful, struct FWebResponse& WebResponse)> Callback;                                          // 0x0044(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AAD[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSWebVoiceLibrary_ModifyParticipant) == 0x000008, "Wrong alignment on EOSWebVoiceLibrary_ModifyParticipant");
static_assert(sizeof(EOSWebVoiceLibrary_ModifyParticipant) == 0x000058, "Wrong size on EOSWebVoiceLibrary_ModifyParticipant");
static_assert(offsetof(EOSWebVoiceLibrary_ModifyParticipant, AccessToken) == 0x000000, "Member 'EOSWebVoiceLibrary_ModifyParticipant::AccessToken' has a wrong offset!");
static_assert(offsetof(EOSWebVoiceLibrary_ModifyParticipant, ProductUserId) == 0x000010, "Member 'EOSWebVoiceLibrary_ModifyParticipant::ProductUserId' has a wrong offset!");
static_assert(offsetof(EOSWebVoiceLibrary_ModifyParticipant, DeploymentId) == 0x000020, "Member 'EOSWebVoiceLibrary_ModifyParticipant::DeploymentId' has a wrong offset!");
static_assert(offsetof(EOSWebVoiceLibrary_ModifyParticipant, RoomName) == 0x000030, "Member 'EOSWebVoiceLibrary_ModifyParticipant::RoomName' has a wrong offset!");
static_assert(offsetof(EOSWebVoiceLibrary_ModifyParticipant, bHardMuted) == 0x000040, "Member 'EOSWebVoiceLibrary_ModifyParticipant::bHardMuted' has a wrong offset!");
static_assert(offsetof(EOSWebVoiceLibrary_ModifyParticipant, Callback) == 0x000044, "Member 'EOSWebVoiceLibrary_ModifyParticipant::Callback' has a wrong offset!");

// Function EOSCoreWeb.EOSWebVoiceLibrary.RemoveParticipant
// 0x0050 (0x0050 - 0x0000)
struct EOSWebVoiceLibrary_RemoveParticipant final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeploymentId;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoomName;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bWasSuccessful, struct FWebResponse& WebResponse)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSWebVoiceLibrary_RemoveParticipant) == 0x000008, "Wrong alignment on EOSWebVoiceLibrary_RemoveParticipant");
static_assert(sizeof(EOSWebVoiceLibrary_RemoveParticipant) == 0x000050, "Wrong size on EOSWebVoiceLibrary_RemoveParticipant");
static_assert(offsetof(EOSWebVoiceLibrary_RemoveParticipant, AccessToken) == 0x000000, "Member 'EOSWebVoiceLibrary_RemoveParticipant::AccessToken' has a wrong offset!");
static_assert(offsetof(EOSWebVoiceLibrary_RemoveParticipant, ProductUserId) == 0x000010, "Member 'EOSWebVoiceLibrary_RemoveParticipant::ProductUserId' has a wrong offset!");
static_assert(offsetof(EOSWebVoiceLibrary_RemoveParticipant, DeploymentId) == 0x000020, "Member 'EOSWebVoiceLibrary_RemoveParticipant::DeploymentId' has a wrong offset!");
static_assert(offsetof(EOSWebVoiceLibrary_RemoveParticipant, RoomName) == 0x000030, "Member 'EOSWebVoiceLibrary_RemoveParticipant::RoomName' has a wrong offset!");
static_assert(offsetof(EOSWebVoiceLibrary_RemoveParticipant, Callback) == 0x000040, "Member 'EOSWebVoiceLibrary_RemoveParticipant::Callback' has a wrong offset!");

}

