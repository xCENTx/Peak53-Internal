#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Minimap

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function Minimap.Minimap_C.AddMapBackground
// 0x0058 (0x0058 - 0x0000)
struct Minimap_C_AddMapBackground final
{
public:
	class AMapBackground*                         MapBackground;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0018(0x0020)(NoDestructor)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMinimapInternal_Background_C*          CallFunc_Create_ReturnValue;                       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_AddMapBackground) == 0x000008, "Wrong alignment on Minimap_C_AddMapBackground");
static_assert(sizeof(Minimap_C_AddMapBackground) == 0x000058, "Wrong size on Minimap_C_AddMapBackground");
static_assert(offsetof(Minimap_C_AddMapBackground, MapBackground) == 0x000000, "Member 'Minimap_C_AddMapBackground::MapBackground' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapBackground, K2Node_MakeStruct_Margin) == 0x000008, "Member 'Minimap_C_AddMapBackground::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapBackground, K2Node_MakeStruct_Anchors) == 0x000018, "Member 'Minimap_C_AddMapBackground::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapBackground, CallFunc_GetOwningPlayer_ReturnValue) == 0x000038, "Member 'Minimap_C_AddMapBackground::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapBackground, CallFunc_Create_ReturnValue) == 0x000040, "Member 'Minimap_C_AddMapBackground::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapBackground, CallFunc_AddChildToCanvas_ReturnValue) == 0x000048, "Member 'Minimap_C_AddMapBackground::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapBackground, CallFunc_Array_Add_ReturnValue) == 0x000050, "Member 'Minimap_C_AddMapBackground::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function Minimap.Minimap_C.AddMapFog
// 0x0028 (0x0028 - 0x0000)
struct Minimap_C_AddMapFog final
{
public:
	class AMapFog*                                MapFog;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMinimapInternal_Fog_C*                 CallFunc_Create_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_AddMapFog) == 0x000008, "Wrong alignment on Minimap_C_AddMapFog");
static_assert(sizeof(Minimap_C_AddMapFog) == 0x000028, "Wrong size on Minimap_C_AddMapFog");
static_assert(offsetof(Minimap_C_AddMapFog, MapFog) == 0x000000, "Member 'Minimap_C_AddMapFog::MapFog' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapFog, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'Minimap_C_AddMapFog::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapFog, CallFunc_Create_ReturnValue) == 0x000010, "Member 'Minimap_C_AddMapFog::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapFog, CallFunc_AddChildToOverlay_ReturnValue) == 0x000018, "Member 'Minimap_C_AddMapFog::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapFog, CallFunc_Array_Add_ReturnValue) == 0x000020, "Member 'Minimap_C_AddMapFog::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function Minimap.Minimap_C.AddMapIcon
// 0x0028 (0x0028 - 0x0000)
struct Minimap_C_AddMapIcon final
{
public:
	class UMapIconComponent*                      MapIconComp;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMinimapInternal_Icon_C*                CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_AddMapIcon) == 0x000008, "Wrong alignment on Minimap_C_AddMapIcon");
static_assert(sizeof(Minimap_C_AddMapIcon) == 0x000028, "Wrong size on Minimap_C_AddMapIcon");
static_assert(offsetof(Minimap_C_AddMapIcon, MapIconComp) == 0x000000, "Member 'Minimap_C_AddMapIcon::MapIconComp' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapIcon, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'Minimap_C_AddMapIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapIcon, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'Minimap_C_AddMapIcon::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapIcon, CallFunc_Create_ReturnValue) == 0x000018, "Member 'Minimap_C_AddMapIcon::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_AddMapIcon, CallFunc_Array_Add_ReturnValue) == 0x000020, "Member 'Minimap_C_AddMapIcon::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function Minimap.Minimap_C.AutoFindMapView
// 0x0018 (0x0018 - 0x0000)
struct Minimap_C_AutoFindMapView final
{
public:
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapViewComponent*                      CallFunc_FindMapView_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_AutoFindMapView) == 0x000008, "Wrong alignment on Minimap_C_AutoFindMapView");
static_assert(sizeof(Minimap_C_AutoFindMapView) == 0x000018, "Wrong size on Minimap_C_AutoFindMapView");
static_assert(offsetof(Minimap_C_AutoFindMapView, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000000, "Member 'Minimap_C_AutoFindMapView::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_AutoFindMapView, CallFunc_FindMapView_ReturnValue) == 0x000008, "Member 'Minimap_C_AutoFindMapView::CallFunc_FindMapView_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_AutoFindMapView, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'Minimap_C_AutoFindMapView::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Minimap.Minimap_C.BroadcastMapView
// 0x0058 (0x0058 - 0x0000)
struct Minimap_C_BroadcastMapView final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379F[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapInternal_Fog_C*                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A0[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapInternal_Background_C*          CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMinimapInternal_Icon_C*                CallFunc_Array_Get_Item_2;                         // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_BroadcastMapView) == 0x000008, "Wrong alignment on Minimap_C_BroadcastMapView");
static_assert(sizeof(Minimap_C_BroadcastMapView) == 0x000058, "Wrong size on Minimap_C_BroadcastMapView");
static_assert(offsetof(Minimap_C_BroadcastMapView, Temp_int_Array_Index_Variable) == 0x000000, "Member 'Minimap_C_BroadcastMapView::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, Temp_int_Array_Index_Variable_1) == 0x000004, "Member 'Minimap_C_BroadcastMapView::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'Minimap_C_BroadcastMapView::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'Minimap_C_BroadcastMapView::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, Temp_int_Array_Index_Variable_2) == 0x000010, "Member 'Minimap_C_BroadcastMapView::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, Temp_int_Loop_Counter_Variable_1) == 0x000014, "Member 'Minimap_C_BroadcastMapView::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'Minimap_C_BroadcastMapView::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, CallFunc_Array_Get_Item) == 0x000020, "Member 'Minimap_C_BroadcastMapView::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'Minimap_C_BroadcastMapView::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, Temp_int_Loop_Counter_Variable_2) == 0x00002C, "Member 'Minimap_C_BroadcastMapView::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'Minimap_C_BroadcastMapView::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, CallFunc_Add_IntInt_ReturnValue_2) == 0x000034, "Member 'Minimap_C_BroadcastMapView::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'Minimap_C_BroadcastMapView::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, CallFunc_Array_Get_Item_2) == 0x000040, "Member 'Minimap_C_BroadcastMapView::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, CallFunc_Array_Length_ReturnValue_1) == 0x000048, "Member 'Minimap_C_BroadcastMapView::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, CallFunc_Array_Length_ReturnValue_2) == 0x00004C, "Member 'Minimap_C_BroadcastMapView::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, CallFunc_Less_IntInt_ReturnValue_1) == 0x000050, "Member 'Minimap_C_BroadcastMapView::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_BroadcastMapView, CallFunc_Less_IntInt_ReturnValue_2) == 0x000051, "Member 'Minimap_C_BroadcastMapView::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function Minimap.Minimap_C.ChangeZoom
// 0x0030 (0x0030 - 0x0000)
struct Minimap_C_ChangeZoom final
{
public:
	double                                        Delta;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetZoomScale_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetZoomScale_NewZoomScale_ImplicitCast;   // 0x0028(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_ChangeZoom) == 0x000008, "Wrong alignment on Minimap_C_ChangeZoom");
static_assert(sizeof(Minimap_C_ChangeZoom) == 0x000030, "Wrong size on Minimap_C_ChangeZoom");
static_assert(offsetof(Minimap_C_ChangeZoom, Delta) == 0x000000, "Member 'Minimap_C_ChangeZoom::Delta' has a wrong offset!");
static_assert(offsetof(Minimap_C_ChangeZoom, CallFunc_GetZoomScale_ReturnValue) == 0x000008, "Member 'Minimap_C_ChangeZoom::CallFunc_GetZoomScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ChangeZoom, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000010, "Member 'Minimap_C_ChangeZoom::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ChangeZoom, CallFunc_FClamp_ReturnValue) == 0x000018, "Member 'Minimap_C_ChangeZoom::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ChangeZoom, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000020, "Member 'Minimap_C_ChangeZoom::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Minimap_C_ChangeZoom, CallFunc_SetZoomScale_NewZoomScale_ImplicitCast) == 0x000028, "Member 'Minimap_C_ChangeZoom::CallFunc_SetZoomScale_NewZoomScale_ImplicitCast' has a wrong offset!");

// Function Minimap.Minimap_C.CustomEvent_0
// 0x0028 (0x0028 - 0x0000)
struct Minimap_C_CustomEvent_0 final
{
public:
	struct FVector2D                              StartUV;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              EndUV;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeftMouseButton;                                 // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShiftSelect;                                     // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCtrlSelect;                                      // 0x0022(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_CustomEvent_0) == 0x000008, "Wrong alignment on Minimap_C_CustomEvent_0");
static_assert(sizeof(Minimap_C_CustomEvent_0) == 0x000028, "Wrong size on Minimap_C_CustomEvent_0");
static_assert(offsetof(Minimap_C_CustomEvent_0, StartUV) == 0x000000, "Member 'Minimap_C_CustomEvent_0::StartUV' has a wrong offset!");
static_assert(offsetof(Minimap_C_CustomEvent_0, EndUV) == 0x000010, "Member 'Minimap_C_CustomEvent_0::EndUV' has a wrong offset!");
static_assert(offsetof(Minimap_C_CustomEvent_0, IsLeftMouseButton) == 0x000020, "Member 'Minimap_C_CustomEvent_0::IsLeftMouseButton' has a wrong offset!");
static_assert(offsetof(Minimap_C_CustomEvent_0, IsShiftSelect) == 0x000021, "Member 'Minimap_C_CustomEvent_0::IsShiftSelect' has a wrong offset!");
static_assert(offsetof(Minimap_C_CustomEvent_0, IsCtrlSelect) == 0x000022, "Member 'Minimap_C_CustomEvent_0::IsCtrlSelect' has a wrong offset!");

// Function Minimap.Minimap_C.CustomEvent_1
// 0x0028 (0x0028 - 0x0000)
struct Minimap_C_CustomEvent_1 final
{
public:
	struct FVector2D                              StartUV;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              EndUV;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeftMouseButton;                                 // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShiftSelect;                                     // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCtrlSelect;                                      // 0x0022(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_CustomEvent_1) == 0x000008, "Wrong alignment on Minimap_C_CustomEvent_1");
static_assert(sizeof(Minimap_C_CustomEvent_1) == 0x000028, "Wrong size on Minimap_C_CustomEvent_1");
static_assert(offsetof(Minimap_C_CustomEvent_1, StartUV) == 0x000000, "Member 'Minimap_C_CustomEvent_1::StartUV' has a wrong offset!");
static_assert(offsetof(Minimap_C_CustomEvent_1, EndUV) == 0x000010, "Member 'Minimap_C_CustomEvent_1::EndUV' has a wrong offset!");
static_assert(offsetof(Minimap_C_CustomEvent_1, IsLeftMouseButton) == 0x000020, "Member 'Minimap_C_CustomEvent_1::IsLeftMouseButton' has a wrong offset!");
static_assert(offsetof(Minimap_C_CustomEvent_1, IsShiftSelect) == 0x000021, "Member 'Minimap_C_CustomEvent_1::IsShiftSelect' has a wrong offset!");
static_assert(offsetof(Minimap_C_CustomEvent_1, IsCtrlSelect) == 0x000022, "Member 'Minimap_C_CustomEvent_1::IsCtrlSelect' has a wrong offset!");

// Function Minimap.Minimap_C.EnforceAspectRatio
// 0x0128 (0x0128 - 0x0000)
struct Minimap_C_EnforceAspectRatio final
{
public:
	struct FVector2D                              NewMapSize;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MapScale;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CandidateMapSize;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ViewAspectRatio;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MapAspectRatio;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_3;                        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_3;                        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_4;                        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_4;                        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A2[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_5;                        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_5;                        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A3[0x7];                                     // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A4[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetViewAspectRatio_ReturnValue;           // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A5[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_B_ImplicitCast;               // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_EnforceAspectRatio) == 0x000008, "Wrong alignment on Minimap_C_EnforceAspectRatio");
static_assert(sizeof(Minimap_C_EnforceAspectRatio) == 0x000128, "Wrong size on Minimap_C_EnforceAspectRatio");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, NewMapSize) == 0x000000, "Member 'Minimap_C_EnforceAspectRatio::NewMapSize' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, MapScale) == 0x000010, "Member 'Minimap_C_EnforceAspectRatio::MapScale' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CandidateMapSize) == 0x000020, "Member 'Minimap_C_EnforceAspectRatio::CandidateMapSize' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, ViewAspectRatio) == 0x000030, "Member 'Minimap_C_EnforceAspectRatio::ViewAspectRatio' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, MapAspectRatio) == 0x000038, "Member 'Minimap_C_EnforceAspectRatio::MapAspectRatio' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_X) == 0x000040, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_Y) == 0x000048, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_X_1) == 0x000050, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_Y_1) == 0x000058, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000060, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_X_2) == 0x000068, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_Y_2) == 0x000070, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000078, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_X_3) == 0x000080, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_Y_3) == 0x000088, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_MakeVector2D_ReturnValue) == 0x000090, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x0000A0, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_MakeVector2D_ReturnValue_1) == 0x0000A8, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_X_4) == 0x0000B8, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_X_4' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_Y_4) == 0x0000C0, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_Y_4' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_X_5) == 0x0000D0, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_X_5' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_BreakVector2D_Y_5) == 0x0000D8, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_BreakVector2D_Y_5' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000E0, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x0000E8, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x0000F0, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_Not_PreBool_ReturnValue) == 0x0000F8, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_MakeVector2D_ReturnValue_2) == 0x000100, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_GetViewAspectRatio_ReturnValue) == 0x000110, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_GetViewAspectRatio_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_SelectFloat_ReturnValue) == 0x000118, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_EnforceAspectRatio, CallFunc_SelectFloat_B_ImplicitCast) == 0x000120, "Member 'Minimap_C_EnforceAspectRatio::CallFunc_SelectFloat_B_ImplicitCast' has a wrong offset!");

// Function Minimap.Minimap_C.ExecuteUbergraph_Minimap
// 0x0168 (0x0168 - 0x0000)
struct Minimap_C_ExecuteUbergraph_Minimap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UMapViewComponent* MapView)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FVector2D& StartUV, const struct FVector2D& EndUV, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FVector2D& UV, bool IsLeftMouseButton)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FVector2D& StartUV, const struct FVector2D& EndUV, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A6[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapIconComponent*                      K2Node_CustomEvent_MapIcon;                        // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A7[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMapBackground*                         K2Node_CustomEvent_MapBackground;                  // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A8[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMapFog*                                K2Node_CustomEvent_MapFog;                         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AMapFog* MapFog)>        K2Node_CreateDelegate_OutputDelegate_4;            // 0x0070(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AMapBackground* MapBackground)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x0080(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMapViewComponent*                      K2Node_CustomEvent_MapView;                        // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A9[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UMapIconComponent* MapIcon)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x009C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37AA[0x1];                                     // 0x00AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapInternal_Icon_C*                K2Node_CustomEvent_MapIconWidget;                  // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_StartUV_1;                      // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_EndUV_1;                        // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsLeftMouseButton_2;            // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsShiftSelect_1;                // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsCtrlSelect_1;                 // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37AB[0x5];                                     // 0x00DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x00E0(0x0040)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37AC[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_CustomEvent_UV;                             // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsLeftMouseButton_1;            // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37AD[0x7];                                     // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_CustomEvent_StartUV;                        // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_EndUV;                          // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsLeftMouseButton;              // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsShiftSelect;                  // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsCtrlSelect;                   // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_ExecuteUbergraph_Minimap) == 0x000008, "Wrong alignment on Minimap_C_ExecuteUbergraph_Minimap");
static_assert(sizeof(Minimap_C_ExecuteUbergraph_Minimap) == 0x000168, "Wrong size on Minimap_C_ExecuteUbergraph_Minimap");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, EntryPoint) == 0x000000, "Member 'Minimap_C_ExecuteUbergraph_Minimap::EntryPoint' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CreateDelegate_OutputDelegate_3) == 0x000034, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, Temp_bool_Has_Been_Initd_Variable) == 0x000044, "Member 'Minimap_C_ExecuteUbergraph_Minimap::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, Temp_bool_IsClosed_Variable) == 0x000045, "Member 'Minimap_C_ExecuteUbergraph_Minimap::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_MapIcon) == 0x000048, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_MapIcon' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'Minimap_C_ExecuteUbergraph_Minimap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_MapBackground) == 0x000058, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_MapBackground' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, CallFunc_IsValid_ReturnValue_1) == 0x000060, "Member 'Minimap_C_ExecuteUbergraph_Minimap::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_MapFog) == 0x000068, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_MapFog' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CreateDelegate_OutputDelegate_4) == 0x000070, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CreateDelegate_OutputDelegate_5) == 0x000080, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_MapView) == 0x000090, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_MapView' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000098, "Member 'Minimap_C_ExecuteUbergraph_Minimap::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CreateDelegate_OutputDelegate_6) == 0x00009C, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, CallFunc_IsValid_ReturnValue_2) == 0x0000AC, "Member 'Minimap_C_ExecuteUbergraph_Minimap::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, CallFunc_Not_PreBool_ReturnValue) == 0x0000AD, "Member 'Minimap_C_ExecuteUbergraph_Minimap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, CallFunc_BooleanOR_ReturnValue) == 0x0000AE, "Member 'Minimap_C_ExecuteUbergraph_Minimap::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_MapIconWidget) == 0x0000B0, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_MapIconWidget' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_StartUV_1) == 0x0000B8, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_StartUV_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_EndUV_1) == 0x0000C8, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_EndUV_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_IsLeftMouseButton_2) == 0x0000D8, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_IsLeftMouseButton_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_IsShiftSelect_1) == 0x0000D9, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_IsShiftSelect_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_IsCtrlSelect_1) == 0x0000DA, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_IsCtrlSelect_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_Event_MyGeometry) == 0x0000E0, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_Event_InDeltaTime) == 0x000120, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, CallFunc_IsValid_ReturnValue_3) == 0x000124, "Member 'Minimap_C_ExecuteUbergraph_Minimap::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_UV) == 0x000128, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_UV' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_IsLeftMouseButton_1) == 0x000138, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_IsLeftMouseButton_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_StartUV) == 0x000140, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_StartUV' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_EndUV) == 0x000150, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_EndUV' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_IsLeftMouseButton) == 0x000160, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_IsLeftMouseButton' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_IsShiftSelect) == 0x000161, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_IsShiftSelect' has a wrong offset!");
static_assert(offsetof(Minimap_C_ExecuteUbergraph_Minimap, K2Node_CustomEvent_IsCtrlSelect) == 0x000162, "Member 'Minimap_C_ExecuteUbergraph_Minimap::K2Node_CustomEvent_IsCtrlSelect' has a wrong offset!");

// Function Minimap.Minimap_C.ForgetDestroyedIcons
// 0x0048 (0x0048 - 0x0000)
struct Minimap_C_ForgetDestroyedIcons final
{
public:
	TArray<int32>                                 IconsPendingKill;                                  // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37AE[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapInternal_Icon_C*                CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_ForgetDestroyedIcons) == 0x000008, "Wrong alignment on Minimap_C_ForgetDestroyedIcons");
static_assert(sizeof(Minimap_C_ForgetDestroyedIcons) == 0x000048, "Wrong size on Minimap_C_ForgetDestroyedIcons");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, IconsPendingKill) == 0x000000, "Member 'Minimap_C_ForgetDestroyedIcons::IconsPendingKill' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'Minimap_C_ForgetDestroyedIcons::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'Minimap_C_ForgetDestroyedIcons::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, Temp_int_Array_Index_Variable) == 0x000018, "Member 'Minimap_C_ForgetDestroyedIcons::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, Temp_int_Loop_Counter_Variable_1) == 0x00001C, "Member 'Minimap_C_ForgetDestroyedIcons::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, CallFunc_Add_IntInt_ReturnValue_1) == 0x000020, "Member 'Minimap_C_ForgetDestroyedIcons::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'Minimap_C_ForgetDestroyedIcons::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'Minimap_C_ForgetDestroyedIcons::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'Minimap_C_ForgetDestroyedIcons::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, CallFunc_Array_Get_Item) == 0x000030, "Member 'Minimap_C_ForgetDestroyedIcons::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, CallFunc_Array_Length_ReturnValue_1) == 0x000034, "Member 'Minimap_C_ForgetDestroyedIcons::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'Minimap_C_ForgetDestroyedIcons::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, CallFunc_Less_IntInt_ReturnValue_1) == 0x000040, "Member 'Minimap_C_ForgetDestroyedIcons::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'Minimap_C_ForgetDestroyedIcons::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ForgetDestroyedIcons, CallFunc_Not_PreBool_ReturnValue) == 0x000042, "Member 'Minimap_C_ForgetDestroyedIcons::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function Minimap.Minimap_C.InitDrawFrustum
// 0x0004 (0x0004 - 0x0000)
struct Minimap_C_InitDrawFrustum final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_InitDrawFrustum) == 0x000001, "Wrong alignment on Minimap_C_InitDrawFrustum");
static_assert(sizeof(Minimap_C_InitDrawFrustum) == 0x000004, "Wrong size on Minimap_C_InitDrawFrustum");
static_assert(offsetof(Minimap_C_InitDrawFrustum, Temp_byte_Variable) == 0x000000, "Member 'Minimap_C_InitDrawFrustum::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitDrawFrustum, Temp_byte_Variable_1) == 0x000001, "Member 'Minimap_C_InitDrawFrustum::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitDrawFrustum, Temp_bool_Variable) == 0x000002, "Member 'Minimap_C_InitDrawFrustum::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitDrawFrustum, K2Node_Select_Default) == 0x000003, "Member 'Minimap_C_InitDrawFrustum::K2Node_Select_Default' has a wrong offset!");

// Function Minimap.Minimap_C.InitMap
// 0x0128 (0x0128 - 0x0000)
struct Minimap_C_InitMap final
{
public:
	struct FGeometry                              Geom;                                              // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	TArray<class AMapFog*>                        ExistingMapFogs;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AMapBackground*>                 ExistingMapBackgrounds;                            // 0x0050(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class UMapIconComponent*>              ExistingMapIcons;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37AF[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMapBackground*                         CallFunc_Array_Get_Item;                           // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37B0[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37B1[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37B2[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapIconComponent*                      CallFunc_Array_Get_Item_1;                         // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AMapFog*                                CallFunc_Array_Get_Item_2;                         // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37B3[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapTrackerComponent*                   CallFunc_GetMapTracker_ReturnValue;                // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class AMapFog*>                        CallFunc_GetMapFogs_ReturnValue;                   // 0x00F8(0x0010)(ConstParm, ReferenceParm)
	TArray<class AMapBackground*>                 CallFunc_GetMapBackgrounds_ReturnValue;            // 0x0108(0x0010)(ConstParm, ReferenceParm)
	TArray<class UMapIconComponent*>              CallFunc_GetMapIcons_ReturnValue;                  // 0x0118(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(Minimap_C_InitMap) == 0x000008, "Wrong alignment on Minimap_C_InitMap");
static_assert(sizeof(Minimap_C_InitMap) == 0x000128, "Wrong size on Minimap_C_InitMap");
static_assert(offsetof(Minimap_C_InitMap, Geom) == 0x000000, "Member 'Minimap_C_InitMap::Geom' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, ExistingMapFogs) == 0x000040, "Member 'Minimap_C_InitMap::ExistingMapFogs' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, ExistingMapBackgrounds) == 0x000050, "Member 'Minimap_C_InitMap::ExistingMapBackgrounds' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, ExistingMapIcons) == 0x000060, "Member 'Minimap_C_InitMap::ExistingMapIcons' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_BreakVector2D_X) == 0x000070, "Member 'Minimap_C_InitMap::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_BreakVector2D_Y) == 0x000078, "Member 'Minimap_C_InitMap::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000080, "Member 'Minimap_C_InitMap::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_IsValid_ReturnValue) == 0x000081, "Member 'Minimap_C_InitMap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000082, "Member 'Minimap_C_InitMap::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_BooleanAND_ReturnValue) == 0x000083, "Member 'Minimap_C_InitMap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_GetLocalSize_ReturnValue) == 0x000088, "Member 'Minimap_C_InitMap::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, Temp_int_Loop_Counter_Variable) == 0x000098, "Member 'Minimap_C_InitMap::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Array_Length_ReturnValue) == 0x00009C, "Member 'Minimap_C_InitMap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Add_IntInt_ReturnValue) == 0x0000A0, "Member 'Minimap_C_InitMap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, Temp_int_Array_Index_Variable) == 0x0000A4, "Member 'Minimap_C_InitMap::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Array_Get_Item) == 0x0000A8, "Member 'Minimap_C_InitMap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Array_Length_ReturnValue_1) == 0x0000B0, "Member 'Minimap_C_InitMap::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Less_IntInt_ReturnValue) == 0x0000B4, "Member 'Minimap_C_InitMap::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, Temp_int_Array_Index_Variable_1) == 0x0000B8, "Member 'Minimap_C_InitMap::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, Temp_int_Loop_Counter_Variable_1) == 0x0000BC, "Member 'Minimap_C_InitMap::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000C0, "Member 'Minimap_C_InitMap::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000C4, "Member 'Minimap_C_InitMap::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, Temp_int_Array_Index_Variable_2) == 0x0000C8, "Member 'Minimap_C_InitMap::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Array_Get_Item_1) == 0x0000D0, "Member 'Minimap_C_InitMap::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Array_Get_Item_2) == 0x0000D8, "Member 'Minimap_C_InitMap::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Array_Length_ReturnValue_2) == 0x0000E0, "Member 'Minimap_C_InitMap::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, Temp_int_Loop_Counter_Variable_2) == 0x0000E4, "Member 'Minimap_C_InitMap::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000E8, "Member 'Minimap_C_InitMap::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000EC, "Member 'Minimap_C_InitMap::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_GetMapTracker_ReturnValue) == 0x0000F0, "Member 'Minimap_C_InitMap::CallFunc_GetMapTracker_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_GetMapFogs_ReturnValue) == 0x0000F8, "Member 'Minimap_C_InitMap::CallFunc_GetMapFogs_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_GetMapBackgrounds_ReturnValue) == 0x000108, "Member 'Minimap_C_InitMap::CallFunc_GetMapBackgrounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitMap, CallFunc_GetMapIcons_ReturnValue) == 0x000118, "Member 'Minimap_C_InitMap::CallFunc_GetMapIcons_ReturnValue' has a wrong offset!");

// Function Minimap.Minimap_C.InitZoom
// 0x0028 (0x0028 - 0x0000)
struct Minimap_C_InitZoom final
{
public:
	float                                         CallFunc_GetViewExtent_ViewExtentX;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetViewExtent_ViewExtentY;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector2D_X_ImplicitCast;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector2D_Y_ImplicitCast;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_InitZoom) == 0x000008, "Wrong alignment on Minimap_C_InitZoom");
static_assert(sizeof(Minimap_C_InitZoom) == 0x000028, "Wrong size on Minimap_C_InitZoom");
static_assert(offsetof(Minimap_C_InitZoom, CallFunc_GetViewExtent_ViewExtentX) == 0x000000, "Member 'Minimap_C_InitZoom::CallFunc_GetViewExtent_ViewExtentX' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitZoom, CallFunc_GetViewExtent_ViewExtentY) == 0x000004, "Member 'Minimap_C_InitZoom::CallFunc_GetViewExtent_ViewExtentY' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitZoom, CallFunc_MakeVector2D_ReturnValue) == 0x000008, "Member 'Minimap_C_InitZoom::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitZoom, CallFunc_MakeVector2D_X_ImplicitCast) == 0x000018, "Member 'Minimap_C_InitZoom::CallFunc_MakeVector2D_X_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Minimap_C_InitZoom, CallFunc_MakeVector2D_Y_ImplicitCast) == 0x000020, "Member 'Minimap_C_InitZoom::CallFunc_MakeVector2D_Y_ImplicitCast' has a wrong offset!");

// Function Minimap.Minimap_C.OnBoxSelected__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct Minimap_C_OnBoxSelected__DelegateSignature final
{
public:
	TArray<class UMapIconComponent*>              MapIcons;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          IsLeftMouseButton;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShiftSelect;                                     // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCtrlSelect;                                      // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_OnBoxSelected__DelegateSignature) == 0x000008, "Wrong alignment on Minimap_C_OnBoxSelected__DelegateSignature");
static_assert(sizeof(Minimap_C_OnBoxSelected__DelegateSignature) == 0x000018, "Wrong size on Minimap_C_OnBoxSelected__DelegateSignature");
static_assert(offsetof(Minimap_C_OnBoxSelected__DelegateSignature, MapIcons) == 0x000000, "Member 'Minimap_C_OnBoxSelected__DelegateSignature::MapIcons' has a wrong offset!");
static_assert(offsetof(Minimap_C_OnBoxSelected__DelegateSignature, IsLeftMouseButton) == 0x000010, "Member 'Minimap_C_OnBoxSelected__DelegateSignature::IsLeftMouseButton' has a wrong offset!");
static_assert(offsetof(Minimap_C_OnBoxSelected__DelegateSignature, IsShiftSelect) == 0x000011, "Member 'Minimap_C_OnBoxSelected__DelegateSignature::IsShiftSelect' has a wrong offset!");
static_assert(offsetof(Minimap_C_OnBoxSelected__DelegateSignature, IsCtrlSelect) == 0x000012, "Member 'Minimap_C_OnBoxSelected__DelegateSignature::IsCtrlSelect' has a wrong offset!");

// Function Minimap.Minimap_C.OnMapBackgroundUnregistered_Event_0
// 0x0008 (0x0008 - 0x0000)
struct Minimap_C_OnMapBackgroundUnregistered_Event_0 final
{
public:
	class AMapBackground*                         MapBackground;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_OnMapBackgroundUnregistered_Event_0) == 0x000008, "Wrong alignment on Minimap_C_OnMapBackgroundUnregistered_Event_0");
static_assert(sizeof(Minimap_C_OnMapBackgroundUnregistered_Event_0) == 0x000008, "Wrong size on Minimap_C_OnMapBackgroundUnregistered_Event_0");
static_assert(offsetof(Minimap_C_OnMapBackgroundUnregistered_Event_0, MapBackground) == 0x000000, "Member 'Minimap_C_OnMapBackgroundUnregistered_Event_0::MapBackground' has a wrong offset!");

// Function Minimap.Minimap_C.OnMapClicked__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct Minimap_C_OnMapClicked__DelegateSignature final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeftMouseButton;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_OnMapClicked__DelegateSignature) == 0x000008, "Wrong alignment on Minimap_C_OnMapClicked__DelegateSignature");
static_assert(sizeof(Minimap_C_OnMapClicked__DelegateSignature) == 0x000020, "Wrong size on Minimap_C_OnMapClicked__DelegateSignature");
static_assert(offsetof(Minimap_C_OnMapClicked__DelegateSignature, WorldLocation) == 0x000000, "Member 'Minimap_C_OnMapClicked__DelegateSignature::WorldLocation' has a wrong offset!");
static_assert(offsetof(Minimap_C_OnMapClicked__DelegateSignature, IsLeftMouseButton) == 0x000018, "Member 'Minimap_C_OnMapClicked__DelegateSignature::IsLeftMouseButton' has a wrong offset!");

// Function Minimap.Minimap_C.OnMapFogRegistered_Event_0
// 0x0008 (0x0008 - 0x0000)
struct Minimap_C_OnMapFogRegistered_Event_0 final
{
public:
	class AMapFog*                                MapFog;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_OnMapFogRegistered_Event_0) == 0x000008, "Wrong alignment on Minimap_C_OnMapFogRegistered_Event_0");
static_assert(sizeof(Minimap_C_OnMapFogRegistered_Event_0) == 0x000008, "Wrong size on Minimap_C_OnMapFogRegistered_Event_0");
static_assert(offsetof(Minimap_C_OnMapFogRegistered_Event_0, MapFog) == 0x000000, "Member 'Minimap_C_OnMapFogRegistered_Event_0::MapFog' has a wrong offset!");

// Function Minimap.Minimap_C.OnMapIconRegistered
// 0x0008 (0x0008 - 0x0000)
struct Minimap_C_OnMapIconRegistered final
{
public:
	class UMapIconComponent*                      MapIcon;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_OnMapIconRegistered) == 0x000008, "Wrong alignment on Minimap_C_OnMapIconRegistered");
static_assert(sizeof(Minimap_C_OnMapIconRegistered) == 0x000008, "Wrong size on Minimap_C_OnMapIconRegistered");
static_assert(offsetof(Minimap_C_OnMapIconRegistered, MapIcon) == 0x000000, "Member 'Minimap_C_OnMapIconRegistered::MapIcon' has a wrong offset!");

// Function Minimap.Minimap_C.OnMapIconWidgetCreated
// 0x0008 (0x0008 - 0x0000)
struct Minimap_C_OnMapIconWidgetCreated final
{
public:
	class UMinimapInternal_Icon_C*                MapIconWidget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_OnMapIconWidgetCreated) == 0x000008, "Wrong alignment on Minimap_C_OnMapIconWidgetCreated");
static_assert(sizeof(Minimap_C_OnMapIconWidgetCreated) == 0x000008, "Wrong size on Minimap_C_OnMapIconWidgetCreated");
static_assert(offsetof(Minimap_C_OnMapIconWidgetCreated, MapIconWidget) == 0x000000, "Member 'Minimap_C_OnMapIconWidgetCreated::MapIconWidget' has a wrong offset!");

// Function Minimap.Minimap_C.OnMouseButtonDown
// 0x0190 (0x0190 - 0x0000)
struct Minimap_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D8(0x00B8)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(Minimap_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on Minimap_C_OnMouseButtonDown");
static_assert(sizeof(Minimap_C_OnMouseButtonDown) == 0x000190, "Wrong size on Minimap_C_OnMouseButtonDown");
static_assert(offsetof(Minimap_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'Minimap_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(Minimap_C_OnMouseButtonDown, MouseEvent) == 0x000040, "Member 'Minimap_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(Minimap_C_OnMouseButtonDown, ReturnValue) == 0x0000D8, "Member 'Minimap_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");

// Function Minimap.Minimap_C.OnMouseClick_Event_0
// 0x0018 (0x0018 - 0x0000)
struct Minimap_C_OnMouseClick_Event_0 final
{
public:
	struct FVector2D                              UV;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeftMouseButton;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_OnMouseClick_Event_0) == 0x000008, "Wrong alignment on Minimap_C_OnMouseClick_Event_0");
static_assert(sizeof(Minimap_C_OnMouseClick_Event_0) == 0x000018, "Wrong size on Minimap_C_OnMouseClick_Event_0");
static_assert(offsetof(Minimap_C_OnMouseClick_Event_0, UV) == 0x000000, "Member 'Minimap_C_OnMouseClick_Event_0::UV' has a wrong offset!");
static_assert(offsetof(Minimap_C_OnMouseClick_Event_0, IsLeftMouseButton) == 0x000010, "Member 'Minimap_C_OnMouseClick_Event_0::IsLeftMouseButton' has a wrong offset!");

// Function Minimap.Minimap_C.OnViewChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Minimap_C_OnViewChanged__DelegateSignature final
{
public:
	class UMapViewComponent*                      Param_MapViewComp;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_OnViewChanged__DelegateSignature) == 0x000008, "Wrong alignment on Minimap_C_OnViewChanged__DelegateSignature");
static_assert(sizeof(Minimap_C_OnViewChanged__DelegateSignature) == 0x000008, "Wrong size on Minimap_C_OnViewChanged__DelegateSignature");
static_assert(offsetof(Minimap_C_OnViewChanged__DelegateSignature, Param_MapViewComp) == 0x000000, "Member 'Minimap_C_OnViewChanged__DelegateSignature::Param_MapViewComp' has a wrong offset!");

// Function Minimap.Minimap_C.OnViewDestroyed_Event_0
// 0x0008 (0x0008 - 0x0000)
struct Minimap_C_OnViewDestroyed_Event_0 final
{
public:
	class UMapViewComponent*                      MapView;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_OnViewDestroyed_Event_0) == 0x000008, "Wrong alignment on Minimap_C_OnViewDestroyed_Event_0");
static_assert(sizeof(Minimap_C_OnViewDestroyed_Event_0) == 0x000008, "Wrong size on Minimap_C_OnViewDestroyed_Event_0");
static_assert(offsetof(Minimap_C_OnViewDestroyed_Event_0, MapView) == 0x000000, "Member 'Minimap_C_OnViewDestroyed_Event_0::MapView' has a wrong offset!");

// Function Minimap.Minimap_C.ProcessBackgroundClick
// 0x0078 (0x0078 - 0x0000)
struct Minimap_C_ProcessBackgroundClick final
{
public:
	struct FVector2D                              UV;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeftMouseButton;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsLMB;                                           // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37B4[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InUV;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37B5[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DeprojectViewToWorld_WorldPos;            // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DetectIsInView_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37B6[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DeprojectViewToWorld_U_ImplicitCast;      // 0x006C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DeprojectViewToWorld_V_ImplicitCast;      // 0x0070(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_ProcessBackgroundClick) == 0x000008, "Wrong alignment on Minimap_C_ProcessBackgroundClick");
static_assert(sizeof(Minimap_C_ProcessBackgroundClick) == 0x000078, "Wrong size on Minimap_C_ProcessBackgroundClick");
static_assert(offsetof(Minimap_C_ProcessBackgroundClick, UV) == 0x000000, "Member 'Minimap_C_ProcessBackgroundClick::UV' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBackgroundClick, IsLeftMouseButton) == 0x000010, "Member 'Minimap_C_ProcessBackgroundClick::IsLeftMouseButton' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBackgroundClick, InIsLMB) == 0x000011, "Member 'Minimap_C_ProcessBackgroundClick::InIsLMB' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBackgroundClick, InUV) == 0x000018, "Member 'Minimap_C_ProcessBackgroundClick::InUV' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBackgroundClick, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'Minimap_C_ProcessBackgroundClick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBackgroundClick, CallFunc_MakeVector2D_ReturnValue) == 0x000030, "Member 'Minimap_C_ProcessBackgroundClick::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBackgroundClick, CallFunc_BreakVector2D_X) == 0x000040, "Member 'Minimap_C_ProcessBackgroundClick::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBackgroundClick, CallFunc_BreakVector2D_Y) == 0x000048, "Member 'Minimap_C_ProcessBackgroundClick::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBackgroundClick, CallFunc_DeprojectViewToWorld_WorldPos) == 0x000050, "Member 'Minimap_C_ProcessBackgroundClick::CallFunc_DeprojectViewToWorld_WorldPos' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBackgroundClick, CallFunc_DetectIsInView_ReturnValue) == 0x000068, "Member 'Minimap_C_ProcessBackgroundClick::CallFunc_DetectIsInView_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBackgroundClick, CallFunc_DeprojectViewToWorld_U_ImplicitCast) == 0x00006C, "Member 'Minimap_C_ProcessBackgroundClick::CallFunc_DeprojectViewToWorld_U_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBackgroundClick, CallFunc_DeprojectViewToWorld_V_ImplicitCast) == 0x000070, "Member 'Minimap_C_ProcessBackgroundClick::CallFunc_DeprojectViewToWorld_V_ImplicitCast' has a wrong offset!");

// Function Minimap.Minimap_C.ProcessBoxSelect
// 0x0050 (0x0050 - 0x0000)
struct Minimap_C_ProcessBoxSelect final
{
public:
	struct FVector2D                              StartUV;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              EndUV;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeftMouseButton;                                 // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShiftSelect;                                     // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCtrlSelect;                                      // 0x0022(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsLMB;                                           // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37B7[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InUV;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37B8[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMapIconComponent*>              CallFunc_BoxSelectInView_ReturnValue;              // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(Minimap_C_ProcessBoxSelect) == 0x000008, "Wrong alignment on Minimap_C_ProcessBoxSelect");
static_assert(sizeof(Minimap_C_ProcessBoxSelect) == 0x000050, "Wrong size on Minimap_C_ProcessBoxSelect");
static_assert(offsetof(Minimap_C_ProcessBoxSelect, StartUV) == 0x000000, "Member 'Minimap_C_ProcessBoxSelect::StartUV' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBoxSelect, EndUV) == 0x000010, "Member 'Minimap_C_ProcessBoxSelect::EndUV' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBoxSelect, IsLeftMouseButton) == 0x000020, "Member 'Minimap_C_ProcessBoxSelect::IsLeftMouseButton' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBoxSelect, IsShiftSelect) == 0x000021, "Member 'Minimap_C_ProcessBoxSelect::IsShiftSelect' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBoxSelect, IsCtrlSelect) == 0x000022, "Member 'Minimap_C_ProcessBoxSelect::IsCtrlSelect' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBoxSelect, InIsLMB) == 0x000023, "Member 'Minimap_C_ProcessBoxSelect::InIsLMB' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBoxSelect, InUV) == 0x000028, "Member 'Minimap_C_ProcessBoxSelect::InUV' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBoxSelect, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'Minimap_C_ProcessBoxSelect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_ProcessBoxSelect, CallFunc_BoxSelectInView_ReturnValue) == 0x000040, "Member 'Minimap_C_ProcessBoxSelect::CallFunc_BoxSelectInView_ReturnValue' has a wrong offset!");

// Function Minimap.Minimap_C.ReinitBoxSelect
// 0x0030 (0x0030 - 0x0000)
struct Minimap_C_ReinitBoxSelect final
{
public:
	TArray<class AMapFog*>                        ExistingMapFogs;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AMapBackground*>                 ExistingMapBackgrounds;                            // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class UMapIconComponent*>              ExistingMapIcons;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
};
static_assert(alignof(Minimap_C_ReinitBoxSelect) == 0x000008, "Wrong alignment on Minimap_C_ReinitBoxSelect");
static_assert(sizeof(Minimap_C_ReinitBoxSelect) == 0x000030, "Wrong size on Minimap_C_ReinitBoxSelect");
static_assert(offsetof(Minimap_C_ReinitBoxSelect, ExistingMapFogs) == 0x000000, "Member 'Minimap_C_ReinitBoxSelect::ExistingMapFogs' has a wrong offset!");
static_assert(offsetof(Minimap_C_ReinitBoxSelect, ExistingMapBackgrounds) == 0x000010, "Member 'Minimap_C_ReinitBoxSelect::ExistingMapBackgrounds' has a wrong offset!");
static_assert(offsetof(Minimap_C_ReinitBoxSelect, ExistingMapIcons) == 0x000020, "Member 'Minimap_C_ReinitBoxSelect::ExistingMapIcons' has a wrong offset!");

// Function Minimap.Minimap_C.SetMapView
// 0x0028 (0x0028 - 0x0000)
struct Minimap_C_SetMapView final
{
public:
	class UMapViewComponent*                      NewMapView;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37B9[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_SetMapView) == 0x000008, "Wrong alignment on Minimap_C_SetMapView");
static_assert(sizeof(Minimap_C_SetMapView) == 0x000028, "Wrong size on Minimap_C_SetMapView");
static_assert(offsetof(Minimap_C_SetMapView, NewMapView) == 0x000000, "Member 'Minimap_C_SetMapView::NewMapView' has a wrong offset!");
static_assert(offsetof(Minimap_C_SetMapView, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'Minimap_C_SetMapView::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_SetMapView, CallFunc_BreakVector2D_X) == 0x000010, "Member 'Minimap_C_SetMapView::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(Minimap_C_SetMapView, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'Minimap_C_SetMapView::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(Minimap_C_SetMapView, CallFunc_Conv_BoolToInt_ReturnValue) == 0x000020, "Member 'Minimap_C_SetMapView::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_SetMapView, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000024, "Member 'Minimap_C_SetMapView::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minimap_C_SetMapView, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000025, "Member 'Minimap_C_SetMapView::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Minimap_C_SetMapView, CallFunc_BooleanAND_ReturnValue) == 0x000026, "Member 'Minimap_C_SetMapView::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function Minimap.Minimap_C.Tick
// 0x0048 (0x0048 - 0x0000)
struct Minimap_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minimap_C_Tick) == 0x000008, "Wrong alignment on Minimap_C_Tick");
static_assert(sizeof(Minimap_C_Tick) == 0x000048, "Wrong size on Minimap_C_Tick");
static_assert(offsetof(Minimap_C_Tick, MyGeometry) == 0x000000, "Member 'Minimap_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(Minimap_C_Tick, InDeltaTime) == 0x000040, "Member 'Minimap_C_Tick::InDeltaTime' has a wrong offset!");

}

