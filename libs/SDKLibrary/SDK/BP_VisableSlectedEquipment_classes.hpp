#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VisableSlectedEquipment

#include "Basic.hpp"

#include "E_ArsenalType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_ArsenalCommands_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VisableSlectedEquipment.BP_VisableSlectedEquipment_C
// 0x0038 (0x02C8 - 0x0290)
class ABP_VisableSlectedEquipment_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetComponent*                       Widget;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GunMesh;                                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	E_ArsenalType                                 Type;                                              // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Inspecting;                                        // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Left;                                              // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Up;                                                // 0x02C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Down;                                              // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Right;                                             // 0x02C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_VisableSlectedEquipment(int32 EntryPoint);
	void BndEvt__BP_VisableSlectedEquipment_GunMesh_K2Node_ComponentBoundEvent_3_ComponentOnReleasedSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent, const struct FKey& ButtonReleased);
	void BndEvt__BP_VisableSlectedEquipment_GunMesh_K2Node_ComponentBoundEvent_1_ComponentEndCursorOverSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent);
	void BndEvt__BP_VisableSlectedEquipment_GunMesh_K2Node_ComponentBoundEvent_0_ComponentBeginCursorOverSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent);
	void ArsenalEquipmentCommand(E_ArsenalCommands Command, E_ArsenalType Param_Type, class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VisableSlectedEquipment_C">();
	}
	static class ABP_VisableSlectedEquipment_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VisableSlectedEquipment_C>();
	}
};
static_assert(alignof(ABP_VisableSlectedEquipment_C) == 0x000008, "Wrong alignment on ABP_VisableSlectedEquipment_C");
static_assert(sizeof(ABP_VisableSlectedEquipment_C) == 0x0002C8, "Wrong size on ABP_VisableSlectedEquipment_C");
static_assert(offsetof(ABP_VisableSlectedEquipment_C, UberGraphFrame) == 0x000290, "Member 'ABP_VisableSlectedEquipment_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VisableSlectedEquipment_C, Widget) == 0x000298, "Member 'ABP_VisableSlectedEquipment_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_VisableSlectedEquipment_C, TextRender) == 0x0002A0, "Member 'ABP_VisableSlectedEquipment_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_VisableSlectedEquipment_C, GunMesh) == 0x0002A8, "Member 'ABP_VisableSlectedEquipment_C::GunMesh' has a wrong offset!");
static_assert(offsetof(ABP_VisableSlectedEquipment_C, Arrow) == 0x0002B0, "Member 'ABP_VisableSlectedEquipment_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_VisableSlectedEquipment_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_VisableSlectedEquipment_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VisableSlectedEquipment_C, Type) == 0x0002C0, "Member 'ABP_VisableSlectedEquipment_C::Type' has a wrong offset!");
static_assert(offsetof(ABP_VisableSlectedEquipment_C, Inspecting) == 0x0002C1, "Member 'ABP_VisableSlectedEquipment_C::Inspecting' has a wrong offset!");
static_assert(offsetof(ABP_VisableSlectedEquipment_C, Left) == 0x0002C2, "Member 'ABP_VisableSlectedEquipment_C::Left' has a wrong offset!");
static_assert(offsetof(ABP_VisableSlectedEquipment_C, Up) == 0x0002C3, "Member 'ABP_VisableSlectedEquipment_C::Up' has a wrong offset!");
static_assert(offsetof(ABP_VisableSlectedEquipment_C, Down) == 0x0002C4, "Member 'ABP_VisableSlectedEquipment_C::Down' has a wrong offset!");
static_assert(offsetof(ABP_VisableSlectedEquipment_C, Right) == 0x0002C5, "Member 'ABP_VisableSlectedEquipment_C::Right' has a wrong offset!");

}

