#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_C4

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MasterBuildPart_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_C4.BP_C4_C
// 0x00A0 (0x0420 - 0x0380)
class ABP_C4_C final : public ABP_MasterBuildPart_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_C4_C;                            // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          BuildCollision;                                    // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GroundCheckComponent_C*             BP_GroundCheckComponent;                           // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CountDownSoundEffectTimer;                         // 0x03A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ExplodeSound;                                      // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CountDownSound;                                    // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        TimeToExplode;                                     // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinDamage;                                         // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57F3[0x4];                                     // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ExplosionInnerRadius;                              // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExplosionOuterRadius;                              // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DamageFalloff;                                     // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExplosionDamage;                                   // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57F4[0x4];                                     // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ExplosionEffect;                                   // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EffectScale;                                       // 0x03F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMode;                                         // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57F5[0x7];                                     // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  ProperOwner;                                       // 0x0410(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnPlacedSound;                                     // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_C4(int32 EntryPoint);
	void Explode();
	void MCSetOwner();
	void MulticastCountDownSound();
	void MulticastExplodeEffect(class UParticleSystem* Particle, class USoundBase* Sound, const struct FVector& Scale);
	void OnPlaced();
	void Plant();
	void ReceiveBeginPlay();
	void ServerSetOwner();
	void SGK_BuildPartPlaced(class UBP_PlayerInventory_C* PlayerInventory, bool FromSaveGame);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_C4_C">();
	}
	static class ABP_C4_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_C4_C>();
	}
};
static_assert(alignof(ABP_C4_C) == 0x000008, "Wrong alignment on ABP_C4_C");
static_assert(sizeof(ABP_C4_C) == 0x000420, "Wrong size on ABP_C4_C");
static_assert(offsetof(ABP_C4_C, UberGraphFrame_BP_C4_C) == 0x000380, "Member 'ABP_C4_C::UberGraphFrame_BP_C4_C' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, BuildCollision) == 0x000388, "Member 'ABP_C4_C::BuildCollision' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, BP_GroundCheckComponent) == 0x000390, "Member 'ABP_C4_C::BP_GroundCheckComponent' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, Sphere) == 0x000398, "Member 'ABP_C4_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, CountDownSoundEffectTimer) == 0x0003A0, "Member 'ABP_C4_C::CountDownSoundEffectTimer' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, ExplodeSound) == 0x0003A8, "Member 'ABP_C4_C::ExplodeSound' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, CountDownSound) == 0x0003B0, "Member 'ABP_C4_C::CountDownSound' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, TimeToExplode) == 0x0003B8, "Member 'ABP_C4_C::TimeToExplode' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, MinDamage) == 0x0003C0, "Member 'ABP_C4_C::MinDamage' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, ExplosionInnerRadius) == 0x0003C8, "Member 'ABP_C4_C::ExplosionInnerRadius' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, ExplosionOuterRadius) == 0x0003D0, "Member 'ABP_C4_C::ExplosionOuterRadius' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, DamageFalloff) == 0x0003D8, "Member 'ABP_C4_C::DamageFalloff' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, ExplosionDamage) == 0x0003E0, "Member 'ABP_C4_C::ExplosionDamage' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, ExplosionEffect) == 0x0003E8, "Member 'ABP_C4_C::ExplosionEffect' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, EffectScale) == 0x0003F0, "Member 'ABP_C4_C::EffectScale' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, DebugMode) == 0x000408, "Member 'ABP_C4_C::DebugMode' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, ProperOwner) == 0x000410, "Member 'ABP_C4_C::ProperOwner' has a wrong offset!");
static_assert(offsetof(ABP_C4_C, OnPlacedSound) == 0x000418, "Member 'ABP_C4_C::OnPlacedSound' has a wrong offset!");

}

