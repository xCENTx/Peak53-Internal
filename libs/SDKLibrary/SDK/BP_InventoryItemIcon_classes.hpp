#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InventoryItemIcon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "S_ItemDetails_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_InvItem_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_InventoryItemIcon.BP_InventoryItemIcon_C
// 0x09A8 (0x0C20 - 0x0278)
class UBP_InventoryItemIcon_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       InUseFlash;                                        // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             AmountText;                                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BackroundColor;                                    // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_0;                                          // 0x0298(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_QuickSlotKey_C*                     BP_QuickSlotNumber;                                // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon;                                              // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               ItemIconSizeBox;                                   // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ItemName;                                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         ItemIndex;                                         // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9C[0x4];                                     // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              IconSize;                                          // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     Animation;                                         // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_ItemTooltip_C*                      Tooltip;                                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          MouseOver;                                         // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9D[0x7];                                     // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ItemDetails                         ItemDetailsL;                                      // 0x02F0(0x0890)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	class UBP_SGKSettingsSaveData_C*              OptionsSave;                                       // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_InvItem                             LastItem;                                          // 0x0B88(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Rotated;                                           // 0x0BB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9E[0x7];                                     // 0x0BB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ShortNameL;                                        // 0x0BC0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   NameL;                                             // 0x0BD8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Amount;                                            // 0x0BF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9F[0x4];                                     // 0x0BF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerInventory_C*                  PlayerInventory;                                   // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          UseShortName;                                      // 0x0C00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BA0[0x3];                                     // 0x0C01(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShortNameCutOff;                                   // 0x0C04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CreateDone;                                        // 0x0C08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UBP_MasterInventory_C*                  GridInven;                                         // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void CreateDone__DelegateSignature();
	void Deactive();
	void ExecuteUbergraph_BP_InventoryItemIcon(int32 EntryPoint);
	void GetCurrentItem(struct FS_InvItem* InvItem);
	void GetInventory(TArray<struct FS_InvSlot>* Inventory);
	void IsItemValid(bool* Param_IsItemValid);
	void LoadGameSettings();
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseDoubleClick(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void SetIconSize(int32 Height, int32 Width, bool Param_Rotated);
	void StartAnim();
	void StopAnim();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateCount(bool ItemValid, const struct FS_InvItem& InvItem);
	void UpdateCurrentItem();
	void UpdateIcon(bool ItemValid, const struct FS_InvItem& InvItem, bool Param_Rotated);
	void UpdateItemCount();
	void UpdateNameText(bool Item_Valid, const struct FS_InvItem& Item);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InventoryItemIcon_C">();
	}
	static class UBP_InventoryItemIcon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_InventoryItemIcon_C>();
	}
};
static_assert(alignof(UBP_InventoryItemIcon_C) == 0x000010, "Wrong alignment on UBP_InventoryItemIcon_C");
static_assert(sizeof(UBP_InventoryItemIcon_C) == 0x000C20, "Wrong size on UBP_InventoryItemIcon_C");
static_assert(offsetof(UBP_InventoryItemIcon_C, UberGraphFrame) == 0x000278, "Member 'UBP_InventoryItemIcon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, InUseFlash) == 0x000280, "Member 'UBP_InventoryItemIcon_C::InUseFlash' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, AmountText) == 0x000288, "Member 'UBP_InventoryItemIcon_C::AmountText' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, BackroundColor) == 0x000290, "Member 'UBP_InventoryItemIcon_C::BackroundColor' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, Border_0) == 0x000298, "Member 'UBP_InventoryItemIcon_C::Border_0' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, BP_QuickSlotNumber) == 0x0002A0, "Member 'UBP_InventoryItemIcon_C::BP_QuickSlotNumber' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, Icon) == 0x0002A8, "Member 'UBP_InventoryItemIcon_C::Icon' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, ItemIconSizeBox) == 0x0002B0, "Member 'UBP_InventoryItemIcon_C::ItemIconSizeBox' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, ItemName) == 0x0002B8, "Member 'UBP_InventoryItemIcon_C::ItemName' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, ItemIndex) == 0x0002C0, "Member 'UBP_InventoryItemIcon_C::ItemIndex' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, IconSize) == 0x0002C8, "Member 'UBP_InventoryItemIcon_C::IconSize' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, Animation) == 0x0002D8, "Member 'UBP_InventoryItemIcon_C::Animation' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, Tooltip) == 0x0002E0, "Member 'UBP_InventoryItemIcon_C::Tooltip' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, MouseOver) == 0x0002E8, "Member 'UBP_InventoryItemIcon_C::MouseOver' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, ItemDetailsL) == 0x0002F0, "Member 'UBP_InventoryItemIcon_C::ItemDetailsL' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, OptionsSave) == 0x000B80, "Member 'UBP_InventoryItemIcon_C::OptionsSave' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, LastItem) == 0x000B88, "Member 'UBP_InventoryItemIcon_C::LastItem' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, Rotated) == 0x000BB8, "Member 'UBP_InventoryItemIcon_C::Rotated' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, ShortNameL) == 0x000BC0, "Member 'UBP_InventoryItemIcon_C::ShortNameL' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, NameL) == 0x000BD8, "Member 'UBP_InventoryItemIcon_C::NameL' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, Amount) == 0x000BF0, "Member 'UBP_InventoryItemIcon_C::Amount' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, PlayerInventory) == 0x000BF8, "Member 'UBP_InventoryItemIcon_C::PlayerInventory' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, UseShortName) == 0x000C00, "Member 'UBP_InventoryItemIcon_C::UseShortName' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, ShortNameCutOff) == 0x000C04, "Member 'UBP_InventoryItemIcon_C::ShortNameCutOff' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, CreateDone) == 0x000C08, "Member 'UBP_InventoryItemIcon_C::CreateDone' has a wrong offset!");
static_assert(offsetof(UBP_InventoryItemIcon_C, GridInven) == 0x000C18, "Member 'UBP_InventoryItemIcon_C::GridInven' has a wrong offset!");

}

