#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: POIW

#include "Basic.hpp"

#include "POIW_classes.hpp"
#include "POIW_parameters.hpp"


namespace SDK
{

// Function POIW.POIW_C.AdjustPadding
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bIsOut                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bMinimapRotates                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPOIW_C::AdjustPadding(bool Param_bIsOut, bool bMinimapRotates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "AdjustPadding");

	Params::POIW_C_AdjustPadding Parms{};

	Parms.Param_bIsOut = Param_bIsOut;
	Parms.bMinimapRotates = bMinimapRotates;

	UObject::ProcessEvent(Func, &Parms);
}


// Function POIW.POIW_C.bLinkEnabled
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPOIW_C::bLinkEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "bLinkEnabled");

	Params::POIW_C_bLinkEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function POIW.POIW_C.ChangeColor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateColor                      Tint                                                   (BlueprintVisible, BlueprintReadOnly, Parm)

void UPOIW_C::ChangeColor(const struct FSlateColor& Tint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "ChangeColor");

	Params::POIW_C_ChangeColor Parms{};

	Parms.Tint = std::move(Tint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function POIW.POIW_C.ChangeHeightIndicSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture1                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture2                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      Color1                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FSlateColor                      Color2                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FVector2D                        Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AccepDiff                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPOIW_C::ChangeHeightIndicSettings(class UTexture2D* Texture1, class UTexture2D* Texture2, const struct FSlateColor& Color1, const struct FSlateColor& Color2, const struct FVector2D& Size, double AccepDiff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "ChangeHeightIndicSettings");

	Params::POIW_C_ChangeHeightIndicSettings Parms{};

	Parms.Texture1 = Texture1;
	Parms.Texture2 = Texture2;
	Parms.Color1 = std::move(Color1);
	Parms.Color2 = std::move(Color2);
	Parms.Size = std::move(Size);
	Parms.AccepDiff = AccepDiff;

	UObject::ProcessEvent(Func, &Parms);
}


// Function POIW.POIW_C.ChangeTexture
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Image                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Image_Size                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPOIW_C::ChangeTexture(class UObject* Image, const struct FVector2D& Image_Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "ChangeTexture");

	Params::POIW_C_ChangeTexture Parms{};

	Parms.Image = Image;
	Parms.Image_Size = std::move(Image_Size);

	UObject::ProcessEvent(Func, &Parms);
}


// Function POIW.POIW_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UPOIW_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function POIW.POIW_C.ExecuteUbergraph_POIW
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPOIW_C::ExecuteUbergraph_POIW(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "ExecuteUbergraph_POIW");

	Params::POIW_C_ExecuteUbergraph_POIW Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function POIW.POIW_C.GetLookAtRot
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPOIW_C::GetLookAtRot(double* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "GetLookAtRot");

	Params::POIW_C_GetLookAtRot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function POIW.POIW_C.HandleHeightIndic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsOffMinimap                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MinimapRotates                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPOIW_C::HandleHeightIndic(bool bIsOffMinimap, bool MinimapRotates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "HandleHeightIndic");

	Params::POIW_C_HandleHeightIndic Parms{};

	Parms.bIsOffMinimap = bIsOffMinimap;
	Parms.MinimapRotates = MinimapRotates;

	UObject::ProcessEvent(Func, &Parms);
}


// Function POIW.POIW_C.OnMouseEnter
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UPOIW_C::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "OnMouseEnter");

	Params::POIW_C_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function POIW.POIW_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UPOIW_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "OnMouseLeave");

	Params::POIW_C_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function POIW.POIW_C.OutOfMap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOut                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bMinimapRotates                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LastKnownLocation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastKnowRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPOIW_C::OutOfMap(bool IsOut, bool bMinimapRotates, const struct FVector& LastKnownLocation, const struct FRotator& LastKnowRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "OutOfMap");

	Params::POIW_C_OutOfMap Parms{};

	Parms.IsOut = IsOut;
	Parms.bMinimapRotates = bMinimapRotates;
	Parms.LastKnownLocation = std::move(LastKnownLocation);
	Parms.LastKnowRotation = std::move(LastKnowRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function POIW.POIW_C.SetRotation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMinimapRotates                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_bIsOut                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPOIW_C::SetRotation(bool bMinimapRotates, bool Param_bIsOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "SetRotation");

	Params::POIW_C_SetRotation Parms{};

	Parms.bMinimapRotates = bMinimapRotates;
	Parms.Param_bIsOut = Param_bIsOut;

	UObject::ProcessEvent(Func, &Parms);
}


// Function POIW.POIW_C.updateBlinkSpeed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PlaybackSpeed                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPOIW_C::UpdateBlinkSpeed(double PlaybackSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("POIW_C", "updateBlinkSpeed");

	Params::POIW_C_UpdateBlinkSpeed Parms{};

	Parms.PlaybackSpeed = PlaybackSpeed;

	UObject::ProcessEvent(Func, &Parms);
}

}

