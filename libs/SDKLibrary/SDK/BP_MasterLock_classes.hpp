#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterLock

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MasterBuildPart_classes.hpp"
#include "E_WorldActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterLock.BP_MasterLock_C
// 0x0058 (0x03D8 - 0x0380)
class ABP_MasterLock_C : public ABP_MasterBuildPart_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MasterLock_C;                    // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FText                                   Code;                                              // 0x0388(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Locked;                                            // 0x03A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5377[0x7];                                     // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           VerifiedPlayers;                                   // 0x03A8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class USoundBase*                             UnlockSound;                                       // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             LockSound;                                         // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ErrorSound;                                        // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoveVerifiedPlayersOnCodeChange;                 // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OpenLockPadUI;                                     // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CanOpen(const class FText& Param_Name, bool* AllowOpen);
	void ExecuteUbergraph_BP_MasterLock(int32 EntryPoint);
	void IsVerifiedPlayer(const class FText& PlayerName, bool* IsVerified);
	void LoadExtraData(class UBP_SGKSaveGame_C* SaveGame, int32 Param_Index);
	void LoadLockData(class UBP_SGKSaveGame_C* SaveGame, int32 Param_Index, struct FVector* OwnerLocation);
	void LockEffects(bool Param_Locked);
	void OnRep_Locked();
	void RandomCode();
	void SaveExtraData(class UBP_SGKSaveGame_C* SaveGame, const struct FS_LevelSaveData& LevelSaveData, int32* ExtraDataIndex, struct FS_LevelSaveData* NewLevelSaveData);
	int32 SaveLockData(class UBP_SGKSaveGame_C* SaveGame, const struct FS_LevelSaveData& LevelSaveData, struct FS_LevelSaveData* NewLevelSaveData);
	bool SGK_AddMultipleOwners(TArray<class FText>& Param_Owners);
	bool SGK_AddOwner(const class FText& PlayerName);
	void SGK_AllowInteraction(bool* AllowInteraction);
	void SGK_BuildPartPlaced(class UBP_PlayerInventory_C* PlayerInventory, bool FromSaveGame);
	void SGK_CodeCheck(const class FText& Param_Code, bool* CodeAccepted);
	bool SGK_Interact(class UBP_PlayerInventory_C* PlayerInventory, E_WorldActions Action);
	void SGK_PossibleActions(class UBP_PlayerInventory_C* PlayerInventory, bool* ActionsFound, TArray<struct FS_WorldAction>* PossibleActions);
	bool SGK_UpdateCode(const class FText& Param_Code);
	bool SGK_VerifyPlayer(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterLock_C">();
	}
	static class ABP_MasterLock_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MasterLock_C>();
	}
};
static_assert(alignof(ABP_MasterLock_C) == 0x000008, "Wrong alignment on ABP_MasterLock_C");
static_assert(sizeof(ABP_MasterLock_C) == 0x0003D8, "Wrong size on ABP_MasterLock_C");
static_assert(offsetof(ABP_MasterLock_C, UberGraphFrame_BP_MasterLock_C) == 0x000380, "Member 'ABP_MasterLock_C::UberGraphFrame_BP_MasterLock_C' has a wrong offset!");
static_assert(offsetof(ABP_MasterLock_C, Code) == 0x000388, "Member 'ABP_MasterLock_C::Code' has a wrong offset!");
static_assert(offsetof(ABP_MasterLock_C, Locked) == 0x0003A0, "Member 'ABP_MasterLock_C::Locked' has a wrong offset!");
static_assert(offsetof(ABP_MasterLock_C, VerifiedPlayers) == 0x0003A8, "Member 'ABP_MasterLock_C::VerifiedPlayers' has a wrong offset!");
static_assert(offsetof(ABP_MasterLock_C, UnlockSound) == 0x0003B8, "Member 'ABP_MasterLock_C::UnlockSound' has a wrong offset!");
static_assert(offsetof(ABP_MasterLock_C, LockSound) == 0x0003C0, "Member 'ABP_MasterLock_C::LockSound' has a wrong offset!");
static_assert(offsetof(ABP_MasterLock_C, ErrorSound) == 0x0003C8, "Member 'ABP_MasterLock_C::ErrorSound' has a wrong offset!");
static_assert(offsetof(ABP_MasterLock_C, RemoveVerifiedPlayersOnCodeChange) == 0x0003D0, "Member 'ABP_MasterLock_C::RemoveVerifiedPlayersOnCodeChange' has a wrong offset!");
static_assert(offsetof(ABP_MasterLock_C, OpenLockPadUI) == 0x0003D1, "Member 'ABP_MasterLock_C::OpenLockPadUI' has a wrong offset!");

}

