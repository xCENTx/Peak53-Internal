#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SGKSaveGame

#include "Basic.hpp"

#include "BP_SGKSaveGame_classes.hpp"
#include "BP_SGKSaveGame_parameters.hpp"


namespace SDK
{

// Function BP_SGKSaveGame.BP_SGKSaveGame_C.ClearLevelSaveData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::ClearLevelSaveData(const class FString& LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "ClearLevelSaveData");

	Params::BP_SGKSaveGame_C_ClearLevelSaveData Parms{};

	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.DeletePlayerSave
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             RespawnName                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_SGKSaveGame_C::DeletePlayerSave(const class FText& PlayerName, const class FText& RespawnName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "DeletePlayerSave");

	Params::BP_SGKSaveGame_C_DeletePlayerSave Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.RespawnName = std::move(RespawnName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.FindCookingSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    SaveFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CookingSave                   Array_Element                                          (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::FindCookingSaveData(const struct FTransform& Transform, const class FString& LevelName, bool* SaveFound, struct FS_CookingSave* Array_Element)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "FindCookingSaveData");

	Params::BP_SGKSaveGame_C_FindCookingSaveData Parms{};

	Parms.Transform = std::move(Transform);
	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);

	if (SaveFound != nullptr)
		*SaveFound = Parms.SaveFound;

	if (Array_Element != nullptr)
		*Array_Element = std::move(Parms.Array_Element);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.FindCraftingSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    SaveFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CraftingSave                  Array_Element                                          (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::FindCraftingSaveData(const struct FTransform& Transform, const class FString& LevelName, bool* SaveFound, struct FS_CraftingSave* Array_Element)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "FindCraftingSaveData");

	Params::BP_SGKSaveGame_C_FindCraftingSaveData Parms{};

	Parms.Transform = std::move(Transform);
	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);

	if (SaveFound != nullptr)
		*SaveFound = Parms.SaveFound;

	if (Array_Element != nullptr)
		*Array_Element = std::move(Parms.Array_Element);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.FindEquipmentSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    SaveFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_EquipmentInvSave              Array_Element                                          (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::FindEquipmentSaveData(const struct FTransform& Transform, const class FString& LevelName, bool* SaveFound, struct FS_EquipmentInvSave* Array_Element)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "FindEquipmentSaveData");

	Params::BP_SGKSaveGame_C_FindEquipmentSaveData Parms{};

	Parms.Transform = std::move(Transform);
	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);

	if (SaveFound != nullptr)
		*SaveFound = Parms.SaveFound;

	if (Array_Element != nullptr)
		*Array_Element = std::move(Parms.Array_Element);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.FindItemSpawnerSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_MasterItemSpawner_C*          ItemSpawner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_ItemSpawnerSave>       ItemSpawnerSaves                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_MasterItemSave                Item                                                   (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

bool UBP_SGKSaveGame_C::FindItemSpawnerSaveData(class ABP_MasterItemSpawner_C* ItemSpawner, TArray<struct FS_ItemSpawnerSave>& ItemSpawnerSaves, struct FS_MasterItemSave* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "FindItemSpawnerSaveData");

	Params::BP_SGKSaveGame_C_FindItemSpawnerSaveData Parms{};

	Parms.ItemSpawner = ItemSpawner;
	Parms.ItemSpawnerSaves = std::move(ItemSpawnerSaves);

	UObject::ProcessEvent(Func, &Parms);

	ItemSpawnerSaves = std::move(Parms.ItemSpawnerSaves);

	if (Item != nullptr)
		*Item = std::move(Parms.Item);

	return Parms.ReturnValue;
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.FindPlayerSave
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_PlayerSave                    PlayerSave                                             (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

bool UBP_SGKSaveGame_C::FindPlayerSave(const class FText& PlayerName, struct FS_PlayerSave* PlayerSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "FindPlayerSave");

	Params::BP_SGKSaveGame_C_FindPlayerSave Parms{};

	Parms.PlayerName = std::move(PlayerName);

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerSave != nullptr)
		*PlayerSave = std::move(Parms.PlayerSave);

	return Parms.ReturnValue;
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.FindResourceSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    SaveFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_ResourcesSaves>        RemovedResources                                       (Parm, OutParm)

void UBP_SGKSaveGame_C::FindResourceSaveData(const class FString& LevelName, bool* SaveFound, TArray<struct FS_ResourcesSaves>* RemovedResources)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "FindResourceSaveData");

	Params::BP_SGKSaveGame_C_FindResourceSaveData Parms{};

	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);

	if (SaveFound != nullptr)
		*SaveFound = Parms.SaveFound;

	if (RemovedResources != nullptr)
		*RemovedResources = std::move(Parms.RemovedResources);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.FindSpecificResourceSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ResourceLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    ResourceRemoved                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ResourceAmount                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::FindSpecificResourceSaveData(const struct FVector& ResourceLocation, const class FString& LevelName, bool* ResourceRemoved, int32* ResourceAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "FindSpecificResourceSaveData");

	Params::BP_SGKSaveGame_C_FindSpecificResourceSaveData Parms{};

	Parms.ResourceLocation = std::move(ResourceLocation);
	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);

	if (ResourceRemoved != nullptr)
		*ResourceRemoved = Parms.ResourceRemoved;

	if (ResourceAmount != nullptr)
		*ResourceAmount = Parms.ResourceAmount;
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.FindStorageSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    SaveFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_StorageSave                   Array_Element                                          (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::FindStorageSaveData(const struct FTransform& Transform, const class FString& LevelName, bool* SaveFound, struct FS_StorageSave* Array_Element)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "FindStorageSaveData");

	Params::BP_SGKSaveGame_C_FindStorageSaveData Parms{};

	Parms.Transform = std::move(Transform);
	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);

	if (SaveFound != nullptr)
		*SaveFound = Parms.SaveFound;

	if (Array_Element != nullptr)
		*Array_Element = std::move(Parms.Array_Element);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.FindVenderSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    SaveFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_VendorSave                    Array_Element                                          (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::FindVenderSaveData(const struct FTransform& Transform, const class FString& LevelName, bool* SaveFound, struct FS_VendorSave* Array_Element)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "FindVenderSaveData");

	Params::BP_SGKSaveGame_C_FindVenderSaveData Parms{};

	Parms.Transform = std::move(Transform);
	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);

	if (SaveFound != nullptr)
		*SaveFound = Parms.SaveFound;

	if (Array_Element != nullptr)
		*Array_Element = std::move(Parms.Array_Element);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.GatherAttachmentData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_WeaponInventory_C*            WeaponInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_InvSave>               OtherInventorySaves                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// TArray<struct FS_InvSave>               OtherInventorySavesL1                                  (Parm, OutParm, ContainsInstancedReference)
// TArray<struct FS_AttachmentSaveSlot>    AttachmentSaveSlotsL1                                  (Parm, OutParm)

void UBP_SGKSaveGame_C::GatherAttachmentData(class UBP_WeaponInventory_C* WeaponInventory, TArray<struct FS_InvSave>& OtherInventorySaves, TArray<struct FS_InvSave>* OtherInventorySavesL1, TArray<struct FS_AttachmentSaveSlot>* AttachmentSaveSlotsL1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "GatherAttachmentData");

	Params::BP_SGKSaveGame_C_GatherAttachmentData Parms{};

	Parms.WeaponInventory = WeaponInventory;
	Parms.OtherInventorySaves = std::move(OtherInventorySaves);

	UObject::ProcessEvent(Func, &Parms);

	OtherInventorySaves = std::move(Parms.OtherInventorySaves);

	if (OtherInventorySavesL1 != nullptr)
		*OtherInventorySavesL1 = std::move(Parms.OtherInventorySavesL1);

	if (AttachmentSaveSlotsL1 != nullptr)
		*AttachmentSaveSlotsL1 = std::move(Parms.AttachmentSaveSlotsL1);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.GatherInventoryData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_InvSlot>               Inventory                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// TArray<struct FS_InvSave>               Otherinventories                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// TArray<struct FS_InvSaveSlot>           InventorySaveData                                      (Parm, OutParm)
// TArray<struct FS_InvSave>               NewOtherInventories                                    (Parm, OutParm, ContainsInstancedReference)

void UBP_SGKSaveGame_C::GatherInventoryData(TArray<struct FS_InvSlot>& Inventory, TArray<struct FS_InvSave>& Otherinventories, TArray<struct FS_InvSaveSlot>* InventorySaveData, TArray<struct FS_InvSave>* NewOtherInventories)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "GatherInventoryData");

	Params::BP_SGKSaveGame_C_GatherInventoryData Parms{};

	Parms.Inventory = std::move(Inventory);
	Parms.Otherinventories = std::move(Otherinventories);

	UObject::ProcessEvent(Func, &Parms);

	Inventory = std::move(Parms.Inventory);
	Otherinventories = std::move(Parms.Otherinventories);

	if (InventorySaveData != nullptr)
		*InventorySaveData = std::move(Parms.InventorySaveData);

	if (NewOtherInventories != nullptr)
		*NewOtherInventories = std::move(Parms.NewOtherInventories);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.PrepareCookingSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MasterInventory_C*            Inventory                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FS_LevelSaveData                 Param_LevelSaveData                                    (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   ExtraDataIndex                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_LevelSaveData                 NewLevelSaveData                                       (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::PrepareCookingSaveData(class UBP_MasterInventory_C* Inventory, const struct FS_LevelSaveData& Param_LevelSaveData, int32* ExtraDataIndex, struct FS_LevelSaveData* NewLevelSaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "PrepareCookingSaveData");

	Params::BP_SGKSaveGame_C_PrepareCookingSaveData Parms{};

	Parms.Inventory = Inventory;
	Parms.Param_LevelSaveData = std::move(Param_LevelSaveData);

	UObject::ProcessEvent(Func, &Parms);

	if (ExtraDataIndex != nullptr)
		*ExtraDataIndex = Parms.ExtraDataIndex;

	if (NewLevelSaveData != nullptr)
		*NewLevelSaveData = std::move(Parms.NewLevelSaveData);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.PrepareCraftingSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MasterInventory_C*            Inventory                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FS_LevelSaveData                 Param_LevelSaveData                                    (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   ExtraDataIndex                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_LevelSaveData                 NewLevelSaveData                                       (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::PrepareCraftingSaveData(class UBP_MasterInventory_C* Inventory, const struct FS_LevelSaveData& Param_LevelSaveData, int32* ExtraDataIndex, struct FS_LevelSaveData* NewLevelSaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "PrepareCraftingSaveData");

	Params::BP_SGKSaveGame_C_PrepareCraftingSaveData Parms{};

	Parms.Inventory = Inventory;
	Parms.Param_LevelSaveData = std::move(Param_LevelSaveData);

	UObject::ProcessEvent(Func, &Parms);

	if (ExtraDataIndex != nullptr)
		*ExtraDataIndex = Parms.ExtraDataIndex;

	if (NewLevelSaveData != nullptr)
		*NewLevelSaveData = std::move(Parms.NewLevelSaveData);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.PrepareEquipmentSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_EquipmentInventory_C*         EquipmentInventory                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FS_LevelSaveData                 Param_LevelSaveData                                    (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   ExtraDataIndex                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_LevelSaveData                 NewLevelSaveData                                       (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::PrepareEquipmentSaveData(class UBP_EquipmentInventory_C* EquipmentInventory, const struct FS_LevelSaveData& Param_LevelSaveData, int32* ExtraDataIndex, struct FS_LevelSaveData* NewLevelSaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "PrepareEquipmentSaveData");

	Params::BP_SGKSaveGame_C_PrepareEquipmentSaveData Parms{};

	Parms.EquipmentInventory = EquipmentInventory;
	Parms.Param_LevelSaveData = std::move(Param_LevelSaveData);

	UObject::ProcessEvent(Func, &Parms);

	if (ExtraDataIndex != nullptr)
		*ExtraDataIndex = Parms.ExtraDataIndex;

	if (NewLevelSaveData != nullptr)
		*NewLevelSaveData = std::move(Parms.NewLevelSaveData);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.PrepareRespawnNameData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FS_LevelSaveData                 LevelData                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// struct FS_LevelSaveData                 SaveData                                               (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   SaveIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::PrepareRespawnNameData(const class FText& Param_Name, const struct FS_LevelSaveData& LevelData, struct FS_LevelSaveData* SaveData, int32* SaveIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "PrepareRespawnNameData");

	Params::BP_SGKSaveGame_C_PrepareRespawnNameData Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.LevelData = std::move(LevelData);

	UObject::ProcessEvent(Func, &Parms);

	if (SaveData != nullptr)
		*SaveData = std::move(Parms.SaveData);

	if (SaveIndex != nullptr)
		*SaveIndex = Parms.SaveIndex;
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.PrepareStorageSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MasterInventory_C*            Inventory                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FS_LevelSaveData                 Param_LevelSaveData                                    (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   ExtraDataIndex                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_LevelSaveData                 NewLevelSaveData                                       (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::PrepareStorageSaveData(class UBP_MasterInventory_C* Inventory, const struct FS_LevelSaveData& Param_LevelSaveData, int32* ExtraDataIndex, struct FS_LevelSaveData* NewLevelSaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "PrepareStorageSaveData");

	Params::BP_SGKSaveGame_C_PrepareStorageSaveData Parms{};

	Parms.Inventory = Inventory;
	Parms.Param_LevelSaveData = std::move(Param_LevelSaveData);

	UObject::ProcessEvent(Func, &Parms);

	if (ExtraDataIndex != nullptr)
		*ExtraDataIndex = Parms.ExtraDataIndex;

	if (NewLevelSaveData != nullptr)
		*NewLevelSaveData = std::move(Parms.NewLevelSaveData);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.PrepareVenderSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MasterInventory_C*            Inventory                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FS_LevelSaveData                 Param_LevelSaveData                                    (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   ExtraDataIndex                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_LevelSaveData                 NewLevelSaveData                                       (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::PrepareVenderSaveData(class UBP_MasterInventory_C* Inventory, const struct FS_LevelSaveData& Param_LevelSaveData, int32* ExtraDataIndex, struct FS_LevelSaveData* NewLevelSaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "PrepareVenderSaveData");

	Params::BP_SGKSaveGame_C_PrepareVenderSaveData Parms{};

	Parms.Inventory = Inventory;
	Parms.Param_LevelSaveData = std::move(Param_LevelSaveData);

	UObject::ProcessEvent(Func, &Parms);

	if (ExtraDataIndex != nullptr)
		*ExtraDataIndex = Parms.ExtraDataIndex;

	if (NewLevelSaveData != nullptr)
		*NewLevelSaveData = std::move(Parms.NewLevelSaveData);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.SaveEquipmentSlots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_EquipmentInventory_C*         EquipmentInventory                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_InvSave>               OtherInventorySaves                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// TArray<struct FS_EquipmentSlotSave>     EquipmentSaveSlots                                     (Parm, OutParm)
// TArray<struct FS_InvSave>               NewOtherInventories                                    (Parm, OutParm, ContainsInstancedReference)

void UBP_SGKSaveGame_C::SaveEquipmentSlots(class UBP_EquipmentInventory_C* EquipmentInventory, TArray<struct FS_InvSave>& OtherInventorySaves, TArray<struct FS_EquipmentSlotSave>* EquipmentSaveSlots, TArray<struct FS_InvSave>* NewOtherInventories)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "SaveEquipmentSlots");

	Params::BP_SGKSaveGame_C_SaveEquipmentSlots Parms{};

	Parms.EquipmentInventory = EquipmentInventory;
	Parms.OtherInventorySaves = std::move(OtherInventorySaves);

	UObject::ProcessEvent(Func, &Parms);

	OtherInventorySaves = std::move(Parms.OtherInventorySaves);

	if (EquipmentSaveSlots != nullptr)
		*EquipmentSaveSlots = std::move(Parms.EquipmentSaveSlots);

	if (NewOtherInventories != nullptr)
		*NewOtherInventories = std::move(Parms.NewOtherInventories);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.SaveInventory__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_SGKSaveGame_C::SaveInventory__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "SaveInventory__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.SaveItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvItem                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::SaveItem(const struct FTransform& Transform, const struct FS_InvItem& Item, const class FString& LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "SaveItem");

	Params::BP_SGKSaveGame_C_SaveItem Parms{};

	Parms.Transform = std::move(Transform);
	Parms.Item = std::move(Item);
	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.SaveItemSpawners
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_MasterItemSpawner_C*          ItemSpawner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::SaveItemSpawners(class ABP_MasterItemSpawner_C* ItemSpawner, const class FString& LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "SaveItemSpawners");

	Params::BP_SGKSaveGame_C_SaveItemSpawners Parms{};

	Parms.ItemSpawner = ItemSpawner;
	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.SavePlayerInventory
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_PlayerInventory_C*            PlayerInventory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FString                           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::SavePlayerInventory(class UBP_PlayerInventory_C* PlayerInventory, const class FString& Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "SavePlayerInventory");

	Params::BP_SGKSaveGame_C_SavePlayerInventory Parms{};

	Parms.PlayerInventory = PlayerInventory;
	Parms.Level = std::move(Level);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.SaveResourceInstanceData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          RemovedInstances                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::SaveResourceInstanceData(const struct FVector& RemovedInstances, int32 Amount, const class FString& LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "SaveResourceInstanceData");

	Params::BP_SGKSaveGame_C_SaveResourceInstanceData Parms{};

	Parms.RemovedInstances = std::move(RemovedInstances);
	Parms.Amount = Amount;
	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.SaveWeaponSlots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_EquipmentInventory_C*         EquipmentInventory                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_InvSave>               OtherInventorySaves                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// TArray<struct FS_WeaponSlotSave>        WeaponSaveSlots                                        (Parm, OutParm)
// TArray<struct FS_InvSave>               NewOtherInventories                                    (Parm, OutParm, ContainsInstancedReference)

void UBP_SGKSaveGame_C::SaveWeaponSlots(class UBP_EquipmentInventory_C* EquipmentInventory, TArray<struct FS_InvSave>& OtherInventorySaves, TArray<struct FS_WeaponSlotSave>* WeaponSaveSlots, TArray<struct FS_InvSave>* NewOtherInventories)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "SaveWeaponSlots");

	Params::BP_SGKSaveGame_C_SaveWeaponSlots Parms{};

	Parms.EquipmentInventory = EquipmentInventory;
	Parms.OtherInventorySaves = std::move(OtherInventorySaves);

	UObject::ProcessEvent(Func, &Parms);

	OtherInventorySaves = std::move(Parms.OtherInventorySaves);

	if (WeaponSaveSlots != nullptr)
		*WeaponSaveSlots = std::move(Parms.WeaponSaveSlots);

	if (NewOtherInventories != nullptr)
		*NewOtherInventories = std::move(Parms.NewOtherInventories);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.SelectLevelSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    SaveFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_LevelSaveData                 Param_LevelSaveData                                    (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::SelectLevelSaveData(const class FString& LevelName, bool* SaveFound, struct FS_LevelSaveData* Param_LevelSaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "SelectLevelSaveData");

	Params::BP_SGKSaveGame_C_SelectLevelSaveData Parms{};

	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);

	if (SaveFound != nullptr)
		*SaveFound = Parms.SaveFound;

	if (Param_LevelSaveData != nullptr)
		*Param_LevelSaveData = std::move(Parms.Param_LevelSaveData);
}


// Function BP_SGKSaveGame.BP_SGKSaveGame_C.SetLevelData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LevelSaveData                 SaveData                                               (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_SGKSaveGame_C::SetLevelData(const struct FS_LevelSaveData& SaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKSaveGame_C", "SetLevelData");

	Params::BP_SGKSaveGame_C_SetLevelData Parms{};

	Parms.SaveData = std::move(SaveData);

	UObject::ProcessEvent(Func, &Parms);
}

}

