#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Peak53

#include "Basic.hpp"

#include "NetCore_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum Peak53.EPKHoldableType
// NumValues: 0x0006
enum class EPKHoldableType : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Tool_1                                   = 2,
	Tool_2                                   = 3,
	None                                     = 4,
	EPKHoldableType_MAX                      = 5,
};

// ScriptStruct Peak53.PKWeaponAnimationSet
// 0x0018 (0x0018 - 0x0000)
struct FPKWeaponAnimationSet final
{
public:
	class UAnimSequence*                          Idle;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Combat;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Aimed;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPKWeaponAnimationSet) == 0x000008, "Wrong alignment on FPKWeaponAnimationSet");
static_assert(sizeof(FPKWeaponAnimationSet) == 0x000018, "Wrong size on FPKWeaponAnimationSet");
static_assert(offsetof(FPKWeaponAnimationSet, Idle) == 0x000000, "Member 'FPKWeaponAnimationSet::Idle' has a wrong offset!");
static_assert(offsetof(FPKWeaponAnimationSet, Combat) == 0x000008, "Member 'FPKWeaponAnimationSet::Combat' has a wrong offset!");
static_assert(offsetof(FPKWeaponAnimationSet, Aimed) == 0x000010, "Member 'FPKWeaponAnimationSet::Aimed' has a wrong offset!");

// ScriptStruct Peak53.PKChatMessage
// 0x003C (0x0048 - 0x000C)
struct FPKChatMessage final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_2F3B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MessageSource;                                     // 0x0010(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0028(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsTeamMessage;                                    // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTeam1;                                          // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F3C[0x6];                                     // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPKChatMessage) == 0x000008, "Wrong alignment on FPKChatMessage");
static_assert(sizeof(FPKChatMessage) == 0x000048, "Wrong size on FPKChatMessage");
static_assert(offsetof(FPKChatMessage, MessageSource) == 0x000010, "Member 'FPKChatMessage::MessageSource' has a wrong offset!");
static_assert(offsetof(FPKChatMessage, Message) == 0x000028, "Member 'FPKChatMessage::Message' has a wrong offset!");
static_assert(offsetof(FPKChatMessage, bIsTeamMessage) == 0x000040, "Member 'FPKChatMessage::bIsTeamMessage' has a wrong offset!");
static_assert(offsetof(FPKChatMessage, bIsTeam1) == 0x000041, "Member 'FPKChatMessage::bIsTeam1' has a wrong offset!");

// ScriptStruct Peak53.PKChatMessageArray
// 0x0010 (0x0118 - 0x0108)
struct FPKChatMessageArray final : public FFastArraySerializer
{
public:
	TArray<struct FPKChatMessage>                 Items;                                             // 0x0108(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPKChatMessageArray) == 0x000008, "Wrong alignment on FPKChatMessageArray");
static_assert(sizeof(FPKChatMessageArray) == 0x000118, "Wrong size on FPKChatMessageArray");
static_assert(offsetof(FPKChatMessageArray, Items) == 0x000108, "Member 'FPKChatMessageArray::Items' has a wrong offset!");

// ScriptStruct Peak53.PKHoldableEquipMontage
// 0x0010 (0x0010 - 0x0000)
struct FPKHoldableEquipMontage final
{
public:
	class UAnimMontage*                           Equip;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           UnEquip;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPKHoldableEquipMontage) == 0x000008, "Wrong alignment on FPKHoldableEquipMontage");
static_assert(sizeof(FPKHoldableEquipMontage) == 0x000010, "Wrong size on FPKHoldableEquipMontage");
static_assert(offsetof(FPKHoldableEquipMontage, Equip) == 0x000000, "Member 'FPKHoldableEquipMontage::Equip' has a wrong offset!");
static_assert(offsetof(FPKHoldableEquipMontage, UnEquip) == 0x000008, "Member 'FPKHoldableEquipMontage::UnEquip' has a wrong offset!");

// ScriptStruct Peak53.PKJumpAnimationSet
// 0x0018 (0x0018 - 0x0000)
struct FPKJumpAnimationSet final
{
public:
	class UAnimSequence*                          JumpStart;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          JumpLoop;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          JumpEnd;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPKJumpAnimationSet) == 0x000008, "Wrong alignment on FPKJumpAnimationSet");
static_assert(sizeof(FPKJumpAnimationSet) == 0x000018, "Wrong size on FPKJumpAnimationSet");
static_assert(offsetof(FPKJumpAnimationSet, JumpStart) == 0x000000, "Member 'FPKJumpAnimationSet::JumpStart' has a wrong offset!");
static_assert(offsetof(FPKJumpAnimationSet, JumpLoop) == 0x000008, "Member 'FPKJumpAnimationSet::JumpLoop' has a wrong offset!");
static_assert(offsetof(FPKJumpAnimationSet, JumpEnd) == 0x000010, "Member 'FPKJumpAnimationSet::JumpEnd' has a wrong offset!");

// ScriptStruct Peak53.PKTurnAnimationSet
// 0x0020 (0x0020 - 0x0000)
struct FPKTurnAnimationSet final
{
public:
	class UAnimMontage*                           TurnLeft;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           TurnRight;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           TurnLeftCrouch;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           TurnRightCrouch;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPKTurnAnimationSet) == 0x000008, "Wrong alignment on FPKTurnAnimationSet");
static_assert(sizeof(FPKTurnAnimationSet) == 0x000020, "Wrong size on FPKTurnAnimationSet");
static_assert(offsetof(FPKTurnAnimationSet, TurnLeft) == 0x000000, "Member 'FPKTurnAnimationSet::TurnLeft' has a wrong offset!");
static_assert(offsetof(FPKTurnAnimationSet, TurnRight) == 0x000008, "Member 'FPKTurnAnimationSet::TurnRight' has a wrong offset!");
static_assert(offsetof(FPKTurnAnimationSet, TurnLeftCrouch) == 0x000010, "Member 'FPKTurnAnimationSet::TurnLeftCrouch' has a wrong offset!");
static_assert(offsetof(FPKTurnAnimationSet, TurnRightCrouch) == 0x000018, "Member 'FPKTurnAnimationSet::TurnRightCrouch' has a wrong offset!");

// ScriptStruct Peak53.PKAnimationSetData
// 0x00F8 (0x00F8 - 0x0000)
struct FPKAnimationSetData final
{
public:
	EPKHoldableType                               HoldableType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F3D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           OverlayState;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F3E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPKWeaponAnimationSet                  Animations;                                        // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPKJumpAnimationSet                    JumpAnimations;                                    // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPKHoldableEquipMontage                DefaultEquip;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMap<TSoftClassPtr<class UClass>, struct FPKHoldableEquipMontage> EquipMontageOverrides;                             // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DefaultReload;                                     // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TSoftClassPtr<class UClass>, class UAnimMontage*> ReloadMontageOverrides;                            // 0x00A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPKAnimationSetData) == 0x000008, "Wrong alignment on FPKAnimationSetData");
static_assert(sizeof(FPKAnimationSetData) == 0x0000F8, "Wrong size on FPKAnimationSetData");
static_assert(offsetof(FPKAnimationSetData, HoldableType) == 0x000000, "Member 'FPKAnimationSetData::HoldableType' has a wrong offset!");
static_assert(offsetof(FPKAnimationSetData, OverlayState) == 0x000004, "Member 'FPKAnimationSetData::OverlayState' has a wrong offset!");
static_assert(offsetof(FPKAnimationSetData, Animations) == 0x000010, "Member 'FPKAnimationSetData::Animations' has a wrong offset!");
static_assert(offsetof(FPKAnimationSetData, JumpAnimations) == 0x000028, "Member 'FPKAnimationSetData::JumpAnimations' has a wrong offset!");
static_assert(offsetof(FPKAnimationSetData, DefaultEquip) == 0x000040, "Member 'FPKAnimationSetData::DefaultEquip' has a wrong offset!");
static_assert(offsetof(FPKAnimationSetData, EquipMontageOverrides) == 0x000050, "Member 'FPKAnimationSetData::EquipMontageOverrides' has a wrong offset!");
static_assert(offsetof(FPKAnimationSetData, DefaultReload) == 0x0000A0, "Member 'FPKAnimationSetData::DefaultReload' has a wrong offset!");
static_assert(offsetof(FPKAnimationSetData, ReloadMontageOverrides) == 0x0000A8, "Member 'FPKAnimationSetData::ReloadMontageOverrides' has a wrong offset!");

// ScriptStruct Peak53.PKWeaponHotSettings
// 0x000C (0x000C - 0x0000)
struct FPKWeaponHotSettings final
{
public:
	float                                         WeaponHotDistance;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeadPlayerDistance;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponHotCooldown;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPKWeaponHotSettings) == 0x000004, "Wrong alignment on FPKWeaponHotSettings");
static_assert(sizeof(FPKWeaponHotSettings) == 0x00000C, "Wrong size on FPKWeaponHotSettings");
static_assert(offsetof(FPKWeaponHotSettings, WeaponHotDistance) == 0x000000, "Member 'FPKWeaponHotSettings::WeaponHotDistance' has a wrong offset!");
static_assert(offsetof(FPKWeaponHotSettings, DeadPlayerDistance) == 0x000004, "Member 'FPKWeaponHotSettings::DeadPlayerDistance' has a wrong offset!");
static_assert(offsetof(FPKWeaponHotSettings, WeaponHotCooldown) == 0x000008, "Member 'FPKWeaponHotSettings::WeaponHotCooldown' has a wrong offset!");

// ScriptStruct Peak53.PKMapIntroSettings
// 0x0010 (0x0010 - 0x0000)
struct FPKMapIntroSettings final
{
public:
	TSubclassOf<class UUserWidget>                Widget;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPKMapIntroSettings) == 0x000008, "Wrong alignment on FPKMapIntroSettings");
static_assert(sizeof(FPKMapIntroSettings) == 0x000010, "Wrong size on FPKMapIntroSettings");
static_assert(offsetof(FPKMapIntroSettings, Widget) == 0x000000, "Member 'FPKMapIntroSettings::Widget' has a wrong offset!");
static_assert(offsetof(FPKMapIntroSettings, Sound) == 0x000008, "Member 'FPKMapIntroSettings::Sound' has a wrong offset!");

}

