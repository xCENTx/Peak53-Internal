#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Minimap

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "MinimapPlugin_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Minimap.Minimap_C
// 0x0160 (0x03D8 - 0x0278)
class UMinimap_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           Canvas_Backgrounds;                                // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_IconsAboveFog;                              // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_IconsBelowFog;                              // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_OpaqueBackground;                            // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Fogs;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URetainerBox*                           RetainerBox_Minimap;                               // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        Switcher_MapActive;                                // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMinimapInternal_BackgroundMouseCapture_C* Widget_BackgroundMouseCapture;                     // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMinimapInternal_Camera_C*              Widget_Camera;                                     // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMapViewComponent*                      MapViewComp;                                       // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMapTrackerComponent*                   MapTrackerComp;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              InitialMapGeo;                                     // 0x02D8(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                              InitialMapSize;                                    // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapViewSearchOption                          AutoLocateMapView;                                 // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsCircular;                                       // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bDrawCamera;                                       // 0x032A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_379B[0x5];                                     // 0x032B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FloorDistance;                                     // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnMapClicked;                                      // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector2D                              InitialViewExtent;                                 // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FillColor;                                         // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UMinimapInternal_Icon_C*>        Icons;                                             // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMinimapInternal_Background_C*>  Backgrounds;                                       // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMinimapInternal_Fog_C*>         Fogs;                                              // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	FMulticastInlineDelegateProperty_             OnViewChanged;                                     // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        IconScale;                                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnBoxSelected;                                     // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bEnableBoxSelect;                                  // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_379C[0x3];                                     // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BoxSelectColor;                                    // 0x03C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void AddMapBackground(class AMapBackground* MapBackground);
	void AddMapFog(class AMapFog* MapFog);
	void AddMapIcon(class UMapIconComponent* MapIconComp);
	void AutoFindMapView();
	void BroadcastMapView();
	void ChangeZoom(double Delta);
	void CleanupListeners();
	void Construct();
	void CustomEvent_0(const struct FVector2D& StartUV, const struct FVector2D& EndUV, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect);
	void CustomEvent_1(const struct FVector2D& StartUV, const struct FVector2D& EndUV, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect);
	void Destruct();
	void EnforceAspectRatio();
	void ExecuteUbergraph_Minimap(int32 EntryPoint);
	void ForgetDestroyedIcons();
	void InitDrawFrustum();
	void InitFillBackground();
	void InitMap(const struct FGeometry& Geom);
	void InitShape();
	void InitZoom();
	void OnBoxSelected__DelegateSignature(TArray<class UMapIconComponent*>& MapIcons, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect);
	void OnMapBackgroundUnregistered_Event_0(class AMapBackground* MapBackground);
	void OnMapClicked__DelegateSignature(const struct FVector& WorldLocation, bool IsLeftMouseButton);
	void OnMapFogRegistered_Event_0(class AMapFog* MapFog);
	void OnMapIconRegistered(class UMapIconComponent* MapIcon);
	void OnMapIconWidgetCreated(class UMinimapInternal_Icon_C* MapIconWidget);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseClick_Event_0(const struct FVector2D& UV, bool IsLeftMouseButton);
	void OnViewChanged__DelegateSignature(class UMapViewComponent* Param_MapViewComp);
	void OnViewDestroyed_Event_0(class UMapViewComponent* MapView);
	void ProcessBackgroundClick(const struct FVector2D& UV, bool IsLeftMouseButton);
	void ProcessBoxSelect(const struct FVector2D& StartUV, const struct FVector2D& EndUV, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect);
	void ReinitBoxSelect();
	void ReinitShape();
	void RetryAutoFind();
	void RetryMapSize();
	void SetMapView(class UMapViewComponent* NewMapView);
	void SetupListeners();
	void SetupViewListener();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Minimap_C">();
	}
	static class UMinimap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMinimap_C>();
	}
};
static_assert(alignof(UMinimap_C) == 0x000008, "Wrong alignment on UMinimap_C");
static_assert(sizeof(UMinimap_C) == 0x0003D8, "Wrong size on UMinimap_C");
static_assert(offsetof(UMinimap_C, UberGraphFrame) == 0x000278, "Member 'UMinimap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMinimap_C, Canvas_Backgrounds) == 0x000280, "Member 'UMinimap_C::Canvas_Backgrounds' has a wrong offset!");
static_assert(offsetof(UMinimap_C, Canvas_IconsAboveFog) == 0x000288, "Member 'UMinimap_C::Canvas_IconsAboveFog' has a wrong offset!");
static_assert(offsetof(UMinimap_C, Canvas_IconsBelowFog) == 0x000290, "Member 'UMinimap_C::Canvas_IconsBelowFog' has a wrong offset!");
static_assert(offsetof(UMinimap_C, Image_OpaqueBackground) == 0x000298, "Member 'UMinimap_C::Image_OpaqueBackground' has a wrong offset!");
static_assert(offsetof(UMinimap_C, Overlay_Fogs) == 0x0002A0, "Member 'UMinimap_C::Overlay_Fogs' has a wrong offset!");
static_assert(offsetof(UMinimap_C, RetainerBox_Minimap) == 0x0002A8, "Member 'UMinimap_C::RetainerBox_Minimap' has a wrong offset!");
static_assert(offsetof(UMinimap_C, Switcher_MapActive) == 0x0002B0, "Member 'UMinimap_C::Switcher_MapActive' has a wrong offset!");
static_assert(offsetof(UMinimap_C, Widget_BackgroundMouseCapture) == 0x0002B8, "Member 'UMinimap_C::Widget_BackgroundMouseCapture' has a wrong offset!");
static_assert(offsetof(UMinimap_C, Widget_Camera) == 0x0002C0, "Member 'UMinimap_C::Widget_Camera' has a wrong offset!");
static_assert(offsetof(UMinimap_C, MapViewComp) == 0x0002C8, "Member 'UMinimap_C::MapViewComp' has a wrong offset!");
static_assert(offsetof(UMinimap_C, MapTrackerComp) == 0x0002D0, "Member 'UMinimap_C::MapTrackerComp' has a wrong offset!");
static_assert(offsetof(UMinimap_C, InitialMapGeo) == 0x0002D8, "Member 'UMinimap_C::InitialMapGeo' has a wrong offset!");
static_assert(offsetof(UMinimap_C, InitialMapSize) == 0x000318, "Member 'UMinimap_C::InitialMapSize' has a wrong offset!");
static_assert(offsetof(UMinimap_C, AutoLocateMapView) == 0x000328, "Member 'UMinimap_C::AutoLocateMapView' has a wrong offset!");
static_assert(offsetof(UMinimap_C, bIsCircular) == 0x000329, "Member 'UMinimap_C::bIsCircular' has a wrong offset!");
static_assert(offsetof(UMinimap_C, bDrawCamera) == 0x00032A, "Member 'UMinimap_C::bDrawCamera' has a wrong offset!");
static_assert(offsetof(UMinimap_C, FloorDistance) == 0x000330, "Member 'UMinimap_C::FloorDistance' has a wrong offset!");
static_assert(offsetof(UMinimap_C, OnMapClicked) == 0x000338, "Member 'UMinimap_C::OnMapClicked' has a wrong offset!");
static_assert(offsetof(UMinimap_C, InitialViewExtent) == 0x000348, "Member 'UMinimap_C::InitialViewExtent' has a wrong offset!");
static_assert(offsetof(UMinimap_C, FillColor) == 0x000358, "Member 'UMinimap_C::FillColor' has a wrong offset!");
static_assert(offsetof(UMinimap_C, Icons) == 0x000368, "Member 'UMinimap_C::Icons' has a wrong offset!");
static_assert(offsetof(UMinimap_C, Backgrounds) == 0x000378, "Member 'UMinimap_C::Backgrounds' has a wrong offset!");
static_assert(offsetof(UMinimap_C, Fogs) == 0x000388, "Member 'UMinimap_C::Fogs' has a wrong offset!");
static_assert(offsetof(UMinimap_C, OnViewChanged) == 0x000398, "Member 'UMinimap_C::OnViewChanged' has a wrong offset!");
static_assert(offsetof(UMinimap_C, IconScale) == 0x0003A8, "Member 'UMinimap_C::IconScale' has a wrong offset!");
static_assert(offsetof(UMinimap_C, OnBoxSelected) == 0x0003B0, "Member 'UMinimap_C::OnBoxSelected' has a wrong offset!");
static_assert(offsetof(UMinimap_C, bEnableBoxSelect) == 0x0003C0, "Member 'UMinimap_C::bEnableBoxSelect' has a wrong offset!");
static_assert(offsetof(UMinimap_C, BoxSelectColor) == 0x0003C4, "Member 'UMinimap_C::BoxSelectColor' has a wrong offset!");

}

