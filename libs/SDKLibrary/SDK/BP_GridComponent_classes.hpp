#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GridComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_BuildType_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GridComponent.BP_GridComponent_C
// 0x00C0 (0x0360 - 0x02A0)
class UBP_GridComponent_C final : public USceneComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	E_BuildType                                   GridType;                                          // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49F1[0x7];                                     // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CheckRadius;                                       // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Grid;                                              // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SnapRotationOffset;                                // 0x02C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseCustomSize;                                     // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49F2[0x7];                                     // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomSize;                                        // 0x02E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<E_BuildType, struct FVector>             PresetGridSizes;                                   // 0x02F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AttachBuildPart;                                   // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49F3[0x7];                                     // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    AttachToComponent;                                 // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void AttachedActorCheck(bool* ActorFound, class AActor** FoundActor);
	void ExecuteUbergraph_BP_GridComponent(int32 EntryPoint);
	void SelectGridSize(struct FVector* Value);
	void SpawnGrid();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GridComponent_C">();
	}
	static class UBP_GridComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GridComponent_C>();
	}
};
static_assert(alignof(UBP_GridComponent_C) == 0x000010, "Wrong alignment on UBP_GridComponent_C");
static_assert(sizeof(UBP_GridComponent_C) == 0x000360, "Wrong size on UBP_GridComponent_C");
static_assert(offsetof(UBP_GridComponent_C, UberGraphFrame) == 0x0002A0, "Member 'UBP_GridComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GridComponent_C, GridType) == 0x0002A8, "Member 'UBP_GridComponent_C::GridType' has a wrong offset!");
static_assert(offsetof(UBP_GridComponent_C, CheckRadius) == 0x0002B0, "Member 'UBP_GridComponent_C::CheckRadius' has a wrong offset!");
static_assert(offsetof(UBP_GridComponent_C, Grid) == 0x0002B8, "Member 'UBP_GridComponent_C::Grid' has a wrong offset!");
static_assert(offsetof(UBP_GridComponent_C, SnapRotationOffset) == 0x0002C0, "Member 'UBP_GridComponent_C::SnapRotationOffset' has a wrong offset!");
static_assert(offsetof(UBP_GridComponent_C, UseCustomSize) == 0x0002D8, "Member 'UBP_GridComponent_C::UseCustomSize' has a wrong offset!");
static_assert(offsetof(UBP_GridComponent_C, CustomSize) == 0x0002E0, "Member 'UBP_GridComponent_C::CustomSize' has a wrong offset!");
static_assert(offsetof(UBP_GridComponent_C, PresetGridSizes) == 0x0002F8, "Member 'UBP_GridComponent_C::PresetGridSizes' has a wrong offset!");
static_assert(offsetof(UBP_GridComponent_C, AttachBuildPart) == 0x000348, "Member 'UBP_GridComponent_C::AttachBuildPart' has a wrong offset!");
static_assert(offsetof(UBP_GridComponent_C, AttachToComponent) == 0x000350, "Member 'UBP_GridComponent_C::AttachToComponent' has a wrong offset!");

}

