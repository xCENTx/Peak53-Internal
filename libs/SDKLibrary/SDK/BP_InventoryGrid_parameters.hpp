#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InventoryGrid

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_InventoryGrid.BP_InventoryGrid_C.ConstructInvGrid
// 0x00B8 (0x00B8 - 0x0000)
struct BP_InventoryGrid_C_ConstructInvGrid final
{
public:
	bool                                          Preview;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ColumnsL;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_InventoryItemIcon_C*                NewItemIconL;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_InventoryCell_C*                    NewCellL;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ArrayIndexL;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetInvColumns_Columns;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4B[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_InventoryCell_C*                    CallFunc_GetCellFromPool_Cell;                     // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_InventoryItemIcon_C*                CallFunc_Create_ReturnValue;                       // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_InventoryCell_C*                    CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4C[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerInventory_C*                  CallFunc_GetComponentByClass_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4D[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_InventoryItemIcon_C*                CallFunc_Array_Get_Item_1;                         // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4E[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4F[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridSlot*                              CallFunc_AddChildToGrid_ReturnValue;               // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue_1;             // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUniformGridSlot*                       CallFunc_AddChildToUniformGrid_ReturnValue;        // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCellCount_InventoryCells;              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryGrid_C_ConstructInvGrid) == 0x000008, "Wrong alignment on BP_InventoryGrid_C_ConstructInvGrid");
static_assert(sizeof(BP_InventoryGrid_C_ConstructInvGrid) == 0x0000B8, "Wrong size on BP_InventoryGrid_C_ConstructInvGrid");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, Preview) == 0x000000, "Member 'BP_InventoryGrid_C_ConstructInvGrid::Preview' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, ColumnsL) == 0x000004, "Member 'BP_InventoryGrid_C_ConstructInvGrid::ColumnsL' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, NewItemIconL) == 0x000008, "Member 'BP_InventoryGrid_C_ConstructInvGrid::NewItemIconL' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, NewCellL) == 0x000010, "Member 'BP_InventoryGrid_C_ConstructInvGrid::NewCellL' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, ArrayIndexL) == 0x000018, "Member 'BP_InventoryGrid_C_ConstructInvGrid::ArrayIndexL' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, Temp_int_Variable) == 0x00001C, "Member 'BP_InventoryGrid_C_ConstructInvGrid::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_InventoryGrid_C_ConstructInvGrid::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, Temp_int_Variable_1) == 0x000028, "Member 'BP_InventoryGrid_C_ConstructInvGrid::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Add_IntInt_ReturnValue_1) == 0x00002C, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_GetInvColumns_Columns) == 0x000030, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_GetInvColumns_Columns' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_GetCellFromPool_Cell) == 0x000038, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_GetCellFromPool_Cell' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_GetOwningPlayer_ReturnValue) == 0x000040, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Create_ReturnValue) == 0x000048, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_GetComponentByClass_ReturnValue) == 0x000060, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'BP_InventoryGrid_C_ConstructInvGrid::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Array_Get_Item_1) == 0x000070, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Array_Length_ReturnValue_1) == 0x000078, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Less_IntInt_ReturnValue_1) == 0x00007C, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Add_IntInt_ReturnValue_2) == 0x000080, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Percent_IntInt_ReturnValue) == 0x000084, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Divide_IntInt_ReturnValue) == 0x000088, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_AddChildToGrid_ReturnValue) == 0x000090, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_AddChildToGrid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Percent_IntInt_ReturnValue_1) == 0x000098, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Percent_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Divide_IntInt_ReturnValue_1) == 0x00009C, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_AddChildToUniformGrid_ReturnValue) == 0x0000A0, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_AddChildToUniformGrid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_GetCellCount_InventoryCells) == 0x0000A8, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_GetCellCount_InventoryCells' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000AC, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ConstructInvGrid, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_InventoryGrid_C_ConstructInvGrid::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_InventoryGrid.BP_InventoryGrid_C.ExecuteUbergraph_BP_InventoryGrid
// 0x0060 (0x0060 - 0x0000)
struct BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerInventory_C*                  CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_InventoryItemIcon_C*                CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D50[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MasterInventory_C*                  K2Node_Event_GridInventory;                        // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_1;            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerInventory_C*                  CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D51[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D52[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue;                    // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid) == 0x000008, "Wrong alignment on BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid");
static_assert(sizeof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid) == 0x000060, "Wrong size on BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, EntryPoint) == 0x000000, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, K2Node_Event_GridInventory) == 0x000028, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::K2Node_Event_GridInventory' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, CallFunc_GetOwningPlayer_ReturnValue_1) == 0x000030, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::CallFunc_GetOwningPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000038, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, CallFunc_IsValid_ReturnValue) == 0x000044, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, CallFunc_Less_IntInt_ReturnValue) == 0x000045, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, CallFunc_GetParent_ReturnValue) == 0x000050, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::CallFunc_GetParent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, CallFunc_IsValid_ReturnValue_2) == 0x000059, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid, CallFunc_IsValid_ReturnValue_3) == 0x00005A, "Member 'BP_InventoryGrid_C_ExecuteUbergraph_BP_InventoryGrid::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function BP_InventoryGrid.BP_InventoryGrid_C.GetCellCount
// 0x0008 (0x0008 - 0x0000)
struct BP_InventoryGrid_C_GetCellCount final
{
public:
	int32                                         InventoryCells;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryGrid_C_GetCellCount) == 0x000004, "Wrong alignment on BP_InventoryGrid_C_GetCellCount");
static_assert(sizeof(BP_InventoryGrid_C_GetCellCount) == 0x000008, "Wrong size on BP_InventoryGrid_C_GetCellCount");
static_assert(offsetof(BP_InventoryGrid_C_GetCellCount, InventoryCells) == 0x000000, "Member 'BP_InventoryGrid_C_GetCellCount::InventoryCells' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_GetCellCount, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_InventoryGrid_C_GetCellCount::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_InventoryGrid.BP_InventoryGrid_C.GetInvColumns
// 0x0008 (0x0008 - 0x0000)
struct BP_InventoryGrid_C_GetInvColumns final
{
public:
	int32                                         Columns;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryGrid_C_GetInvColumns) == 0x000004, "Wrong alignment on BP_InventoryGrid_C_GetInvColumns");
static_assert(sizeof(BP_InventoryGrid_C_GetInvColumns) == 0x000008, "Wrong size on BP_InventoryGrid_C_GetInvColumns");
static_assert(offsetof(BP_InventoryGrid_C_GetInvColumns, Columns) == 0x000000, "Member 'BP_InventoryGrid_C_GetInvColumns::Columns' has a wrong offset!");
static_assert(offsetof(BP_InventoryGrid_C_GetInvColumns, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_InventoryGrid_C_GetInvColumns::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_InventoryGrid.BP_InventoryGrid_C.SGK CellSlots
// 0x0010 (0x0010 - 0x0000)
struct BP_InventoryGrid_C_SGK_CellSlots final
{
public:
	TArray<class UBP_InventoryCell_C*>            Cells;                                             // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(BP_InventoryGrid_C_SGK_CellSlots) == 0x000008, "Wrong alignment on BP_InventoryGrid_C_SGK_CellSlots");
static_assert(sizeof(BP_InventoryGrid_C_SGK_CellSlots) == 0x000010, "Wrong size on BP_InventoryGrid_C_SGK_CellSlots");
static_assert(offsetof(BP_InventoryGrid_C_SGK_CellSlots, Cells) == 0x000000, "Member 'BP_InventoryGrid_C_SGK_CellSlots::Cells' has a wrong offset!");

// Function BP_InventoryGrid.BP_InventoryGrid_C.SGK ConstructGrid
// 0x0008 (0x0008 - 0x0000)
struct BP_InventoryGrid_C_SGK_ConstructGrid final
{
public:
	class UBP_MasterInventory_C*                  Param_GridInventory;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryGrid_C_SGK_ConstructGrid) == 0x000008, "Wrong alignment on BP_InventoryGrid_C_SGK_ConstructGrid");
static_assert(sizeof(BP_InventoryGrid_C_SGK_ConstructGrid) == 0x000008, "Wrong size on BP_InventoryGrid_C_SGK_ConstructGrid");
static_assert(offsetof(BP_InventoryGrid_C_SGK_ConstructGrid, Param_GridInventory) == 0x000000, "Member 'BP_InventoryGrid_C_SGK_ConstructGrid::Param_GridInventory' has a wrong offset!");

// Function BP_InventoryGrid.BP_InventoryGrid_C.SGK InvItemSlots
// 0x0010 (0x0010 - 0x0000)
struct BP_InventoryGrid_C_SGK_InvItemSlots final
{
public:
	TArray<class UBP_InventoryItemIcon_C*>        ItemInvWidgets;                                    // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(BP_InventoryGrid_C_SGK_InvItemSlots) == 0x000008, "Wrong alignment on BP_InventoryGrid_C_SGK_InvItemSlots");
static_assert(sizeof(BP_InventoryGrid_C_SGK_InvItemSlots) == 0x000010, "Wrong size on BP_InventoryGrid_C_SGK_InvItemSlots");
static_assert(offsetof(BP_InventoryGrid_C_SGK_InvItemSlots, ItemInvWidgets) == 0x000000, "Member 'BP_InventoryGrid_C_SGK_InvItemSlots::ItemInvWidgets' has a wrong offset!");

}

