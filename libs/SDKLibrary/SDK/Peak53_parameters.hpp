#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Peak53

#include "Basic.hpp"

#include "Peak53_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function Peak53.PKHoldable.GetAnimationSet
// 0x00F8 (0x00F8 - 0x0000)
struct PKHoldable_GetAnimationSet final
{
public:
	struct FPKAnimationSetData                    Animations;                                        // 0x0000(0x00F8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKHoldable_GetAnimationSet) == 0x000008, "Wrong alignment on PKHoldable_GetAnimationSet");
static_assert(sizeof(PKHoldable_GetAnimationSet) == 0x0000F8, "Wrong size on PKHoldable_GetAnimationSet");
static_assert(offsetof(PKHoldable_GetAnimationSet, Animations) == 0x000000, "Member 'PKHoldable_GetAnimationSet::Animations' has a wrong offset!");

// Function Peak53.PKHoldable.GetEquipMontage
// 0x0010 (0x0010 - 0x0000)
struct PKHoldable_GetEquipMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F40[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PKHoldable_GetEquipMontage) == 0x000008, "Wrong alignment on PKHoldable_GetEquipMontage");
static_assert(sizeof(PKHoldable_GetEquipMontage) == 0x000010, "Wrong size on PKHoldable_GetEquipMontage");
static_assert(offsetof(PKHoldable_GetEquipMontage, Montage) == 0x000000, "Member 'PKHoldable_GetEquipMontage::Montage' has a wrong offset!");
static_assert(offsetof(PKHoldable_GetEquipMontage, ReturnValue) == 0x000008, "Member 'PKHoldable_GetEquipMontage::ReturnValue' has a wrong offset!");

// Function Peak53.PKHoldable.GetReloadMontage
// 0x0010 (0x0010 - 0x0000)
struct PKHoldable_GetReloadMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F41[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PKHoldable_GetReloadMontage) == 0x000008, "Wrong alignment on PKHoldable_GetReloadMontage");
static_assert(sizeof(PKHoldable_GetReloadMontage) == 0x000010, "Wrong size on PKHoldable_GetReloadMontage");
static_assert(offsetof(PKHoldable_GetReloadMontage, Montage) == 0x000000, "Member 'PKHoldable_GetReloadMontage::Montage' has a wrong offset!");
static_assert(offsetof(PKHoldable_GetReloadMontage, ReturnValue) == 0x000008, "Member 'PKHoldable_GetReloadMontage::ReturnValue' has a wrong offset!");

// Function Peak53.PKHoldable.GetUnEquipMontage
// 0x0010 (0x0010 - 0x0000)
struct PKHoldable_GetUnEquipMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F42[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PKHoldable_GetUnEquipMontage) == 0x000008, "Wrong alignment on PKHoldable_GetUnEquipMontage");
static_assert(sizeof(PKHoldable_GetUnEquipMontage) == 0x000010, "Wrong size on PKHoldable_GetUnEquipMontage");
static_assert(offsetof(PKHoldable_GetUnEquipMontage, Montage) == 0x000000, "Member 'PKHoldable_GetUnEquipMontage::Montage' has a wrong offset!");
static_assert(offsetof(PKHoldable_GetUnEquipMontage, ReturnValue) == 0x000008, "Member 'PKHoldable_GetUnEquipMontage::ReturnValue' has a wrong offset!");

// Function Peak53.PKAssetManager.GetHoldableAnimations
// 0x0100 (0x0100 - 0x0000)
struct PKAssetManager_GetHoldableAnimations final
{
public:
	class FName                                   HoldableClassName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPKAnimationSetData                    OutAnimations;                                     // 0x0008(0x00F8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKAssetManager_GetHoldableAnimations) == 0x000008, "Wrong alignment on PKAssetManager_GetHoldableAnimations");
static_assert(sizeof(PKAssetManager_GetHoldableAnimations) == 0x000100, "Wrong size on PKAssetManager_GetHoldableAnimations");
static_assert(offsetof(PKAssetManager_GetHoldableAnimations, HoldableClassName) == 0x000000, "Member 'PKAssetManager_GetHoldableAnimations::HoldableClassName' has a wrong offset!");
static_assert(offsetof(PKAssetManager_GetHoldableAnimations, OutAnimations) == 0x000008, "Member 'PKAssetManager_GetHoldableAnimations::OutAnimations' has a wrong offset!");

// Function Peak53.PKCharacter.AddGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct PKCharacter_AddGameplayTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKCharacter_AddGameplayTag) == 0x000004, "Wrong alignment on PKCharacter_AddGameplayTag");
static_assert(sizeof(PKCharacter_AddGameplayTag) == 0x000008, "Wrong size on PKCharacter_AddGameplayTag");
static_assert(offsetof(PKCharacter_AddGameplayTag, Tag) == 0x000000, "Member 'PKCharacter_AddGameplayTag::Tag' has a wrong offset!");

// Function Peak53.PKCharacter.RemoveGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct PKCharacter_RemoveGameplayTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKCharacter_RemoveGameplayTag) == 0x000004, "Wrong alignment on PKCharacter_RemoveGameplayTag");
static_assert(sizeof(PKCharacter_RemoveGameplayTag) == 0x000008, "Wrong size on PKCharacter_RemoveGameplayTag");
static_assert(offsetof(PKCharacter_RemoveGameplayTag, Tag) == 0x000000, "Member 'PKCharacter_RemoveGameplayTag::Tag' has a wrong offset!");

// Function Peak53.PKCharacter.CanDance
// 0x0001 (0x0001 - 0x0000)
struct PKCharacter_CanDance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKCharacter_CanDance) == 0x000001, "Wrong alignment on PKCharacter_CanDance");
static_assert(sizeof(PKCharacter_CanDance) == 0x000001, "Wrong size on PKCharacter_CanDance");
static_assert(offsetof(PKCharacter_CanDance, ReturnValue) == 0x000000, "Member 'PKCharacter_CanDance::ReturnValue' has a wrong offset!");

// Function Peak53.PKCharacter.GetGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct PKCharacter_GetGameplayTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKCharacter_GetGameplayTags) == 0x000008, "Wrong alignment on PKCharacter_GetGameplayTags");
static_assert(sizeof(PKCharacter_GetGameplayTags) == 0x000020, "Wrong size on PKCharacter_GetGameplayTags");
static_assert(offsetof(PKCharacter_GetGameplayTags, ReturnValue) == 0x000000, "Member 'PKCharacter_GetGameplayTags::ReturnValue' has a wrong offset!");

// Function Peak53.PKCharacter.HasGameplayTagExact
// 0x000C (0x000C - 0x0000)
struct PKCharacter_HasGameplayTagExact final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F44[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PKCharacter_HasGameplayTagExact) == 0x000004, "Wrong alignment on PKCharacter_HasGameplayTagExact");
static_assert(sizeof(PKCharacter_HasGameplayTagExact) == 0x00000C, "Wrong size on PKCharacter_HasGameplayTagExact");
static_assert(offsetof(PKCharacter_HasGameplayTagExact, Tag) == 0x000000, "Member 'PKCharacter_HasGameplayTagExact::Tag' has a wrong offset!");
static_assert(offsetof(PKCharacter_HasGameplayTagExact, ReturnValue) == 0x000008, "Member 'PKCharacter_HasGameplayTagExact::ReturnValue' has a wrong offset!");

// Function Peak53.PKCharacter.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct PKCharacter_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKCharacter_IsAlive) == 0x000001, "Wrong alignment on PKCharacter_IsAlive");
static_assert(sizeof(PKCharacter_IsAlive) == 0x000001, "Wrong size on PKCharacter_IsAlive");
static_assert(offsetof(PKCharacter_IsAlive, ReturnValue) == 0x000000, "Member 'PKCharacter_IsAlive::ReturnValue' has a wrong offset!");

// Function Peak53.PKCharacter.WantsWeaponHot
// 0x0001 (0x0001 - 0x0000)
struct PKCharacter_WantsWeaponHot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKCharacter_WantsWeaponHot) == 0x000001, "Wrong alignment on PKCharacter_WantsWeaponHot");
static_assert(sizeof(PKCharacter_WantsWeaponHot) == 0x000001, "Wrong size on PKCharacter_WantsWeaponHot");
static_assert(offsetof(PKCharacter_WantsWeaponHot, ReturnValue) == 0x000000, "Member 'PKCharacter_WantsWeaponHot::ReturnValue' has a wrong offset!");

// Function Peak53.PKChatWidget.OnUpdateMessages
// 0x0118 (0x0118 - 0x0000)
struct PKChatWidget_OnUpdateMessages final
{
public:
	struct FPKChatMessageArray                    Messages;                                          // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKChatWidget_OnUpdateMessages) == 0x000008, "Wrong alignment on PKChatWidget_OnUpdateMessages");
static_assert(sizeof(PKChatWidget_OnUpdateMessages) == 0x000118, "Wrong size on PKChatWidget_OnUpdateMessages");
static_assert(offsetof(PKChatWidget_OnUpdateMessages, Messages) == 0x000000, "Member 'PKChatWidget_OnUpdateMessages::Messages' has a wrong offset!");

// Function Peak53.PKChatWidget.PrintMessage
// 0x0048 (0x0048 - 0x0000)
struct PKChatWidget_PrintMessage final
{
public:
	struct FPKChatMessage                         Message;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKChatWidget_PrintMessage) == 0x000008, "Wrong alignment on PKChatWidget_PrintMessage");
static_assert(sizeof(PKChatWidget_PrintMessage) == 0x000048, "Wrong size on PKChatWidget_PrintMessage");
static_assert(offsetof(PKChatWidget_PrintMessage, Message) == 0x000000, "Member 'PKChatWidget_PrintMessage::Message' has a wrong offset!");

// Function Peak53.PKLocalDeveloperSettings.ShouldPlayIntro
// 0x0001 (0x0001 - 0x0000)
struct PKLocalDeveloperSettings_ShouldPlayIntro final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKLocalDeveloperSettings_ShouldPlayIntro) == 0x000001, "Wrong alignment on PKLocalDeveloperSettings_ShouldPlayIntro");
static_assert(sizeof(PKLocalDeveloperSettings_ShouldPlayIntro) == 0x000001, "Wrong size on PKLocalDeveloperSettings_ShouldPlayIntro");
static_assert(offsetof(PKLocalDeveloperSettings_ShouldPlayIntro, ReturnValue) == 0x000000, "Member 'PKLocalDeveloperSettings_ShouldPlayIntro::ReturnValue' has a wrong offset!");

// Function Peak53.PKPlayerController.GetAllMessages
// 0x0118 (0x0118 - 0x0000)
struct PKPlayerController_GetAllMessages final
{
public:
	struct FPKChatMessageArray                    OutMessages;                                       // 0x0000(0x0118)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKPlayerController_GetAllMessages) == 0x000008, "Wrong alignment on PKPlayerController_GetAllMessages");
static_assert(sizeof(PKPlayerController_GetAllMessages) == 0x000118, "Wrong size on PKPlayerController_GetAllMessages");
static_assert(offsetof(PKPlayerController_GetAllMessages, OutMessages) == 0x000000, "Member 'PKPlayerController_GetAllMessages::OutMessages' has a wrong offset!");

// Function Peak53.PKPlayerController.GetMapIntroSettings
// 0x0028 (0x0028 - 0x0000)
struct PKPlayerController_GetMapIntroSettings final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFound;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F47[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPKMapIntroSettings                    OutSettings;                                       // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKPlayerController_GetMapIntroSettings) == 0x000008, "Wrong alignment on PKPlayerController_GetMapIntroSettings");
static_assert(sizeof(PKPlayerController_GetMapIntroSettings) == 0x000028, "Wrong size on PKPlayerController_GetMapIntroSettings");
static_assert(offsetof(PKPlayerController_GetMapIntroSettings, LevelName) == 0x000000, "Member 'PKPlayerController_GetMapIntroSettings::LevelName' has a wrong offset!");
static_assert(offsetof(PKPlayerController_GetMapIntroSettings, bFound) == 0x000010, "Member 'PKPlayerController_GetMapIntroSettings::bFound' has a wrong offset!");
static_assert(offsetof(PKPlayerController_GetMapIntroSettings, OutSettings) == 0x000018, "Member 'PKPlayerController_GetMapIntroSettings::OutSettings' has a wrong offset!");

// Function Peak53.PKPlayerController.OnUpdateChat
// 0x0118 (0x0118 - 0x0000)
struct PKPlayerController_OnUpdateChat final
{
public:
	struct FPKChatMessageArray                    Messages;                                          // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKPlayerController_OnUpdateChat) == 0x000008, "Wrong alignment on PKPlayerController_OnUpdateChat");
static_assert(sizeof(PKPlayerController_OnUpdateChat) == 0x000118, "Wrong size on PKPlayerController_OnUpdateChat");
static_assert(offsetof(PKPlayerController_OnUpdateChat, Messages) == 0x000000, "Member 'PKPlayerController_OnUpdateChat::Messages' has a wrong offset!");

// Function Peak53.PKPlayerController.SendChatMessage
// 0x0048 (0x0048 - 0x0000)
struct PKPlayerController_SendChatMessage final
{
public:
	struct FPKChatMessage                         Message;                                           // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKPlayerController_SendChatMessage) == 0x000008, "Wrong alignment on PKPlayerController_SendChatMessage");
static_assert(sizeof(PKPlayerController_SendChatMessage) == 0x000048, "Wrong size on PKPlayerController_SendChatMessage");
static_assert(offsetof(PKPlayerController_SendChatMessage, Message) == 0x000000, "Member 'PKPlayerController_SendChatMessage::Message' has a wrong offset!");

// Function Peak53.PKPlayerController.SendChatMessage_Server
// 0x0048 (0x0048 - 0x0000)
struct PKPlayerController_SendChatMessage_Server final
{
public:
	struct FPKChatMessage                         Message;                                           // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKPlayerController_SendChatMessage_Server) == 0x000008, "Wrong alignment on PKPlayerController_SendChatMessage_Server");
static_assert(sizeof(PKPlayerController_SendChatMessage_Server) == 0x000048, "Wrong size on PKPlayerController_SendChatMessage_Server");
static_assert(offsetof(PKPlayerController_SendChatMessage_Server, Message) == 0x000000, "Member 'PKPlayerController_SendChatMessage_Server::Message' has a wrong offset!");

// Function Peak53.PKProfilingWidget.GetTraceCommand
// 0x0010 (0x0010 - 0x0000)
struct PKProfilingWidget_GetTraceCommand final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PKProfilingWidget_GetTraceCommand) == 0x000008, "Wrong alignment on PKProfilingWidget_GetTraceCommand");
static_assert(sizeof(PKProfilingWidget_GetTraceCommand) == 0x000010, "Wrong size on PKProfilingWidget_GetTraceCommand");
static_assert(offsetof(PKProfilingWidget_GetTraceCommand, ReturnValue) == 0x000000, "Member 'PKProfilingWidget_GetTraceCommand::ReturnValue' has a wrong offset!");

// Function Peak53.PeakWeaponHotSubsystem.AddPlayer
// 0x0010 (0x0010 - 0x0000)
struct PeakWeaponHotSubsystem_AddPlayer final
{
public:
	bool                                          bIsTeam1;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F4B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APKCharacter*                           Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeakWeaponHotSubsystem_AddPlayer) == 0x000008, "Wrong alignment on PeakWeaponHotSubsystem_AddPlayer");
static_assert(sizeof(PeakWeaponHotSubsystem_AddPlayer) == 0x000010, "Wrong size on PeakWeaponHotSubsystem_AddPlayer");
static_assert(offsetof(PeakWeaponHotSubsystem_AddPlayer, bIsTeam1) == 0x000000, "Member 'PeakWeaponHotSubsystem_AddPlayer::bIsTeam1' has a wrong offset!");
static_assert(offsetof(PeakWeaponHotSubsystem_AddPlayer, Player) == 0x000008, "Member 'PeakWeaponHotSubsystem_AddPlayer::Player' has a wrong offset!");

// Function Peak53.PeakWeaponHotSubsystem.RemovePlayer
// 0x0010 (0x0010 - 0x0000)
struct PeakWeaponHotSubsystem_RemovePlayer final
{
public:
	bool                                          bIsTeam1;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F4C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class APKCharacter*                     Player;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeakWeaponHotSubsystem_RemovePlayer) == 0x000008, "Wrong alignment on PeakWeaponHotSubsystem_RemovePlayer");
static_assert(sizeof(PeakWeaponHotSubsystem_RemovePlayer) == 0x000010, "Wrong size on PeakWeaponHotSubsystem_RemovePlayer");
static_assert(offsetof(PeakWeaponHotSubsystem_RemovePlayer, bIsTeam1) == 0x000000, "Member 'PeakWeaponHotSubsystem_RemovePlayer::bIsTeam1' has a wrong offset!");
static_assert(offsetof(PeakWeaponHotSubsystem_RemovePlayer, Player) == 0x000008, "Member 'PeakWeaponHotSubsystem_RemovePlayer::Player' has a wrong offset!");

}

