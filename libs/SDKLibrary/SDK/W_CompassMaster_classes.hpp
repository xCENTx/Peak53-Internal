#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_CompassMaster

#include "Basic.hpp"

#include "E_CI_PositionMode_structs.hpp"
#include "E_C_CalculateDistanceFrom_structs.hpp"
#include "E_C_RotationMode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_CompassMaster.W_CompassMaster_C
// 0x0108 (0x0380 - 0x0278)
class UW_CompassMaster_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_Compas;                                      // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Root;                                      // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_CompassIndicatorMaster_C*            W_CompassIndicatorMaster;                          // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture*                               CompassTexture;                                    // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               CompassMask;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CompassColor;                                      // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CompassFOV;                                        // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        CompassAdditionalAngle;                            // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_C_RotationMode                              CompassRotationMode;                               // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_42E5[0x7];                                     // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CompassOffscreen;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              CompassLocalSize;                                  // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlayerRotationYaw;                                 // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CompassMaterial;                                   // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              IndicatorSize;                                     // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Indicator_OffsetY;                                 // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FSlateFontInfo                         DistanceTextFont;                                  // 0x0310(0x0058)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        DistanceText_OffsetY;                              // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         SecondTimer;                                       // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedUpdateDistance;                                // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42E6[0x3];                                     // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CompassPositionClamp;                              // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void AddIndicator(class UBP_CompassIndicatorComponent_C* TargetComponent);
	void CalcIndicatorPosition(E_CI_PositionMode IndicatorPositionMode, const struct FVector& TargetLocation, double* PositionX);
	void ExecuteUbergraph_W_CompassMaster(int32 EntryPoint);
	void GetCompassAngle(E_C_RotationMode IndicatorPositionMode, float* Z__Yaw_);
	struct FVector GetPlayerLocationByDistanceMode(E_C_CalculateDistanceFrom GetDistanceMode);
	void PreConstruct(bool IsDesignTime);
	void RemoveIndicator(class UBP_CompassIndicatorComponent_C* TargetComponent);
	void SetupCompassIndicators();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateCompassSettings();
	void UpdateIndicators();
	void UpdatePreviewIndicatorSettitngs();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_CompassMaster_C">();
	}
	static class UW_CompassMaster_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_CompassMaster_C>();
	}
};
static_assert(alignof(UW_CompassMaster_C) == 0x000008, "Wrong alignment on UW_CompassMaster_C");
static_assert(sizeof(UW_CompassMaster_C) == 0x000380, "Wrong size on UW_CompassMaster_C");
static_assert(offsetof(UW_CompassMaster_C, UberGraphFrame) == 0x000278, "Member 'UW_CompassMaster_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, Image_Compas) == 0x000280, "Member 'UW_CompassMaster_C::Image_Compas' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, Overlay_Root) == 0x000288, "Member 'UW_CompassMaster_C::Overlay_Root' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, W_CompassIndicatorMaster) == 0x000290, "Member 'UW_CompassMaster_C::W_CompassIndicatorMaster' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassTexture) == 0x000298, "Member 'UW_CompassMaster_C::CompassTexture' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassMask) == 0x0002A0, "Member 'UW_CompassMaster_C::CompassMask' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassColor) == 0x0002A8, "Member 'UW_CompassMaster_C::CompassColor' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassFOV) == 0x0002B8, "Member 'UW_CompassMaster_C::CompassFOV' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassAdditionalAngle) == 0x0002C0, "Member 'UW_CompassMaster_C::CompassAdditionalAngle' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassRotationMode) == 0x0002C8, "Member 'UW_CompassMaster_C::CompassRotationMode' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassOffscreen) == 0x0002D0, "Member 'UW_CompassMaster_C::CompassOffscreen' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassLocalSize) == 0x0002D8, "Member 'UW_CompassMaster_C::CompassLocalSize' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, PlayerRotationYaw) == 0x0002E8, "Member 'UW_CompassMaster_C::PlayerRotationYaw' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassMaterial) == 0x0002F0, "Member 'UW_CompassMaster_C::CompassMaterial' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, IndicatorSize) == 0x0002F8, "Member 'UW_CompassMaster_C::IndicatorSize' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, Indicator_OffsetY) == 0x000308, "Member 'UW_CompassMaster_C::Indicator_OffsetY' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, DistanceTextFont) == 0x000310, "Member 'UW_CompassMaster_C::DistanceTextFont' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, DistanceText_OffsetY) == 0x000368, "Member 'UW_CompassMaster_C::DistanceText_OffsetY' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, SecondTimer) == 0x000370, "Member 'UW_CompassMaster_C::SecondTimer' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, NeedUpdateDistance) == 0x000374, "Member 'UW_CompassMaster_C::NeedUpdateDistance' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassPositionClamp) == 0x000378, "Member 'UW_CompassMaster_C::CompassPositionClamp' has a wrong offset!");

}

