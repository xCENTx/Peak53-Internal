#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EOSCore

#include "Basic.hpp"

#include "EOSCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "OnlineSubsystemEOSCore_structs.hpp"


namespace SDK::Params
{

// Function EOSCore.CoreAchievements.EOSAchievementsAddNotifyAchievementsUnlockedV2
// 0x0020 (0x0020 - 0x0000)
struct CoreAchievements_EOSAchievementsAddNotifyAchievementsUnlockedV2 final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSAchievementsOnAchievementsUnlockedCallbackV2Info& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAchievements_EOSAchievementsAddNotifyAchievementsUnlockedV2) == 0x000008, "Wrong alignment on CoreAchievements_EOSAchievementsAddNotifyAchievementsUnlockedV2");
static_assert(sizeof(CoreAchievements_EOSAchievementsAddNotifyAchievementsUnlockedV2) == 0x000020, "Wrong size on CoreAchievements_EOSAchievementsAddNotifyAchievementsUnlockedV2");
static_assert(offsetof(CoreAchievements_EOSAchievementsAddNotifyAchievementsUnlockedV2, WorldContextObject) == 0x000000, "Member 'CoreAchievements_EOSAchievementsAddNotifyAchievementsUnlockedV2::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsAddNotifyAchievementsUnlockedV2, Callback) == 0x000008, "Member 'CoreAchievements_EOSAchievementsAddNotifyAchievementsUnlockedV2::Callback' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsAddNotifyAchievementsUnlockedV2, ReturnValue) == 0x000018, "Member 'CoreAchievements_EOSAchievementsAddNotifyAchievementsUnlockedV2::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAchievements.EOSAchievementsCopyAchievementDefinitionV2ByAchievementId
// 0x00C0 (0x00C0 - 0x0000)
struct CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByAchievementId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAchievementsCopyAchievementDefinitionV2ByAchievementIdOptions Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FEOSAchievementsDefinitionV2           OutDefinition;                                     // 0x0018(0x00A0)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2882[0x7];                                     // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByAchievementId) == 0x000008, "Wrong alignment on CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByAchievementId");
static_assert(sizeof(CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByAchievementId) == 0x0000C0, "Wrong size on CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByAchievementId");
static_assert(offsetof(CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByAchievementId, WorldContextObject) == 0x000000, "Member 'CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByAchievementId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByAchievementId, Options) == 0x000008, "Member 'CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByAchievementId::Options' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByAchievementId, OutDefinition) == 0x000018, "Member 'CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByAchievementId::OutDefinition' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByAchievementId, ReturnValue) == 0x0000B8, "Member 'CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByAchievementId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAchievements.EOSAchievementsCopyAchievementDefinitionV2ByIndex
// 0x00B8 (0x00B8 - 0x0000)
struct CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAchievementsCopyAchievementDefinitionV2ByIndexOptions Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2883[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSAchievementsDefinitionV2           OutDefinition;                                     // 0x0010(0x00A0)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2884[0x7];                                     // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByIndex) == 0x000008, "Wrong alignment on CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByIndex");
static_assert(sizeof(CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByIndex) == 0x0000B8, "Wrong size on CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByIndex");
static_assert(offsetof(CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByIndex, WorldContextObject) == 0x000000, "Member 'CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByIndex, Options) == 0x000008, "Member 'CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByIndex, OutDefinition) == 0x000010, "Member 'CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByIndex::OutDefinition' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByIndex, ReturnValue) == 0x0000B0, "Member 'CoreAchievements_EOSAchievementsCopyAchievementDefinitionV2ByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAchievements.EOSAchievementsCopyPlayerAchievementByIndex
// 0x00E8 (0x00E8 - 0x0000)
struct CoreAchievements_EOSAchievementsCopyPlayerAchievementByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAchievementsCopyPlayerAchievementByIndexOptions Options;                                           // 0x0008(0x0050)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSAchievementsPlayerAchievement      OutAchievement;                                    // 0x0058(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2885[0x7];                                     // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAchievements_EOSAchievementsCopyPlayerAchievementByIndex) == 0x000008, "Wrong alignment on CoreAchievements_EOSAchievementsCopyPlayerAchievementByIndex");
static_assert(sizeof(CoreAchievements_EOSAchievementsCopyPlayerAchievementByIndex) == 0x0000E8, "Wrong size on CoreAchievements_EOSAchievementsCopyPlayerAchievementByIndex");
static_assert(offsetof(CoreAchievements_EOSAchievementsCopyPlayerAchievementByIndex, WorldContextObject) == 0x000000, "Member 'CoreAchievements_EOSAchievementsCopyPlayerAchievementByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsCopyPlayerAchievementByIndex, Options) == 0x000008, "Member 'CoreAchievements_EOSAchievementsCopyPlayerAchievementByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsCopyPlayerAchievementByIndex, OutAchievement) == 0x000058, "Member 'CoreAchievements_EOSAchievementsCopyPlayerAchievementByIndex::OutAchievement' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsCopyPlayerAchievementByIndex, ReturnValue) == 0x0000E0, "Member 'CoreAchievements_EOSAchievementsCopyPlayerAchievementByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAchievements.EOSAchievementsGetAchievementDefinitionCount
// 0x0010 (0x0010 - 0x0000)
struct CoreAchievements_EOSAchievementsGetAchievementDefinitionCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAchievementsGetAchievementDefinitionCountOptions Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAchievements_EOSAchievementsGetAchievementDefinitionCount) == 0x000008, "Wrong alignment on CoreAchievements_EOSAchievementsGetAchievementDefinitionCount");
static_assert(sizeof(CoreAchievements_EOSAchievementsGetAchievementDefinitionCount) == 0x000010, "Wrong size on CoreAchievements_EOSAchievementsGetAchievementDefinitionCount");
static_assert(offsetof(CoreAchievements_EOSAchievementsGetAchievementDefinitionCount, WorldContextObject) == 0x000000, "Member 'CoreAchievements_EOSAchievementsGetAchievementDefinitionCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsGetAchievementDefinitionCount, Options) == 0x000008, "Member 'CoreAchievements_EOSAchievementsGetAchievementDefinitionCount::Options' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsGetAchievementDefinitionCount, ReturnValue) == 0x00000C, "Member 'CoreAchievements_EOSAchievementsGetAchievementDefinitionCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAchievements.EOSAchievementsGetPlayerAchievementCount
// 0x0038 (0x0038 - 0x0000)
struct CoreAchievements_EOSAchievementsGetPlayerAchievementCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAchievementsGetPlayerAchievementCountOptions Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2886[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAchievements_EOSAchievementsGetPlayerAchievementCount) == 0x000008, "Wrong alignment on CoreAchievements_EOSAchievementsGetPlayerAchievementCount");
static_assert(sizeof(CoreAchievements_EOSAchievementsGetPlayerAchievementCount) == 0x000038, "Wrong size on CoreAchievements_EOSAchievementsGetPlayerAchievementCount");
static_assert(offsetof(CoreAchievements_EOSAchievementsGetPlayerAchievementCount, WorldContextObject) == 0x000000, "Member 'CoreAchievements_EOSAchievementsGetPlayerAchievementCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsGetPlayerAchievementCount, Options) == 0x000008, "Member 'CoreAchievements_EOSAchievementsGetPlayerAchievementCount::Options' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsGetPlayerAchievementCount, ReturnValue) == 0x000030, "Member 'CoreAchievements_EOSAchievementsGetPlayerAchievementCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAchievements.EOSAchievementsRemoveNotifyAchievementsUnlocked
// 0x0010 (0x0010 - 0x0000)
struct CoreAchievements_EOSAchievementsRemoveNotifyAchievementsUnlocked final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAchievements_EOSAchievementsRemoveNotifyAchievementsUnlocked) == 0x000008, "Wrong alignment on CoreAchievements_EOSAchievementsRemoveNotifyAchievementsUnlocked");
static_assert(sizeof(CoreAchievements_EOSAchievementsRemoveNotifyAchievementsUnlocked) == 0x000010, "Wrong size on CoreAchievements_EOSAchievementsRemoveNotifyAchievementsUnlocked");
static_assert(offsetof(CoreAchievements_EOSAchievementsRemoveNotifyAchievementsUnlocked, WorldContextObject) == 0x000000, "Member 'CoreAchievements_EOSAchievementsRemoveNotifyAchievementsUnlocked::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsRemoveNotifyAchievementsUnlocked, ID) == 0x000008, "Member 'CoreAchievements_EOSAchievementsRemoveNotifyAchievementsUnlocked::ID' has a wrong offset!");

// Function EOSCore.CoreAchievements.GetAchievements
// 0x0010 (0x0010 - 0x0000)
struct CoreAchievements_GetAchievements final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreAchievements*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAchievements_GetAchievements) == 0x000008, "Wrong alignment on CoreAchievements_GetAchievements");
static_assert(sizeof(CoreAchievements_GetAchievements) == 0x000010, "Wrong size on CoreAchievements_GetAchievements");
static_assert(offsetof(CoreAchievements_GetAchievements, WorldContextObject) == 0x000000, "Member 'CoreAchievements_GetAchievements::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAchievements_GetAchievements, ReturnValue) == 0x000008, "Member 'CoreAchievements_GetAchievements::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAchievements.EOSAchievementsQueryDefinitions
// 0x0040 (0x0040 - 0x0000)
struct CoreAchievements_EOSAchievementsQueryDefinitions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAchievementsQueryDefinitionsOptions Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2887[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSAchievementsOnQueryDefinitionsCompleteCallbackInfo& Data)> Callback;                                          // 0x002C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2888[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAchievements_EOSAchievementsQueryDefinitions) == 0x000008, "Wrong alignment on CoreAchievements_EOSAchievementsQueryDefinitions");
static_assert(sizeof(CoreAchievements_EOSAchievementsQueryDefinitions) == 0x000040, "Wrong size on CoreAchievements_EOSAchievementsQueryDefinitions");
static_assert(offsetof(CoreAchievements_EOSAchievementsQueryDefinitions, WorldContextObject) == 0x000000, "Member 'CoreAchievements_EOSAchievementsQueryDefinitions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsQueryDefinitions, Options) == 0x000008, "Member 'CoreAchievements_EOSAchievementsQueryDefinitions::Options' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsQueryDefinitions, Callback) == 0x00002C, "Member 'CoreAchievements_EOSAchievementsQueryDefinitions::Callback' has a wrong offset!");

// Function EOSCore.CoreAchievements.EOSAchievementsQueryPlayerAchievements
// 0x0060 (0x0060 - 0x0000)
struct CoreAchievements_EOSAchievementsQueryPlayerAchievements final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAchievementsQueryPlayerAchievementsOptions Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSAchievementsOnQueryPlayerAchievementsCompleteCallbackInfo& Data)> Callback;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAchievements_EOSAchievementsQueryPlayerAchievements) == 0x000008, "Wrong alignment on CoreAchievements_EOSAchievementsQueryPlayerAchievements");
static_assert(sizeof(CoreAchievements_EOSAchievementsQueryPlayerAchievements) == 0x000060, "Wrong size on CoreAchievements_EOSAchievementsQueryPlayerAchievements");
static_assert(offsetof(CoreAchievements_EOSAchievementsQueryPlayerAchievements, WorldContextObject) == 0x000000, "Member 'CoreAchievements_EOSAchievementsQueryPlayerAchievements::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsQueryPlayerAchievements, Options) == 0x000008, "Member 'CoreAchievements_EOSAchievementsQueryPlayerAchievements::Options' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsQueryPlayerAchievements, Callback) == 0x000050, "Member 'CoreAchievements_EOSAchievementsQueryPlayerAchievements::Callback' has a wrong offset!");

// Function EOSCore.CoreAchievements.EOSAchievementsUnlockAchievements
// 0x0050 (0x0050 - 0x0000)
struct CoreAchievements_EOSAchievementsUnlockAchievements final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAchievementsUnlockAchievementsOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSAchievementsOnUnlockAchievementsCompleteCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAchievements_EOSAchievementsUnlockAchievements) == 0x000008, "Wrong alignment on CoreAchievements_EOSAchievementsUnlockAchievements");
static_assert(sizeof(CoreAchievements_EOSAchievementsUnlockAchievements) == 0x000050, "Wrong size on CoreAchievements_EOSAchievementsUnlockAchievements");
static_assert(offsetof(CoreAchievements_EOSAchievementsUnlockAchievements, WorldContextObject) == 0x000000, "Member 'CoreAchievements_EOSAchievementsUnlockAchievements::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsUnlockAchievements, Options) == 0x000008, "Member 'CoreAchievements_EOSAchievementsUnlockAchievements::Options' has a wrong offset!");
static_assert(offsetof(CoreAchievements_EOSAchievementsUnlockAchievements, Callback) == 0x000040, "Member 'CoreAchievements_EOSAchievementsUnlockAchievements::Callback' has a wrong offset!");

// Function EOSCore.EOSCoreAchievementsQueryDefinitions.EOSAchievementsQueryDefinitionsAsync
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreAchievementsQueryDefinitions_EOSAchievementsQueryDefinitionsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAchievementsQueryDefinitionsOptions Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_288B[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEOSCoreAchievementsQueryDefinitions*   ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreAchievementsQueryDefinitions_EOSAchievementsQueryDefinitionsAsync) == 0x000008, "Wrong alignment on EOSCoreAchievementsQueryDefinitions_EOSAchievementsQueryDefinitionsAsync");
static_assert(sizeof(EOSCoreAchievementsQueryDefinitions_EOSAchievementsQueryDefinitionsAsync) == 0x000038, "Wrong size on EOSCoreAchievementsQueryDefinitions_EOSAchievementsQueryDefinitionsAsync");
static_assert(offsetof(EOSCoreAchievementsQueryDefinitions_EOSAchievementsQueryDefinitionsAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreAchievementsQueryDefinitions_EOSAchievementsQueryDefinitionsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreAchievementsQueryDefinitions_EOSAchievementsQueryDefinitionsAsync, Options) == 0x000008, "Member 'EOSCoreAchievementsQueryDefinitions_EOSAchievementsQueryDefinitionsAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreAchievementsQueryDefinitions_EOSAchievementsQueryDefinitionsAsync, ReturnValue) == 0x000030, "Member 'EOSCoreAchievementsQueryDefinitions_EOSAchievementsQueryDefinitionsAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreAchievementsQueryDefinitions.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreAchievementsQueryDefinitions_HandleCallback final
{
public:
	struct FEOSAchievementsOnQueryDefinitionsCompleteCallbackInfo Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_288C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreAchievementsQueryDefinitions_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreAchievementsQueryDefinitions_HandleCallback");
static_assert(sizeof(EOSCoreAchievementsQueryDefinitions_HandleCallback) == 0x000018, "Wrong size on EOSCoreAchievementsQueryDefinitions_HandleCallback");
static_assert(offsetof(EOSCoreAchievementsQueryDefinitions_HandleCallback, Data) == 0x000000, "Member 'EOSCoreAchievementsQueryDefinitions_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreAchievementsQueryDefinitions_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreAchievementsQueryDefinitions_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreAchievementsQueryPlayerAchievements.EOSAchievementsQueryPlayerAchievementsAsync
// 0x0058 (0x0058 - 0x0000)
struct EOSCoreAchievementsQueryPlayerAchievements_EOSAchievementsQueryPlayerAchievementsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAchievementsQueryPlayerAchievementsOptions Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreAchievementsQueryPlayerAchievements* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreAchievementsQueryPlayerAchievements_EOSAchievementsQueryPlayerAchievementsAsync) == 0x000008, "Wrong alignment on EOSCoreAchievementsQueryPlayerAchievements_EOSAchievementsQueryPlayerAchievementsAsync");
static_assert(sizeof(EOSCoreAchievementsQueryPlayerAchievements_EOSAchievementsQueryPlayerAchievementsAsync) == 0x000058, "Wrong size on EOSCoreAchievementsQueryPlayerAchievements_EOSAchievementsQueryPlayerAchievementsAsync");
static_assert(offsetof(EOSCoreAchievementsQueryPlayerAchievements_EOSAchievementsQueryPlayerAchievementsAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreAchievementsQueryPlayerAchievements_EOSAchievementsQueryPlayerAchievementsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreAchievementsQueryPlayerAchievements_EOSAchievementsQueryPlayerAchievementsAsync, Options) == 0x000008, "Member 'EOSCoreAchievementsQueryPlayerAchievements_EOSAchievementsQueryPlayerAchievementsAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreAchievementsQueryPlayerAchievements_EOSAchievementsQueryPlayerAchievementsAsync, ReturnValue) == 0x000050, "Member 'EOSCoreAchievementsQueryPlayerAchievements_EOSAchievementsQueryPlayerAchievementsAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreAchievementsQueryPlayerAchievements.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreAchievementsQueryPlayerAchievements_HandleCallback final
{
public:
	struct FEOSAchievementsOnQueryPlayerAchievementsCompleteCallbackInfo Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_288E[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreAchievementsQueryPlayerAchievements_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreAchievementsQueryPlayerAchievements_HandleCallback");
static_assert(sizeof(EOSCoreAchievementsQueryPlayerAchievements_HandleCallback) == 0x000040, "Wrong size on EOSCoreAchievementsQueryPlayerAchievements_HandleCallback");
static_assert(offsetof(EOSCoreAchievementsQueryPlayerAchievements_HandleCallback, Data) == 0x000000, "Member 'EOSCoreAchievementsQueryPlayerAchievements_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreAchievementsQueryPlayerAchievements_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreAchievementsQueryPlayerAchievements_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreAchievementsUnlockAchievements.EOSAchievementsUnlockAchievements
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreAchievementsUnlockAchievements_EOSAchievementsUnlockAchievements final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAchievementsUnlockAchievementsOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreAchievementsUnlockAchievements* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreAchievementsUnlockAchievements_EOSAchievementsUnlockAchievements) == 0x000008, "Wrong alignment on EOSCoreAchievementsUnlockAchievements_EOSAchievementsUnlockAchievements");
static_assert(sizeof(EOSCoreAchievementsUnlockAchievements_EOSAchievementsUnlockAchievements) == 0x000048, "Wrong size on EOSCoreAchievementsUnlockAchievements_EOSAchievementsUnlockAchievements");
static_assert(offsetof(EOSCoreAchievementsUnlockAchievements_EOSAchievementsUnlockAchievements, WorldContextObject) == 0x000000, "Member 'EOSCoreAchievementsUnlockAchievements_EOSAchievementsUnlockAchievements::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreAchievementsUnlockAchievements_EOSAchievementsUnlockAchievements, Options) == 0x000008, "Member 'EOSCoreAchievementsUnlockAchievements_EOSAchievementsUnlockAchievements::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreAchievementsUnlockAchievements_EOSAchievementsUnlockAchievements, ReturnValue) == 0x000040, "Member 'EOSCoreAchievementsUnlockAchievements_EOSAchievementsUnlockAchievements::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreAchievementsUnlockAchievements.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreAchievementsUnlockAchievements_HandleCallback final
{
public:
	struct FEOSAchievementsOnUnlockAchievementsCompleteCallbackInfo Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2890[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreAchievementsUnlockAchievements_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreAchievementsUnlockAchievements_HandleCallback");
static_assert(sizeof(EOSCoreAchievementsUnlockAchievements_HandleCallback) == 0x000040, "Wrong size on EOSCoreAchievementsUnlockAchievements_HandleCallback");
static_assert(offsetof(EOSCoreAchievementsUnlockAchievements_HandleCallback, Data) == 0x000000, "Member 'EOSCoreAchievementsUnlockAchievements_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreAchievementsUnlockAchievements_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreAchievementsUnlockAchievements_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyQueryInvites.EOSLobbyQueryInvitesAsync
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreLobbyQueryInvites_EOSLobbyQueryInvitesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyQueryInvitesOptions           Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreLobbyQueryInvites*              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLobbyQueryInvites_EOSLobbyQueryInvitesAsync) == 0x000008, "Wrong alignment on EOSCoreLobbyQueryInvites_EOSLobbyQueryInvitesAsync");
static_assert(sizeof(EOSCoreLobbyQueryInvites_EOSLobbyQueryInvitesAsync) == 0x000038, "Wrong size on EOSCoreLobbyQueryInvites_EOSLobbyQueryInvitesAsync");
static_assert(offsetof(EOSCoreLobbyQueryInvites_EOSLobbyQueryInvitesAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLobbyQueryInvites_EOSLobbyQueryInvitesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyQueryInvites_EOSLobbyQueryInvitesAsync, Options) == 0x000008, "Member 'EOSCoreLobbyQueryInvites_EOSLobbyQueryInvitesAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyQueryInvites_EOSLobbyQueryInvitesAsync, ReturnValue) == 0x000030, "Member 'EOSCoreLobbyQueryInvites_EOSLobbyQueryInvitesAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyQueryInvites.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreLobbyQueryInvites_HandleCallback final
{
public:
	struct FEOSLobbyQueryInvitesCallbackInfo      Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2892[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLobbyQueryInvites_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLobbyQueryInvites_HandleCallback");
static_assert(sizeof(EOSCoreLobbyQueryInvites_HandleCallback) == 0x000040, "Wrong size on EOSCoreLobbyQueryInvites_HandleCallback");
static_assert(offsetof(EOSCoreLobbyQueryInvites_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLobbyQueryInvites_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyQueryInvites_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreLobbyQueryInvites_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientAddExternalIntegrityCatalog
// 0x0020 (0x0020 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientAddExternalIntegrityCatalog final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientAddExternalIntegrityCatalogOptions Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2894[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientAddExternalIntegrityCatalog) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientAddExternalIntegrityCatalog");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientAddExternalIntegrityCatalog) == 0x000020, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientAddExternalIntegrityCatalog");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddExternalIntegrityCatalog, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddExternalIntegrityCatalog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddExternalIntegrityCatalog, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddExternalIntegrityCatalog::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddExternalIntegrityCatalog, ReturnValue) == 0x000018, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddExternalIntegrityCatalog::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientAddNotifyMessageToPeer
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToPeer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientAddNotifyMessageToPeerOptions Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2895[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSAntiCheatCommonOnMessageToClientCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2896[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToPeer) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToPeer");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToPeer) == 0x000028, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToPeer");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToPeer, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToPeer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToPeer, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToPeer::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToPeer, Callback) == 0x00000C, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToPeer::Callback' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToPeer, ReturnValue) == 0x000020, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToPeer::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientAddNotifyMessageToServer
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToServer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientAddNotifyMessageToServerOptions Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2897[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSAntiCheatClientOnMessageToServerCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2898[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToServer) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToServer");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToServer) == 0x000028, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToServer");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToServer, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToServer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToServer, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToServer::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToServer, Callback) == 0x00000C, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToServer::Callback' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToServer, ReturnValue) == 0x000020, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyMessageToServer::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientAddNotifyPeerActionRequired
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerActionRequired final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientAddNotifyPeerActionRequiredOptions Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2899[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSAntiCheatCommonOnClientActionRequiredCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_289A[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerActionRequired) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerActionRequired");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerActionRequired) == 0x000028, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerActionRequired");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerActionRequired, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerActionRequired::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerActionRequired, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerActionRequired::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerActionRequired, Callback) == 0x00000C, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerActionRequired::Callback' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerActionRequired, ReturnValue) == 0x000020, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerActionRequired::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientAddNotifyPeerAuthStatusChanged
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerAuthStatusChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientAddNotifyPeerAuthStatusChangedOptions Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_289B[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSAntiCheatCommonOnClientAuthStatusChangedCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_289C[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerAuthStatusChanged) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerAuthStatusChanged");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerAuthStatusChanged) == 0x000028, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerAuthStatusChanged");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerAuthStatusChanged, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerAuthStatusChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerAuthStatusChanged, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerAuthStatusChanged::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerAuthStatusChanged, Callback) == 0x00000C, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerAuthStatusChanged::Callback' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerAuthStatusChanged, ReturnValue) == 0x000020, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyPeerAuthStatusChanged::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientBeginSession
// 0x0030 (0x0030 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientBeginSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientBeginSessionOptions Options;                                           // 0x0008(0x0022)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x002A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_289D[0x5];                                     // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientBeginSession) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientBeginSession");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientBeginSession) == 0x000030, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientBeginSession");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientBeginSession, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientBeginSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientBeginSession, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientBeginSession::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientBeginSession, ReturnValue) == 0x00002A, "Member 'CoreAntiCheatClient_EOSAntiCheatClientBeginSession::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientEndSession
// 0x0010 (0x0010 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientEndSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientEndSessionOptions   Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_289E[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientEndSession) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientEndSession");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientEndSession) == 0x000010, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientEndSession");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientEndSession, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientEndSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientEndSession, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientEndSession::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientEndSession, ReturnValue) == 0x000009, "Member 'CoreAntiCheatClient_EOSAntiCheatClientEndSession::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientGetProtectMessageOutputLength
// 0x0018 (0x0018 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientGetProtectMessageOutputLength final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientGetProtectMessageOutputLengthOptions Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutBufferLengthBytes;                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_289F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientGetProtectMessageOutputLength) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientGetProtectMessageOutputLength");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientGetProtectMessageOutputLength) == 0x000018, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientGetProtectMessageOutputLength");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientGetProtectMessageOutputLength, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientGetProtectMessageOutputLength::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientGetProtectMessageOutputLength, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientGetProtectMessageOutputLength::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientGetProtectMessageOutputLength, OutBufferLengthBytes) == 0x00000C, "Member 'CoreAntiCheatClient_EOSAntiCheatClientGetProtectMessageOutputLength::OutBufferLengthBytes' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientGetProtectMessageOutputLength, ReturnValue) == 0x000010, "Member 'CoreAntiCheatClient_EOSAntiCheatClientGetProtectMessageOutputLength::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientPollStatus
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientPollStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientPollStatusOptions   Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EEOSEAntiCheatClientViolationType             ViolationType;                                     // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A0[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutMessage;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A1[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientPollStatus) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientPollStatus");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientPollStatus) == 0x000028, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientPollStatus");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientPollStatus, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientPollStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientPollStatus, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientPollStatus::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientPollStatus, ViolationType) == 0x00000C, "Member 'CoreAntiCheatClient_EOSAntiCheatClientPollStatus::ViolationType' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientPollStatus, OutMessage) == 0x000010, "Member 'CoreAntiCheatClient_EOSAntiCheatClientPollStatus::OutMessage' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientPollStatus, ReturnValue) == 0x000020, "Member 'CoreAntiCheatClient_EOSAntiCheatClientPollStatus::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientProtectMessage
// 0x0038 (0x0038 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientProtectMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientProtectMessageOptions Options;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutBuffer;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A2[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientProtectMessage) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientProtectMessage");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientProtectMessage) == 0x000038, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientProtectMessage");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientProtectMessage, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientProtectMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientProtectMessage, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientProtectMessage::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientProtectMessage, OutBuffer) == 0x000020, "Member 'CoreAntiCheatClient_EOSAntiCheatClientProtectMessage::OutBuffer' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientProtectMessage, ReturnValue) == 0x000030, "Member 'CoreAntiCheatClient_EOSAntiCheatClientProtectMessage::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientReceiveMessageFromPeer
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromPeer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientReceiveMessageFromPeerOptions Options;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A3[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromPeer) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromPeer");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromPeer) == 0x000028, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromPeer");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromPeer, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromPeer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromPeer, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromPeer::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromPeer, ReturnValue) == 0x000020, "Member 'CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromPeer::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientReceiveMessageFromServer
// 0x0020 (0x0020 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromServer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientReceiveMessageFromServerOptions Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A4[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromServer) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromServer");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromServer) == 0x000020, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromServer");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromServer, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromServer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromServer, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromServer::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromServer, ReturnValue) == 0x000018, "Member 'CoreAntiCheatClient_EOSAntiCheatClientReceiveMessageFromServer::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientRegisterPeer
// 0x0068 (0x0068 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientRegisterPeer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientRegisterPeerOptions Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A5[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientRegisterPeer) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientRegisterPeer");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientRegisterPeer) == 0x000068, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientRegisterPeer");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientRegisterPeer, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientRegisterPeer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientRegisterPeer, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientRegisterPeer::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientRegisterPeer, ReturnValue) == 0x000060, "Member 'CoreAntiCheatClient_EOSAntiCheatClientRegisterPeer::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientRemoveNotifyMessageToPeer
// 0x0010 (0x0010 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToPeer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToPeer) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToPeer");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToPeer) == 0x000010, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToPeer");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToPeer, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToPeer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToPeer, NotificationID) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToPeer::NotificationID' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientRemoveNotifyMessageToServer
// 0x0010 (0x0010 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToServer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToServer) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToServer");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToServer) == 0x000010, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToServer");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToServer, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToServer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToServer, NotificationID) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyMessageToServer::NotificationID' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientRemoveNotifyPeerActionRequired
// 0x0010 (0x0010 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerActionRequired final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerActionRequired) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerActionRequired");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerActionRequired) == 0x000010, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerActionRequired");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerActionRequired, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerActionRequired::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerActionRequired, NotificationID) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerActionRequired::NotificationID' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientRemoveNotifyPeerAuthStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerAuthStatusChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerAuthStatusChanged) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerAuthStatusChanged");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerAuthStatusChanged) == 0x000010, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerAuthStatusChanged");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerAuthStatusChanged, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerAuthStatusChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerAuthStatusChanged, NotificationID) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyPeerAuthStatusChanged::NotificationID' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientUnprotectMessage
// 0x0038 (0x0038 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientUnprotectMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientUnprotectMessageOptions Options;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutBuffer;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A6[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientUnprotectMessage) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientUnprotectMessage");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientUnprotectMessage) == 0x000038, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientUnprotectMessage");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientUnprotectMessage, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientUnprotectMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientUnprotectMessage, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientUnprotectMessage::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientUnprotectMessage, OutBuffer) == 0x000020, "Member 'CoreAntiCheatClient_EOSAntiCheatClientUnprotectMessage::OutBuffer' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientUnprotectMessage, ReturnValue) == 0x000030, "Member 'CoreAntiCheatClient_EOSAntiCheatClientUnprotectMessage::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientUnregisterPeer
// 0x0018 (0x0018 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientUnregisterPeer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientUnregisterPeerOptions Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A7[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientUnregisterPeer) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientUnregisterPeer");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientUnregisterPeer) == 0x000018, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientUnregisterPeer");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientUnregisterPeer, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientUnregisterPeer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientUnregisterPeer, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientUnregisterPeer::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientUnregisterPeer, ReturnValue) == 0x000010, "Member 'CoreAntiCheatClient_EOSAntiCheatClientUnregisterPeer::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.GetAntiCheatClient
// 0x0010 (0x0010 - 0x0000)
struct CoreAntiCheatClient_GetAntiCheatClient final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreAntiCheatClient*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatClient_GetAntiCheatClient) == 0x000008, "Wrong alignment on CoreAntiCheatClient_GetAntiCheatClient");
static_assert(sizeof(CoreAntiCheatClient_GetAntiCheatClient) == 0x000010, "Wrong size on CoreAntiCheatClient_GetAntiCheatClient");
static_assert(offsetof(CoreAntiCheatClient_GetAntiCheatClient, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_GetAntiCheatClient::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_GetAntiCheatClient, ReturnValue) == 0x000008, "Member 'CoreAntiCheatClient_GetAntiCheatClient::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientAddNotifyClientIntegrityViolated
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientAddNotifyClientIntegrityViolated final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatClientAddNotifyClientIntegrityViolatedOptions Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A8[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSAntiCheatClientOnClientIntegrityViolatedCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A9[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyClientIntegrityViolated) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientAddNotifyClientIntegrityViolated");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyClientIntegrityViolated) == 0x000028, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientAddNotifyClientIntegrityViolated");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyClientIntegrityViolated, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyClientIntegrityViolated::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyClientIntegrityViolated, Options) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyClientIntegrityViolated::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyClientIntegrityViolated, Callback) == 0x00000C, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyClientIntegrityViolated::Callback' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientAddNotifyClientIntegrityViolated, ReturnValue) == 0x000020, "Member 'CoreAntiCheatClient_EOSAntiCheatClientAddNotifyClientIntegrityViolated::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatClient.EOSAntiCheatClientRemoveNotifyClientIntegrityViolated
// 0x0010 (0x0010 - 0x0000)
struct CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyClientIntegrityViolated final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyClientIntegrityViolated) == 0x000008, "Wrong alignment on CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyClientIntegrityViolated");
static_assert(sizeof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyClientIntegrityViolated) == 0x000010, "Wrong size on CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyClientIntegrityViolated");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyClientIntegrityViolated, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyClientIntegrityViolated::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyClientIntegrityViolated, NotificationID) == 0x000008, "Member 'CoreAntiCheatClient_EOSAntiCheatClientRemoveNotifyClientIntegrityViolated::NotificationID' has a wrong offset!");

// Function EOSCore.EOSCorePlayerDataStorageQueryFileList.EOSPlayerDataStorageQueryFileListAsync
// 0x0038 (0x0038 - 0x0000)
struct EOSCorePlayerDataStorageQueryFileList_EOSPlayerDataStorageQueryFileListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageQueryFileListOptions QueryFileListOptions;                              // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCorePlayerDataStorageQueryFileList* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCorePlayerDataStorageQueryFileList_EOSPlayerDataStorageQueryFileListAsync) == 0x000008, "Wrong alignment on EOSCorePlayerDataStorageQueryFileList_EOSPlayerDataStorageQueryFileListAsync");
static_assert(sizeof(EOSCorePlayerDataStorageQueryFileList_EOSPlayerDataStorageQueryFileListAsync) == 0x000038, "Wrong size on EOSCorePlayerDataStorageQueryFileList_EOSPlayerDataStorageQueryFileListAsync");
static_assert(offsetof(EOSCorePlayerDataStorageQueryFileList_EOSPlayerDataStorageQueryFileListAsync, WorldContextObject) == 0x000000, "Member 'EOSCorePlayerDataStorageQueryFileList_EOSPlayerDataStorageQueryFileListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageQueryFileList_EOSPlayerDataStorageQueryFileListAsync, QueryFileListOptions) == 0x000008, "Member 'EOSCorePlayerDataStorageQueryFileList_EOSPlayerDataStorageQueryFileListAsync::QueryFileListOptions' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageQueryFileList_EOSPlayerDataStorageQueryFileListAsync, ReturnValue) == 0x000030, "Member 'EOSCorePlayerDataStorageQueryFileList_EOSPlayerDataStorageQueryFileListAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCorePlayerDataStorageQueryFileList.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCorePlayerDataStorageQueryFileList_HandleCallback final
{
public:
	struct FEOSPlayerDataStorageQueryFileListCallbackInfo Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28AB[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCorePlayerDataStorageQueryFileList_HandleCallback) == 0x000008, "Wrong alignment on EOSCorePlayerDataStorageQueryFileList_HandleCallback");
static_assert(sizeof(EOSCorePlayerDataStorageQueryFileList_HandleCallback) == 0x000040, "Wrong size on EOSCorePlayerDataStorageQueryFileList_HandleCallback");
static_assert(offsetof(EOSCorePlayerDataStorageQueryFileList_HandleCallback, Data) == 0x000000, "Member 'EOSCorePlayerDataStorageQueryFileList_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageQueryFileList_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCorePlayerDataStorageQueryFileList_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerAddNotifyClientActionRequired
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientActionRequired final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatServerAddNotifyClientActionRequiredOptions Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28AD[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSAntiCheatCommonOnClientActionRequiredCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28AE[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientActionRequired) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientActionRequired");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientActionRequired) == 0x000028, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientActionRequired");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientActionRequired, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientActionRequired::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientActionRequired, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientActionRequired::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientActionRequired, Callback) == 0x00000C, "Member 'CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientActionRequired::Callback' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientActionRequired, ReturnValue) == 0x000020, "Member 'CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientActionRequired::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerAddNotifyClientAuthStatusChanged
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientAuthStatusChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatServerAddNotifyClientAuthStatusChangedOptions Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28AF[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSAntiCheatCommonOnClientAuthStatusChangedCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28B0[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientAuthStatusChanged) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientAuthStatusChanged");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientAuthStatusChanged) == 0x000028, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientAuthStatusChanged");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientAuthStatusChanged, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientAuthStatusChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientAuthStatusChanged, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientAuthStatusChanged::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientAuthStatusChanged, Callback) == 0x00000C, "Member 'CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientAuthStatusChanged::Callback' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientAuthStatusChanged, ReturnValue) == 0x000020, "Member 'CoreAntiCheatServer_EOSAntiCheatServerAddNotifyClientAuthStatusChanged::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerAddNotifyMessageToClient
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerAddNotifyMessageToClient final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatServerAddNotifyMessageToClientOptions Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28B1[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSAntiCheatCommonOnMessageToClientCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28B2[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyMessageToClient) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerAddNotifyMessageToClient");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyMessageToClient) == 0x000028, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerAddNotifyMessageToClient");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyMessageToClient, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerAddNotifyMessageToClient::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyMessageToClient, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerAddNotifyMessageToClient::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyMessageToClient, Callback) == 0x00000C, "Member 'CoreAntiCheatServer_EOSAntiCheatServerAddNotifyMessageToClient::Callback' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerAddNotifyMessageToClient, ReturnValue) == 0x000020, "Member 'CoreAntiCheatServer_EOSAntiCheatServerAddNotifyMessageToClient::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerBeginSession
// 0x0050 (0x0050 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerBeginSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatServerBeginSessionOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28B3[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerBeginSession) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerBeginSession");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerBeginSession) == 0x000050, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerBeginSession");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerBeginSession, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerBeginSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerBeginSession, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerBeginSession::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerBeginSession, ReturnValue) == 0x000048, "Member 'CoreAntiCheatServer_EOSAntiCheatServerBeginSession::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerEndSession
// 0x0010 (0x0010 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerEndSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatServerEndSessionOptions   Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28B4[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerEndSession) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerEndSession");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerEndSession) == 0x000010, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerEndSession");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerEndSession, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerEndSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerEndSession, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerEndSession::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerEndSession, ReturnValue) == 0x000009, "Member 'CoreAntiCheatServer_EOSAntiCheatServerEndSession::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerGetProtectMessageOutputLength
// 0x0018 (0x0018 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerGetProtectMessageOutputLength final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatServerGetProtectMessageOutputLengthOptions Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutBufferLengthBytes;                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28B5[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerGetProtectMessageOutputLength) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerGetProtectMessageOutputLength");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerGetProtectMessageOutputLength) == 0x000018, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerGetProtectMessageOutputLength");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerGetProtectMessageOutputLength, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerGetProtectMessageOutputLength::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerGetProtectMessageOutputLength, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerGetProtectMessageOutputLength::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerGetProtectMessageOutputLength, OutBufferLengthBytes) == 0x00000C, "Member 'CoreAntiCheatServer_EOSAntiCheatServerGetProtectMessageOutputLength::OutBufferLengthBytes' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerGetProtectMessageOutputLength, ReturnValue) == 0x000010, "Member 'CoreAntiCheatServer_EOSAntiCheatServerGetProtectMessageOutputLength::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerLogEvent
// 0x0038 (0x0038 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerLogEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonLogEventOptions     Options;                                           // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28B6[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerLogEvent) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerLogEvent");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerLogEvent) == 0x000038, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerLogEvent");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogEvent, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogEvent, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogEvent::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogEvent, ReturnValue) == 0x000030, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogEvent::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerLogGameRoundEnd
// 0x0018 (0x0018 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundEnd final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonLogGameRoundEndOptions Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28B7[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundEnd) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundEnd");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundEnd) == 0x000018, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundEnd");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundEnd, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundEnd::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundEnd, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundEnd::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundEnd, ReturnValue) == 0x000010, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundEnd::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerLogGameRoundStart
// 0x0050 (0x0050 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundStart final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonLogGameRoundStartOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28B8[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundStart) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundStart");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundStart) == 0x000050, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundStart");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundStart, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundStart::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundStart, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundStart::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundStart, ReturnValue) == 0x000048, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogGameRoundStart::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerLogPlayerDespawn
// 0x0020 (0x0020 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerLogPlayerDespawn final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonLogPlayerDespawnOptions Options;                                           // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28B9[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerDespawn) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerDespawn");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerDespawn) == 0x000020, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerDespawn");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerDespawn, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerDespawn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerDespawn, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerDespawn::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerDespawn, ReturnValue) == 0x000018, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerDespawn::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerLogPlayerRevive
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerLogPlayerRevive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonLogPlayerReviveOptions Options;                                           // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28BA[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerRevive) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerRevive");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerRevive) == 0x000028, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerRevive");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerRevive, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerRevive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerRevive, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerRevive::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerRevive, ReturnValue) == 0x000020, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerRevive::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerLogPlayerSpawn
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerLogPlayerSpawn final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonLogPlayerSpawnOptions Options;                                           // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28BB[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerSpawn) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerSpawn");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerSpawn) == 0x000028, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerSpawn");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerSpawn, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerSpawn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerSpawn, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerSpawn::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerSpawn, ReturnValue) == 0x000020, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerSpawn::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerLogPlayerTakeDamage
// 0x00C0 (0x00C0 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTakeDamage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonLogPlayerTakeDamageOptions Options;                                           // 0x0008(0x00B0)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28BC[0x7];                                     // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTakeDamage) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTakeDamage");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTakeDamage) == 0x0000C0, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTakeDamage");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTakeDamage, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTakeDamage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTakeDamage, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTakeDamage::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTakeDamage, ReturnValue) == 0x0000B8, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTakeDamage::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerLogPlayerTick
// 0x0048 (0x0048 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTick final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonLogPlayerTickOptions Options;                                           // 0x0008(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28BD[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTick) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTick");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTick) == 0x000048, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTick");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTick, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTick::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTick, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTick::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTick, ReturnValue) == 0x000040, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerTick::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerLogPlayerUseAbility
// 0x0030 (0x0030 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseAbility final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonLogPlayerUseAbilityOptions Options;                                           // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28BE[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseAbility) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseAbility");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseAbility) == 0x000030, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseAbility");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseAbility, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseAbility::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseAbility, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseAbility::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseAbility, ReturnValue) == 0x000028, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseAbility::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerLogPlayerUseWeapon
// 0x0058 (0x0058 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseWeapon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonLogPlayerUseWeaponOptions Options;                                           // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28BF[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseWeapon) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseWeapon");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseWeapon) == 0x000058, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseWeapon");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseWeapon, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseWeapon::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseWeapon, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseWeapon::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseWeapon, ReturnValue) == 0x000050, "Member 'CoreAntiCheatServer_EOSAntiCheatServerLogPlayerUseWeapon::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerProtectMessage
// 0x0048 (0x0048 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerProtectMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatServerProtectMessageOptions Options;                                           // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutBuffer;                                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OutBufferLengthBytes;                              // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C0[0x3];                                     // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerProtectMessage) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerProtectMessage");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerProtectMessage) == 0x000048, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerProtectMessage");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerProtectMessage, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerProtectMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerProtectMessage, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerProtectMessage::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerProtectMessage, OutBuffer) == 0x000030, "Member 'CoreAntiCheatServer_EOSAntiCheatServerProtectMessage::OutBuffer' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerProtectMessage, OutBufferLengthBytes) == 0x000040, "Member 'CoreAntiCheatServer_EOSAntiCheatServerProtectMessage::OutBufferLengthBytes' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerProtectMessage, ReturnValue) == 0x000044, "Member 'CoreAntiCheatServer_EOSAntiCheatServerProtectMessage::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerReceiveMessageFromClient
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerReceiveMessageFromClient final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatServerReceiveMessageFromClientOptions Options;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C1[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerReceiveMessageFromClient) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerReceiveMessageFromClient");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerReceiveMessageFromClient) == 0x000028, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerReceiveMessageFromClient");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerReceiveMessageFromClient, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerReceiveMessageFromClient::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerReceiveMessageFromClient, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerReceiveMessageFromClient::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerReceiveMessageFromClient, ReturnValue) == 0x000020, "Member 'CoreAntiCheatServer_EOSAntiCheatServerReceiveMessageFromClient::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerRegisterClient
// 0x0068 (0x0068 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerRegisterClient final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatServerRegisterClientOptions Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C2[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerRegisterClient) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerRegisterClient");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerRegisterClient) == 0x000068, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerRegisterClient");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerRegisterClient, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerRegisterClient::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerRegisterClient, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerRegisterClient::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerRegisterClient, ReturnValue) == 0x000060, "Member 'CoreAntiCheatServer_EOSAntiCheatServerRegisterClient::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerRegisterEvent
// 0x0040 (0x0040 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerRegisterEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonRegisterEventOptions Options;                                           // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C3[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerRegisterEvent) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerRegisterEvent");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerRegisterEvent) == 0x000040, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerRegisterEvent");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerRegisterEvent, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerRegisterEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerRegisterEvent, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerRegisterEvent::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerRegisterEvent, ReturnValue) == 0x000038, "Member 'CoreAntiCheatServer_EOSAntiCheatServerRegisterEvent::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerRemoveNotifyClientActionRequired
// 0x0010 (0x0010 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientActionRequired final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientActionRequired) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientActionRequired");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientActionRequired) == 0x000010, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientActionRequired");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientActionRequired, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientActionRequired::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientActionRequired, NotificationID) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientActionRequired::NotificationID' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerRemoveNotifyClientAuthStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientAuthStatusChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientAuthStatusChanged) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientAuthStatusChanged");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientAuthStatusChanged) == 0x000010, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientAuthStatusChanged");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientAuthStatusChanged, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientAuthStatusChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientAuthStatusChanged, NotificationID) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyClientAuthStatusChanged::NotificationID' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerRemoveNotifyMessageToClient
// 0x0010 (0x0010 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyMessageToClient final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyMessageToClient) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyMessageToClient");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyMessageToClient) == 0x000010, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyMessageToClient");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyMessageToClient, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyMessageToClient::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyMessageToClient, NotificationID) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerRemoveNotifyMessageToClient::NotificationID' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerSetClientDetails
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerSetClientDetails final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonSetClientDetailsOptions Options;                                           // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C4[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerSetClientDetails) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerSetClientDetails");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerSetClientDetails) == 0x000028, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerSetClientDetails");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerSetClientDetails, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerSetClientDetails::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerSetClientDetails, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerSetClientDetails::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerSetClientDetails, ReturnValue) == 0x000020, "Member 'CoreAntiCheatServer_EOSAntiCheatServerSetClientDetails::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerSetClientNetworkState
// 0x0020 (0x0020 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerSetClientNetworkState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatServerSetClientNetworkStateOptions Options;                                           // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C5[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerSetClientNetworkState) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerSetClientNetworkState");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerSetClientNetworkState) == 0x000020, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerSetClientNetworkState");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerSetClientNetworkState, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerSetClientNetworkState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerSetClientNetworkState, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerSetClientNetworkState::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerSetClientNetworkState, ReturnValue) == 0x000018, "Member 'CoreAntiCheatServer_EOSAntiCheatServerSetClientNetworkState::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerSetGameSessionId
// 0x0028 (0x0028 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerSetGameSessionId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonSetGameSessionIdOptions Options;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C6[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerSetGameSessionId) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerSetGameSessionId");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerSetGameSessionId) == 0x000028, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerSetGameSessionId");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerSetGameSessionId, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerSetGameSessionId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerSetGameSessionId, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerSetGameSessionId::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerSetGameSessionId, ReturnValue) == 0x000020, "Member 'CoreAntiCheatServer_EOSAntiCheatServerSetGameSessionId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerUnprotectMessage
// 0x0048 (0x0048 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatServerUnprotectMessageOptions Options;                                           // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutBuffer;                                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OutBufferLengthBytes;                              // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C7[0x3];                                     // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage) == 0x000048, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage, OutBuffer) == 0x000030, "Member 'CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage::OutBuffer' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage, OutBufferLengthBytes) == 0x000040, "Member 'CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage::OutBufferLengthBytes' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage, ReturnValue) == 0x000044, "Member 'CoreAntiCheatServer_EOSAntiCheatServerUnprotectMessage::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.EOSAntiCheatServerUnregisterClient
// 0x0018 (0x0018 - 0x0000)
struct CoreAntiCheatServer_EOSAntiCheatServerUnregisterClient final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatServerUnregisterClientOptions Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAntiCheatServer_EOSAntiCheatServerUnregisterClient) == 0x000008, "Wrong alignment on CoreAntiCheatServer_EOSAntiCheatServerUnregisterClient");
static_assert(sizeof(CoreAntiCheatServer_EOSAntiCheatServerUnregisterClient) == 0x000018, "Wrong size on CoreAntiCheatServer_EOSAntiCheatServerUnregisterClient");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerUnregisterClient, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_EOSAntiCheatServerUnregisterClient::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerUnregisterClient, Options) == 0x000008, "Member 'CoreAntiCheatServer_EOSAntiCheatServerUnregisterClient::Options' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_EOSAntiCheatServerUnregisterClient, ReturnValue) == 0x000010, "Member 'CoreAntiCheatServer_EOSAntiCheatServerUnregisterClient::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAntiCheatServer.GetAntiCheatServer
// 0x0010 (0x0010 - 0x0000)
struct CoreAntiCheatServer_GetAntiCheatServer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreAntiCheatServer*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAntiCheatServer_GetAntiCheatServer) == 0x000008, "Wrong alignment on CoreAntiCheatServer_GetAntiCheatServer");
static_assert(sizeof(CoreAntiCheatServer_GetAntiCheatServer) == 0x000010, "Wrong size on CoreAntiCheatServer_GetAntiCheatServer");
static_assert(offsetof(CoreAntiCheatServer_GetAntiCheatServer, WorldContextObject) == 0x000000, "Member 'CoreAntiCheatServer_GetAntiCheatServer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAntiCheatServer_GetAntiCheatServer, ReturnValue) == 0x000008, "Member 'CoreAntiCheatServer_GetAntiCheatServer::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreAuthLogin.EOSAuthLoginAsync
// 0x0050 (0x0050 - 0x0000)
struct EOSCoreAuthLogin_EOSAuthLoginAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthLoginOptions                   Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreAuthLogin*                      ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreAuthLogin_EOSAuthLoginAsync) == 0x000008, "Wrong alignment on EOSCoreAuthLogin_EOSAuthLoginAsync");
static_assert(sizeof(EOSCoreAuthLogin_EOSAuthLoginAsync) == 0x000050, "Wrong size on EOSCoreAuthLogin_EOSAuthLoginAsync");
static_assert(offsetof(EOSCoreAuthLogin_EOSAuthLoginAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreAuthLogin_EOSAuthLoginAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthLogin_EOSAuthLoginAsync, Options) == 0x000008, "Member 'EOSCoreAuthLogin_EOSAuthLoginAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthLogin_EOSAuthLoginAsync, ReturnValue) == 0x000048, "Member 'EOSCoreAuthLogin_EOSAuthLoginAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreAuthLogin.HandleCallback
// 0x00C8 (0x00C8 - 0x0000)
struct EOSCoreAuthLogin_HandleCallback final
{
public:
	struct FEOSAuthLoginCallbackInfo              Data;                                              // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x00C0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28CA[0x7];                                     // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreAuthLogin_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreAuthLogin_HandleCallback");
static_assert(sizeof(EOSCoreAuthLogin_HandleCallback) == 0x0000C8, "Wrong size on EOSCoreAuthLogin_HandleCallback");
static_assert(offsetof(EOSCoreAuthLogin_HandleCallback, Data) == 0x000000, "Member 'EOSCoreAuthLogin_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthLogin_HandleCallback, bWasSuccessful) == 0x0000C0, "Member 'EOSCoreAuthLogin_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreAuthLogout.EOSAuthLogoutAsync
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreAuthLogout_EOSAuthLogoutAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthLogoutOptions                  Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreAuthLogout*                     ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreAuthLogout_EOSAuthLogoutAsync) == 0x000008, "Wrong alignment on EOSCoreAuthLogout_EOSAuthLogoutAsync");
static_assert(sizeof(EOSCoreAuthLogout_EOSAuthLogoutAsync) == 0x000038, "Wrong size on EOSCoreAuthLogout_EOSAuthLogoutAsync");
static_assert(offsetof(EOSCoreAuthLogout_EOSAuthLogoutAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreAuthLogout_EOSAuthLogoutAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthLogout_EOSAuthLogoutAsync, Options) == 0x000008, "Member 'EOSCoreAuthLogout_EOSAuthLogoutAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthLogout_EOSAuthLogoutAsync, ReturnValue) == 0x000030, "Member 'EOSCoreAuthLogout_EOSAuthLogoutAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreAuthLogout.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreAuthLogout_HandleCallback final
{
public:
	struct FEOSAuthLogoutCallbackInfo             Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28CC[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreAuthLogout_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreAuthLogout_HandleCallback");
static_assert(sizeof(EOSCoreAuthLogout_HandleCallback) == 0x000040, "Wrong size on EOSCoreAuthLogout_HandleCallback");
static_assert(offsetof(EOSCoreAuthLogout_HandleCallback, Data) == 0x000000, "Member 'EOSCoreAuthLogout_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthLogout_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreAuthLogout_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreAuthLinkAccount.EOSAuthLinkAccount
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreAuthLinkAccount_EOSAuthLinkAccount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthLinkAccountOptions             Options;                                           // 0x0008(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreAuthLinkAccount*                ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreAuthLinkAccount_EOSAuthLinkAccount) == 0x000008, "Wrong alignment on EOSCoreAuthLinkAccount_EOSAuthLinkAccount");
static_assert(sizeof(EOSCoreAuthLinkAccount_EOSAuthLinkAccount) == 0x000048, "Wrong size on EOSCoreAuthLinkAccount_EOSAuthLinkAccount");
static_assert(offsetof(EOSCoreAuthLinkAccount_EOSAuthLinkAccount, WorldContextObject) == 0x000000, "Member 'EOSCoreAuthLinkAccount_EOSAuthLinkAccount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthLinkAccount_EOSAuthLinkAccount, Options) == 0x000008, "Member 'EOSCoreAuthLinkAccount_EOSAuthLinkAccount::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthLinkAccount_EOSAuthLinkAccount, ReturnValue) == 0x000040, "Member 'EOSCoreAuthLinkAccount_EOSAuthLinkAccount::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreAuthLinkAccount.HandleCallback
// 0x00A8 (0x00A8 - 0x0000)
struct EOSCoreAuthLinkAccount_HandleCallback final
{
public:
	struct FEOSAuthLinkAccountCallbackInfo        Data;                                              // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28CE[0x7];                                     // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreAuthLinkAccount_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreAuthLinkAccount_HandleCallback");
static_assert(sizeof(EOSCoreAuthLinkAccount_HandleCallback) == 0x0000A8, "Wrong size on EOSCoreAuthLinkAccount_HandleCallback");
static_assert(offsetof(EOSCoreAuthLinkAccount_HandleCallback, Data) == 0x000000, "Member 'EOSCoreAuthLinkAccount_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthLinkAccount_HandleCallback, bWasSuccessful) == 0x0000A0, "Member 'EOSCoreAuthLinkAccount_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreMods.GetMods
// 0x0010 (0x0010 - 0x0000)
struct CoreMods_GetMods final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreMods*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMods_GetMods) == 0x000008, "Wrong alignment on CoreMods_GetMods");
static_assert(sizeof(CoreMods_GetMods) == 0x000010, "Wrong size on CoreMods_GetMods");
static_assert(offsetof(CoreMods_GetMods, WorldContextObject) == 0x000000, "Member 'CoreMods_GetMods::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreMods_GetMods, ReturnValue) == 0x000008, "Member 'CoreMods_GetMods::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreMods.EOSModsCopyModInfo
// 0x0058 (0x0058 - 0x0000)
struct CoreMods_EOSModsCopyModInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSModsCopyModInfoOptions             Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSModsModInfo                        OutEnumeratedMods;                                 // 0x0030(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28CF[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreMods_EOSModsCopyModInfo) == 0x000008, "Wrong alignment on CoreMods_EOSModsCopyModInfo");
static_assert(sizeof(CoreMods_EOSModsCopyModInfo) == 0x000058, "Wrong size on CoreMods_EOSModsCopyModInfo");
static_assert(offsetof(CoreMods_EOSModsCopyModInfo, WorldContextObject) == 0x000000, "Member 'CoreMods_EOSModsCopyModInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreMods_EOSModsCopyModInfo, Options) == 0x000008, "Member 'CoreMods_EOSModsCopyModInfo::Options' has a wrong offset!");
static_assert(offsetof(CoreMods_EOSModsCopyModInfo, OutEnumeratedMods) == 0x000030, "Member 'CoreMods_EOSModsCopyModInfo::OutEnumeratedMods' has a wrong offset!");
static_assert(offsetof(CoreMods_EOSModsCopyModInfo, ReturnValue) == 0x000050, "Member 'CoreMods_EOSModsCopyModInfo::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreMods.EOSModsEnumerateMods
// 0x0040 (0x0040 - 0x0000)
struct CoreMods_EOSModsEnumerateMods final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSModsEnumerateModsOptions           Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSModsEnumerateModsCallbackInfo& Data)> Callback;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMods_EOSModsEnumerateMods) == 0x000008, "Wrong alignment on CoreMods_EOSModsEnumerateMods");
static_assert(sizeof(CoreMods_EOSModsEnumerateMods) == 0x000040, "Wrong size on CoreMods_EOSModsEnumerateMods");
static_assert(offsetof(CoreMods_EOSModsEnumerateMods, WorldContextObject) == 0x000000, "Member 'CoreMods_EOSModsEnumerateMods::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreMods_EOSModsEnumerateMods, Options) == 0x000008, "Member 'CoreMods_EOSModsEnumerateMods::Options' has a wrong offset!");
static_assert(offsetof(CoreMods_EOSModsEnumerateMods, Callback) == 0x000030, "Member 'CoreMods_EOSModsEnumerateMods::Callback' has a wrong offset!");

// Function EOSCore.CoreMods.EOSModsInstallMod
// 0x00A0 (0x00A0 - 0x0000)
struct CoreMods_EOSModsInstallMod final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSModsInstallModOptions              Options;                                           // 0x0008(0x0088)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSModsInstallModCallbackInfo& Data)> Callback;                                          // 0x0090(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMods_EOSModsInstallMod) == 0x000008, "Wrong alignment on CoreMods_EOSModsInstallMod");
static_assert(sizeof(CoreMods_EOSModsInstallMod) == 0x0000A0, "Wrong size on CoreMods_EOSModsInstallMod");
static_assert(offsetof(CoreMods_EOSModsInstallMod, WorldContextObject) == 0x000000, "Member 'CoreMods_EOSModsInstallMod::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreMods_EOSModsInstallMod, Options) == 0x000008, "Member 'CoreMods_EOSModsInstallMod::Options' has a wrong offset!");
static_assert(offsetof(CoreMods_EOSModsInstallMod, Callback) == 0x000090, "Member 'CoreMods_EOSModsInstallMod::Callback' has a wrong offset!");

// Function EOSCore.CoreMods.EOSModsUninstallMod
// 0x0098 (0x0098 - 0x0000)
struct CoreMods_EOSModsUninstallMod final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSModsUninstallModOptions            Options;                                           // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSModsUninstallModCallbackInfo& Data)> Callback;                                          // 0x0088(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMods_EOSModsUninstallMod) == 0x000008, "Wrong alignment on CoreMods_EOSModsUninstallMod");
static_assert(sizeof(CoreMods_EOSModsUninstallMod) == 0x000098, "Wrong size on CoreMods_EOSModsUninstallMod");
static_assert(offsetof(CoreMods_EOSModsUninstallMod, WorldContextObject) == 0x000000, "Member 'CoreMods_EOSModsUninstallMod::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreMods_EOSModsUninstallMod, Options) == 0x000008, "Member 'CoreMods_EOSModsUninstallMod::Options' has a wrong offset!");
static_assert(offsetof(CoreMods_EOSModsUninstallMod, Callback) == 0x000088, "Member 'CoreMods_EOSModsUninstallMod::Callback' has a wrong offset!");

// Function EOSCore.CoreMods.EOSModsUpdateMod
// 0x0098 (0x0098 - 0x0000)
struct CoreMods_EOSModsUpdateMod final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSModsUpdateModOptions               Options;                                           // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSModsUpdateModCallbackInfo& Data)> Callback;                                          // 0x0088(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMods_EOSModsUpdateMod) == 0x000008, "Wrong alignment on CoreMods_EOSModsUpdateMod");
static_assert(sizeof(CoreMods_EOSModsUpdateMod) == 0x000098, "Wrong size on CoreMods_EOSModsUpdateMod");
static_assert(offsetof(CoreMods_EOSModsUpdateMod, WorldContextObject) == 0x000000, "Member 'CoreMods_EOSModsUpdateMod::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreMods_EOSModsUpdateMod, Options) == 0x000008, "Member 'CoreMods_EOSModsUpdateMod::Options' has a wrong offset!");
static_assert(offsetof(CoreMods_EOSModsUpdateMod, Callback) == 0x000088, "Member 'CoreMods_EOSModsUpdateMod::Callback' has a wrong offset!");

// Function EOSCore.EOSCoreAuthDeletePersistentAuth.EOSAuthDeletePersistentAuthAsync
// 0x0020 (0x0020 - 0x0000)
struct EOSCoreAuthDeletePersistentAuth_EOSAuthDeletePersistentAuthAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthDeletePersistentAuthOptions    Options;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UEOSCoreAuthDeletePersistentAuth*       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreAuthDeletePersistentAuth_EOSAuthDeletePersistentAuthAsync) == 0x000008, "Wrong alignment on EOSCoreAuthDeletePersistentAuth_EOSAuthDeletePersistentAuthAsync");
static_assert(sizeof(EOSCoreAuthDeletePersistentAuth_EOSAuthDeletePersistentAuthAsync) == 0x000020, "Wrong size on EOSCoreAuthDeletePersistentAuth_EOSAuthDeletePersistentAuthAsync");
static_assert(offsetof(EOSCoreAuthDeletePersistentAuth_EOSAuthDeletePersistentAuthAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreAuthDeletePersistentAuth_EOSAuthDeletePersistentAuthAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthDeletePersistentAuth_EOSAuthDeletePersistentAuthAsync, Options) == 0x000008, "Member 'EOSCoreAuthDeletePersistentAuth_EOSAuthDeletePersistentAuthAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthDeletePersistentAuth_EOSAuthDeletePersistentAuthAsync, ReturnValue) == 0x000018, "Member 'EOSCoreAuthDeletePersistentAuth_EOSAuthDeletePersistentAuthAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreAuthDeletePersistentAuth.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreAuthDeletePersistentAuth_HandleCallback final
{
public:
	struct FEOSAuthDeletePersistentAuthCallbackInfo Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28D1[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreAuthDeletePersistentAuth_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreAuthDeletePersistentAuth_HandleCallback");
static_assert(sizeof(EOSCoreAuthDeletePersistentAuth_HandleCallback) == 0x000018, "Wrong size on EOSCoreAuthDeletePersistentAuth_HandleCallback");
static_assert(offsetof(EOSCoreAuthDeletePersistentAuth_HandleCallback, Data) == 0x000000, "Member 'EOSCoreAuthDeletePersistentAuth_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthDeletePersistentAuth_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreAuthDeletePersistentAuth_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreAuthVerifyUserAuth.EOSAuthVerifyUserAuthAsync
// 0x00C0 (0x00C0 - 0x0000)
struct EOSCoreAuthVerifyUserAuth_EOSAuthVerifyUserAuthAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthVerifyUserAuthOptions          Options;                                           // 0x0008(0x00B0)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreAuthVerifyUserAuth*             ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreAuthVerifyUserAuth_EOSAuthVerifyUserAuthAsync) == 0x000008, "Wrong alignment on EOSCoreAuthVerifyUserAuth_EOSAuthVerifyUserAuthAsync");
static_assert(sizeof(EOSCoreAuthVerifyUserAuth_EOSAuthVerifyUserAuthAsync) == 0x0000C0, "Wrong size on EOSCoreAuthVerifyUserAuth_EOSAuthVerifyUserAuthAsync");
static_assert(offsetof(EOSCoreAuthVerifyUserAuth_EOSAuthVerifyUserAuthAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreAuthVerifyUserAuth_EOSAuthVerifyUserAuthAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthVerifyUserAuth_EOSAuthVerifyUserAuthAsync, Options) == 0x000008, "Member 'EOSCoreAuthVerifyUserAuth_EOSAuthVerifyUserAuthAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthVerifyUserAuth_EOSAuthVerifyUserAuthAsync, ReturnValue) == 0x0000B8, "Member 'EOSCoreAuthVerifyUserAuth_EOSAuthVerifyUserAuthAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreAuthVerifyUserAuth.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreAuthVerifyUserAuth_HandleCallback final
{
public:
	struct FEOSAuthVerifyUserAuthCallbackInfo     Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28D3[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreAuthVerifyUserAuth_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreAuthVerifyUserAuth_HandleCallback");
static_assert(sizeof(EOSCoreAuthVerifyUserAuth_HandleCallback) == 0x000018, "Wrong size on EOSCoreAuthVerifyUserAuth_HandleCallback");
static_assert(offsetof(EOSCoreAuthVerifyUserAuth_HandleCallback, Data) == 0x000000, "Member 'EOSCoreAuthVerifyUserAuth_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreAuthVerifyUserAuth_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreAuthVerifyUserAuth_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthAddNotifyLoginStatusChanged
// 0x0020 (0x0020 - 0x0000)
struct CoreAuthentication_EOSAuthAddNotifyLoginStatusChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSAuthLoginStatusChangedCallbackInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuthentication_EOSAuthAddNotifyLoginStatusChanged) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthAddNotifyLoginStatusChanged");
static_assert(sizeof(CoreAuthentication_EOSAuthAddNotifyLoginStatusChanged) == 0x000020, "Wrong size on CoreAuthentication_EOSAuthAddNotifyLoginStatusChanged");
static_assert(offsetof(CoreAuthentication_EOSAuthAddNotifyLoginStatusChanged, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthAddNotifyLoginStatusChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthAddNotifyLoginStatusChanged, Callback) == 0x000008, "Member 'CoreAuthentication_EOSAuthAddNotifyLoginStatusChanged::Callback' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthAddNotifyLoginStatusChanged, ReturnValue) == 0x000018, "Member 'CoreAuthentication_EOSAuthAddNotifyLoginStatusChanged::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthCopyIdToken
// 0x0070 (0x0070 - 0x0000)
struct CoreAuthentication_EOSAuthCopyIdToken final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthCopyIdTokenOptions             Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28D5[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSAuthIdToken                        OutIdToken;                                        // 0x0030(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28D6[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAuthentication_EOSAuthCopyIdToken) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthCopyIdToken");
static_assert(sizeof(CoreAuthentication_EOSAuthCopyIdToken) == 0x000070, "Wrong size on CoreAuthentication_EOSAuthCopyIdToken");
static_assert(offsetof(CoreAuthentication_EOSAuthCopyIdToken, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthCopyIdToken::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthCopyIdToken, Options) == 0x000008, "Member 'CoreAuthentication_EOSAuthCopyIdToken::Options' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthCopyIdToken, OutIdToken) == 0x000030, "Member 'CoreAuthentication_EOSAuthCopyIdToken::OutIdToken' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthCopyIdToken, ReturnValue) == 0x000068, "Member 'CoreAuthentication_EOSAuthCopyIdToken::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthCopyUserAuthToken
// 0x00E8 (0x00E8 - 0x0000)
struct CoreAuthentication_EOSAuthCopyUserAuthToken final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthCopyUserAuthTokenOptions       Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSEpicAccountId                      LocalUserId;                                       // 0x000C(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28D7[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSAuthToken                          OutUserAuthToken;                                  // 0x0030(0x00B0)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28D8[0x7];                                     // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAuthentication_EOSAuthCopyUserAuthToken) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthCopyUserAuthToken");
static_assert(sizeof(CoreAuthentication_EOSAuthCopyUserAuthToken) == 0x0000E8, "Wrong size on CoreAuthentication_EOSAuthCopyUserAuthToken");
static_assert(offsetof(CoreAuthentication_EOSAuthCopyUserAuthToken, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthCopyUserAuthToken::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthCopyUserAuthToken, Options) == 0x000008, "Member 'CoreAuthentication_EOSAuthCopyUserAuthToken::Options' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthCopyUserAuthToken, LocalUserId) == 0x00000C, "Member 'CoreAuthentication_EOSAuthCopyUserAuthToken::LocalUserId' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthCopyUserAuthToken, OutUserAuthToken) == 0x000030, "Member 'CoreAuthentication_EOSAuthCopyUserAuthToken::OutUserAuthToken' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthCopyUserAuthToken, ReturnValue) == 0x0000E0, "Member 'CoreAuthentication_EOSAuthCopyUserAuthToken::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthGetLoggedInAccountByIndex
// 0x0030 (0x0030 - 0x0000)
struct CoreAuthentication_EOSAuthGetLoggedInAccountByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEpicAccountId                      ReturnValue;                                       // 0x000C(0x0021)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28D9[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAuthentication_EOSAuthGetLoggedInAccountByIndex) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthGetLoggedInAccountByIndex");
static_assert(sizeof(CoreAuthentication_EOSAuthGetLoggedInAccountByIndex) == 0x000030, "Wrong size on CoreAuthentication_EOSAuthGetLoggedInAccountByIndex");
static_assert(offsetof(CoreAuthentication_EOSAuthGetLoggedInAccountByIndex, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthGetLoggedInAccountByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetLoggedInAccountByIndex, Param_Index) == 0x000008, "Member 'CoreAuthentication_EOSAuthGetLoggedInAccountByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetLoggedInAccountByIndex, ReturnValue) == 0x00000C, "Member 'CoreAuthentication_EOSAuthGetLoggedInAccountByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthGetLoggedInAccountsCount
// 0x0010 (0x0010 - 0x0000)
struct CoreAuthentication_EOSAuthGetLoggedInAccountsCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28DA[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAuthentication_EOSAuthGetLoggedInAccountsCount) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthGetLoggedInAccountsCount");
static_assert(sizeof(CoreAuthentication_EOSAuthGetLoggedInAccountsCount) == 0x000010, "Wrong size on CoreAuthentication_EOSAuthGetLoggedInAccountsCount");
static_assert(offsetof(CoreAuthentication_EOSAuthGetLoggedInAccountsCount, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthGetLoggedInAccountsCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetLoggedInAccountsCount, ReturnValue) == 0x000008, "Member 'CoreAuthentication_EOSAuthGetLoggedInAccountsCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthGetLoginStatus
// 0x0030 (0x0030 - 0x0000)
struct CoreAuthentication_EOSAuthGetLoginStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEpicAccountId                      LocalUserId;                                       // 0x0008(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSELoginStatus                               ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28DB[0x6];                                     // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAuthentication_EOSAuthGetLoginStatus) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthGetLoginStatus");
static_assert(sizeof(CoreAuthentication_EOSAuthGetLoginStatus) == 0x000030, "Wrong size on CoreAuthentication_EOSAuthGetLoginStatus");
static_assert(offsetof(CoreAuthentication_EOSAuthGetLoginStatus, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthGetLoginStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetLoginStatus, LocalUserId) == 0x000008, "Member 'CoreAuthentication_EOSAuthGetLoginStatus::LocalUserId' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetLoginStatus, ReturnValue) == 0x000029, "Member 'CoreAuthentication_EOSAuthGetLoginStatus::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthGetLoginStatusPure
// 0x0030 (0x0030 - 0x0000)
struct CoreAuthentication_EOSAuthGetLoginStatusPure final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEpicAccountId                      LocalUserId;                                       // 0x0008(0x0021)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSELoginStatus                               ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28DC[0x6];                                     // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAuthentication_EOSAuthGetLoginStatusPure) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthGetLoginStatusPure");
static_assert(sizeof(CoreAuthentication_EOSAuthGetLoginStatusPure) == 0x000030, "Wrong size on CoreAuthentication_EOSAuthGetLoginStatusPure");
static_assert(offsetof(CoreAuthentication_EOSAuthGetLoginStatusPure, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthGetLoginStatusPure::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetLoginStatusPure, LocalUserId) == 0x000008, "Member 'CoreAuthentication_EOSAuthGetLoginStatusPure::LocalUserId' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetLoginStatusPure, ReturnValue) == 0x000029, "Member 'CoreAuthentication_EOSAuthGetLoginStatusPure::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthGetMergedAccountByIndex
// 0x0058 (0x0058 - 0x0000)
struct CoreAuthentication_EOSAuthGetMergedAccountByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEpicAccountId                      LocalUserId;                                       // 0x0008(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28DD[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEpicAccountId                      ReturnValue;                                       // 0x0030(0x0021)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28DE[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAuthentication_EOSAuthGetMergedAccountByIndex) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthGetMergedAccountByIndex");
static_assert(sizeof(CoreAuthentication_EOSAuthGetMergedAccountByIndex) == 0x000058, "Wrong size on CoreAuthentication_EOSAuthGetMergedAccountByIndex");
static_assert(offsetof(CoreAuthentication_EOSAuthGetMergedAccountByIndex, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthGetMergedAccountByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetMergedAccountByIndex, LocalUserId) == 0x000008, "Member 'CoreAuthentication_EOSAuthGetMergedAccountByIndex::LocalUserId' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetMergedAccountByIndex, Param_Index) == 0x00002C, "Member 'CoreAuthentication_EOSAuthGetMergedAccountByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetMergedAccountByIndex, ReturnValue) == 0x000030, "Member 'CoreAuthentication_EOSAuthGetMergedAccountByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthGetMergedAccountsCount
// 0x0030 (0x0030 - 0x0000)
struct CoreAuthentication_EOSAuthGetMergedAccountsCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEpicAccountId                      LocalUserId;                                       // 0x0008(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28DF[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuthentication_EOSAuthGetMergedAccountsCount) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthGetMergedAccountsCount");
static_assert(sizeof(CoreAuthentication_EOSAuthGetMergedAccountsCount) == 0x000030, "Wrong size on CoreAuthentication_EOSAuthGetMergedAccountsCount");
static_assert(offsetof(CoreAuthentication_EOSAuthGetMergedAccountsCount, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthGetMergedAccountsCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetMergedAccountsCount, LocalUserId) == 0x000008, "Member 'CoreAuthentication_EOSAuthGetMergedAccountsCount::LocalUserId' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetMergedAccountsCount, ReturnValue) == 0x00002C, "Member 'CoreAuthentication_EOSAuthGetMergedAccountsCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthGetSelectedAccountId
// 0x0050 (0x0050 - 0x0000)
struct CoreAuthentication_EOSAuthGetSelectedAccountId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEpicAccountId                      LocalUserId;                                       // 0x0008(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEpicAccountId                      OutSelectedAccountId;                              // 0x0029(0x0021)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x004A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28E0[0x5];                                     // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAuthentication_EOSAuthGetSelectedAccountId) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthGetSelectedAccountId");
static_assert(sizeof(CoreAuthentication_EOSAuthGetSelectedAccountId) == 0x000050, "Wrong size on CoreAuthentication_EOSAuthGetSelectedAccountId");
static_assert(offsetof(CoreAuthentication_EOSAuthGetSelectedAccountId, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthGetSelectedAccountId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetSelectedAccountId, LocalUserId) == 0x000008, "Member 'CoreAuthentication_EOSAuthGetSelectedAccountId::LocalUserId' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetSelectedAccountId, OutSelectedAccountId) == 0x000029, "Member 'CoreAuthentication_EOSAuthGetSelectedAccountId::OutSelectedAccountId' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthGetSelectedAccountId, ReturnValue) == 0x00004A, "Member 'CoreAuthentication_EOSAuthGetSelectedAccountId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthQueryIdToken
// 0x0060 (0x0060 - 0x0000)
struct CoreAuthentication_EOSAuthQueryIdToken final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthQueryIdTokenOptions            Options;                                           // 0x0008(0x0042)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28E1[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSAuthQueryIdTokenCallbackInfo& Data)> Callback;                                          // 0x004C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28E2[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAuthentication_EOSAuthQueryIdToken) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthQueryIdToken");
static_assert(sizeof(CoreAuthentication_EOSAuthQueryIdToken) == 0x000060, "Wrong size on CoreAuthentication_EOSAuthQueryIdToken");
static_assert(offsetof(CoreAuthentication_EOSAuthQueryIdToken, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthQueryIdToken::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthQueryIdToken, Options) == 0x000008, "Member 'CoreAuthentication_EOSAuthQueryIdToken::Options' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthQueryIdToken, Callback) == 0x00004C, "Member 'CoreAuthentication_EOSAuthQueryIdToken::Callback' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthRemoveNotifyLoginStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct CoreAuthentication_EOSAuthRemoveNotifyLoginStatusChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuthentication_EOSAuthRemoveNotifyLoginStatusChanged) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthRemoveNotifyLoginStatusChanged");
static_assert(sizeof(CoreAuthentication_EOSAuthRemoveNotifyLoginStatusChanged) == 0x000010, "Wrong size on CoreAuthentication_EOSAuthRemoveNotifyLoginStatusChanged");
static_assert(offsetof(CoreAuthentication_EOSAuthRemoveNotifyLoginStatusChanged, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthRemoveNotifyLoginStatusChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthRemoveNotifyLoginStatusChanged, ID) == 0x000008, "Member 'CoreAuthentication_EOSAuthRemoveNotifyLoginStatusChanged::ID' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthVerifyIdToken
// 0x0050 (0x0050 - 0x0000)
struct CoreAuthentication_EOSAuthVerifyIdToken final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthVerifyIdTokenOptions           Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSAuthVerifyIdTokenCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuthentication_EOSAuthVerifyIdToken) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthVerifyIdToken");
static_assert(sizeof(CoreAuthentication_EOSAuthVerifyIdToken) == 0x000050, "Wrong size on CoreAuthentication_EOSAuthVerifyIdToken");
static_assert(offsetof(CoreAuthentication_EOSAuthVerifyIdToken, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthVerifyIdToken::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthVerifyIdToken, Options) == 0x000008, "Member 'CoreAuthentication_EOSAuthVerifyIdToken::Options' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthVerifyIdToken, Callback) == 0x000040, "Member 'CoreAuthentication_EOSAuthVerifyIdToken::Callback' has a wrong offset!");

// Function EOSCore.CoreAuthentication.GetAuthentication
// 0x0010 (0x0010 - 0x0000)
struct CoreAuthentication_GetAuthentication final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreAuthentication*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuthentication_GetAuthentication) == 0x000008, "Wrong alignment on CoreAuthentication_GetAuthentication");
static_assert(sizeof(CoreAuthentication_GetAuthentication) == 0x000010, "Wrong size on CoreAuthentication_GetAuthentication");
static_assert(offsetof(CoreAuthentication_GetAuthentication, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_GetAuthentication::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_GetAuthentication, ReturnValue) == 0x000008, "Member 'CoreAuthentication_GetAuthentication::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthDeletePersistentAuth
// 0x0028 (0x0028 - 0x0000)
struct CoreAuthentication_EOSAuthDeletePersistentAuth final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthDeletePersistentAuthOptions    Options;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSAuthDeletePersistentAuthCallbackInfo& Data)> Callback;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuthentication_EOSAuthDeletePersistentAuth) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthDeletePersistentAuth");
static_assert(sizeof(CoreAuthentication_EOSAuthDeletePersistentAuth) == 0x000028, "Wrong size on CoreAuthentication_EOSAuthDeletePersistentAuth");
static_assert(offsetof(CoreAuthentication_EOSAuthDeletePersistentAuth, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthDeletePersistentAuth::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthDeletePersistentAuth, Options) == 0x000008, "Member 'CoreAuthentication_EOSAuthDeletePersistentAuth::Options' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthDeletePersistentAuth, Callback) == 0x000018, "Member 'CoreAuthentication_EOSAuthDeletePersistentAuth::Callback' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthLinkAccount
// 0x0050 (0x0050 - 0x0000)
struct CoreAuthentication_EOSAuthLinkAccount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthLinkAccountOptions             Options;                                           // 0x0008(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSAuthLinkAccountCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuthentication_EOSAuthLinkAccount) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthLinkAccount");
static_assert(sizeof(CoreAuthentication_EOSAuthLinkAccount) == 0x000050, "Wrong size on CoreAuthentication_EOSAuthLinkAccount");
static_assert(offsetof(CoreAuthentication_EOSAuthLinkAccount, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthLinkAccount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthLinkAccount, Options) == 0x000008, "Member 'CoreAuthentication_EOSAuthLinkAccount::Options' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthLinkAccount, Callback) == 0x000040, "Member 'CoreAuthentication_EOSAuthLinkAccount::Callback' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthLogin
// 0x0058 (0x0058 - 0x0000)
struct CoreAuthentication_EOSAuthLogin final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthLoginOptions                   Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSAuthLoginCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuthentication_EOSAuthLogin) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthLogin");
static_assert(sizeof(CoreAuthentication_EOSAuthLogin) == 0x000058, "Wrong size on CoreAuthentication_EOSAuthLogin");
static_assert(offsetof(CoreAuthentication_EOSAuthLogin, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthLogin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthLogin, Options) == 0x000008, "Member 'CoreAuthentication_EOSAuthLogin::Options' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthLogin, Callback) == 0x000048, "Member 'CoreAuthentication_EOSAuthLogin::Callback' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthLogout
// 0x0040 (0x0040 - 0x0000)
struct CoreAuthentication_EOSAuthLogout final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthLogoutOptions                  Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSAuthLogoutCallbackInfo& Data)> Callback;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuthentication_EOSAuthLogout) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthLogout");
static_assert(sizeof(CoreAuthentication_EOSAuthLogout) == 0x000040, "Wrong size on CoreAuthentication_EOSAuthLogout");
static_assert(offsetof(CoreAuthentication_EOSAuthLogout, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthLogout::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthLogout, Options) == 0x000008, "Member 'CoreAuthentication_EOSAuthLogout::Options' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthLogout, Callback) == 0x000030, "Member 'CoreAuthentication_EOSAuthLogout::Callback' has a wrong offset!");

// Function EOSCore.CoreAuthentication.EOSAuthVerifyUserAuth
// 0x00C8 (0x00C8 - 0x0000)
struct CoreAuthentication_EOSAuthVerifyUserAuth final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAuthVerifyUserAuthOptions          Options;                                           // 0x0008(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSAuthVerifyUserAuthCallbackInfo& Data)> Callback;                                          // 0x00B8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuthentication_EOSAuthVerifyUserAuth) == 0x000008, "Wrong alignment on CoreAuthentication_EOSAuthVerifyUserAuth");
static_assert(sizeof(CoreAuthentication_EOSAuthVerifyUserAuth) == 0x0000C8, "Wrong size on CoreAuthentication_EOSAuthVerifyUserAuth");
static_assert(offsetof(CoreAuthentication_EOSAuthVerifyUserAuth, WorldContextObject) == 0x000000, "Member 'CoreAuthentication_EOSAuthVerifyUserAuth::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthVerifyUserAuth, Options) == 0x000008, "Member 'CoreAuthentication_EOSAuthVerifyUserAuth::Options' has a wrong offset!");
static_assert(offsetof(CoreAuthentication_EOSAuthVerifyUserAuth, Callback) == 0x0000B8, "Member 'CoreAuthentication_EOSAuthVerifyUserAuth::Callback' has a wrong offset!");

// Function EOSCore.EOSCorePlayerDataStorageDuplicateFile.EOSPlayerDataStorageDuplicateFileAsync
// 0x0058 (0x0058 - 0x0000)
struct EOSCorePlayerDataStorageDuplicateFile_EOSPlayerDataStorageDuplicateFileAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageDuplicateFileOptions DuplicateOptions;                                  // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	class UEOSCorePlayerDataStorageDuplicateFile* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCorePlayerDataStorageDuplicateFile_EOSPlayerDataStorageDuplicateFileAsync) == 0x000008, "Wrong alignment on EOSCorePlayerDataStorageDuplicateFile_EOSPlayerDataStorageDuplicateFileAsync");
static_assert(sizeof(EOSCorePlayerDataStorageDuplicateFile_EOSPlayerDataStorageDuplicateFileAsync) == 0x000058, "Wrong size on EOSCorePlayerDataStorageDuplicateFile_EOSPlayerDataStorageDuplicateFileAsync");
static_assert(offsetof(EOSCorePlayerDataStorageDuplicateFile_EOSPlayerDataStorageDuplicateFileAsync, WorldContextObject) == 0x000000, "Member 'EOSCorePlayerDataStorageDuplicateFile_EOSPlayerDataStorageDuplicateFileAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageDuplicateFile_EOSPlayerDataStorageDuplicateFileAsync, DuplicateOptions) == 0x000008, "Member 'EOSCorePlayerDataStorageDuplicateFile_EOSPlayerDataStorageDuplicateFileAsync::DuplicateOptions' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageDuplicateFile_EOSPlayerDataStorageDuplicateFileAsync, ReturnValue) == 0x000050, "Member 'EOSCorePlayerDataStorageDuplicateFile_EOSPlayerDataStorageDuplicateFileAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCorePlayerDataStorageDuplicateFile.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCorePlayerDataStorageDuplicateFile_HandleCallback final
{
public:
	struct FEOSPlayerDataStorageDuplicateFileCallbackInfo Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28E4[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCorePlayerDataStorageDuplicateFile_HandleCallback) == 0x000008, "Wrong alignment on EOSCorePlayerDataStorageDuplicateFile_HandleCallback");
static_assert(sizeof(EOSCorePlayerDataStorageDuplicateFile_HandleCallback) == 0x000040, "Wrong size on EOSCorePlayerDataStorageDuplicateFile_HandleCallback");
static_assert(offsetof(EOSCorePlayerDataStorageDuplicateFile_HandleCallback, Data) == 0x000000, "Member 'EOSCorePlayerDataStorageDuplicateFile_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageDuplicateFile_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCorePlayerDataStorageDuplicateFile_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreChat.GetChat
// 0x0008 (0x0008 - 0x0000)
struct CoreChat_GetChat final
{
public:
	class UCoreChat*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChat_GetChat) == 0x000008, "Wrong alignment on CoreChat_GetChat");
static_assert(sizeof(CoreChat_GetChat) == 0x000008, "Wrong size on CoreChat_GetChat");
static_assert(offsetof(CoreChat_GetChat, ReturnValue) == 0x000000, "Member 'CoreChat_GetChat::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreChat.ListenForChatMessages
// 0x0040 (0x0040 - 0x0000)
struct CoreChat_ListenForChatMessages final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      LocalUserId;                                       // 0x0008(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28E6[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSProductUserId& Sender, struct FEOSProductUserId& Receiver, const class FString& Message)> Callback;                                          // 0x002C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28E7[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreChat_ListenForChatMessages) == 0x000008, "Wrong alignment on CoreChat_ListenForChatMessages");
static_assert(sizeof(CoreChat_ListenForChatMessages) == 0x000040, "Wrong size on CoreChat_ListenForChatMessages");
static_assert(offsetof(CoreChat_ListenForChatMessages, WorldContextObject) == 0x000000, "Member 'CoreChat_ListenForChatMessages::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreChat_ListenForChatMessages, LocalUserId) == 0x000008, "Member 'CoreChat_ListenForChatMessages::LocalUserId' has a wrong offset!");
static_assert(offsetof(CoreChat_ListenForChatMessages, Callback) == 0x00002C, "Member 'CoreChat_ListenForChatMessages::Callback' has a wrong offset!");

// Function EOSCore.CoreChat.SendChatMessage
// 0x0068 (0x0068 - 0x0000)
struct CoreChat_SendChatMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      LocalUserId;                                       // 0x0008(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      Target;                                            // 0x0029(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28E8[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSEPacketReliability                        Reliability;                                       // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28E9[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreChat_SendChatMessage) == 0x000008, "Wrong alignment on CoreChat_SendChatMessage");
static_assert(sizeof(CoreChat_SendChatMessage) == 0x000068, "Wrong size on CoreChat_SendChatMessage");
static_assert(offsetof(CoreChat_SendChatMessage, WorldContextObject) == 0x000000, "Member 'CoreChat_SendChatMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreChat_SendChatMessage, LocalUserId) == 0x000008, "Member 'CoreChat_SendChatMessage::LocalUserId' has a wrong offset!");
static_assert(offsetof(CoreChat_SendChatMessage, Target) == 0x000029, "Member 'CoreChat_SendChatMessage::Target' has a wrong offset!");
static_assert(offsetof(CoreChat_SendChatMessage, Message) == 0x000050, "Member 'CoreChat_SendChatMessage::Message' has a wrong offset!");
static_assert(offsetof(CoreChat_SendChatMessage, Reliability) == 0x000060, "Member 'CoreChat_SendChatMessage::Reliability' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectAddNotifyAuthExpiration
// 0x0020 (0x0020 - 0x0000)
struct CoreConnect_EOSConnectAddNotifyAuthExpiration final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSConnectAuthExpirationCallbackInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreConnect_EOSConnectAddNotifyAuthExpiration) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectAddNotifyAuthExpiration");
static_assert(sizeof(CoreConnect_EOSConnectAddNotifyAuthExpiration) == 0x000020, "Wrong size on CoreConnect_EOSConnectAddNotifyAuthExpiration");
static_assert(offsetof(CoreConnect_EOSConnectAddNotifyAuthExpiration, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectAddNotifyAuthExpiration::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectAddNotifyAuthExpiration, Callback) == 0x000008, "Member 'CoreConnect_EOSConnectAddNotifyAuthExpiration::Callback' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectAddNotifyAuthExpiration, ReturnValue) == 0x000018, "Member 'CoreConnect_EOSConnectAddNotifyAuthExpiration::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectAddNotifyLoginStatusChanged
// 0x0020 (0x0020 - 0x0000)
struct CoreConnect_EOSConnectAddNotifyLoginStatusChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSConnectLoginStatusChangedCallbackInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreConnect_EOSConnectAddNotifyLoginStatusChanged) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectAddNotifyLoginStatusChanged");
static_assert(sizeof(CoreConnect_EOSConnectAddNotifyLoginStatusChanged) == 0x000020, "Wrong size on CoreConnect_EOSConnectAddNotifyLoginStatusChanged");
static_assert(offsetof(CoreConnect_EOSConnectAddNotifyLoginStatusChanged, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectAddNotifyLoginStatusChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectAddNotifyLoginStatusChanged, Callback) == 0x000008, "Member 'CoreConnect_EOSConnectAddNotifyLoginStatusChanged::Callback' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectAddNotifyLoginStatusChanged, ReturnValue) == 0x000018, "Member 'CoreConnect_EOSConnectAddNotifyLoginStatusChanged::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectCopyIdToken
// 0x0070 (0x0070 - 0x0000)
struct CoreConnect_EOSConnectCopyIdToken final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectCopyIdTokenOptions          Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28EB[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSConnectIdToken                     OutIdToken;                                        // 0x0030(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28EC[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectCopyIdToken) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectCopyIdToken");
static_assert(sizeof(CoreConnect_EOSConnectCopyIdToken) == 0x000070, "Wrong size on CoreConnect_EOSConnectCopyIdToken");
static_assert(offsetof(CoreConnect_EOSConnectCopyIdToken, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectCopyIdToken::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyIdToken, Options) == 0x000008, "Member 'CoreConnect_EOSConnectCopyIdToken::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyIdToken, OutIdToken) == 0x000030, "Member 'CoreConnect_EOSConnectCopyIdToken::OutIdToken' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyIdToken, ReturnValue) == 0x000068, "Member 'CoreConnect_EOSConnectCopyIdToken::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectCopyProductUserExternalAccountByAccountId
// 0x00A8 (0x00A8 - 0x0000)
struct CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectCopyProductUserExternalAccountByAccountIdOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	struct FEOSConnectExternalAccountInfo         OutExternalAccountInfo;                            // 0x0040(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28ED[0x7];                                     // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountId) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountId");
static_assert(sizeof(CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountId) == 0x0000A8, "Wrong size on CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountId");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountId, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountId, Options) == 0x000008, "Member 'CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountId::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountId, OutExternalAccountInfo) == 0x000040, "Member 'CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountId::OutExternalAccountInfo' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountId, ReturnValue) == 0x0000A0, "Member 'CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectCopyProductUserExternalAccountByAccountType
// 0x0098 (0x0098 - 0x0000)
struct CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountType final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectCopyProductUserExternalAccountByAccountTypeOptions Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSConnectExternalAccountInfo         OutExternalAccountInfo;                            // 0x0030(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28EE[0x7];                                     // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountType) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountType");
static_assert(sizeof(CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountType) == 0x000098, "Wrong size on CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountType");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountType, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountType, Options) == 0x000008, "Member 'CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountType::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountType, OutExternalAccountInfo) == 0x000030, "Member 'CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountType::OutExternalAccountInfo' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountType, ReturnValue) == 0x000090, "Member 'CoreConnect_EOSConnectCopyProductUserExternalAccountByAccountType::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectCopyProductUserExternalAccountByIndex
// 0x00A0 (0x00A0 - 0x0000)
struct CoreConnect_EOSConnectCopyProductUserExternalAccountByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectCopyProductUserExternalAccountByIndexOptions Options;                                           // 0x0008(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28EF[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSConnectExternalAccountInfo         OutExternalAccountInfo;                            // 0x0038(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28F0[0x7];                                     // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectCopyProductUserExternalAccountByIndex) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectCopyProductUserExternalAccountByIndex");
static_assert(sizeof(CoreConnect_EOSConnectCopyProductUserExternalAccountByIndex) == 0x0000A0, "Wrong size on CoreConnect_EOSConnectCopyProductUserExternalAccountByIndex");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserExternalAccountByIndex, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectCopyProductUserExternalAccountByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserExternalAccountByIndex, Options) == 0x000008, "Member 'CoreConnect_EOSConnectCopyProductUserExternalAccountByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserExternalAccountByIndex, OutExternalAccountInfo) == 0x000038, "Member 'CoreConnect_EOSConnectCopyProductUserExternalAccountByIndex::OutExternalAccountInfo' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserExternalAccountByIndex, ReturnValue) == 0x000098, "Member 'CoreConnect_EOSConnectCopyProductUserExternalAccountByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectCopyProductUserInfo
// 0x0098 (0x0098 - 0x0000)
struct CoreConnect_EOSConnectCopyProductUserInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectCopyProductUserInfoOptions  Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSConnectExternalAccountInfo         OutExternalAccountInfo;                            // 0x0030(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28F1[0x7];                                     // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectCopyProductUserInfo) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectCopyProductUserInfo");
static_assert(sizeof(CoreConnect_EOSConnectCopyProductUserInfo) == 0x000098, "Wrong size on CoreConnect_EOSConnectCopyProductUserInfo");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserInfo, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectCopyProductUserInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserInfo, Options) == 0x000008, "Member 'CoreConnect_EOSConnectCopyProductUserInfo::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserInfo, OutExternalAccountInfo) == 0x000030, "Member 'CoreConnect_EOSConnectCopyProductUserInfo::OutExternalAccountInfo' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCopyProductUserInfo, ReturnValue) == 0x000090, "Member 'CoreConnect_EOSConnectCopyProductUserInfo::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectGetExternalAccountMapping
// 0x0068 (0x0068 - 0x0000)
struct CoreConnect_EOSConnectGetExternalAccountMapping final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectGetExternalAccountMappingsOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      ReturnValue;                                       // 0x0040(0x0021)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28F2[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectGetExternalAccountMapping) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectGetExternalAccountMapping");
static_assert(sizeof(CoreConnect_EOSConnectGetExternalAccountMapping) == 0x000068, "Wrong size on CoreConnect_EOSConnectGetExternalAccountMapping");
static_assert(offsetof(CoreConnect_EOSConnectGetExternalAccountMapping, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectGetExternalAccountMapping::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetExternalAccountMapping, Options) == 0x000008, "Member 'CoreConnect_EOSConnectGetExternalAccountMapping::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetExternalAccountMapping, ReturnValue) == 0x000040, "Member 'CoreConnect_EOSConnectGetExternalAccountMapping::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectGetLoggedInUserByIndex
// 0x0030 (0x0030 - 0x0000)
struct CoreConnect_EOSConnectGetLoggedInUserByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      ReturnValue;                                       // 0x000C(0x0021)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28F3[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectGetLoggedInUserByIndex) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectGetLoggedInUserByIndex");
static_assert(sizeof(CoreConnect_EOSConnectGetLoggedInUserByIndex) == 0x000030, "Wrong size on CoreConnect_EOSConnectGetLoggedInUserByIndex");
static_assert(offsetof(CoreConnect_EOSConnectGetLoggedInUserByIndex, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectGetLoggedInUserByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetLoggedInUserByIndex, Param_Index) == 0x000008, "Member 'CoreConnect_EOSConnectGetLoggedInUserByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetLoggedInUserByIndex, ReturnValue) == 0x00000C, "Member 'CoreConnect_EOSConnectGetLoggedInUserByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectGetLoggedInUsersCount
// 0x0010 (0x0010 - 0x0000)
struct CoreConnect_EOSConnectGetLoggedInUsersCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28F4[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectGetLoggedInUsersCount) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectGetLoggedInUsersCount");
static_assert(sizeof(CoreConnect_EOSConnectGetLoggedInUsersCount) == 0x000010, "Wrong size on CoreConnect_EOSConnectGetLoggedInUsersCount");
static_assert(offsetof(CoreConnect_EOSConnectGetLoggedInUsersCount, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectGetLoggedInUsersCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetLoggedInUsersCount, ReturnValue) == 0x000008, "Member 'CoreConnect_EOSConnectGetLoggedInUsersCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectGetLoginStatus
// 0x0030 (0x0030 - 0x0000)
struct CoreConnect_EOSConnectGetLoginStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      LocalUserId;                                       // 0x0008(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSELoginStatus                              ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28F5[0x6];                                     // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectGetLoginStatus) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectGetLoginStatus");
static_assert(sizeof(CoreConnect_EOSConnectGetLoginStatus) == 0x000030, "Wrong size on CoreConnect_EOSConnectGetLoginStatus");
static_assert(offsetof(CoreConnect_EOSConnectGetLoginStatus, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectGetLoginStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetLoginStatus, LocalUserId) == 0x000008, "Member 'CoreConnect_EOSConnectGetLoginStatus::LocalUserId' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetLoginStatus, ReturnValue) == 0x000029, "Member 'CoreConnect_EOSConnectGetLoginStatus::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectGetLoginStatusPure
// 0x0030 (0x0030 - 0x0000)
struct CoreConnect_EOSConnectGetLoginStatusPure final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      LocalUserId;                                       // 0x0008(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSELoginStatus                              ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28F6[0x6];                                     // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectGetLoginStatusPure) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectGetLoginStatusPure");
static_assert(sizeof(CoreConnect_EOSConnectGetLoginStatusPure) == 0x000030, "Wrong size on CoreConnect_EOSConnectGetLoginStatusPure");
static_assert(offsetof(CoreConnect_EOSConnectGetLoginStatusPure, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectGetLoginStatusPure::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetLoginStatusPure, LocalUserId) == 0x000008, "Member 'CoreConnect_EOSConnectGetLoginStatusPure::LocalUserId' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetLoginStatusPure, ReturnValue) == 0x000029, "Member 'CoreConnect_EOSConnectGetLoginStatusPure::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectGetProductUserExternalAccountCount
// 0x0038 (0x0038 - 0x0000)
struct CoreConnect_EOSConnectGetProductUserExternalAccountCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectGetProductUserExternalAccountCountOptions Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28F7[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectGetProductUserExternalAccountCount) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectGetProductUserExternalAccountCount");
static_assert(sizeof(CoreConnect_EOSConnectGetProductUserExternalAccountCount) == 0x000038, "Wrong size on CoreConnect_EOSConnectGetProductUserExternalAccountCount");
static_assert(offsetof(CoreConnect_EOSConnectGetProductUserExternalAccountCount, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectGetProductUserExternalAccountCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetProductUserExternalAccountCount, Options) == 0x000008, "Member 'CoreConnect_EOSConnectGetProductUserExternalAccountCount::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetProductUserExternalAccountCount, ReturnValue) == 0x000030, "Member 'CoreConnect_EOSConnectGetProductUserExternalAccountCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectGetProductUserIdMapping
// 0x0068 (0x0068 - 0x0000)
struct CoreConnect_EOSConnectGetProductUserIdMapping final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectGetProductUserIdMappingOptions Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 OutString;                                         // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28F8[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectGetProductUserIdMapping) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectGetProductUserIdMapping");
static_assert(sizeof(CoreConnect_EOSConnectGetProductUserIdMapping) == 0x000068, "Wrong size on CoreConnect_EOSConnectGetProductUserIdMapping");
static_assert(offsetof(CoreConnect_EOSConnectGetProductUserIdMapping, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectGetProductUserIdMapping::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetProductUserIdMapping, Options) == 0x000008, "Member 'CoreConnect_EOSConnectGetProductUserIdMapping::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetProductUserIdMapping, OutString) == 0x000050, "Member 'CoreConnect_EOSConnectGetProductUserIdMapping::OutString' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectGetProductUserIdMapping, ReturnValue) == 0x000060, "Member 'CoreConnect_EOSConnectGetProductUserIdMapping::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectRemoveNotifyAuthExpiration
// 0x0010 (0x0010 - 0x0000)
struct CoreConnect_EOSConnectRemoveNotifyAuthExpiration final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreConnect_EOSConnectRemoveNotifyAuthExpiration) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectRemoveNotifyAuthExpiration");
static_assert(sizeof(CoreConnect_EOSConnectRemoveNotifyAuthExpiration) == 0x000010, "Wrong size on CoreConnect_EOSConnectRemoveNotifyAuthExpiration");
static_assert(offsetof(CoreConnect_EOSConnectRemoveNotifyAuthExpiration, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectRemoveNotifyAuthExpiration::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectRemoveNotifyAuthExpiration, ID) == 0x000008, "Member 'CoreConnect_EOSConnectRemoveNotifyAuthExpiration::ID' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectRemoveNotifyLoginStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct CoreConnect_EOSConnectRemoveNotifyLoginStatusChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreConnect_EOSConnectRemoveNotifyLoginStatusChanged) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectRemoveNotifyLoginStatusChanged");
static_assert(sizeof(CoreConnect_EOSConnectRemoveNotifyLoginStatusChanged) == 0x000010, "Wrong size on CoreConnect_EOSConnectRemoveNotifyLoginStatusChanged");
static_assert(offsetof(CoreConnect_EOSConnectRemoveNotifyLoginStatusChanged, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectRemoveNotifyLoginStatusChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectRemoveNotifyLoginStatusChanged, ID) == 0x000008, "Member 'CoreConnect_EOSConnectRemoveNotifyLoginStatusChanged::ID' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectVerifyIdToken
// 0x0050 (0x0050 - 0x0000)
struct CoreConnect_EOSConnectVerifyIdToken final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectVerifyIdTokenOptions        Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSConnectOnVerifyIdTokenCallback& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreConnect_EOSConnectVerifyIdToken) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectVerifyIdToken");
static_assert(sizeof(CoreConnect_EOSConnectVerifyIdToken) == 0x000050, "Wrong size on CoreConnect_EOSConnectVerifyIdToken");
static_assert(offsetof(CoreConnect_EOSConnectVerifyIdToken, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectVerifyIdToken::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectVerifyIdToken, Options) == 0x000008, "Member 'CoreConnect_EOSConnectVerifyIdToken::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectVerifyIdToken, Callback) == 0x000040, "Member 'CoreConnect_EOSConnectVerifyIdToken::Callback' has a wrong offset!");

// Function EOSCore.CoreConnect.GetConnect
// 0x0010 (0x0010 - 0x0000)
struct CoreConnect_GetConnect final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreConnect*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreConnect_GetConnect) == 0x000008, "Wrong alignment on CoreConnect_GetConnect");
static_assert(sizeof(CoreConnect_GetConnect) == 0x000010, "Wrong size on CoreConnect_GetConnect");
static_assert(offsetof(CoreConnect_GetConnect, WorldContextObject) == 0x000000, "Member 'CoreConnect_GetConnect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_GetConnect, ReturnValue) == 0x000008, "Member 'CoreConnect_GetConnect::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectCreateDeviceId
// 0x0028 (0x0028 - 0x0000)
struct CoreConnect_EOSConnectCreateDeviceId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectCreateDeviceIdOptions       Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSConnectCreateDeviceIdCallbackInfo& Data)> Callback;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreConnect_EOSConnectCreateDeviceId) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectCreateDeviceId");
static_assert(sizeof(CoreConnect_EOSConnectCreateDeviceId) == 0x000028, "Wrong size on CoreConnect_EOSConnectCreateDeviceId");
static_assert(offsetof(CoreConnect_EOSConnectCreateDeviceId, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectCreateDeviceId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCreateDeviceId, Options) == 0x000008, "Member 'CoreConnect_EOSConnectCreateDeviceId::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCreateDeviceId, Callback) == 0x000018, "Member 'CoreConnect_EOSConnectCreateDeviceId::Callback' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectCreateUser
// 0x0020 (0x0020 - 0x0000)
struct CoreConnect_EOSConnectCreateUser final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectCreateUserOptions           Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSConnectCreateUserCallbackInfo& Data)> Callback;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreConnect_EOSConnectCreateUser) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectCreateUser");
static_assert(sizeof(CoreConnect_EOSConnectCreateUser) == 0x000020, "Wrong size on CoreConnect_EOSConnectCreateUser");
static_assert(offsetof(CoreConnect_EOSConnectCreateUser, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectCreateUser::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCreateUser, Options) == 0x000008, "Member 'CoreConnect_EOSConnectCreateUser::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectCreateUser, Callback) == 0x000010, "Member 'CoreConnect_EOSConnectCreateUser::Callback' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectDeleteDeviceId
// 0x0020 (0x0020 - 0x0000)
struct CoreConnect_EOSConnectDeleteDeviceId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectDeleteDeviceIdOptions       Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSConnectDeleteDeviceIdCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28F9[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectDeleteDeviceId) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectDeleteDeviceId");
static_assert(sizeof(CoreConnect_EOSConnectDeleteDeviceId) == 0x000020, "Wrong size on CoreConnect_EOSConnectDeleteDeviceId");
static_assert(offsetof(CoreConnect_EOSConnectDeleteDeviceId, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectDeleteDeviceId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectDeleteDeviceId, Options) == 0x000008, "Member 'CoreConnect_EOSConnectDeleteDeviceId::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectDeleteDeviceId, Callback) == 0x00000C, "Member 'CoreConnect_EOSConnectDeleteDeviceId::Callback' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectLinkAccount
// 0x0048 (0x0048 - 0x0000)
struct CoreConnect_EOSConnectLinkAccount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectLinkAccountOptions          Options;                                           // 0x0008(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSConnectLinkAccountCallbackInfo& Data)> Callback;                                          // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreConnect_EOSConnectLinkAccount) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectLinkAccount");
static_assert(sizeof(CoreConnect_EOSConnectLinkAccount) == 0x000048, "Wrong size on CoreConnect_EOSConnectLinkAccount");
static_assert(offsetof(CoreConnect_EOSConnectLinkAccount, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectLinkAccount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectLinkAccount, Options) == 0x000008, "Member 'CoreConnect_EOSConnectLinkAccount::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectLinkAccount, Callback) == 0x000038, "Member 'CoreConnect_EOSConnectLinkAccount::Callback' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectLogin
// 0x0048 (0x0048 - 0x0000)
struct CoreConnect_EOSConnectLogin final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectLoginOptions                Options;                                           // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSConnectLoginCallbackInfo& Data)> Callback;                                          // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreConnect_EOSConnectLogin) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectLogin");
static_assert(sizeof(CoreConnect_EOSConnectLogin) == 0x000048, "Wrong size on CoreConnect_EOSConnectLogin");
static_assert(offsetof(CoreConnect_EOSConnectLogin, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectLogin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectLogin, Options) == 0x000008, "Member 'CoreConnect_EOSConnectLogin::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectLogin, Callback) == 0x000038, "Member 'CoreConnect_EOSConnectLogin::Callback' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectQueryExternalAccountMappings
// 0x0050 (0x0050 - 0x0000)
struct CoreConnect_EOSConnectQueryExternalAccountMappings final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectQueryExternalAccountMappingsOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSConnectQueryExternalAccountMappingsCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreConnect_EOSConnectQueryExternalAccountMappings) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectQueryExternalAccountMappings");
static_assert(sizeof(CoreConnect_EOSConnectQueryExternalAccountMappings) == 0x000050, "Wrong size on CoreConnect_EOSConnectQueryExternalAccountMappings");
static_assert(offsetof(CoreConnect_EOSConnectQueryExternalAccountMappings, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectQueryExternalAccountMappings::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectQueryExternalAccountMappings, Options) == 0x000008, "Member 'CoreConnect_EOSConnectQueryExternalAccountMappings::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectQueryExternalAccountMappings, Callback) == 0x000040, "Member 'CoreConnect_EOSConnectQueryExternalAccountMappings::Callback' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectQueryProductUserIdMappings
// 0x0050 (0x0050 - 0x0000)
struct CoreConnect_EOSConnectQueryProductUserIdMappings final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectQueryProductUserIdMappingsOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSConnectQueryProductUserIdMappingsCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreConnect_EOSConnectQueryProductUserIdMappings) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectQueryProductUserIdMappings");
static_assert(sizeof(CoreConnect_EOSConnectQueryProductUserIdMappings) == 0x000050, "Wrong size on CoreConnect_EOSConnectQueryProductUserIdMappings");
static_assert(offsetof(CoreConnect_EOSConnectQueryProductUserIdMappings, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectQueryProductUserIdMappings::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectQueryProductUserIdMappings, Options) == 0x000008, "Member 'CoreConnect_EOSConnectQueryProductUserIdMappings::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectQueryProductUserIdMappings, Callback) == 0x000040, "Member 'CoreConnect_EOSConnectQueryProductUserIdMappings::Callback' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectTransferDeviceIdAccount
// 0x0080 (0x0080 - 0x0000)
struct CoreConnect_EOSConnectTransferDeviceIdAccount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectTransferDeviceIdAccountOptions Options;                                           // 0x0008(0x0063)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28FA[0x1];                                     // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSConnectTransferDeviceIdAccountCallbackInfo& Data)> Callback;                                          // 0x006C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28FB[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreConnect_EOSConnectTransferDeviceIdAccount) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectTransferDeviceIdAccount");
static_assert(sizeof(CoreConnect_EOSConnectTransferDeviceIdAccount) == 0x000080, "Wrong size on CoreConnect_EOSConnectTransferDeviceIdAccount");
static_assert(offsetof(CoreConnect_EOSConnectTransferDeviceIdAccount, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectTransferDeviceIdAccount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectTransferDeviceIdAccount, Options) == 0x000008, "Member 'CoreConnect_EOSConnectTransferDeviceIdAccount::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectTransferDeviceIdAccount, Callback) == 0x00006C, "Member 'CoreConnect_EOSConnectTransferDeviceIdAccount::Callback' has a wrong offset!");

// Function EOSCore.CoreConnect.EOSConnectUnlinkAccount
// 0x0040 (0x0040 - 0x0000)
struct CoreConnect_EOSConnectUnlinkAccount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectUnlinkAccountOptions        Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSConnectUnlinkAccountCallbackInfo& Data)> Callback;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreConnect_EOSConnectUnlinkAccount) == 0x000008, "Wrong alignment on CoreConnect_EOSConnectUnlinkAccount");
static_assert(sizeof(CoreConnect_EOSConnectUnlinkAccount) == 0x000040, "Wrong size on CoreConnect_EOSConnectUnlinkAccount");
static_assert(offsetof(CoreConnect_EOSConnectUnlinkAccount, WorldContextObject) == 0x000000, "Member 'CoreConnect_EOSConnectUnlinkAccount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectUnlinkAccount, Options) == 0x000008, "Member 'CoreConnect_EOSConnectUnlinkAccount::Options' has a wrong offset!");
static_assert(offsetof(CoreConnect_EOSConnectUnlinkAccount, Callback) == 0x000030, "Member 'CoreConnect_EOSConnectUnlinkAccount::Callback' has a wrong offset!");

// Function EOSCore.EOSCoreConnectLogin.EOSConnectLoginAsync
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreConnectLogin_EOSConnectLoginAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectLoginOptions                Options;                                           // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreConnectLogin*                   ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreConnectLogin_EOSConnectLoginAsync) == 0x000008, "Wrong alignment on EOSCoreConnectLogin_EOSConnectLoginAsync");
static_assert(sizeof(EOSCoreConnectLogin_EOSConnectLoginAsync) == 0x000040, "Wrong size on EOSCoreConnectLogin_EOSConnectLoginAsync");
static_assert(offsetof(EOSCoreConnectLogin_EOSConnectLoginAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreConnectLogin_EOSConnectLoginAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectLogin_EOSConnectLoginAsync, Options) == 0x000008, "Member 'EOSCoreConnectLogin_EOSConnectLoginAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectLogin_EOSConnectLoginAsync, ReturnValue) == 0x000038, "Member 'EOSCoreConnectLogin_EOSConnectLoginAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreConnectLogin.HandleCallback
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreConnectLogin_HandleCallback final
{
public:
	struct FEOSConnectLoginCallbackInfo           Data;                                              // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28FD[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreConnectLogin_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreConnectLogin_HandleCallback");
static_assert(sizeof(EOSCoreConnectLogin_HandleCallback) == 0x000048, "Wrong size on EOSCoreConnectLogin_HandleCallback");
static_assert(offsetof(EOSCoreConnectLogin_HandleCallback, Data) == 0x000000, "Member 'EOSCoreConnectLogin_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectLogin_HandleCallback, bWasSuccessful) == 0x000040, "Member 'EOSCoreConnectLogin_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageCopyFileMetadataAtIndex
// 0x0078 (0x0078 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataAtIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageCopyFileMetadataAtIndexOptions CopyFileMetadataOptions;                           // 0x0008(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28FE[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSPlayerDataStorageFileMetadata      OutMetadata;                                       // 0x0038(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28FF[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataAtIndex) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataAtIndex");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataAtIndex) == 0x000078, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataAtIndex");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataAtIndex, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataAtIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataAtIndex, CopyFileMetadataOptions) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataAtIndex::CopyFileMetadataOptions' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataAtIndex, OutMetadata) == 0x000038, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataAtIndex::OutMetadata' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataAtIndex, ReturnValue) == 0x000070, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataAtIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageCopyFileMetadataByFilename
// 0x0080 (0x0080 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataByFilename final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageCopyFileMetadataByFilenameOptions CopyFileMetadataOptions;                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageFileMetadata      OutMetadata;                                       // 0x0040(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2900[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataByFilename) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataByFilename");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataByFilename) == 0x000080, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataByFilename");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataByFilename, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataByFilename::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataByFilename, CopyFileMetadataOptions) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataByFilename::CopyFileMetadataOptions' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataByFilename, OutMetadata) == 0x000040, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataByFilename::OutMetadata' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataByFilename, ReturnValue) == 0x000078, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageCopyFileMetadataByFilename::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageFileTransferRequestCancelRequest
// 0x0018 (0x0018 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestCancelRequest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHPlayerDataStorageFileTransferRequest Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2901[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestCancelRequest) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestCancelRequest");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestCancelRequest) == 0x000018, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestCancelRequest");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestCancelRequest, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestCancelRequest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestCancelRequest, Handle) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestCancelRequest::Handle' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestCancelRequest, ReturnValue) == 0x000010, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestCancelRequest::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageFileTransferRequestGetFilename
// 0x0030 (0x0030 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHPlayerDataStorageFileTransferRequest Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FilenameStringBufferSizeBytes;                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2902[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutStringBuffer;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2903[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename) == 0x000030, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename, Handle) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename::Handle' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename, FilenameStringBufferSizeBytes) == 0x000010, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename::FilenameStringBufferSizeBytes' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename, OutStringBuffer) == 0x000018, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename::OutStringBuffer' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename, ReturnValue) == 0x000028, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFilename::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageFileTransferRequestGetFileRequestState
// 0x0018 (0x0018 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFileRequestState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHPlayerDataStorageFileTransferRequest Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2904[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFileRequestState) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFileRequestState");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFileRequestState) == 0x000018, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFileRequestState");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFileRequestState, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFileRequestState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFileRequestState, Handle) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFileRequestState::Handle' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFileRequestState, ReturnValue) == 0x000010, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestGetFileRequestState::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageFileTransferRequestRelease
// 0x0010 (0x0010 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestRelease final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHPlayerDataStorageFileTransferRequest Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestRelease) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestRelease");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestRelease) == 0x000010, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestRelease");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestRelease, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestRelease::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestRelease, Handle) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageFileTransferRequestRelease::Handle' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageGetFileMetadataCount
// 0x0038 (0x0038 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageGetFileMetadataCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageGetFileMetadataCountOptions GetFileMetadataCountOptions;                       // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutFileMetadataCount;                              // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2905[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageGetFileMetadataCount) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageGetFileMetadataCount");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageGetFileMetadataCount) == 0x000038, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageGetFileMetadataCount");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageGetFileMetadataCount, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageGetFileMetadataCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageGetFileMetadataCount, GetFileMetadataCountOptions) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageGetFileMetadataCount::GetFileMetadataCountOptions' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageGetFileMetadataCount, OutFileMetadataCount) == 0x000030, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageGetFileMetadataCount::OutFileMetadataCount' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageGetFileMetadataCount, ReturnValue) == 0x000034, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageGetFileMetadataCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.GetPlayerDataStorage
// 0x0010 (0x0010 - 0x0000)
struct CorePlayerDataStorage_GetPlayerDataStorage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCorePlayerDataStorage*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerDataStorage_GetPlayerDataStorage) == 0x000008, "Wrong alignment on CorePlayerDataStorage_GetPlayerDataStorage");
static_assert(sizeof(CorePlayerDataStorage_GetPlayerDataStorage) == 0x000010, "Wrong size on CorePlayerDataStorage_GetPlayerDataStorage");
static_assert(offsetof(CorePlayerDataStorage_GetPlayerDataStorage, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_GetPlayerDataStorage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_GetPlayerDataStorage, ReturnValue) == 0x000008, "Member 'CorePlayerDataStorage_GetPlayerDataStorage::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageDeleteCache
// 0x0048 (0x0048 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageDeleteCache final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageDeleteCacheOptions Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSPlayerDataStorageDeleteCacheCallbackInfo& Data)> Callback;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2906[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageDeleteCache) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageDeleteCache");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageDeleteCache) == 0x000048, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageDeleteCache");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageDeleteCache, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageDeleteCache::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageDeleteCache, Options) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageDeleteCache::Options' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageDeleteCache, Callback) == 0x000030, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageDeleteCache::Callback' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageDeleteCache, ReturnValue) == 0x000040, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageDeleteCache::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageDeleteFile
// 0x0050 (0x0050 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageDeleteFile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageDeleteFileOptions DeleteOptions;                                     // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSPlayerDataStorageDeleteFileCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageDeleteFile) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageDeleteFile");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageDeleteFile) == 0x000050, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageDeleteFile");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageDeleteFile, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageDeleteFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageDeleteFile, DeleteOptions) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageDeleteFile::DeleteOptions' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageDeleteFile, Callback) == 0x000040, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageDeleteFile::Callback' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageDuplicateFile
// 0x0060 (0x0060 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageDuplicateFile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageDuplicateFileOptions DuplicateOptions;                                  // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSPlayerDataStorageDuplicateFileCallbackInfo& Data)> Callback;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageDuplicateFile) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageDuplicateFile");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageDuplicateFile) == 0x000060, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageDuplicateFile");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageDuplicateFile, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageDuplicateFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageDuplicateFile, DuplicateOptions) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageDuplicateFile::DuplicateOptions' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageDuplicateFile, Callback) == 0x000050, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageDuplicateFile::Callback' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageQueryFile
// 0x0050 (0x0050 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageQueryFile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageQueryFileOptions  QueryFileOptions;                                  // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSPlayerDataStorageQueryFileCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageQueryFile) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageQueryFile");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageQueryFile) == 0x000050, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageQueryFile");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageQueryFile, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageQueryFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageQueryFile, QueryFileOptions) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageQueryFile::QueryFileOptions' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageQueryFile, Callback) == 0x000040, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageQueryFile::Callback' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageQueryFileList
// 0x0040 (0x0040 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageQueryFileList final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageQueryFileListOptions QueryFileListOptions;                              // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSPlayerDataStorageQueryFileListCallbackInfo& Data)> Callback;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageQueryFileList) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageQueryFileList");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageQueryFileList) == 0x000040, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageQueryFileList");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageQueryFileList, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageQueryFileList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageQueryFileList, QueryFileListOptions) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageQueryFileList::QueryFileListOptions' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageQueryFileList, Callback) == 0x000030, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageQueryFileList::Callback' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageReadFile
// 0x0078 (0x0078 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageReadFile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageReadFileOptions   ReadOptions;                                       // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSPlayerDataStorageReadFileCallbackInfo& Data)> Callback;                                          // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageReadFile) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageReadFile");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageReadFile) == 0x000078, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageReadFile");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageReadFile, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageReadFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageReadFile, ReadOptions) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageReadFile::ReadOptions' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageReadFile, Callback) == 0x000068, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageReadFile::Callback' has a wrong offset!");

// Function EOSCore.CorePlayerDataStorage.EOSPlayerDataStorageWriteFile
// 0x0078 (0x0078 - 0x0000)
struct CorePlayerDataStorage_EOSPlayerDataStorageWriteFile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageWriteFileOptions  WriteOptions;                                      // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSPlayerDataStorageWriteFileCallbackInfo& Data)> Callback;                                          // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerDataStorage_EOSPlayerDataStorageWriteFile) == 0x000008, "Wrong alignment on CorePlayerDataStorage_EOSPlayerDataStorageWriteFile");
static_assert(sizeof(CorePlayerDataStorage_EOSPlayerDataStorageWriteFile) == 0x000078, "Wrong size on CorePlayerDataStorage_EOSPlayerDataStorageWriteFile");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageWriteFile, WorldContextObject) == 0x000000, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageWriteFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageWriteFile, WriteOptions) == 0x000008, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageWriteFile::WriteOptions' has a wrong offset!");
static_assert(offsetof(CorePlayerDataStorage_EOSPlayerDataStorageWriteFile, Callback) == 0x000068, "Member 'CorePlayerDataStorage_EOSPlayerDataStorageWriteFile::Callback' has a wrong offset!");

// Function EOSCore.EOSCoreConnectCreateUser.EOSConnectCreateUserAsync
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreConnectCreateUser_EOSConnectCreateUserAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectCreateUserOptions           Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreConnectCreateUser*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreConnectCreateUser_EOSConnectCreateUserAsync) == 0x000008, "Wrong alignment on EOSCoreConnectCreateUser_EOSConnectCreateUserAsync");
static_assert(sizeof(EOSCoreConnectCreateUser_EOSConnectCreateUserAsync) == 0x000018, "Wrong size on EOSCoreConnectCreateUser_EOSConnectCreateUserAsync");
static_assert(offsetof(EOSCoreConnectCreateUser_EOSConnectCreateUserAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreConnectCreateUser_EOSConnectCreateUserAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectCreateUser_EOSConnectCreateUserAsync, Options) == 0x000008, "Member 'EOSCoreConnectCreateUser_EOSConnectCreateUserAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectCreateUser_EOSConnectCreateUserAsync, ReturnValue) == 0x000010, "Member 'EOSCoreConnectCreateUser_EOSConnectCreateUserAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreConnectCreateUser.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreConnectCreateUser_HandleCallback final
{
public:
	struct FEOSConnectCreateUserCallbackInfo      Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2908[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreConnectCreateUser_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreConnectCreateUser_HandleCallback");
static_assert(sizeof(EOSCoreConnectCreateUser_HandleCallback) == 0x000040, "Wrong size on EOSCoreConnectCreateUser_HandleCallback");
static_assert(offsetof(EOSCoreConnectCreateUser_HandleCallback, Data) == 0x000000, "Member 'EOSCoreConnectCreateUser_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectCreateUser_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreConnectCreateUser_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreConnectLinkAccount.EOSConnectLinkAccountAsync
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreConnectLinkAccount_EOSConnectLinkAccountAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectLinkAccountOptions          Options;                                           // 0x0008(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreConnectLinkAccount*             ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreConnectLinkAccount_EOSConnectLinkAccountAsync) == 0x000008, "Wrong alignment on EOSCoreConnectLinkAccount_EOSConnectLinkAccountAsync");
static_assert(sizeof(EOSCoreConnectLinkAccount_EOSConnectLinkAccountAsync) == 0x000040, "Wrong size on EOSCoreConnectLinkAccount_EOSConnectLinkAccountAsync");
static_assert(offsetof(EOSCoreConnectLinkAccount_EOSConnectLinkAccountAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreConnectLinkAccount_EOSConnectLinkAccountAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectLinkAccount_EOSConnectLinkAccountAsync, Options) == 0x000008, "Member 'EOSCoreConnectLinkAccount_EOSConnectLinkAccountAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectLinkAccount_EOSConnectLinkAccountAsync, ReturnValue) == 0x000038, "Member 'EOSCoreConnectLinkAccount_EOSConnectLinkAccountAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreConnectLinkAccount.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreConnectLinkAccount_HandleCallback final
{
public:
	struct FEOSConnectLinkAccountCallbackInfo     Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_290A[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreConnectLinkAccount_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreConnectLinkAccount_HandleCallback");
static_assert(sizeof(EOSCoreConnectLinkAccount_HandleCallback) == 0x000040, "Wrong size on EOSCoreConnectLinkAccount_HandleCallback");
static_assert(offsetof(EOSCoreConnectLinkAccount_HandleCallback, Data) == 0x000000, "Member 'EOSCoreConnectLinkAccount_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectLinkAccount_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreConnectLinkAccount_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreConnectUnlinkAccount.EOSConnectUnlinkAccountAsync
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreConnectUnlinkAccount_EOSConnectUnlinkAccountAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectUnlinkAccountOptions        Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreConnectUnlinkAccount*           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreConnectUnlinkAccount_EOSConnectUnlinkAccountAsync) == 0x000008, "Wrong alignment on EOSCoreConnectUnlinkAccount_EOSConnectUnlinkAccountAsync");
static_assert(sizeof(EOSCoreConnectUnlinkAccount_EOSConnectUnlinkAccountAsync) == 0x000038, "Wrong size on EOSCoreConnectUnlinkAccount_EOSConnectUnlinkAccountAsync");
static_assert(offsetof(EOSCoreConnectUnlinkAccount_EOSConnectUnlinkAccountAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreConnectUnlinkAccount_EOSConnectUnlinkAccountAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectUnlinkAccount_EOSConnectUnlinkAccountAsync, Options) == 0x000008, "Member 'EOSCoreConnectUnlinkAccount_EOSConnectUnlinkAccountAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectUnlinkAccount_EOSConnectUnlinkAccountAsync, ReturnValue) == 0x000030, "Member 'EOSCoreConnectUnlinkAccount_EOSConnectUnlinkAccountAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreConnectUnlinkAccount.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreConnectUnlinkAccount_HandleCallback final
{
public:
	struct FEOSConnectUnlinkAccountCallbackInfo   Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_290C[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreConnectUnlinkAccount_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreConnectUnlinkAccount_HandleCallback");
static_assert(sizeof(EOSCoreConnectUnlinkAccount_HandleCallback) == 0x000040, "Wrong size on EOSCoreConnectUnlinkAccount_HandleCallback");
static_assert(offsetof(EOSCoreConnectUnlinkAccount_HandleCallback, Data) == 0x000000, "Member 'EOSCoreConnectUnlinkAccount_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectUnlinkAccount_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreConnectUnlinkAccount_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreConnectCreateDeviceId.EOSConnectCreateDeviceIdAsync
// 0x0020 (0x0020 - 0x0000)
struct EOSCoreConnectCreateDeviceId_EOSConnectCreateDeviceIdAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectCreateDeviceIdOptions       Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreConnectCreateDeviceId*          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreConnectCreateDeviceId_EOSConnectCreateDeviceIdAsync) == 0x000008, "Wrong alignment on EOSCoreConnectCreateDeviceId_EOSConnectCreateDeviceIdAsync");
static_assert(sizeof(EOSCoreConnectCreateDeviceId_EOSConnectCreateDeviceIdAsync) == 0x000020, "Wrong size on EOSCoreConnectCreateDeviceId_EOSConnectCreateDeviceIdAsync");
static_assert(offsetof(EOSCoreConnectCreateDeviceId_EOSConnectCreateDeviceIdAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreConnectCreateDeviceId_EOSConnectCreateDeviceIdAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectCreateDeviceId_EOSConnectCreateDeviceIdAsync, Options) == 0x000008, "Member 'EOSCoreConnectCreateDeviceId_EOSConnectCreateDeviceIdAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectCreateDeviceId_EOSConnectCreateDeviceIdAsync, ReturnValue) == 0x000018, "Member 'EOSCoreConnectCreateDeviceId_EOSConnectCreateDeviceIdAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreConnectCreateDeviceId.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreConnectCreateDeviceId_HandleCallback final
{
public:
	struct FEOSConnectCreateDeviceIdCallbackInfo  Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_290E[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreConnectCreateDeviceId_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreConnectCreateDeviceId_HandleCallback");
static_assert(sizeof(EOSCoreConnectCreateDeviceId_HandleCallback) == 0x000018, "Wrong size on EOSCoreConnectCreateDeviceId_HandleCallback");
static_assert(offsetof(EOSCoreConnectCreateDeviceId_HandleCallback, Data) == 0x000000, "Member 'EOSCoreConnectCreateDeviceId_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectCreateDeviceId_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreConnectCreateDeviceId_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreConnectDeleteDeviceId.EOSConnectDeleteDeviceIdAsync
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreConnectDeleteDeviceId_EOSConnectDeleteDeviceIdAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectDeleteDeviceIdOptions       Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2910[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEOSCoreConnectDeleteDeviceId*          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreConnectDeleteDeviceId_EOSConnectDeleteDeviceIdAsync) == 0x000008, "Wrong alignment on EOSCoreConnectDeleteDeviceId_EOSConnectDeleteDeviceIdAsync");
static_assert(sizeof(EOSCoreConnectDeleteDeviceId_EOSConnectDeleteDeviceIdAsync) == 0x000018, "Wrong size on EOSCoreConnectDeleteDeviceId_EOSConnectDeleteDeviceIdAsync");
static_assert(offsetof(EOSCoreConnectDeleteDeviceId_EOSConnectDeleteDeviceIdAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreConnectDeleteDeviceId_EOSConnectDeleteDeviceIdAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectDeleteDeviceId_EOSConnectDeleteDeviceIdAsync, Options) == 0x000008, "Member 'EOSCoreConnectDeleteDeviceId_EOSConnectDeleteDeviceIdAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectDeleteDeviceId_EOSConnectDeleteDeviceIdAsync, ReturnValue) == 0x000010, "Member 'EOSCoreConnectDeleteDeviceId_EOSConnectDeleteDeviceIdAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreConnectDeleteDeviceId.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreConnectDeleteDeviceId_HandleCallback final
{
public:
	struct FEOSConnectDeleteDeviceIdCallbackInfo  Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2911[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreConnectDeleteDeviceId_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreConnectDeleteDeviceId_HandleCallback");
static_assert(sizeof(EOSCoreConnectDeleteDeviceId_HandleCallback) == 0x000018, "Wrong size on EOSCoreConnectDeleteDeviceId_HandleCallback");
static_assert(offsetof(EOSCoreConnectDeleteDeviceId_HandleCallback, Data) == 0x000000, "Member 'EOSCoreConnectDeleteDeviceId_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectDeleteDeviceId_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreConnectDeleteDeviceId_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreConnectTransferDeviceIdAccount.EOSConnectTransferDeviceIdAccountAsync
// 0x0078 (0x0078 - 0x0000)
struct EOSCoreConnectTransferDeviceIdAccount_EOSConnectTransferDeviceIdAccountAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectTransferDeviceIdAccountOptions Options;                                           // 0x0008(0x0063)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2913[0x5];                                     // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UEOSCoreConnectTransferDeviceIdAccount* ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreConnectTransferDeviceIdAccount_EOSConnectTransferDeviceIdAccountAsync) == 0x000008, "Wrong alignment on EOSCoreConnectTransferDeviceIdAccount_EOSConnectTransferDeviceIdAccountAsync");
static_assert(sizeof(EOSCoreConnectTransferDeviceIdAccount_EOSConnectTransferDeviceIdAccountAsync) == 0x000078, "Wrong size on EOSCoreConnectTransferDeviceIdAccount_EOSConnectTransferDeviceIdAccountAsync");
static_assert(offsetof(EOSCoreConnectTransferDeviceIdAccount_EOSConnectTransferDeviceIdAccountAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreConnectTransferDeviceIdAccount_EOSConnectTransferDeviceIdAccountAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectTransferDeviceIdAccount_EOSConnectTransferDeviceIdAccountAsync, Options) == 0x000008, "Member 'EOSCoreConnectTransferDeviceIdAccount_EOSConnectTransferDeviceIdAccountAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectTransferDeviceIdAccount_EOSConnectTransferDeviceIdAccountAsync, ReturnValue) == 0x000070, "Member 'EOSCoreConnectTransferDeviceIdAccount_EOSConnectTransferDeviceIdAccountAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreConnectTransferDeviceIdAccount.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreConnectTransferDeviceIdAccount_HandleCallback final
{
public:
	struct FEOSConnectTransferDeviceIdAccountCallbackInfo Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2914[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreConnectTransferDeviceIdAccount_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreConnectTransferDeviceIdAccount_HandleCallback");
static_assert(sizeof(EOSCoreConnectTransferDeviceIdAccount_HandleCallback) == 0x000040, "Wrong size on EOSCoreConnectTransferDeviceIdAccount_HandleCallback");
static_assert(offsetof(EOSCoreConnectTransferDeviceIdAccount_HandleCallback, Data) == 0x000000, "Member 'EOSCoreConnectTransferDeviceIdAccount_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectTransferDeviceIdAccount_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreConnectTransferDeviceIdAccount_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSActiveSessionCopyInfo
// 0x0098 (0x0098 - 0x0000)
struct CoreSessions_EOSActiveSessionCopyInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHActiveSession                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSActiveSessionCopyInfoOptions       Options;                                           // 0x0010(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2916[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSActiveSessionInfo                  OutActiveSessionInfo;                              // 0x0018(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2917[0x7];                                     // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSActiveSessionCopyInfo) == 0x000008, "Wrong alignment on CoreSessions_EOSActiveSessionCopyInfo");
static_assert(sizeof(CoreSessions_EOSActiveSessionCopyInfo) == 0x000098, "Wrong size on CoreSessions_EOSActiveSessionCopyInfo");
static_assert(offsetof(CoreSessions_EOSActiveSessionCopyInfo, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSActiveSessionCopyInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSActiveSessionCopyInfo, Handle) == 0x000008, "Member 'CoreSessions_EOSActiveSessionCopyInfo::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSActiveSessionCopyInfo, Options) == 0x000010, "Member 'CoreSessions_EOSActiveSessionCopyInfo::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSActiveSessionCopyInfo, OutActiveSessionInfo) == 0x000018, "Member 'CoreSessions_EOSActiveSessionCopyInfo::OutActiveSessionInfo' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSActiveSessionCopyInfo, ReturnValue) == 0x000090, "Member 'CoreSessions_EOSActiveSessionCopyInfo::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSActiveSessionGetRegisteredPlayerByIndex
// 0x0038 (0x0038 - 0x0000)
struct CoreSessions_EOSActiveSessionGetRegisteredPlayerByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHActiveSession                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSActiveSessionGetRegisteredPlayerByIndexOptions Options;                                           // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      ReturnValue;                                       // 0x0014(0x0021)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2918[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSActiveSessionGetRegisteredPlayerByIndex) == 0x000008, "Wrong alignment on CoreSessions_EOSActiveSessionGetRegisteredPlayerByIndex");
static_assert(sizeof(CoreSessions_EOSActiveSessionGetRegisteredPlayerByIndex) == 0x000038, "Wrong size on CoreSessions_EOSActiveSessionGetRegisteredPlayerByIndex");
static_assert(offsetof(CoreSessions_EOSActiveSessionGetRegisteredPlayerByIndex, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSActiveSessionGetRegisteredPlayerByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSActiveSessionGetRegisteredPlayerByIndex, Handle) == 0x000008, "Member 'CoreSessions_EOSActiveSessionGetRegisteredPlayerByIndex::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSActiveSessionGetRegisteredPlayerByIndex, Options) == 0x000010, "Member 'CoreSessions_EOSActiveSessionGetRegisteredPlayerByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSActiveSessionGetRegisteredPlayerByIndex, ReturnValue) == 0x000014, "Member 'CoreSessions_EOSActiveSessionGetRegisteredPlayerByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSActiveSessionGetRegisteredPlayerCount
// 0x0018 (0x0018 - 0x0000)
struct CoreSessions_EOSActiveSessionGetRegisteredPlayerCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHActiveSession                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSActiveSessionGetRegisteredPlayerCountOptions Options;                                           // 0x0010(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2919[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSActiveSessionGetRegisteredPlayerCount) == 0x000008, "Wrong alignment on CoreSessions_EOSActiveSessionGetRegisteredPlayerCount");
static_assert(sizeof(CoreSessions_EOSActiveSessionGetRegisteredPlayerCount) == 0x000018, "Wrong size on CoreSessions_EOSActiveSessionGetRegisteredPlayerCount");
static_assert(offsetof(CoreSessions_EOSActiveSessionGetRegisteredPlayerCount, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSActiveSessionGetRegisteredPlayerCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSActiveSessionGetRegisteredPlayerCount, Handle) == 0x000008, "Member 'CoreSessions_EOSActiveSessionGetRegisteredPlayerCount::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSActiveSessionGetRegisteredPlayerCount, Options) == 0x000010, "Member 'CoreSessions_EOSActiveSessionGetRegisteredPlayerCount::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSActiveSessionGetRegisteredPlayerCount, ReturnValue) == 0x000014, "Member 'CoreSessions_EOSActiveSessionGetRegisteredPlayerCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSActiveSessionRelease
// 0x0010 (0x0010 - 0x0000)
struct CoreSessions_EOSActiveSessionRelease final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHActiveSession                     ActiveSessionHandle;                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSActiveSessionRelease) == 0x000008, "Wrong alignment on CoreSessions_EOSActiveSessionRelease");
static_assert(sizeof(CoreSessions_EOSActiveSessionRelease) == 0x000010, "Wrong size on CoreSessions_EOSActiveSessionRelease");
static_assert(offsetof(CoreSessions_EOSActiveSessionRelease, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSActiveSessionRelease::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSActiveSessionRelease, ActiveSessionHandle) == 0x000008, "Member 'CoreSessions_EOSActiveSessionRelease::ActiveSessionHandle' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionDetailsCopyInfo
// 0x0060 (0x0060 - 0x0000)
struct CoreSessions_EOSSessionDetailsCopyInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionDetails                    Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionDetailsCopyInfoOptions      Options;                                           // 0x0010(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_291A[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSSessionDetailsInfo                 OutSessionInfo;                                    // 0x0018(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291B[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionDetailsCopyInfo) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionDetailsCopyInfo");
static_assert(sizeof(CoreSessions_EOSSessionDetailsCopyInfo) == 0x000060, "Wrong size on CoreSessions_EOSSessionDetailsCopyInfo");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopyInfo, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionDetailsCopyInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopyInfo, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionDetailsCopyInfo::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopyInfo, Options) == 0x000010, "Member 'CoreSessions_EOSSessionDetailsCopyInfo::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopyInfo, OutSessionInfo) == 0x000018, "Member 'CoreSessions_EOSSessionDetailsCopyInfo::OutSessionInfo' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopyInfo, ReturnValue) == 0x000058, "Member 'CoreSessions_EOSSessionDetailsCopyInfo::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionDetailsCopySessionAttributeByIndex
// 0x0048 (0x0048 - 0x0000)
struct CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionDetails                    Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionDetailsCopySessionAttributeByIndexOptions Options;                                           // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_291C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSSessionDetailsAttribute            OutSessionAttribute;                               // 0x0018(0x0028)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291D[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex");
static_assert(sizeof(CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex) == 0x000048, "Wrong size on CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex, Options) == 0x000010, "Member 'CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex, OutSessionAttribute) == 0x000018, "Member 'CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex::OutSessionAttribute' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex, ReturnValue) == 0x000040, "Member 'CoreSessions_EOSSessionDetailsCopySessionAttributeByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionDetailsCopySessionAttributeByKey
// 0x0050 (0x0050 - 0x0000)
struct CoreSessions_EOSSessionDetailsCopySessionAttributeByKey final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionDetails                    Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionDetailsCopySessionAttributeByKeyOptions Options;                                           // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FEOSSessionDetailsAttribute            OutSessionAttribute;                               // 0x0020(0x0028)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291E[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionDetailsCopySessionAttributeByKey) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionDetailsCopySessionAttributeByKey");
static_assert(sizeof(CoreSessions_EOSSessionDetailsCopySessionAttributeByKey) == 0x000050, "Wrong size on CoreSessions_EOSSessionDetailsCopySessionAttributeByKey");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopySessionAttributeByKey, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionDetailsCopySessionAttributeByKey::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopySessionAttributeByKey, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionDetailsCopySessionAttributeByKey::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopySessionAttributeByKey, Options) == 0x000010, "Member 'CoreSessions_EOSSessionDetailsCopySessionAttributeByKey::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopySessionAttributeByKey, OutSessionAttribute) == 0x000020, "Member 'CoreSessions_EOSSessionDetailsCopySessionAttributeByKey::OutSessionAttribute' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsCopySessionAttributeByKey, ReturnValue) == 0x000048, "Member 'CoreSessions_EOSSessionDetailsCopySessionAttributeByKey::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionDetailsGetSessionAttributeCount
// 0x0018 (0x0018 - 0x0000)
struct CoreSessions_EOSSessionDetailsGetSessionAttributeCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionDetails                    Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionDetailsGetSessionAttributeCountOptions Options;                                           // 0x0010(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_291F[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionDetailsGetSessionAttributeCount) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionDetailsGetSessionAttributeCount");
static_assert(sizeof(CoreSessions_EOSSessionDetailsGetSessionAttributeCount) == 0x000018, "Wrong size on CoreSessions_EOSSessionDetailsGetSessionAttributeCount");
static_assert(offsetof(CoreSessions_EOSSessionDetailsGetSessionAttributeCount, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionDetailsGetSessionAttributeCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsGetSessionAttributeCount, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionDetailsGetSessionAttributeCount::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsGetSessionAttributeCount, Options) == 0x000010, "Member 'CoreSessions_EOSSessionDetailsGetSessionAttributeCount::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsGetSessionAttributeCount, ReturnValue) == 0x000014, "Member 'CoreSessions_EOSSessionDetailsGetSessionAttributeCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionDetailsRelease
// 0x0010 (0x0010 - 0x0000)
struct CoreSessions_EOSSessionDetailsRelease final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionDetails                    SessionHandle;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionDetailsRelease) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionDetailsRelease");
static_assert(sizeof(CoreSessions_EOSSessionDetailsRelease) == 0x000010, "Wrong size on CoreSessions_EOSSessionDetailsRelease");
static_assert(offsetof(CoreSessions_EOSSessionDetailsRelease, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionDetailsRelease::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionDetailsRelease, SessionHandle) == 0x000008, "Member 'CoreSessions_EOSSessionDetailsRelease::SessionHandle' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionModificationAddAttributeBool
// 0x0030 (0x0030 - 0x0000)
struct CoreSessions_EOSSessionModificationAddAttributeBool final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSESessionAttributeAdvertisementType        AdvertisementType;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2920[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2921[0x6];                                     // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionModificationAddAttributeBool) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionModificationAddAttributeBool");
static_assert(sizeof(CoreSessions_EOSSessionModificationAddAttributeBool) == 0x000030, "Wrong size on CoreSessions_EOSSessionModificationAddAttributeBool");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeBool, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionModificationAddAttributeBool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeBool, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionModificationAddAttributeBool::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeBool, AdvertisementType) == 0x000010, "Member 'CoreSessions_EOSSessionModificationAddAttributeBool::AdvertisementType' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeBool, Key) == 0x000018, "Member 'CoreSessions_EOSSessionModificationAddAttributeBool::Key' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeBool, bValue) == 0x000028, "Member 'CoreSessions_EOSSessionModificationAddAttributeBool::bValue' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeBool, ReturnValue) == 0x000029, "Member 'CoreSessions_EOSSessionModificationAddAttributeBool::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionModificationAddAttributeDouble
// 0x0040 (0x0040 - 0x0000)
struct CoreSessions_EOSSessionModificationAddAttributeDouble final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSESessionAttributeAdvertisementType        AdvertisementType;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2922[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2923[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionModificationAddAttributeDouble) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionModificationAddAttributeDouble");
static_assert(sizeof(CoreSessions_EOSSessionModificationAddAttributeDouble) == 0x000040, "Wrong size on CoreSessions_EOSSessionModificationAddAttributeDouble");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeDouble, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionModificationAddAttributeDouble::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeDouble, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionModificationAddAttributeDouble::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeDouble, AdvertisementType) == 0x000010, "Member 'CoreSessions_EOSSessionModificationAddAttributeDouble::AdvertisementType' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeDouble, Key) == 0x000018, "Member 'CoreSessions_EOSSessionModificationAddAttributeDouble::Key' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeDouble, Value) == 0x000028, "Member 'CoreSessions_EOSSessionModificationAddAttributeDouble::Value' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeDouble, ReturnValue) == 0x000038, "Member 'CoreSessions_EOSSessionModificationAddAttributeDouble::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionModificationAddAttributeInt64
// 0x0040 (0x0040 - 0x0000)
struct CoreSessions_EOSSessionModificationAddAttributeInt64 final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSESessionAttributeAdvertisementType        AdvertisementType;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2924[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2925[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionModificationAddAttributeInt64) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionModificationAddAttributeInt64");
static_assert(sizeof(CoreSessions_EOSSessionModificationAddAttributeInt64) == 0x000040, "Wrong size on CoreSessions_EOSSessionModificationAddAttributeInt64");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeInt64, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionModificationAddAttributeInt64::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeInt64, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionModificationAddAttributeInt64::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeInt64, AdvertisementType) == 0x000010, "Member 'CoreSessions_EOSSessionModificationAddAttributeInt64::AdvertisementType' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeInt64, Key) == 0x000018, "Member 'CoreSessions_EOSSessionModificationAddAttributeInt64::Key' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeInt64, Value) == 0x000028, "Member 'CoreSessions_EOSSessionModificationAddAttributeInt64::Value' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeInt64, ReturnValue) == 0x000038, "Member 'CoreSessions_EOSSessionModificationAddAttributeInt64::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionModificationAddAttributeString
// 0x0040 (0x0040 - 0x0000)
struct CoreSessions_EOSSessionModificationAddAttributeString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSESessionAttributeAdvertisementType        AdvertisementType;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2926[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2927[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionModificationAddAttributeString) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionModificationAddAttributeString");
static_assert(sizeof(CoreSessions_EOSSessionModificationAddAttributeString) == 0x000040, "Wrong size on CoreSessions_EOSSessionModificationAddAttributeString");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeString, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionModificationAddAttributeString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeString, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionModificationAddAttributeString::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeString, AdvertisementType) == 0x000010, "Member 'CoreSessions_EOSSessionModificationAddAttributeString::AdvertisementType' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeString, Key) == 0x000018, "Member 'CoreSessions_EOSSessionModificationAddAttributeString::Key' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeString, Value) == 0x000028, "Member 'CoreSessions_EOSSessionModificationAddAttributeString::Value' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationAddAttributeString, ReturnValue) == 0x000038, "Member 'CoreSessions_EOSSessionModificationAddAttributeString::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionModificationRelease
// 0x0010 (0x0010 - 0x0000)
struct CoreSessions_EOSSessionModificationRelease final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               SessionModificationHandle;                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionModificationRelease) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionModificationRelease");
static_assert(sizeof(CoreSessions_EOSSessionModificationRelease) == 0x000010, "Wrong size on CoreSessions_EOSSessionModificationRelease");
static_assert(offsetof(CoreSessions_EOSSessionModificationRelease, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionModificationRelease::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationRelease, SessionModificationHandle) == 0x000008, "Member 'CoreSessions_EOSSessionModificationRelease::SessionModificationHandle' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionModificationRemoveAttribute
// 0x0028 (0x0028 - 0x0000)
struct CoreSessions_EOSSessionModificationRemoveAttribute final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionModificationRemoveAttributeOptions Options;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2928[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionModificationRemoveAttribute) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionModificationRemoveAttribute");
static_assert(sizeof(CoreSessions_EOSSessionModificationRemoveAttribute) == 0x000028, "Wrong size on CoreSessions_EOSSessionModificationRemoveAttribute");
static_assert(offsetof(CoreSessions_EOSSessionModificationRemoveAttribute, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionModificationRemoveAttribute::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationRemoveAttribute, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionModificationRemoveAttribute::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationRemoveAttribute, Options) == 0x000010, "Member 'CoreSessions_EOSSessionModificationRemoveAttribute::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationRemoveAttribute, ReturnValue) == 0x000020, "Member 'CoreSessions_EOSSessionModificationRemoveAttribute::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionModificationSetBucketId
// 0x0028 (0x0028 - 0x0000)
struct CoreSessions_EOSSessionModificationSetBucketId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionModificationSetBucketIdOptions Options;                                           // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2929[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionModificationSetBucketId) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionModificationSetBucketId");
static_assert(sizeof(CoreSessions_EOSSessionModificationSetBucketId) == 0x000028, "Wrong size on CoreSessions_EOSSessionModificationSetBucketId");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetBucketId, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionModificationSetBucketId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetBucketId, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionModificationSetBucketId::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetBucketId, Options) == 0x000010, "Member 'CoreSessions_EOSSessionModificationSetBucketId::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetBucketId, ReturnValue) == 0x000020, "Member 'CoreSessions_EOSSessionModificationSetBucketId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionModificationSetHostAddress
// 0x0028 (0x0028 - 0x0000)
struct CoreSessions_EOSSessionModificationSetHostAddress final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionModificationSetHostAddressOptions Options;                                           // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_292A[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionModificationSetHostAddress) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionModificationSetHostAddress");
static_assert(sizeof(CoreSessions_EOSSessionModificationSetHostAddress) == 0x000028, "Wrong size on CoreSessions_EOSSessionModificationSetHostAddress");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetHostAddress, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionModificationSetHostAddress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetHostAddress, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionModificationSetHostAddress::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetHostAddress, Options) == 0x000010, "Member 'CoreSessions_EOSSessionModificationSetHostAddress::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetHostAddress, ReturnValue) == 0x000020, "Member 'CoreSessions_EOSSessionModificationSetHostAddress::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionModificationSetInvitesAllowed
// 0x0018 (0x0018 - 0x0000)
struct CoreSessions_EOSSessionModificationSetInvitesAllowed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionModificationSetInvitesAllowedOptions Options;                                           // 0x0010(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_292B[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionModificationSetInvitesAllowed) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionModificationSetInvitesAllowed");
static_assert(sizeof(CoreSessions_EOSSessionModificationSetInvitesAllowed) == 0x000018, "Wrong size on CoreSessions_EOSSessionModificationSetInvitesAllowed");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetInvitesAllowed, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionModificationSetInvitesAllowed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetInvitesAllowed, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionModificationSetInvitesAllowed::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetInvitesAllowed, Options) == 0x000010, "Member 'CoreSessions_EOSSessionModificationSetInvitesAllowed::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetInvitesAllowed, ReturnValue) == 0x000011, "Member 'CoreSessions_EOSSessionModificationSetInvitesAllowed::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionModificationSetJoinInProgressAllowed
// 0x0018 (0x0018 - 0x0000)
struct CoreSessions_EOSSessionModificationSetJoinInProgressAllowed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionModificationSetJoinInProgressAllowedOptions Options;                                           // 0x0010(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_292C[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionModificationSetJoinInProgressAllowed) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionModificationSetJoinInProgressAllowed");
static_assert(sizeof(CoreSessions_EOSSessionModificationSetJoinInProgressAllowed) == 0x000018, "Wrong size on CoreSessions_EOSSessionModificationSetJoinInProgressAllowed");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetJoinInProgressAllowed, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionModificationSetJoinInProgressAllowed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetJoinInProgressAllowed, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionModificationSetJoinInProgressAllowed::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetJoinInProgressAllowed, Options) == 0x000010, "Member 'CoreSessions_EOSSessionModificationSetJoinInProgressAllowed::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetJoinInProgressAllowed, ReturnValue) == 0x000011, "Member 'CoreSessions_EOSSessionModificationSetJoinInProgressAllowed::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionModificationSetMaxPlayers
// 0x0018 (0x0018 - 0x0000)
struct CoreSessions_EOSSessionModificationSetMaxPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionModificationSetMaxPlayersOptions Options;                                           // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_292D[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionModificationSetMaxPlayers) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionModificationSetMaxPlayers");
static_assert(sizeof(CoreSessions_EOSSessionModificationSetMaxPlayers) == 0x000018, "Wrong size on CoreSessions_EOSSessionModificationSetMaxPlayers");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetMaxPlayers, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionModificationSetMaxPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetMaxPlayers, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionModificationSetMaxPlayers::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetMaxPlayers, Options) == 0x000010, "Member 'CoreSessions_EOSSessionModificationSetMaxPlayers::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetMaxPlayers, ReturnValue) == 0x000014, "Member 'CoreSessions_EOSSessionModificationSetMaxPlayers::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionModificationSetPermissionLevel
// 0x0018 (0x0018 - 0x0000)
struct CoreSessions_EOSSessionModificationSetPermissionLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionModificationSetPermissionLevelOptions Options;                                           // 0x0010(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_292E[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionModificationSetPermissionLevel) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionModificationSetPermissionLevel");
static_assert(sizeof(CoreSessions_EOSSessionModificationSetPermissionLevel) == 0x000018, "Wrong size on CoreSessions_EOSSessionModificationSetPermissionLevel");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetPermissionLevel, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionModificationSetPermissionLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetPermissionLevel, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionModificationSetPermissionLevel::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetPermissionLevel, Options) == 0x000010, "Member 'CoreSessions_EOSSessionModificationSetPermissionLevel::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionModificationSetPermissionLevel, ReturnValue) == 0x000011, "Member 'CoreSessions_EOSSessionModificationSetPermissionLevel::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsAddNotifyJoinSessionAccepted
// 0x0020 (0x0020 - 0x0000)
struct CoreSessions_EOSSessionsAddNotifyJoinSessionAccepted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSessionsJoinSessionAcceptedCallbackInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsAddNotifyJoinSessionAccepted) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsAddNotifyJoinSessionAccepted");
static_assert(sizeof(CoreSessions_EOSSessionsAddNotifyJoinSessionAccepted) == 0x000020, "Wrong size on CoreSessions_EOSSessionsAddNotifyJoinSessionAccepted");
static_assert(offsetof(CoreSessions_EOSSessionsAddNotifyJoinSessionAccepted, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsAddNotifyJoinSessionAccepted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsAddNotifyJoinSessionAccepted, Callback) == 0x000008, "Member 'CoreSessions_EOSSessionsAddNotifyJoinSessionAccepted::Callback' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsAddNotifyJoinSessionAccepted, ReturnValue) == 0x000018, "Member 'CoreSessions_EOSSessionsAddNotifyJoinSessionAccepted::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsAddNotifySessionInviteAccepted
// 0x0020 (0x0020 - 0x0000)
struct CoreSessions_EOSSessionsAddNotifySessionInviteAccepted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSessionsSessionInviteAcceptedCallbackInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsAddNotifySessionInviteAccepted) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsAddNotifySessionInviteAccepted");
static_assert(sizeof(CoreSessions_EOSSessionsAddNotifySessionInviteAccepted) == 0x000020, "Wrong size on CoreSessions_EOSSessionsAddNotifySessionInviteAccepted");
static_assert(offsetof(CoreSessions_EOSSessionsAddNotifySessionInviteAccepted, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsAddNotifySessionInviteAccepted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsAddNotifySessionInviteAccepted, Callback) == 0x000008, "Member 'CoreSessions_EOSSessionsAddNotifySessionInviteAccepted::Callback' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsAddNotifySessionInviteAccepted, ReturnValue) == 0x000018, "Member 'CoreSessions_EOSSessionsAddNotifySessionInviteAccepted::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsAddNotifySessionInviteReceived
// 0x0020 (0x0020 - 0x0000)
struct CoreSessions_EOSSessionsAddNotifySessionInviteReceived final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSessionsSessionInviteReceivedCallbackInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsAddNotifySessionInviteReceived) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsAddNotifySessionInviteReceived");
static_assert(sizeof(CoreSessions_EOSSessionsAddNotifySessionInviteReceived) == 0x000020, "Wrong size on CoreSessions_EOSSessionsAddNotifySessionInviteReceived");
static_assert(offsetof(CoreSessions_EOSSessionsAddNotifySessionInviteReceived, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsAddNotifySessionInviteReceived::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsAddNotifySessionInviteReceived, Callback) == 0x000008, "Member 'CoreSessions_EOSSessionsAddNotifySessionInviteReceived::Callback' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsAddNotifySessionInviteReceived, ReturnValue) == 0x000018, "Member 'CoreSessions_EOSSessionsAddNotifySessionInviteReceived::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsCopyActiveSessionHandle
// 0x0028 (0x0028 - 0x0000)
struct CoreSessions_EOSSessionsCopyActiveSessionHandle final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsCopyActiveSessionHandleOptions Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FEOSHActiveSession                     OutSessionHandle;                                  // 0x0018(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_292F[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionsCopyActiveSessionHandle) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsCopyActiveSessionHandle");
static_assert(sizeof(CoreSessions_EOSSessionsCopyActiveSessionHandle) == 0x000028, "Wrong size on CoreSessions_EOSSessionsCopyActiveSessionHandle");
static_assert(offsetof(CoreSessions_EOSSessionsCopyActiveSessionHandle, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsCopyActiveSessionHandle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCopyActiveSessionHandle, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsCopyActiveSessionHandle::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCopyActiveSessionHandle, OutSessionHandle) == 0x000018, "Member 'CoreSessions_EOSSessionsCopyActiveSessionHandle::OutSessionHandle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCopyActiveSessionHandle, ReturnValue) == 0x000020, "Member 'CoreSessions_EOSSessionsCopyActiveSessionHandle::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsCopySessionHandleByInviteId
// 0x0028 (0x0028 - 0x0000)
struct CoreSessions_EOSSessionsCopySessionHandleByInviteId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsCopySessionHandleByInviteIdOptions Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FEOSHSessionDetails                    OutSessionHandle;                                  // 0x0018(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2930[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionsCopySessionHandleByInviteId) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsCopySessionHandleByInviteId");
static_assert(sizeof(CoreSessions_EOSSessionsCopySessionHandleByInviteId) == 0x000028, "Wrong size on CoreSessions_EOSSessionsCopySessionHandleByInviteId");
static_assert(offsetof(CoreSessions_EOSSessionsCopySessionHandleByInviteId, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsCopySessionHandleByInviteId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCopySessionHandleByInviteId, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsCopySessionHandleByInviteId::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCopySessionHandleByInviteId, OutSessionHandle) == 0x000018, "Member 'CoreSessions_EOSSessionsCopySessionHandleByInviteId::OutSessionHandle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCopySessionHandleByInviteId, ReturnValue) == 0x000020, "Member 'CoreSessions_EOSSessionsCopySessionHandleByInviteId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsCopySessionHandleByUiEventId
// 0x0020 (0x0020 - 0x0000)
struct CoreSessions_EOSSessionsCopySessionHandleByUiEventId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsCopySessionHandleByUiEventIdOptions Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSHSessionDetails                    OutSessionHandle;                                  // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2931[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionsCopySessionHandleByUiEventId) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsCopySessionHandleByUiEventId");
static_assert(sizeof(CoreSessions_EOSSessionsCopySessionHandleByUiEventId) == 0x000020, "Wrong size on CoreSessions_EOSSessionsCopySessionHandleByUiEventId");
static_assert(offsetof(CoreSessions_EOSSessionsCopySessionHandleByUiEventId, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsCopySessionHandleByUiEventId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCopySessionHandleByUiEventId, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsCopySessionHandleByUiEventId::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCopySessionHandleByUiEventId, OutSessionHandle) == 0x000010, "Member 'CoreSessions_EOSSessionsCopySessionHandleByUiEventId::OutSessionHandle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCopySessionHandleByUiEventId, ReturnValue) == 0x000018, "Member 'CoreSessions_EOSSessionsCopySessionHandleByUiEventId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsCopySessionHandleForPresence
// 0x0040 (0x0040 - 0x0000)
struct CoreSessions_EOSSessionsCopySessionHandleForPresence final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsCopySessionHandleForPresenceOptions Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2932[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSHSessionDetails                    OutSessionHandle;                                  // 0x0030(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2933[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionsCopySessionHandleForPresence) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsCopySessionHandleForPresence");
static_assert(sizeof(CoreSessions_EOSSessionsCopySessionHandleForPresence) == 0x000040, "Wrong size on CoreSessions_EOSSessionsCopySessionHandleForPresence");
static_assert(offsetof(CoreSessions_EOSSessionsCopySessionHandleForPresence, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsCopySessionHandleForPresence::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCopySessionHandleForPresence, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsCopySessionHandleForPresence::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCopySessionHandleForPresence, OutSessionHandle) == 0x000030, "Member 'CoreSessions_EOSSessionsCopySessionHandleForPresence::OutSessionHandle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCopySessionHandleForPresence, ReturnValue) == 0x000038, "Member 'CoreSessions_EOSSessionsCopySessionHandleForPresence::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsCreateSessionModification
// 0x0060 (0x0060 - 0x0000)
struct CoreSessions_EOSSessionsCreateSessionModification final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsCreateSessionModificationOptions Options;                                           // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               OutSessionModificationHandle;                      // 0x0050(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2934[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionsCreateSessionModification) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsCreateSessionModification");
static_assert(sizeof(CoreSessions_EOSSessionsCreateSessionModification) == 0x000060, "Wrong size on CoreSessions_EOSSessionsCreateSessionModification");
static_assert(offsetof(CoreSessions_EOSSessionsCreateSessionModification, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsCreateSessionModification::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCreateSessionModification, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsCreateSessionModification::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCreateSessionModification, OutSessionModificationHandle) == 0x000050, "Member 'CoreSessions_EOSSessionsCreateSessionModification::OutSessionModificationHandle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCreateSessionModification, ReturnValue) == 0x000058, "Member 'CoreSessions_EOSSessionsCreateSessionModification::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsCreateSessionSearch
// 0x0020 (0x0020 - 0x0000)
struct CoreSessions_EOSSessionsCreateSessionSearch final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsCreateSessionSearchOptions Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2935[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSHSessionSearch                     OutSessionSearchHandle;                            // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2936[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionsCreateSessionSearch) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsCreateSessionSearch");
static_assert(sizeof(CoreSessions_EOSSessionsCreateSessionSearch) == 0x000020, "Wrong size on CoreSessions_EOSSessionsCreateSessionSearch");
static_assert(offsetof(CoreSessions_EOSSessionsCreateSessionSearch, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsCreateSessionSearch::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCreateSessionSearch, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsCreateSessionSearch::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCreateSessionSearch, OutSessionSearchHandle) == 0x000010, "Member 'CoreSessions_EOSSessionsCreateSessionSearch::OutSessionSearchHandle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsCreateSessionSearch, ReturnValue) == 0x000018, "Member 'CoreSessions_EOSSessionsCreateSessionSearch::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsDumpSessionState
// 0x0020 (0x0020 - 0x0000)
struct CoreSessions_EOSSessionsDumpSessionState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsDumpSessionStateOptions    Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2937[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionsDumpSessionState) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsDumpSessionState");
static_assert(sizeof(CoreSessions_EOSSessionsDumpSessionState) == 0x000020, "Wrong size on CoreSessions_EOSSessionsDumpSessionState");
static_assert(offsetof(CoreSessions_EOSSessionsDumpSessionState, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsDumpSessionState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsDumpSessionState, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsDumpSessionState::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsDumpSessionState, ReturnValue) == 0x000018, "Member 'CoreSessions_EOSSessionsDumpSessionState::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionSearchCopySearchResultByIndex
// 0x0028 (0x0028 - 0x0000)
struct CoreSessions_EOSSessionSearchCopySearchResultByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionSearch                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionSearchCopySearchResultByIndexOptions Options;                                           // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2938[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSHSessionDetails                    OutSessionHandle;                                  // 0x0018(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2939[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionSearchCopySearchResultByIndex) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionSearchCopySearchResultByIndex");
static_assert(sizeof(CoreSessions_EOSSessionSearchCopySearchResultByIndex) == 0x000028, "Wrong size on CoreSessions_EOSSessionSearchCopySearchResultByIndex");
static_assert(offsetof(CoreSessions_EOSSessionSearchCopySearchResultByIndex, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionSearchCopySearchResultByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchCopySearchResultByIndex, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionSearchCopySearchResultByIndex::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchCopySearchResultByIndex, Options) == 0x000010, "Member 'CoreSessions_EOSSessionSearchCopySearchResultByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchCopySearchResultByIndex, OutSessionHandle) == 0x000018, "Member 'CoreSessions_EOSSessionSearchCopySearchResultByIndex::OutSessionHandle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchCopySearchResultByIndex, ReturnValue) == 0x000020, "Member 'CoreSessions_EOSSessionSearchCopySearchResultByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionSearchGetSearchResultCount
// 0x0018 (0x0018 - 0x0000)
struct CoreSessions_EOSSessionSearchGetSearchResultCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionSearch                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionSearchGetSearchResultCountOptions Options;                                           // 0x0010(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_293A[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionSearchGetSearchResultCount) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionSearchGetSearchResultCount");
static_assert(sizeof(CoreSessions_EOSSessionSearchGetSearchResultCount) == 0x000018, "Wrong size on CoreSessions_EOSSessionSearchGetSearchResultCount");
static_assert(offsetof(CoreSessions_EOSSessionSearchGetSearchResultCount, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionSearchGetSearchResultCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchGetSearchResultCount, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionSearchGetSearchResultCount::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchGetSearchResultCount, Options) == 0x000010, "Member 'CoreSessions_EOSSessionSearchGetSearchResultCount::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchGetSearchResultCount, ReturnValue) == 0x000014, "Member 'CoreSessions_EOSSessionSearchGetSearchResultCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionSearchRelease
// 0x0010 (0x0010 - 0x0000)
struct CoreSessions_EOSSessionSearchRelease final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionSearch                     SessionSearchHandle;                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionSearchRelease) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionSearchRelease");
static_assert(sizeof(CoreSessions_EOSSessionSearchRelease) == 0x000010, "Wrong size on CoreSessions_EOSSessionSearchRelease");
static_assert(offsetof(CoreSessions_EOSSessionSearchRelease, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionSearchRelease::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchRelease, SessionSearchHandle) == 0x000008, "Member 'CoreSessions_EOSSessionSearchRelease::SessionSearchHandle' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionSearchRemoveParameter
// 0x0030 (0x0030 - 0x0000)
struct CoreSessions_EOSSessionSearchRemoveParameter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionSearch                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionSearchRemoveParameterOptions Options;                                           // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_293B[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionSearchRemoveParameter) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionSearchRemoveParameter");
static_assert(sizeof(CoreSessions_EOSSessionSearchRemoveParameter) == 0x000030, "Wrong size on CoreSessions_EOSSessionSearchRemoveParameter");
static_assert(offsetof(CoreSessions_EOSSessionSearchRemoveParameter, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionSearchRemoveParameter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchRemoveParameter, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionSearchRemoveParameter::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchRemoveParameter, Options) == 0x000010, "Member 'CoreSessions_EOSSessionSearchRemoveParameter::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchRemoveParameter, ReturnValue) == 0x000028, "Member 'CoreSessions_EOSSessionSearchRemoveParameter::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionSearchSetMaxResults
// 0x0018 (0x0018 - 0x0000)
struct CoreSessions_EOSSessionSearchSetMaxResults final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionSearch                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionSearchSetMaxResultsOptions  Options;                                           // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_293C[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionSearchSetMaxResults) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionSearchSetMaxResults");
static_assert(sizeof(CoreSessions_EOSSessionSearchSetMaxResults) == 0x000018, "Wrong size on CoreSessions_EOSSessionSearchSetMaxResults");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetMaxResults, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionSearchSetMaxResults::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetMaxResults, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionSearchSetMaxResults::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetMaxResults, Options) == 0x000010, "Member 'CoreSessions_EOSSessionSearchSetMaxResults::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetMaxResults, ReturnValue) == 0x000014, "Member 'CoreSessions_EOSSessionSearchSetMaxResults::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionSearchSetParameterBool
// 0x0028 (0x0028 - 0x0000)
struct CoreSessions_EOSSessionSearchSetParameterBool final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionSearch                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSEComparisonOp                             ComparisonOp;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_293D[0x5];                                     // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionSearchSetParameterBool) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionSearchSetParameterBool");
static_assert(sizeof(CoreSessions_EOSSessionSearchSetParameterBool) == 0x000028, "Wrong size on CoreSessions_EOSSessionSearchSetParameterBool");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterBool, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionSearchSetParameterBool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterBool, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionSearchSetParameterBool::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterBool, Key) == 0x000010, "Member 'CoreSessions_EOSSessionSearchSetParameterBool::Key' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterBool, bValue) == 0x000020, "Member 'CoreSessions_EOSSessionSearchSetParameterBool::bValue' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterBool, ComparisonOp) == 0x000021, "Member 'CoreSessions_EOSSessionSearchSetParameterBool::ComparisonOp' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterBool, ReturnValue) == 0x000022, "Member 'CoreSessions_EOSSessionSearchSetParameterBool::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionSearchSetParameterDouble
// 0x0038 (0x0038 - 0x0000)
struct CoreSessions_EOSSessionSearchSetParameterDouble final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionSearch                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSEComparisonOp                             ComparisonOp;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_293E[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionSearchSetParameterDouble) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionSearchSetParameterDouble");
static_assert(sizeof(CoreSessions_EOSSessionSearchSetParameterDouble) == 0x000038, "Wrong size on CoreSessions_EOSSessionSearchSetParameterDouble");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterDouble, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionSearchSetParameterDouble::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterDouble, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionSearchSetParameterDouble::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterDouble, Key) == 0x000010, "Member 'CoreSessions_EOSSessionSearchSetParameterDouble::Key' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterDouble, Value) == 0x000020, "Member 'CoreSessions_EOSSessionSearchSetParameterDouble::Value' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterDouble, ComparisonOp) == 0x000030, "Member 'CoreSessions_EOSSessionSearchSetParameterDouble::ComparisonOp' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterDouble, ReturnValue) == 0x000031, "Member 'CoreSessions_EOSSessionSearchSetParameterDouble::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionSearchSetParameterInt64
// 0x0038 (0x0038 - 0x0000)
struct CoreSessions_EOSSessionSearchSetParameterInt64 final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionSearch                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSEComparisonOp                             ComparisonOp;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_293F[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionSearchSetParameterInt64) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionSearchSetParameterInt64");
static_assert(sizeof(CoreSessions_EOSSessionSearchSetParameterInt64) == 0x000038, "Wrong size on CoreSessions_EOSSessionSearchSetParameterInt64");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterInt64, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionSearchSetParameterInt64::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterInt64, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionSearchSetParameterInt64::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterInt64, Key) == 0x000010, "Member 'CoreSessions_EOSSessionSearchSetParameterInt64::Key' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterInt64, Value) == 0x000020, "Member 'CoreSessions_EOSSessionSearchSetParameterInt64::Value' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterInt64, ComparisonOp) == 0x000030, "Member 'CoreSessions_EOSSessionSearchSetParameterInt64::ComparisonOp' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterInt64, ReturnValue) == 0x000031, "Member 'CoreSessions_EOSSessionSearchSetParameterInt64::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionSearchSetParameterString
// 0x0038 (0x0038 - 0x0000)
struct CoreSessions_EOSSessionSearchSetParameterString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionSearch                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSEComparisonOp                             ComparisonOp;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2940[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionSearchSetParameterString) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionSearchSetParameterString");
static_assert(sizeof(CoreSessions_EOSSessionSearchSetParameterString) == 0x000038, "Wrong size on CoreSessions_EOSSessionSearchSetParameterString");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterString, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionSearchSetParameterString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterString, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionSearchSetParameterString::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterString, Key) == 0x000010, "Member 'CoreSessions_EOSSessionSearchSetParameterString::Key' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterString, Value) == 0x000020, "Member 'CoreSessions_EOSSessionSearchSetParameterString::Value' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterString, ComparisonOp) == 0x000030, "Member 'CoreSessions_EOSSessionSearchSetParameterString::ComparisonOp' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetParameterString, ReturnValue) == 0x000031, "Member 'CoreSessions_EOSSessionSearchSetParameterString::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionSearchSetSessionId
// 0x0028 (0x0028 - 0x0000)
struct CoreSessions_EOSSessionSearchSetSessionId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionSearch                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionSearchSetSessionIdOptions   Options;                                           // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2941[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionSearchSetSessionId) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionSearchSetSessionId");
static_assert(sizeof(CoreSessions_EOSSessionSearchSetSessionId) == 0x000028, "Wrong size on CoreSessions_EOSSessionSearchSetSessionId");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetSessionId, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionSearchSetSessionId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetSessionId, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionSearchSetSessionId::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetSessionId, Options) == 0x000010, "Member 'CoreSessions_EOSSessionSearchSetSessionId::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetSessionId, ReturnValue) == 0x000020, "Member 'CoreSessions_EOSSessionSearchSetSessionId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionSearchSetTargetUserId
// 0x0038 (0x0038 - 0x0000)
struct CoreSessions_EOSSessionSearchSetTargetUserId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionSearch                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionSearchSetTargetUserIdOptions Options;                                           // 0x0010(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2942[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionSearchSetTargetUserId) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionSearchSetTargetUserId");
static_assert(sizeof(CoreSessions_EOSSessionSearchSetTargetUserId) == 0x000038, "Wrong size on CoreSessions_EOSSessionSearchSetTargetUserId");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetTargetUserId, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionSearchSetTargetUserId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetTargetUserId, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionSearchSetTargetUserId::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetTargetUserId, Options) == 0x000010, "Member 'CoreSessions_EOSSessionSearchSetTargetUserId::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchSetTargetUserId, ReturnValue) == 0x000031, "Member 'CoreSessions_EOSSessionSearchSetTargetUserId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsGetInviteCount
// 0x0030 (0x0030 - 0x0000)
struct CoreSessions_EOSSessionsGetInviteCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsGetInviteCountOptions      Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2943[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsGetInviteCount) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsGetInviteCount");
static_assert(sizeof(CoreSessions_EOSSessionsGetInviteCount) == 0x000030, "Wrong size on CoreSessions_EOSSessionsGetInviteCount");
static_assert(offsetof(CoreSessions_EOSSessionsGetInviteCount, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsGetInviteCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsGetInviteCount, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsGetInviteCount::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsGetInviteCount, ReturnValue) == 0x00002C, "Member 'CoreSessions_EOSSessionsGetInviteCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsGetInviteIdByIndex
// 0x0048 (0x0048 - 0x0000)
struct CoreSessions_EOSSessionsGetInviteIdByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsGetInviteIdByIndexOptions  Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 OutBuffer;                                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2944[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionsGetInviteIdByIndex) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsGetInviteIdByIndex");
static_assert(sizeof(CoreSessions_EOSSessionsGetInviteIdByIndex) == 0x000048, "Wrong size on CoreSessions_EOSSessionsGetInviteIdByIndex");
static_assert(offsetof(CoreSessions_EOSSessionsGetInviteIdByIndex, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsGetInviteIdByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsGetInviteIdByIndex, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsGetInviteIdByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsGetInviteIdByIndex, OutBuffer) == 0x000030, "Member 'CoreSessions_EOSSessionsGetInviteIdByIndex::OutBuffer' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsGetInviteIdByIndex, ReturnValue) == 0x000040, "Member 'CoreSessions_EOSSessionsGetInviteIdByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsIsUserInSession
// 0x0048 (0x0048 - 0x0000)
struct CoreSessions_EOSSessionsIsUserInSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsIsUserInSessionOptions     Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2945[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionsIsUserInSession) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsIsUserInSession");
static_assert(sizeof(CoreSessions_EOSSessionsIsUserInSession) == 0x000048, "Wrong size on CoreSessions_EOSSessionsIsUserInSession");
static_assert(offsetof(CoreSessions_EOSSessionsIsUserInSession, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsIsUserInSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsIsUserInSession, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsIsUserInSession::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsIsUserInSession, ReturnValue) == 0x000040, "Member 'CoreSessions_EOSSessionsIsUserInSession::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsRemoveNotifyJoinSessionAccepted
// 0x0010 (0x0010 - 0x0000)
struct CoreSessions_EOSSessionsRemoveNotifyJoinSessionAccepted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsRemoveNotifyJoinSessionAccepted) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsRemoveNotifyJoinSessionAccepted");
static_assert(sizeof(CoreSessions_EOSSessionsRemoveNotifyJoinSessionAccepted) == 0x000010, "Wrong size on CoreSessions_EOSSessionsRemoveNotifyJoinSessionAccepted");
static_assert(offsetof(CoreSessions_EOSSessionsRemoveNotifyJoinSessionAccepted, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsRemoveNotifyJoinSessionAccepted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsRemoveNotifyJoinSessionAccepted, ID) == 0x000008, "Member 'CoreSessions_EOSSessionsRemoveNotifyJoinSessionAccepted::ID' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsRemoveNotifySessionInviteAccepted
// 0x0010 (0x0010 - 0x0000)
struct CoreSessions_EOSSessionsRemoveNotifySessionInviteAccepted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsRemoveNotifySessionInviteAccepted) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsRemoveNotifySessionInviteAccepted");
static_assert(sizeof(CoreSessions_EOSSessionsRemoveNotifySessionInviteAccepted) == 0x000010, "Wrong size on CoreSessions_EOSSessionsRemoveNotifySessionInviteAccepted");
static_assert(offsetof(CoreSessions_EOSSessionsRemoveNotifySessionInviteAccepted, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsRemoveNotifySessionInviteAccepted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsRemoveNotifySessionInviteAccepted, ID) == 0x000008, "Member 'CoreSessions_EOSSessionsRemoveNotifySessionInviteAccepted::ID' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsUpdateSessionModification
// 0x0028 (0x0028 - 0x0000)
struct CoreSessions_EOSSessionsUpdateSessionModification final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsUpdateSessionModificationOptions Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FEOSHSessionModification               OutSessionModificationHandle;                      // 0x0018(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2946[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionsUpdateSessionModification) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsUpdateSessionModification");
static_assert(sizeof(CoreSessions_EOSSessionsUpdateSessionModification) == 0x000028, "Wrong size on CoreSessions_EOSSessionsUpdateSessionModification");
static_assert(offsetof(CoreSessions_EOSSessionsUpdateSessionModification, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsUpdateSessionModification::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsUpdateSessionModification, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsUpdateSessionModification::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsUpdateSessionModification, OutSessionModificationHandle) == 0x000018, "Member 'CoreSessions_EOSSessionsUpdateSessionModification::OutSessionModificationHandle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsUpdateSessionModification, ReturnValue) == 0x000020, "Member 'CoreSessions_EOSSessionsUpdateSessionModification::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.GetSessions
// 0x0010 (0x0010 - 0x0000)
struct CoreSessions_GetSessions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreSessions*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_GetSessions) == 0x000008, "Wrong alignment on CoreSessions_GetSessions");
static_assert(sizeof(CoreSessions_GetSessions) == 0x000010, "Wrong size on CoreSessions_GetSessions");
static_assert(offsetof(CoreSessions_GetSessions, WorldContextObject) == 0x000000, "Member 'CoreSessions_GetSessions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_GetSessions, ReturnValue) == 0x000008, "Member 'CoreSessions_GetSessions::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsDestroySession
// 0x0028 (0x0028 - 0x0000)
struct CoreSessions_EOSSessionsDestroySession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsDestroySessionOptions      Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSessionsDestroySessionCallbackInfo& Data)> Callback;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsDestroySession) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsDestroySession");
static_assert(sizeof(CoreSessions_EOSSessionsDestroySession) == 0x000028, "Wrong size on CoreSessions_EOSSessionsDestroySession");
static_assert(offsetof(CoreSessions_EOSSessionsDestroySession, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsDestroySession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsDestroySession, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsDestroySession::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsDestroySession, Callback) == 0x000018, "Member 'CoreSessions_EOSSessionsDestroySession::Callback' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionSearchFind
// 0x0048 (0x0048 - 0x0000)
struct CoreSessions_EOSSessionSearchFind final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionSearch                     Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionSearchFindOptions           Options;                                           // 0x0010(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2947[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSSessionSearchFindCallbackInfo& Data)> Callback;                                          // 0x0034(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2948[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionSearchFind) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionSearchFind");
static_assert(sizeof(CoreSessions_EOSSessionSearchFind) == 0x000048, "Wrong size on CoreSessions_EOSSessionSearchFind");
static_assert(offsetof(CoreSessions_EOSSessionSearchFind, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionSearchFind::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchFind, Handle) == 0x000008, "Member 'CoreSessions_EOSSessionSearchFind::Handle' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchFind, Options) == 0x000010, "Member 'CoreSessions_EOSSessionSearchFind::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionSearchFind, Callback) == 0x000034, "Member 'CoreSessions_EOSSessionSearchFind::Callback' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsEndSession
// 0x0028 (0x0028 - 0x0000)
struct CoreSessions_EOSSessionsEndSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsEndSessionOptions          Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSessionsEndSessionCallbackInfo& Data)> Callback;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsEndSession) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsEndSession");
static_assert(sizeof(CoreSessions_EOSSessionsEndSession) == 0x000028, "Wrong size on CoreSessions_EOSSessionsEndSession");
static_assert(offsetof(CoreSessions_EOSSessionsEndSession, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsEndSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsEndSession, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsEndSession::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsEndSession, Callback) == 0x000018, "Member 'CoreSessions_EOSSessionsEndSession::Callback' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsJoinSession
// 0x0058 (0x0058 - 0x0000)
struct CoreSessions_EOSSessionsJoinSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsJoinSessionOptions         Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSessionsJoinSessionCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsJoinSession) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsJoinSession");
static_assert(sizeof(CoreSessions_EOSSessionsJoinSession) == 0x000058, "Wrong size on CoreSessions_EOSSessionsJoinSession");
static_assert(offsetof(CoreSessions_EOSSessionsJoinSession, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsJoinSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsJoinSession, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsJoinSession::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsJoinSession, Callback) == 0x000048, "Member 'CoreSessions_EOSSessionsJoinSession::Callback' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsQueryInvites
// 0x0040 (0x0040 - 0x0000)
struct CoreSessions_EOSSessionsQueryInvites final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsQueryInvitesOptions        Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2949[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSSessionsQueryInvitesCallbackInfo& Data)> Callback;                                          // 0x002C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_294A[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSessions_EOSSessionsQueryInvites) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsQueryInvites");
static_assert(sizeof(CoreSessions_EOSSessionsQueryInvites) == 0x000040, "Wrong size on CoreSessions_EOSSessionsQueryInvites");
static_assert(offsetof(CoreSessions_EOSSessionsQueryInvites, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsQueryInvites::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsQueryInvites, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsQueryInvites::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsQueryInvites, Callback) == 0x00002C, "Member 'CoreSessions_EOSSessionsQueryInvites::Callback' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsRegisterPlayers
// 0x0038 (0x0038 - 0x0000)
struct CoreSessions_EOSSessionsRegisterPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsRegisterPlayersOptions     Options;                                           // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSessionsRegisterPlayersCallbackInfo& Data)> Callback;                                          // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsRegisterPlayers) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsRegisterPlayers");
static_assert(sizeof(CoreSessions_EOSSessionsRegisterPlayers) == 0x000038, "Wrong size on CoreSessions_EOSSessionsRegisterPlayers");
static_assert(offsetof(CoreSessions_EOSSessionsRegisterPlayers, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsRegisterPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsRegisterPlayers, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsRegisterPlayers::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsRegisterPlayers, Callback) == 0x000028, "Member 'CoreSessions_EOSSessionsRegisterPlayers::Callback' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsRejectInvite
// 0x0050 (0x0050 - 0x0000)
struct CoreSessions_EOSSessionsRejectInvite final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsRejectInviteOptions        Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSessionsRejectInviteCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsRejectInvite) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsRejectInvite");
static_assert(sizeof(CoreSessions_EOSSessionsRejectInvite) == 0x000050, "Wrong size on CoreSessions_EOSSessionsRejectInvite");
static_assert(offsetof(CoreSessions_EOSSessionsRejectInvite, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsRejectInvite::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsRejectInvite, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsRejectInvite::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsRejectInvite, Callback) == 0x000040, "Member 'CoreSessions_EOSSessionsRejectInvite::Callback' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsRemoveNotifySessionInviteReceived
// 0x0010 (0x0010 - 0x0000)
struct CoreSessions_EOSSessionsRemoveNotifySessionInviteReceived final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsRemoveNotifySessionInviteReceived) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsRemoveNotifySessionInviteReceived");
static_assert(sizeof(CoreSessions_EOSSessionsRemoveNotifySessionInviteReceived) == 0x000010, "Wrong size on CoreSessions_EOSSessionsRemoveNotifySessionInviteReceived");
static_assert(offsetof(CoreSessions_EOSSessionsRemoveNotifySessionInviteReceived, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsRemoveNotifySessionInviteReceived::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsRemoveNotifySessionInviteReceived, ID) == 0x000008, "Member 'CoreSessions_EOSSessionsRemoveNotifySessionInviteReceived::ID' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsSendInvite
// 0x0070 (0x0070 - 0x0000)
struct CoreSessions_EOSSessionsSendInvite final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsSendInviteOptions          Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSessionsSendInviteCallbackInfo& Data)> Callback;                                          // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsSendInvite) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsSendInvite");
static_assert(sizeof(CoreSessions_EOSSessionsSendInvite) == 0x000070, "Wrong size on CoreSessions_EOSSessionsSendInvite");
static_assert(offsetof(CoreSessions_EOSSessionsSendInvite, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsSendInvite::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsSendInvite, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsSendInvite::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsSendInvite, Callback) == 0x000060, "Member 'CoreSessions_EOSSessionsSendInvite::Callback' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsStartSession
// 0x0028 (0x0028 - 0x0000)
struct CoreSessions_EOSSessionsStartSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsStartSessionOptions        Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSessionsStartSessionCallbackInfo& Data)> Callback;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsStartSession) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsStartSession");
static_assert(sizeof(CoreSessions_EOSSessionsStartSession) == 0x000028, "Wrong size on CoreSessions_EOSSessionsStartSession");
static_assert(offsetof(CoreSessions_EOSSessionsStartSession, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsStartSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsStartSession, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsStartSession::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsStartSession, Callback) == 0x000018, "Member 'CoreSessions_EOSSessionsStartSession::Callback' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsUnregisterPlayers
// 0x0038 (0x0038 - 0x0000)
struct CoreSessions_EOSSessionsUnregisterPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsUnregisterPlayersOptions   Options;                                           // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSessionsUnregisterPlayersCallbackInfo& Data)> Callback;                                          // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsUnregisterPlayers) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsUnregisterPlayers");
static_assert(sizeof(CoreSessions_EOSSessionsUnregisterPlayers) == 0x000038, "Wrong size on CoreSessions_EOSSessionsUnregisterPlayers");
static_assert(offsetof(CoreSessions_EOSSessionsUnregisterPlayers, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsUnregisterPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsUnregisterPlayers, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsUnregisterPlayers::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsUnregisterPlayers, Callback) == 0x000028, "Member 'CoreSessions_EOSSessionsUnregisterPlayers::Callback' has a wrong offset!");

// Function EOSCore.CoreSessions.EOSSessionsUpdateSession
// 0x0020 (0x0020 - 0x0000)
struct CoreSessions_EOSSessionsUpdateSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsUpdateSessionOptions       Options;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSessionsUpdateSessionCallbackInfo& Data)> Callback;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSessions_EOSSessionsUpdateSession) == 0x000008, "Wrong alignment on CoreSessions_EOSSessionsUpdateSession");
static_assert(sizeof(CoreSessions_EOSSessionsUpdateSession) == 0x000020, "Wrong size on CoreSessions_EOSSessionsUpdateSession");
static_assert(offsetof(CoreSessions_EOSSessionsUpdateSession, WorldContextObject) == 0x000000, "Member 'CoreSessions_EOSSessionsUpdateSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsUpdateSession, Options) == 0x000008, "Member 'CoreSessions_EOSSessionsUpdateSession::Options' has a wrong offset!");
static_assert(offsetof(CoreSessions_EOSSessionsUpdateSession, Callback) == 0x000010, "Member 'CoreSessions_EOSSessionsUpdateSession::Callback' has a wrong offset!");

// Function EOSCore.EOSCoreConnectQueryExternalAccountMappings.EOSConnectQueryExternalAccountMappingsAsync
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreConnectQueryExternalAccountMappings_EOSConnectQueryExternalAccountMappingsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectQueryExternalAccountMappingsOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreConnectQueryExternalAccountMappings* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreConnectQueryExternalAccountMappings_EOSConnectQueryExternalAccountMappingsAsync) == 0x000008, "Wrong alignment on EOSCoreConnectQueryExternalAccountMappings_EOSConnectQueryExternalAccountMappingsAsync");
static_assert(sizeof(EOSCoreConnectQueryExternalAccountMappings_EOSConnectQueryExternalAccountMappingsAsync) == 0x000048, "Wrong size on EOSCoreConnectQueryExternalAccountMappings_EOSConnectQueryExternalAccountMappingsAsync");
static_assert(offsetof(EOSCoreConnectQueryExternalAccountMappings_EOSConnectQueryExternalAccountMappingsAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreConnectQueryExternalAccountMappings_EOSConnectQueryExternalAccountMappingsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectQueryExternalAccountMappings_EOSConnectQueryExternalAccountMappingsAsync, Options) == 0x000008, "Member 'EOSCoreConnectQueryExternalAccountMappings_EOSConnectQueryExternalAccountMappingsAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectQueryExternalAccountMappings_EOSConnectQueryExternalAccountMappingsAsync, ReturnValue) == 0x000040, "Member 'EOSCoreConnectQueryExternalAccountMappings_EOSConnectQueryExternalAccountMappingsAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreConnectQueryExternalAccountMappings.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreConnectQueryExternalAccountMappings_HandleCallback final
{
public:
	struct FEOSConnectQueryExternalAccountMappingsCallbackInfo Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_294C[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreConnectQueryExternalAccountMappings_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreConnectQueryExternalAccountMappings_HandleCallback");
static_assert(sizeof(EOSCoreConnectQueryExternalAccountMappings_HandleCallback) == 0x000040, "Wrong size on EOSCoreConnectQueryExternalAccountMappings_HandleCallback");
static_assert(offsetof(EOSCoreConnectQueryExternalAccountMappings_HandleCallback, Data) == 0x000000, "Member 'EOSCoreConnectQueryExternalAccountMappings_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectQueryExternalAccountMappings_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreConnectQueryExternalAccountMappings_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreConnectQueryProductUserIdMappings.EOSConnectQueryProductUserIdMappingsAsync
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreConnectQueryProductUserIdMappings_EOSConnectQueryProductUserIdMappingsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSConnectQueryProductUserIdMappingsOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreConnectQueryProductUserIdMappings* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreConnectQueryProductUserIdMappings_EOSConnectQueryProductUserIdMappingsAsync) == 0x000008, "Wrong alignment on EOSCoreConnectQueryProductUserIdMappings_EOSConnectQueryProductUserIdMappingsAsync");
static_assert(sizeof(EOSCoreConnectQueryProductUserIdMappings_EOSConnectQueryProductUserIdMappingsAsync) == 0x000048, "Wrong size on EOSCoreConnectQueryProductUserIdMappings_EOSConnectQueryProductUserIdMappingsAsync");
static_assert(offsetof(EOSCoreConnectQueryProductUserIdMappings_EOSConnectQueryProductUserIdMappingsAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreConnectQueryProductUserIdMappings_EOSConnectQueryProductUserIdMappingsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectQueryProductUserIdMappings_EOSConnectQueryProductUserIdMappingsAsync, Options) == 0x000008, "Member 'EOSCoreConnectQueryProductUserIdMappings_EOSConnectQueryProductUserIdMappingsAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectQueryProductUserIdMappings_EOSConnectQueryProductUserIdMappingsAsync, ReturnValue) == 0x000040, "Member 'EOSCoreConnectQueryProductUserIdMappings_EOSConnectQueryProductUserIdMappingsAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreConnectQueryProductUserIdMappings.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreConnectQueryProductUserIdMappings_HandleCallback final
{
public:
	struct FEOSConnectQueryProductUserIdMappingsCallbackInfo Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_294E[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreConnectQueryProductUserIdMappings_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreConnectQueryProductUserIdMappings_HandleCallback");
static_assert(sizeof(EOSCoreConnectQueryProductUserIdMappings_HandleCallback) == 0x000040, "Wrong size on EOSCoreConnectQueryProductUserIdMappings_HandleCallback");
static_assert(offsetof(EOSCoreConnectQueryProductUserIdMappings_HandleCallback, Data) == 0x000000, "Member 'EOSCoreConnectQueryProductUserIdMappings_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreConnectQueryProductUserIdMappings_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreConnectQueryProductUserIdMappings_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCorePresenceQueryPresence.EOSPresenceQueryPresenceAsync
// 0x0058 (0x0058 - 0x0000)
struct EOSCorePresenceQueryPresence_EOSPresenceQueryPresenceAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPresenceQueryPresenceOptions       Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCorePresenceQueryPresence*          ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCorePresenceQueryPresence_EOSPresenceQueryPresenceAsync) == 0x000008, "Wrong alignment on EOSCorePresenceQueryPresence_EOSPresenceQueryPresenceAsync");
static_assert(sizeof(EOSCorePresenceQueryPresence_EOSPresenceQueryPresenceAsync) == 0x000058, "Wrong size on EOSCorePresenceQueryPresence_EOSPresenceQueryPresenceAsync");
static_assert(offsetof(EOSCorePresenceQueryPresence_EOSPresenceQueryPresenceAsync, WorldContextObject) == 0x000000, "Member 'EOSCorePresenceQueryPresence_EOSPresenceQueryPresenceAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCorePresenceQueryPresence_EOSPresenceQueryPresenceAsync, Options) == 0x000008, "Member 'EOSCorePresenceQueryPresence_EOSPresenceQueryPresenceAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCorePresenceQueryPresence_EOSPresenceQueryPresenceAsync, ReturnValue) == 0x000050, "Member 'EOSCorePresenceQueryPresence_EOSPresenceQueryPresenceAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCorePresenceQueryPresence.HandleCallback
// 0x0060 (0x0060 - 0x0000)
struct EOSCorePresenceQueryPresence_HandleCallback final
{
public:
	struct FEOSPresenceQueryPresenceCallbackInfo  Data;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2950[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCorePresenceQueryPresence_HandleCallback) == 0x000008, "Wrong alignment on EOSCorePresenceQueryPresence_HandleCallback");
static_assert(sizeof(EOSCorePresenceQueryPresence_HandleCallback) == 0x000060, "Wrong size on EOSCorePresenceQueryPresence_HandleCallback");
static_assert(offsetof(EOSCorePresenceQueryPresence_HandleCallback, Data) == 0x000000, "Member 'EOSCorePresenceQueryPresence_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCorePresenceQueryPresence_HandleCallback, bWasSuccessful) == 0x000058, "Member 'EOSCorePresenceQueryPresence_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.BreakUIEventIdStruct
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreLibrary_BreakUIEventIdStruct final
{
public:
	struct FEOSUIEventId                          EventId;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutEventId;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_BreakUIEventIdStruct) == 0x000008, "Wrong alignment on EOSCoreLibrary_BreakUIEventIdStruct");
static_assert(sizeof(EOSCoreLibrary_BreakUIEventIdStruct) == 0x000018, "Wrong size on EOSCoreLibrary_BreakUIEventIdStruct");
static_assert(offsetof(EOSCoreLibrary_BreakUIEventIdStruct, EventId) == 0x000000, "Member 'EOSCoreLibrary_BreakUIEventIdStruct::EventId' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_BreakUIEventIdStruct, OutEventId) == 0x000008, "Member 'EOSCoreLibrary_BreakUIEventIdStruct::OutEventId' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.CoreBytesToString
// 0x0020 (0x0020 - 0x0000)
struct EOSCoreLibrary_CoreBytesToString final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_CoreBytesToString) == 0x000008, "Wrong alignment on EOSCoreLibrary_CoreBytesToString");
static_assert(sizeof(EOSCoreLibrary_CoreBytesToString) == 0x000020, "Wrong size on EOSCoreLibrary_CoreBytesToString");
static_assert(offsetof(EOSCoreLibrary_CoreBytesToString, Data) == 0x000000, "Member 'EOSCoreLibrary_CoreBytesToString::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_CoreBytesToString, ReturnValue) == 0x000010, "Member 'EOSCoreLibrary_CoreBytesToString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.CoreStringToByte
// 0x0020 (0x0020 - 0x0000)
struct EOSCoreLibrary_CoreStringToByte final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_CoreStringToByte) == 0x000008, "Wrong alignment on EOSCoreLibrary_CoreStringToByte");
static_assert(sizeof(EOSCoreLibrary_CoreStringToByte) == 0x000020, "Wrong size on EOSCoreLibrary_CoreStringToByte");
static_assert(offsetof(EOSCoreLibrary_CoreStringToByte, String) == 0x000000, "Member 'EOSCoreLibrary_CoreStringToByte::String' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_CoreStringToByte, ReturnValue) == 0x000010, "Member 'EOSCoreLibrary_CoreStringToByte::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOS_Initialized
// 0x0010 (0x0010 - 0x0000)
struct EOSCoreLibrary_EOS_Initialized final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2951[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_EOS_Initialized) == 0x000008, "Wrong alignment on EOSCoreLibrary_EOS_Initialized");
static_assert(sizeof(EOSCoreLibrary_EOS_Initialized) == 0x000010, "Wrong size on EOSCoreLibrary_EOS_Initialized");
static_assert(offsetof(EOSCoreLibrary_EOS_Initialized, WorldContextObject) == 0x000000, "Member 'EOSCoreLibrary_EOS_Initialized::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOS_Initialized, ReturnValue) == 0x000008, "Member 'EOSCoreLibrary_EOS_Initialized::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOS_Success
// 0x0002 (0x0002 - 0x0000)
struct EOSCoreLibrary_EOS_Success final
{
public:
	EOSResult                                     Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESuccessFail                                  Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_EOS_Success) == 0x000001, "Wrong alignment on EOSCoreLibrary_EOS_Success");
static_assert(sizeof(EOSCoreLibrary_EOS_Success) == 0x000002, "Wrong size on EOSCoreLibrary_EOS_Success");
static_assert(offsetof(EOSCoreLibrary_EOS_Success, Status) == 0x000000, "Member 'EOSCoreLibrary_EOS_Success::Status' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOS_Success, Result) == 0x000001, "Member 'EOSCoreLibrary_EOS_Success::Result' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSByteArrayToString
// 0x0030 (0x0030 - 0x0000)
struct EOSCoreLibrary_EOSByteArrayToString final
{
public:
	TArray<uint8>                                 Array;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2952[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2953[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_EOSByteArrayToString) == 0x000008, "Wrong alignment on EOSCoreLibrary_EOSByteArrayToString");
static_assert(sizeof(EOSCoreLibrary_EOSByteArrayToString) == 0x000030, "Wrong size on EOSCoreLibrary_EOSByteArrayToString");
static_assert(offsetof(EOSCoreLibrary_EOSByteArrayToString, Array) == 0x000000, "Member 'EOSCoreLibrary_EOSByteArrayToString::Array' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSByteArrayToString, Length) == 0x000010, "Member 'EOSCoreLibrary_EOSByteArrayToString::Length' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSByteArrayToString, String) == 0x000018, "Member 'EOSCoreLibrary_EOSByteArrayToString::String' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSByteArrayToString, ReturnValue) == 0x000028, "Member 'EOSCoreLibrary_EOSByteArrayToString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSContinuanceTokenToString
// 0x0020 (0x0020 - 0x0000)
struct EOSCoreLibrary_EOSContinuanceTokenToString final
{
public:
	struct FContinuanceToken                      ID;                                                // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2954[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_EOSContinuanceTokenToString) == 0x000008, "Wrong alignment on EOSCoreLibrary_EOSContinuanceTokenToString");
static_assert(sizeof(EOSCoreLibrary_EOSContinuanceTokenToString) == 0x000020, "Wrong size on EOSCoreLibrary_EOSContinuanceTokenToString");
static_assert(offsetof(EOSCoreLibrary_EOSContinuanceTokenToString, ID) == 0x000000, "Member 'EOSCoreLibrary_EOSContinuanceTokenToString::ID' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSContinuanceTokenToString, String) == 0x000008, "Member 'EOSCoreLibrary_EOSContinuanceTokenToString::String' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSContinuanceTokenToString, ReturnValue) == 0x000018, "Member 'EOSCoreLibrary_EOSContinuanceTokenToString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSEpicAccountIdFromString
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreLibrary_EOSEpicAccountIdFromString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEpicAccountId                      ReturnValue;                                       // 0x0010(0x0021)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2955[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_EOSEpicAccountIdFromString) == 0x000008, "Wrong alignment on EOSCoreLibrary_EOSEpicAccountIdFromString");
static_assert(sizeof(EOSCoreLibrary_EOSEpicAccountIdFromString) == 0x000038, "Wrong size on EOSCoreLibrary_EOSEpicAccountIdFromString");
static_assert(offsetof(EOSCoreLibrary_EOSEpicAccountIdFromString, String) == 0x000000, "Member 'EOSCoreLibrary_EOSEpicAccountIdFromString::String' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSEpicAccountIdFromString, ReturnValue) == 0x000010, "Member 'EOSCoreLibrary_EOSEpicAccountIdFromString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSEpicAccountIdIsValid
// 0x0022 (0x0022 - 0x0000)
struct EOSCoreLibrary_EOSEpicAccountIdIsValid final
{
public:
	struct FEOSEpicAccountId                      ID;                                                // 0x0000(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_EOSEpicAccountIdIsValid) == 0x000001, "Wrong alignment on EOSCoreLibrary_EOSEpicAccountIdIsValid");
static_assert(sizeof(EOSCoreLibrary_EOSEpicAccountIdIsValid) == 0x000022, "Wrong size on EOSCoreLibrary_EOSEpicAccountIdIsValid");
static_assert(offsetof(EOSCoreLibrary_EOSEpicAccountIdIsValid, ID) == 0x000000, "Member 'EOSCoreLibrary_EOSEpicAccountIdIsValid::ID' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSEpicAccountIdIsValid, ReturnValue) == 0x000021, "Member 'EOSCoreLibrary_EOSEpicAccountIdIsValid::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSEpicAccountIdIsValidPure
// 0x0022 (0x0022 - 0x0000)
struct EOSCoreLibrary_EOSEpicAccountIdIsValidPure final
{
public:
	struct FEOSEpicAccountId                      ID;                                                // 0x0000(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_EOSEpicAccountIdIsValidPure) == 0x000001, "Wrong alignment on EOSCoreLibrary_EOSEpicAccountIdIsValidPure");
static_assert(sizeof(EOSCoreLibrary_EOSEpicAccountIdIsValidPure) == 0x000022, "Wrong size on EOSCoreLibrary_EOSEpicAccountIdIsValidPure");
static_assert(offsetof(EOSCoreLibrary_EOSEpicAccountIdIsValidPure, ID) == 0x000000, "Member 'EOSCoreLibrary_EOSEpicAccountIdIsValidPure::ID' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSEpicAccountIdIsValidPure, ReturnValue) == 0x000021, "Member 'EOSCoreLibrary_EOSEpicAccountIdIsValidPure::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSEpicAccountIdToString
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreLibrary_EOSEpicAccountIdToString final
{
public:
	struct FEOSEpicAccountId                      ID;                                                // 0x0000(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2956[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2957[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_EOSEpicAccountIdToString) == 0x000008, "Wrong alignment on EOSCoreLibrary_EOSEpicAccountIdToString");
static_assert(sizeof(EOSCoreLibrary_EOSEpicAccountIdToString) == 0x000040, "Wrong size on EOSCoreLibrary_EOSEpicAccountIdToString");
static_assert(offsetof(EOSCoreLibrary_EOSEpicAccountIdToString, ID) == 0x000000, "Member 'EOSCoreLibrary_EOSEpicAccountIdToString::ID' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSEpicAccountIdToString, String) == 0x000028, "Member 'EOSCoreLibrary_EOSEpicAccountIdToString::String' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSEpicAccountIdToString, ReturnValue) == 0x000038, "Member 'EOSCoreLibrary_EOSEpicAccountIdToString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSEResultIsOperationComplete
// 0x0002 (0x0002 - 0x0000)
struct EOSCoreLibrary_EOSEResultIsOperationComplete final
{
public:
	EOSResult                                     Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_EOSEResultIsOperationComplete) == 0x000001, "Wrong alignment on EOSCoreLibrary_EOSEResultIsOperationComplete");
static_assert(sizeof(EOSCoreLibrary_EOSEResultIsOperationComplete) == 0x000002, "Wrong size on EOSCoreLibrary_EOSEResultIsOperationComplete");
static_assert(offsetof(EOSCoreLibrary_EOSEResultIsOperationComplete, Result) == 0x000000, "Member 'EOSCoreLibrary_EOSEResultIsOperationComplete::Result' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSEResultIsOperationComplete, ReturnValue) == 0x000001, "Member 'EOSCoreLibrary_EOSEResultIsOperationComplete::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSEResultToString
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreLibrary_EOSEResultToString final
{
public:
	EOSResult                                     Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2958[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_EOSEResultToString) == 0x000008, "Wrong alignment on EOSCoreLibrary_EOSEResultToString");
static_assert(sizeof(EOSCoreLibrary_EOSEResultToString) == 0x000018, "Wrong size on EOSCoreLibrary_EOSEResultToString");
static_assert(offsetof(EOSCoreLibrary_EOSEResultToString, Result) == 0x000000, "Member 'EOSCoreLibrary_EOSEResultToString::Result' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSEResultToString, ReturnValue) == 0x000008, "Member 'EOSCoreLibrary_EOSEResultToString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSProductUserIdFromString
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreLibrary_EOSProductUserIdFromString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      ReturnValue;                                       // 0x0010(0x0021)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2959[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_EOSProductUserIdFromString) == 0x000008, "Wrong alignment on EOSCoreLibrary_EOSProductUserIdFromString");
static_assert(sizeof(EOSCoreLibrary_EOSProductUserIdFromString) == 0x000038, "Wrong size on EOSCoreLibrary_EOSProductUserIdFromString");
static_assert(offsetof(EOSCoreLibrary_EOSProductUserIdFromString, String) == 0x000000, "Member 'EOSCoreLibrary_EOSProductUserIdFromString::String' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSProductUserIdFromString, ReturnValue) == 0x000010, "Member 'EOSCoreLibrary_EOSProductUserIdFromString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSProductUserIdIsValid
// 0x0022 (0x0022 - 0x0000)
struct EOSCoreLibrary_EOSProductUserIdIsValid final
{
public:
	struct FEOSProductUserId                      ID;                                                // 0x0000(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_EOSProductUserIdIsValid) == 0x000001, "Wrong alignment on EOSCoreLibrary_EOSProductUserIdIsValid");
static_assert(sizeof(EOSCoreLibrary_EOSProductUserIdIsValid) == 0x000022, "Wrong size on EOSCoreLibrary_EOSProductUserIdIsValid");
static_assert(offsetof(EOSCoreLibrary_EOSProductUserIdIsValid, ID) == 0x000000, "Member 'EOSCoreLibrary_EOSProductUserIdIsValid::ID' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSProductUserIdIsValid, ReturnValue) == 0x000021, "Member 'EOSCoreLibrary_EOSProductUserIdIsValid::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSProductUserIdIsValidPure
// 0x0022 (0x0022 - 0x0000)
struct EOSCoreLibrary_EOSProductUserIdIsValidPure final
{
public:
	struct FEOSProductUserId                      ID;                                                // 0x0000(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_EOSProductUserIdIsValidPure) == 0x000001, "Wrong alignment on EOSCoreLibrary_EOSProductUserIdIsValidPure");
static_assert(sizeof(EOSCoreLibrary_EOSProductUserIdIsValidPure) == 0x000022, "Wrong size on EOSCoreLibrary_EOSProductUserIdIsValidPure");
static_assert(offsetof(EOSCoreLibrary_EOSProductUserIdIsValidPure, ID) == 0x000000, "Member 'EOSCoreLibrary_EOSProductUserIdIsValidPure::ID' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSProductUserIdIsValidPure, ReturnValue) == 0x000021, "Member 'EOSCoreLibrary_EOSProductUserIdIsValidPure::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSProductUserIdToString
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreLibrary_EOSProductUserIdToString final
{
public:
	struct FEOSProductUserId                      ID;                                                // 0x0000(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_295A[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_295B[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_EOSProductUserIdToString) == 0x000008, "Wrong alignment on EOSCoreLibrary_EOSProductUserIdToString");
static_assert(sizeof(EOSCoreLibrary_EOSProductUserIdToString) == 0x000040, "Wrong size on EOSCoreLibrary_EOSProductUserIdToString");
static_assert(offsetof(EOSCoreLibrary_EOSProductUserIdToString, ID) == 0x000000, "Member 'EOSCoreLibrary_EOSProductUserIdToString::ID' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSProductUserIdToString, String) == 0x000028, "Member 'EOSCoreLibrary_EOSProductUserIdToString::String' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSProductUserIdToString, ReturnValue) == 0x000038, "Member 'EOSCoreLibrary_EOSProductUserIdToString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.FromUnixTimestamp
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreLibrary_FromUnixTimestamp final
{
public:
	class FString                                 Timestamp;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_FromUnixTimestamp) == 0x000008, "Wrong alignment on EOSCoreLibrary_FromUnixTimestamp");
static_assert(sizeof(EOSCoreLibrary_FromUnixTimestamp) == 0x000018, "Wrong size on EOSCoreLibrary_FromUnixTimestamp");
static_assert(offsetof(EOSCoreLibrary_FromUnixTimestamp, Timestamp) == 0x000000, "Member 'EOSCoreLibrary_FromUnixTimestamp::Timestamp' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_FromUnixTimestamp, ReturnValue) == 0x000010, "Member 'EOSCoreLibrary_FromUnixTimestamp::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.GetBool
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreLibrary_GetBool final
{
public:
	struct FEOSSessionSetting                     Settings;                                          // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_295C[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_GetBool) == 0x000008, "Wrong alignment on EOSCoreLibrary_GetBool");
static_assert(sizeof(EOSCoreLibrary_GetBool) == 0x000040, "Wrong size on EOSCoreLibrary_GetBool");
static_assert(offsetof(EOSCoreLibrary_GetBool, Settings) == 0x000000, "Member 'EOSCoreLibrary_GetBool::Settings' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetBool, Key) == 0x000028, "Member 'EOSCoreLibrary_GetBool::Key' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetBool, ReturnValue) == 0x000038, "Member 'EOSCoreLibrary_GetBool::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.GetCurrentAccountId
// 0x0030 (0x0030 - 0x0000)
struct EOSCoreLibrary_GetCurrentAccountId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEpicAccountId                      ReturnValue;                                       // 0x000C(0x0021)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_295D[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_GetCurrentAccountId) == 0x000008, "Wrong alignment on EOSCoreLibrary_GetCurrentAccountId");
static_assert(sizeof(EOSCoreLibrary_GetCurrentAccountId) == 0x000030, "Wrong size on EOSCoreLibrary_GetCurrentAccountId");
static_assert(offsetof(EOSCoreLibrary_GetCurrentAccountId, WorldContextObject) == 0x000000, "Member 'EOSCoreLibrary_GetCurrentAccountId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetCurrentAccountId, UserIndex) == 0x000008, "Member 'EOSCoreLibrary_GetCurrentAccountId::UserIndex' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetCurrentAccountId, ReturnValue) == 0x00000C, "Member 'EOSCoreLibrary_GetCurrentAccountId::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.GetCurrentProductId
// 0x0030 (0x0030 - 0x0000)
struct EOSCoreLibrary_GetCurrentProductId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      ReturnValue;                                       // 0x000C(0x0021)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_295E[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_GetCurrentProductId) == 0x000008, "Wrong alignment on EOSCoreLibrary_GetCurrentProductId");
static_assert(sizeof(EOSCoreLibrary_GetCurrentProductId) == 0x000030, "Wrong size on EOSCoreLibrary_GetCurrentProductId");
static_assert(offsetof(EOSCoreLibrary_GetCurrentProductId, WorldContextObject) == 0x000000, "Member 'EOSCoreLibrary_GetCurrentProductId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetCurrentProductId, UserIndex) == 0x000008, "Member 'EOSCoreLibrary_GetCurrentProductId::UserIndex' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetCurrentProductId, ReturnValue) == 0x00000C, "Member 'EOSCoreLibrary_GetCurrentProductId::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.GetInteger
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreLibrary_GetInteger final
{
public:
	struct FEOSSessionSetting                     Settings;                                          // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_295F[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_GetInteger) == 0x000008, "Wrong alignment on EOSCoreLibrary_GetInteger");
static_assert(sizeof(EOSCoreLibrary_GetInteger) == 0x000040, "Wrong size on EOSCoreLibrary_GetInteger");
static_assert(offsetof(EOSCoreLibrary_GetInteger, Settings) == 0x000000, "Member 'EOSCoreLibrary_GetInteger::Settings' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetInteger, Key) == 0x000028, "Member 'EOSCoreLibrary_GetInteger::Key' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetInteger, ReturnValue) == 0x000038, "Member 'EOSCoreLibrary_GetInteger::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.GetLobbyAttributeBool
// 0x0030 (0x0030 - 0x0000)
struct EOSCoreLibrary_GetLobbyAttributeBool final
{
public:
	struct FEOSLobbyAttributeData                 Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2960[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_GetLobbyAttributeBool) == 0x000008, "Wrong alignment on EOSCoreLibrary_GetLobbyAttributeBool");
static_assert(sizeof(EOSCoreLibrary_GetLobbyAttributeBool) == 0x000030, "Wrong size on EOSCoreLibrary_GetLobbyAttributeBool");
static_assert(offsetof(EOSCoreLibrary_GetLobbyAttributeBool, Data) == 0x000000, "Member 'EOSCoreLibrary_GetLobbyAttributeBool::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetLobbyAttributeBool, ReturnValue) == 0x000028, "Member 'EOSCoreLibrary_GetLobbyAttributeBool::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.GetLobbyAttributeDouble
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreLibrary_GetLobbyAttributeDouble final
{
public:
	struct FEOSLobbyAttributeData                 Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_GetLobbyAttributeDouble) == 0x000008, "Wrong alignment on EOSCoreLibrary_GetLobbyAttributeDouble");
static_assert(sizeof(EOSCoreLibrary_GetLobbyAttributeDouble) == 0x000038, "Wrong size on EOSCoreLibrary_GetLobbyAttributeDouble");
static_assert(offsetof(EOSCoreLibrary_GetLobbyAttributeDouble, Data) == 0x000000, "Member 'EOSCoreLibrary_GetLobbyAttributeDouble::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetLobbyAttributeDouble, ReturnValue) == 0x000028, "Member 'EOSCoreLibrary_GetLobbyAttributeDouble::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.GetLobbyAttributeInt64
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreLibrary_GetLobbyAttributeInt64 final
{
public:
	struct FEOSLobbyAttributeData                 Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_GetLobbyAttributeInt64) == 0x000008, "Wrong alignment on EOSCoreLibrary_GetLobbyAttributeInt64");
static_assert(sizeof(EOSCoreLibrary_GetLobbyAttributeInt64) == 0x000038, "Wrong size on EOSCoreLibrary_GetLobbyAttributeInt64");
static_assert(offsetof(EOSCoreLibrary_GetLobbyAttributeInt64, Data) == 0x000000, "Member 'EOSCoreLibrary_GetLobbyAttributeInt64::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetLobbyAttributeInt64, ReturnValue) == 0x000028, "Member 'EOSCoreLibrary_GetLobbyAttributeInt64::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.GetLobbyAttributeString
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreLibrary_GetLobbyAttributeString final
{
public:
	struct FEOSLobbyAttributeData                 Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_GetLobbyAttributeString) == 0x000008, "Wrong alignment on EOSCoreLibrary_GetLobbyAttributeString");
static_assert(sizeof(EOSCoreLibrary_GetLobbyAttributeString) == 0x000038, "Wrong size on EOSCoreLibrary_GetLobbyAttributeString");
static_assert(offsetof(EOSCoreLibrary_GetLobbyAttributeString, Data) == 0x000000, "Member 'EOSCoreLibrary_GetLobbyAttributeString::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetLobbyAttributeString, ReturnValue) == 0x000028, "Member 'EOSCoreLibrary_GetLobbyAttributeString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.GetSessionAttributeBool
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreLibrary_GetSessionAttributeBool final
{
public:
	struct FEOSSessionsAttributeData              Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2961[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_GetSessionAttributeBool) == 0x000008, "Wrong alignment on EOSCoreLibrary_GetSessionAttributeBool");
static_assert(sizeof(EOSCoreLibrary_GetSessionAttributeBool) == 0x000028, "Wrong size on EOSCoreLibrary_GetSessionAttributeBool");
static_assert(offsetof(EOSCoreLibrary_GetSessionAttributeBool, Data) == 0x000000, "Member 'EOSCoreLibrary_GetSessionAttributeBool::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetSessionAttributeBool, ReturnValue) == 0x000020, "Member 'EOSCoreLibrary_GetSessionAttributeBool::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.GetSessionAttributeDouble
// 0x0030 (0x0030 - 0x0000)
struct EOSCoreLibrary_GetSessionAttributeDouble final
{
public:
	struct FEOSSessionsAttributeData              Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_GetSessionAttributeDouble) == 0x000008, "Wrong alignment on EOSCoreLibrary_GetSessionAttributeDouble");
static_assert(sizeof(EOSCoreLibrary_GetSessionAttributeDouble) == 0x000030, "Wrong size on EOSCoreLibrary_GetSessionAttributeDouble");
static_assert(offsetof(EOSCoreLibrary_GetSessionAttributeDouble, Data) == 0x000000, "Member 'EOSCoreLibrary_GetSessionAttributeDouble::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetSessionAttributeDouble, ReturnValue) == 0x000020, "Member 'EOSCoreLibrary_GetSessionAttributeDouble::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.GetSessionAttributeInt64
// 0x0030 (0x0030 - 0x0000)
struct EOSCoreLibrary_GetSessionAttributeInt64 final
{
public:
	struct FEOSSessionsAttributeData              Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_GetSessionAttributeInt64) == 0x000008, "Wrong alignment on EOSCoreLibrary_GetSessionAttributeInt64");
static_assert(sizeof(EOSCoreLibrary_GetSessionAttributeInt64) == 0x000030, "Wrong size on EOSCoreLibrary_GetSessionAttributeInt64");
static_assert(offsetof(EOSCoreLibrary_GetSessionAttributeInt64, Data) == 0x000000, "Member 'EOSCoreLibrary_GetSessionAttributeInt64::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetSessionAttributeInt64, ReturnValue) == 0x000020, "Member 'EOSCoreLibrary_GetSessionAttributeInt64::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.GetSessionAttributeString
// 0x0030 (0x0030 - 0x0000)
struct EOSCoreLibrary_GetSessionAttributeString final
{
public:
	struct FEOSSessionsAttributeData              Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_GetSessionAttributeString) == 0x000008, "Wrong alignment on EOSCoreLibrary_GetSessionAttributeString");
static_assert(sizeof(EOSCoreLibrary_GetSessionAttributeString) == 0x000030, "Wrong size on EOSCoreLibrary_GetSessionAttributeString");
static_assert(offsetof(EOSCoreLibrary_GetSessionAttributeString, Data) == 0x000000, "Member 'EOSCoreLibrary_GetSessionAttributeString::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetSessionAttributeString, ReturnValue) == 0x000020, "Member 'EOSCoreLibrary_GetSessionAttributeString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.GetString
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreLibrary_GetString final
{
public:
	struct FEOSSessionSetting                     Settings;                                          // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_GetString) == 0x000008, "Wrong alignment on EOSCoreLibrary_GetString");
static_assert(sizeof(EOSCoreLibrary_GetString) == 0x000048, "Wrong size on EOSCoreLibrary_GetString");
static_assert(offsetof(EOSCoreLibrary_GetString, Settings) == 0x000000, "Member 'EOSCoreLibrary_GetString::Settings' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetString, Key) == 0x000028, "Member 'EOSCoreLibrary_GetString::Key' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_GetString, ReturnValue) == 0x000038, "Member 'EOSCoreLibrary_GetString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.IsEpicAccountIdIdenticalWith
// 0x0043 (0x0043 - 0x0000)
struct EOSCoreLibrary_IsEpicAccountIdIdenticalWith final
{
public:
	struct FEOSEpicAccountId                      A;                                                 // 0x0000(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEpicAccountId                      B;                                                 // 0x0021(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0042(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_IsEpicAccountIdIdenticalWith) == 0x000001, "Wrong alignment on EOSCoreLibrary_IsEpicAccountIdIdenticalWith");
static_assert(sizeof(EOSCoreLibrary_IsEpicAccountIdIdenticalWith) == 0x000043, "Wrong size on EOSCoreLibrary_IsEpicAccountIdIdenticalWith");
static_assert(offsetof(EOSCoreLibrary_IsEpicAccountIdIdenticalWith, A) == 0x000000, "Member 'EOSCoreLibrary_IsEpicAccountIdIdenticalWith::A' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_IsEpicAccountIdIdenticalWith, B) == 0x000021, "Member 'EOSCoreLibrary_IsEpicAccountIdIdenticalWith::B' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_IsEpicAccountIdIdenticalWith, ReturnValue) == 0x000042, "Member 'EOSCoreLibrary_IsEpicAccountIdIdenticalWith::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.IsProductUserIdIdenticalWith
// 0x0043 (0x0043 - 0x0000)
struct EOSCoreLibrary_IsProductUserIdIdenticalWith final
{
public:
	struct FEOSProductUserId                      A;                                                 // 0x0000(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      B;                                                 // 0x0021(0x0021)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0042(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_IsProductUserIdIdenticalWith) == 0x000001, "Wrong alignment on EOSCoreLibrary_IsProductUserIdIdenticalWith");
static_assert(sizeof(EOSCoreLibrary_IsProductUserIdIdenticalWith) == 0x000043, "Wrong size on EOSCoreLibrary_IsProductUserIdIdenticalWith");
static_assert(offsetof(EOSCoreLibrary_IsProductUserIdIdenticalWith, A) == 0x000000, "Member 'EOSCoreLibrary_IsProductUserIdIdenticalWith::A' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_IsProductUserIdIdenticalWith, B) == 0x000021, "Member 'EOSCoreLibrary_IsProductUserIdIdenticalWith::B' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_IsProductUserIdIdenticalWith, ReturnValue) == 0x000042, "Member 'EOSCoreLibrary_IsProductUserIdIdenticalWith::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.ListenForEOSMessages
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreLibrary_ListenForEOSMessages final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Category, const class FString& Message, EEOSLogLevel EOSLogLevel)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_ListenForEOSMessages) == 0x000008, "Wrong alignment on EOSCoreLibrary_ListenForEOSMessages");
static_assert(sizeof(EOSCoreLibrary_ListenForEOSMessages) == 0x000018, "Wrong size on EOSCoreLibrary_ListenForEOSMessages");
static_assert(offsetof(EOSCoreLibrary_ListenForEOSMessages, WorldContextObject) == 0x000000, "Member 'EOSCoreLibrary_ListenForEOSMessages::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_ListenForEOSMessages, Callback) == 0x000008, "Member 'EOSCoreLibrary_ListenForEOSMessages::Callback' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.Login
// 0x0058 (0x0058 - 0x0000)
struct EOSCoreLibrary_Login final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoginId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSLoginCredentialType                       AuthType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSEExternalCredentialType                   CredentialsType;                                   // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2962[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdditionalData;                                    // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bWasSuccessful, const class FString& ErrorStr)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_Login) == 0x000008, "Wrong alignment on EOSCoreLibrary_Login");
static_assert(sizeof(EOSCoreLibrary_Login) == 0x000058, "Wrong size on EOSCoreLibrary_Login");
static_assert(offsetof(EOSCoreLibrary_Login, WorldContextObject) == 0x000000, "Member 'EOSCoreLibrary_Login::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_Login, PlayerController) == 0x000008, "Member 'EOSCoreLibrary_Login::PlayerController' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_Login, LoginId) == 0x000010, "Member 'EOSCoreLibrary_Login::LoginId' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_Login, Password) == 0x000020, "Member 'EOSCoreLibrary_Login::Password' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_Login, AuthType) == 0x000030, "Member 'EOSCoreLibrary_Login::AuthType' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_Login, CredentialsType) == 0x000031, "Member 'EOSCoreLibrary_Login::CredentialsType' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_Login, AdditionalData) == 0x000038, "Member 'EOSCoreLibrary_Login::AdditionalData' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_Login, Callback) == 0x000048, "Member 'EOSCoreLibrary_Login::Callback' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.MakeBool
// 0x0030 (0x0030 - 0x0000)
struct EOSCoreLibrary_MakeBool final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2963[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSSessionSetting                     ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_MakeBool) == 0x000008, "Wrong alignment on EOSCoreLibrary_MakeBool");
static_assert(sizeof(EOSCoreLibrary_MakeBool) == 0x000030, "Wrong size on EOSCoreLibrary_MakeBool");
static_assert(offsetof(EOSCoreLibrary_MakeBool, Value) == 0x000000, "Member 'EOSCoreLibrary_MakeBool::Value' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_MakeBool, ReturnValue) == 0x000008, "Member 'EOSCoreLibrary_MakeBool::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.MakeInteger
// 0x0030 (0x0030 - 0x0000)
struct EOSCoreLibrary_MakeInteger final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2964[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSSessionSetting                     ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_MakeInteger) == 0x000008, "Wrong alignment on EOSCoreLibrary_MakeInteger");
static_assert(sizeof(EOSCoreLibrary_MakeInteger) == 0x000030, "Wrong size on EOSCoreLibrary_MakeInteger");
static_assert(offsetof(EOSCoreLibrary_MakeInteger, Value) == 0x000000, "Member 'EOSCoreLibrary_MakeInteger::Value' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_MakeInteger, ReturnValue) == 0x000008, "Member 'EOSCoreLibrary_MakeInteger::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.MakeParamInt32
// 0x0020 (0x0020 - 0x0000)
struct EOSCoreLibrary_MakeParamInt32 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2965[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSAntiCheatCommonLogEventParamPair   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_MakeParamInt32) == 0x000008, "Wrong alignment on EOSCoreLibrary_MakeParamInt32");
static_assert(sizeof(EOSCoreLibrary_MakeParamInt32) == 0x000020, "Wrong size on EOSCoreLibrary_MakeParamInt32");
static_assert(offsetof(EOSCoreLibrary_MakeParamInt32, Value) == 0x000000, "Member 'EOSCoreLibrary_MakeParamInt32::Value' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_MakeParamInt32, ReturnValue) == 0x000008, "Member 'EOSCoreLibrary_MakeParamInt32::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.MakeParamInt64
// 0x0020 (0x0020 - 0x0000)
struct EOSCoreLibrary_MakeParamInt64 final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonLogEventParamPair   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_MakeParamInt64) == 0x000008, "Wrong alignment on EOSCoreLibrary_MakeParamInt64");
static_assert(sizeof(EOSCoreLibrary_MakeParamInt64) == 0x000020, "Wrong size on EOSCoreLibrary_MakeParamInt64");
static_assert(offsetof(EOSCoreLibrary_MakeParamInt64, Value) == 0x000000, "Member 'EOSCoreLibrary_MakeParamInt64::Value' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_MakeParamInt64, ReturnValue) == 0x000008, "Member 'EOSCoreLibrary_MakeParamInt64::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.MakeParamString
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreLibrary_MakeParamString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAntiCheatCommonLogEventParamPair   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_MakeParamString) == 0x000008, "Wrong alignment on EOSCoreLibrary_MakeParamString");
static_assert(sizeof(EOSCoreLibrary_MakeParamString) == 0x000028, "Wrong size on EOSCoreLibrary_MakeParamString");
static_assert(offsetof(EOSCoreLibrary_MakeParamString, String) == 0x000000, "Member 'EOSCoreLibrary_MakeParamString::String' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_MakeParamString, ReturnValue) == 0x000010, "Member 'EOSCoreLibrary_MakeParamString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.MakeSearchBool
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreLibrary_MakeSearchBool final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2966[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSSessionSearchSetting               ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_MakeSearchBool) == 0x000008, "Wrong alignment on EOSCoreLibrary_MakeSearchBool");
static_assert(sizeof(EOSCoreLibrary_MakeSearchBool) == 0x000028, "Wrong size on EOSCoreLibrary_MakeSearchBool");
static_assert(offsetof(EOSCoreLibrary_MakeSearchBool, Value) == 0x000000, "Member 'EOSCoreLibrary_MakeSearchBool::Value' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_MakeSearchBool, ReturnValue) == 0x000008, "Member 'EOSCoreLibrary_MakeSearchBool::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.MakeSearchInteger
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreLibrary_MakeSearchInteger final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2967[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSSessionSearchSetting               ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_MakeSearchInteger) == 0x000008, "Wrong alignment on EOSCoreLibrary_MakeSearchInteger");
static_assert(sizeof(EOSCoreLibrary_MakeSearchInteger) == 0x000028, "Wrong size on EOSCoreLibrary_MakeSearchInteger");
static_assert(offsetof(EOSCoreLibrary_MakeSearchInteger, Value) == 0x000000, "Member 'EOSCoreLibrary_MakeSearchInteger::Value' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_MakeSearchInteger, ReturnValue) == 0x000008, "Member 'EOSCoreLibrary_MakeSearchInteger::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.MakeSearchString
// 0x0030 (0x0030 - 0x0000)
struct EOSCoreLibrary_MakeSearchString final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionSearchSetting               ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_MakeSearchString) == 0x000008, "Wrong alignment on EOSCoreLibrary_MakeSearchString");
static_assert(sizeof(EOSCoreLibrary_MakeSearchString) == 0x000030, "Wrong size on EOSCoreLibrary_MakeSearchString");
static_assert(offsetof(EOSCoreLibrary_MakeSearchString, Value) == 0x000000, "Member 'EOSCoreLibrary_MakeSearchString::Value' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_MakeSearchString, ReturnValue) == 0x000010, "Member 'EOSCoreLibrary_MakeSearchString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.MakeString
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreLibrary_MakeString final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionSetting                     ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_MakeString) == 0x000008, "Wrong alignment on EOSCoreLibrary_MakeString");
static_assert(sizeof(EOSCoreLibrary_MakeString) == 0x000038, "Wrong size on EOSCoreLibrary_MakeString");
static_assert(offsetof(EOSCoreLibrary_MakeString, Value) == 0x000000, "Member 'EOSCoreLibrary_MakeString::Value' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_MakeString, ReturnValue) == 0x000010, "Member 'EOSCoreLibrary_MakeString::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.RemoveListenForEOSMessages
// 0x0008 (0x0008 - 0x0000)
struct EOSCoreLibrary_RemoveListenForEOSMessages final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLibrary_RemoveListenForEOSMessages) == 0x000008, "Wrong alignment on EOSCoreLibrary_RemoveListenForEOSMessages");
static_assert(sizeof(EOSCoreLibrary_RemoveListenForEOSMessages) == 0x000008, "Wrong size on EOSCoreLibrary_RemoveListenForEOSMessages");
static_assert(offsetof(EOSCoreLibrary_RemoveListenForEOSMessages, WorldContextObject) == 0x000000, "Member 'EOSCoreLibrary_RemoveListenForEOSMessages::WorldContextObject' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.UpdateUniqueNetIdFromOSS
// 0x0010 (0x0010 - 0x0000)
struct EOSCoreLibrary_UpdateUniqueNetIdFromOSS final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2968[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_UpdateUniqueNetIdFromOSS) == 0x000008, "Wrong alignment on EOSCoreLibrary_UpdateUniqueNetIdFromOSS");
static_assert(sizeof(EOSCoreLibrary_UpdateUniqueNetIdFromOSS) == 0x000010, "Wrong size on EOSCoreLibrary_UpdateUniqueNetIdFromOSS");
static_assert(offsetof(EOSCoreLibrary_UpdateUniqueNetIdFromOSS, PlayerController) == 0x000000, "Member 'EOSCoreLibrary_UpdateUniqueNetIdFromOSS::PlayerController' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_UpdateUniqueNetIdFromOSS, ReturnValue) == 0x000008, "Member 'EOSCoreLibrary_UpdateUniqueNetIdFromOSS::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSPlatformGetApplicationStatus
// 0x0010 (0x0010 - 0x0000)
struct EOSCoreLibrary_EOSPlatformGetApplicationStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSEApplicationStatus                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2969[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_EOSPlatformGetApplicationStatus) == 0x000008, "Wrong alignment on EOSCoreLibrary_EOSPlatformGetApplicationStatus");
static_assert(sizeof(EOSCoreLibrary_EOSPlatformGetApplicationStatus) == 0x000010, "Wrong size on EOSCoreLibrary_EOSPlatformGetApplicationStatus");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformGetApplicationStatus, WorldContextObject) == 0x000000, "Member 'EOSCoreLibrary_EOSPlatformGetApplicationStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformGetApplicationStatus, ReturnValue) == 0x000008, "Member 'EOSCoreLibrary_EOSPlatformGetApplicationStatus::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSPlatformGetDesktopCrossplayStatus
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreLibrary_EOSPlatformGetDesktopCrossplayStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlatformGetDesktopCrossplayStatusOptions Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_296A[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSPlatformGetDesktopCrossplayStatusInfo OutDesktopCrossplayStatusInfo;                     // 0x002C(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_296B[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_EOSPlatformGetDesktopCrossplayStatus) == 0x000008, "Wrong alignment on EOSCoreLibrary_EOSPlatformGetDesktopCrossplayStatus");
static_assert(sizeof(EOSCoreLibrary_EOSPlatformGetDesktopCrossplayStatus) == 0x000038, "Wrong size on EOSCoreLibrary_EOSPlatformGetDesktopCrossplayStatus");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformGetDesktopCrossplayStatus, WorldContextObject) == 0x000000, "Member 'EOSCoreLibrary_EOSPlatformGetDesktopCrossplayStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformGetDesktopCrossplayStatus, Options) == 0x000008, "Member 'EOSCoreLibrary_EOSPlatformGetDesktopCrossplayStatus::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformGetDesktopCrossplayStatus, OutDesktopCrossplayStatusInfo) == 0x00002C, "Member 'EOSCoreLibrary_EOSPlatformGetDesktopCrossplayStatus::OutDesktopCrossplayStatusInfo' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformGetDesktopCrossplayStatus, ReturnValue) == 0x000034, "Member 'EOSCoreLibrary_EOSPlatformGetDesktopCrossplayStatus::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSPlatformGetNetworkStatus
// 0x0010 (0x0010 - 0x0000)
struct EOSCoreLibrary_EOSPlatformGetNetworkStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSENetworkStatus                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_296C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_EOSPlatformGetNetworkStatus) == 0x000008, "Wrong alignment on EOSCoreLibrary_EOSPlatformGetNetworkStatus");
static_assert(sizeof(EOSCoreLibrary_EOSPlatformGetNetworkStatus) == 0x000010, "Wrong size on EOSCoreLibrary_EOSPlatformGetNetworkStatus");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformGetNetworkStatus, WorldContextObject) == 0x000000, "Member 'EOSCoreLibrary_EOSPlatformGetNetworkStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformGetNetworkStatus, ReturnValue) == 0x000008, "Member 'EOSCoreLibrary_EOSPlatformGetNetworkStatus::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSPlatformSetApplicationStatus
// 0x0010 (0x0010 - 0x0000)
struct EOSCoreLibrary_EOSPlatformSetApplicationStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSEApplicationStatus                         NewStatus;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_296D[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_EOSPlatformSetApplicationStatus) == 0x000008, "Wrong alignment on EOSCoreLibrary_EOSPlatformSetApplicationStatus");
static_assert(sizeof(EOSCoreLibrary_EOSPlatformSetApplicationStatus) == 0x000010, "Wrong size on EOSCoreLibrary_EOSPlatformSetApplicationStatus");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformSetApplicationStatus, WorldContextObject) == 0x000000, "Member 'EOSCoreLibrary_EOSPlatformSetApplicationStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformSetApplicationStatus, NewStatus) == 0x000008, "Member 'EOSCoreLibrary_EOSPlatformSetApplicationStatus::NewStatus' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformSetApplicationStatus, ReturnValue) == 0x000009, "Member 'EOSCoreLibrary_EOSPlatformSetApplicationStatus::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLibrary.EOSPlatformSetNetworkStatus
// 0x0010 (0x0010 - 0x0000)
struct EOSCoreLibrary_EOSPlatformSetNetworkStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSENetworkStatus                             NewStatus;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_296E[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLibrary_EOSPlatformSetNetworkStatus) == 0x000008, "Wrong alignment on EOSCoreLibrary_EOSPlatformSetNetworkStatus");
static_assert(sizeof(EOSCoreLibrary_EOSPlatformSetNetworkStatus) == 0x000010, "Wrong size on EOSCoreLibrary_EOSPlatformSetNetworkStatus");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformSetNetworkStatus, WorldContextObject) == 0x000000, "Member 'EOSCoreLibrary_EOSPlatformSetNetworkStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformSetNetworkStatus, NewStatus) == 0x000008, "Member 'EOSCoreLibrary_EOSPlatformSetNetworkStatus::NewStatus' has a wrong offset!");
static_assert(offsetof(EOSCoreLibrary_EOSPlatformSetNetworkStatus, ReturnValue) == 0x000009, "Member 'EOSCoreLibrary_EOSPlatformSetNetworkStatus::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreCustomInvites.EOSCustomInvitesAddNotifyCustomInviteAccepted
// 0x0020 (0x0020 - 0x0000)
struct CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteAccepted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSCustomInvitesOnCustomInviteAcceptedCallbackInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteAccepted) == 0x000008, "Wrong alignment on CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteAccepted");
static_assert(sizeof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteAccepted) == 0x000020, "Wrong size on CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteAccepted");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteAccepted, WorldContextObject) == 0x000000, "Member 'CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteAccepted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteAccepted, Callback) == 0x000008, "Member 'CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteAccepted::Callback' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteAccepted, ReturnValue) == 0x000018, "Member 'CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteAccepted::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreCustomInvites.EOSCustomInvitesAddNotifyCustomInviteReceived
// 0x0028 (0x0028 - 0x0000)
struct CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteReceived final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSCustomInvitesAddNotifyCustomInviteReceivedOptions Options;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2970[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSCustomInvitesOnCustomInviteReceivedCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2971[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteReceived) == 0x000008, "Wrong alignment on CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteReceived");
static_assert(sizeof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteReceived) == 0x000028, "Wrong size on CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteReceived");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteReceived, WorldContextObject) == 0x000000, "Member 'CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteReceived::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteReceived, Options) == 0x000008, "Member 'CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteReceived::Options' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteReceived, Callback) == 0x00000C, "Member 'CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteReceived::Callback' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteReceived, ReturnValue) == 0x000020, "Member 'CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteReceived::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreCustomInvites.EOSCustomInvitesFinalizeInvite
// 0x0070 (0x0070 - 0x0000)
struct CoreCustomInvites_EOSCustomInvitesFinalizeInvite final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSCustomInvitesFinalizeInviteOptions Options;                                           // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2972[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreCustomInvites_EOSCustomInvitesFinalizeInvite) == 0x000008, "Wrong alignment on CoreCustomInvites_EOSCustomInvitesFinalizeInvite");
static_assert(sizeof(CoreCustomInvites_EOSCustomInvitesFinalizeInvite) == 0x000070, "Wrong size on CoreCustomInvites_EOSCustomInvitesFinalizeInvite");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesFinalizeInvite, WorldContextObject) == 0x000000, "Member 'CoreCustomInvites_EOSCustomInvitesFinalizeInvite::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesFinalizeInvite, Options) == 0x000008, "Member 'CoreCustomInvites_EOSCustomInvitesFinalizeInvite::Options' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesFinalizeInvite, ReturnValue) == 0x000068, "Member 'CoreCustomInvites_EOSCustomInvitesFinalizeInvite::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreCustomInvites.EOSCustomInvitesRemoveNotifyCustomInviteAccepted
// 0x0010 (0x0010 - 0x0000)
struct CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteAccepted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteAccepted) == 0x000008, "Wrong alignment on CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteAccepted");
static_assert(sizeof(CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteAccepted) == 0x000010, "Wrong size on CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteAccepted");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteAccepted, WorldContextObject) == 0x000000, "Member 'CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteAccepted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteAccepted, ID) == 0x000008, "Member 'CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteAccepted::ID' has a wrong offset!");

// Function EOSCore.CoreCustomInvites.EOSCustomInvitesRemoveNotifyCustomInviteReceived
// 0x0010 (0x0010 - 0x0000)
struct CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteReceived final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteReceived) == 0x000008, "Wrong alignment on CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteReceived");
static_assert(sizeof(CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteReceived) == 0x000010, "Wrong size on CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteReceived");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteReceived, WorldContextObject) == 0x000000, "Member 'CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteReceived::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteReceived, ID) == 0x000008, "Member 'CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteReceived::ID' has a wrong offset!");

// Function EOSCore.CoreCustomInvites.EOSCustomInvitesSendCustomInvite
// 0x0050 (0x0050 - 0x0000)
struct CoreCustomInvites_EOSCustomInvitesSendCustomInvite final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSCustomInvitesSendCustomInviteOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSCustomInvitesOnSendCustomInviteCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomInvites_EOSCustomInvitesSendCustomInvite) == 0x000008, "Wrong alignment on CoreCustomInvites_EOSCustomInvitesSendCustomInvite");
static_assert(sizeof(CoreCustomInvites_EOSCustomInvitesSendCustomInvite) == 0x000050, "Wrong size on CoreCustomInvites_EOSCustomInvitesSendCustomInvite");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesSendCustomInvite, WorldContextObject) == 0x000000, "Member 'CoreCustomInvites_EOSCustomInvitesSendCustomInvite::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesSendCustomInvite, Options) == 0x000008, "Member 'CoreCustomInvites_EOSCustomInvitesSendCustomInvite::Options' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesSendCustomInvite, Callback) == 0x000040, "Member 'CoreCustomInvites_EOSCustomInvitesSendCustomInvite::Callback' has a wrong offset!");

// Function EOSCore.CoreCustomInvites.EOSCustomInvitesSetCustomInvite
// 0x0048 (0x0048 - 0x0000)
struct CoreCustomInvites_EOSCustomInvitesSetCustomInvite final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSCustomInvitesSetCustomInviteOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2973[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreCustomInvites_EOSCustomInvitesSetCustomInvite) == 0x000008, "Wrong alignment on CoreCustomInvites_EOSCustomInvitesSetCustomInvite");
static_assert(sizeof(CoreCustomInvites_EOSCustomInvitesSetCustomInvite) == 0x000048, "Wrong size on CoreCustomInvites_EOSCustomInvitesSetCustomInvite");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesSetCustomInvite, WorldContextObject) == 0x000000, "Member 'CoreCustomInvites_EOSCustomInvitesSetCustomInvite::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesSetCustomInvite, Options) == 0x000008, "Member 'CoreCustomInvites_EOSCustomInvitesSetCustomInvite::Options' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesSetCustomInvite, ReturnValue) == 0x000040, "Member 'CoreCustomInvites_EOSCustomInvitesSetCustomInvite::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreCustomInvites.GetCustomInvites
// 0x0010 (0x0010 - 0x0000)
struct CoreCustomInvites_GetCustomInvites final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreCustomInvites*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomInvites_GetCustomInvites) == 0x000008, "Wrong alignment on CoreCustomInvites_GetCustomInvites");
static_assert(sizeof(CoreCustomInvites_GetCustomInvites) == 0x000010, "Wrong size on CoreCustomInvites_GetCustomInvites");
static_assert(offsetof(CoreCustomInvites_GetCustomInvites, WorldContextObject) == 0x000000, "Member 'CoreCustomInvites_GetCustomInvites::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_GetCustomInvites, ReturnValue) == 0x000008, "Member 'CoreCustomInvites_GetCustomInvites::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreCustomInvites.EOSCustomInvitesAddNotifyCustomInviteRejected
// 0x0028 (0x0028 - 0x0000)
struct CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteRejected final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSCustomInvitesAddNotifyCustomInviteRejectedOptions Options;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2974[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSCustomInvitesCustomInviteRejectedCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2975[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteRejected) == 0x000008, "Wrong alignment on CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteRejected");
static_assert(sizeof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteRejected) == 0x000028, "Wrong size on CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteRejected");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteRejected, WorldContextObject) == 0x000000, "Member 'CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteRejected::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteRejected, Options) == 0x000008, "Member 'CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteRejected::Options' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteRejected, Callback) == 0x00000C, "Member 'CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteRejected::Callback' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteRejected, ReturnValue) == 0x000020, "Member 'CoreCustomInvites_EOSCustomInvitesAddNotifyCustomInviteRejected::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreCustomInvites.EOSCustomInvitesRemoveNotifyCustomInviteRejected
// 0x0010 (0x0010 - 0x0000)
struct CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteRejected final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteRejected) == 0x000008, "Wrong alignment on CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteRejected");
static_assert(sizeof(CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteRejected) == 0x000010, "Wrong size on CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteRejected");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteRejected, WorldContextObject) == 0x000000, "Member 'CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteRejected::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteRejected, ID) == 0x000008, "Member 'CoreCustomInvites_EOSCustomInvitesRemoveNotifyCustomInviteRejected::ID' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCopyEntitlementById
// 0x0098 (0x0098 - 0x0000)
struct CoreEcom_EOSEcomCopyEntitlementById final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCopyEntitlementByIdOptions     Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	struct FEOSEcomEntitlement                    OutEntitlement;                                    // 0x0040(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2976[0x7];                                     // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomCopyEntitlementById) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCopyEntitlementById");
static_assert(sizeof(CoreEcom_EOSEcomCopyEntitlementById) == 0x000098, "Wrong size on CoreEcom_EOSEcomCopyEntitlementById");
static_assert(offsetof(CoreEcom_EOSEcomCopyEntitlementById, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCopyEntitlementById::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyEntitlementById, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCopyEntitlementById::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyEntitlementById, OutEntitlement) == 0x000040, "Member 'CoreEcom_EOSEcomCopyEntitlementById::OutEntitlement' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyEntitlementById, ReturnValue) == 0x000090, "Member 'CoreEcom_EOSEcomCopyEntitlementById::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCopyEntitlementByIndex
// 0x0090 (0x0090 - 0x0000)
struct CoreEcom_EOSEcomCopyEntitlementByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCopyEntitlementByIndexOptions  Options;                                           // 0x0008(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2977[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSEcomEntitlement                    OutEntitlement;                                    // 0x0038(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2978[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomCopyEntitlementByIndex) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCopyEntitlementByIndex");
static_assert(sizeof(CoreEcom_EOSEcomCopyEntitlementByIndex) == 0x000090, "Wrong size on CoreEcom_EOSEcomCopyEntitlementByIndex");
static_assert(offsetof(CoreEcom_EOSEcomCopyEntitlementByIndex, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCopyEntitlementByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyEntitlementByIndex, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCopyEntitlementByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyEntitlementByIndex, OutEntitlement) == 0x000038, "Member 'CoreEcom_EOSEcomCopyEntitlementByIndex::OutEntitlement' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyEntitlementByIndex, ReturnValue) == 0x000088, "Member 'CoreEcom_EOSEcomCopyEntitlementByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCopyEntitlementByNameAndIndex
// 0x00A0 (0x00A0 - 0x0000)
struct CoreEcom_EOSEcomCopyEntitlementByNameAndIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCopyEntitlementByNameAndIndexOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FEOSEcomEntitlement                    OutEntitlement;                                    // 0x0048(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2979[0x7];                                     // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomCopyEntitlementByNameAndIndex) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCopyEntitlementByNameAndIndex");
static_assert(sizeof(CoreEcom_EOSEcomCopyEntitlementByNameAndIndex) == 0x0000A0, "Wrong size on CoreEcom_EOSEcomCopyEntitlementByNameAndIndex");
static_assert(offsetof(CoreEcom_EOSEcomCopyEntitlementByNameAndIndex, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCopyEntitlementByNameAndIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyEntitlementByNameAndIndex, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCopyEntitlementByNameAndIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyEntitlementByNameAndIndex, OutEntitlement) == 0x000048, "Member 'CoreEcom_EOSEcomCopyEntitlementByNameAndIndex::OutEntitlement' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyEntitlementByNameAndIndex, ReturnValue) == 0x000098, "Member 'CoreEcom_EOSEcomCopyEntitlementByNameAndIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCopyItemById
// 0x00E8 (0x00E8 - 0x0000)
struct CoreEcom_EOSEcomCopyItemById final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCopyItemByIdOptions            Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	struct FEOSEcomCatalogItem                    OutItem;                                           // 0x0040(0x00A0)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_297A[0x7];                                     // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomCopyItemById) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCopyItemById");
static_assert(sizeof(CoreEcom_EOSEcomCopyItemById) == 0x0000E8, "Wrong size on CoreEcom_EOSEcomCopyItemById");
static_assert(offsetof(CoreEcom_EOSEcomCopyItemById, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCopyItemById::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyItemById, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCopyItemById::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyItemById, OutItem) == 0x000040, "Member 'CoreEcom_EOSEcomCopyItemById::OutItem' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyItemById, ReturnValue) == 0x0000E0, "Member 'CoreEcom_EOSEcomCopyItemById::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCopyItemImageInfoByIndex
// 0x0080 (0x0080 - 0x0000)
struct CoreEcom_EOSEcomCopyItemImageInfoByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCopyItemImageInfoByIndexOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FEOSEcomKeyImageInfo                   OutImageInfo;                                      // 0x0048(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_297B[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomCopyItemImageInfoByIndex) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCopyItemImageInfoByIndex");
static_assert(sizeof(CoreEcom_EOSEcomCopyItemImageInfoByIndex) == 0x000080, "Wrong size on CoreEcom_EOSEcomCopyItemImageInfoByIndex");
static_assert(offsetof(CoreEcom_EOSEcomCopyItemImageInfoByIndex, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCopyItemImageInfoByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyItemImageInfoByIndex, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCopyItemImageInfoByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyItemImageInfoByIndex, OutImageInfo) == 0x000048, "Member 'CoreEcom_EOSEcomCopyItemImageInfoByIndex::OutImageInfo' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyItemImageInfoByIndex, ReturnValue) == 0x000078, "Member 'CoreEcom_EOSEcomCopyItemImageInfoByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCopyItemReleaseByIndex
// 0x0090 (0x0090 - 0x0000)
struct CoreEcom_EOSEcomCopyItemReleaseByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCopyItemReleaseByIndexOptions  Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FEOSEcomCatalogRelease                 OutRelease;                                        // 0x0048(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_297C[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomCopyItemReleaseByIndex) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCopyItemReleaseByIndex");
static_assert(sizeof(CoreEcom_EOSEcomCopyItemReleaseByIndex) == 0x000090, "Wrong size on CoreEcom_EOSEcomCopyItemReleaseByIndex");
static_assert(offsetof(CoreEcom_EOSEcomCopyItemReleaseByIndex, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCopyItemReleaseByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyItemReleaseByIndex, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCopyItemReleaseByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyItemReleaseByIndex, OutRelease) == 0x000048, "Member 'CoreEcom_EOSEcomCopyItemReleaseByIndex::OutRelease' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyItemReleaseByIndex, ReturnValue) == 0x000088, "Member 'CoreEcom_EOSEcomCopyItemReleaseByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCopyOfferById
// 0x0120 (0x0120 - 0x0000)
struct CoreEcom_EOSEcomCopyOfferById final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCopyOfferByIdOptions           Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	struct FEOSEcomCatalogOffer                   OutOffer;                                          // 0x0040(0x00D8)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_297D[0x7];                                     // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomCopyOfferById) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCopyOfferById");
static_assert(sizeof(CoreEcom_EOSEcomCopyOfferById) == 0x000120, "Wrong size on CoreEcom_EOSEcomCopyOfferById");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferById, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCopyOfferById::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferById, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCopyOfferById::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferById, OutOffer) == 0x000040, "Member 'CoreEcom_EOSEcomCopyOfferById::OutOffer' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferById, ReturnValue) == 0x000118, "Member 'CoreEcom_EOSEcomCopyOfferById::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCopyOfferByIndex
// 0x0118 (0x0118 - 0x0000)
struct CoreEcom_EOSEcomCopyOfferByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCopyOfferByIndexOptions        Options;                                           // 0x0008(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_297E[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSEcomCatalogOffer                   OutOffer;                                          // 0x0038(0x00D8)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_297F[0x7];                                     // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomCopyOfferByIndex) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCopyOfferByIndex");
static_assert(sizeof(CoreEcom_EOSEcomCopyOfferByIndex) == 0x000118, "Wrong size on CoreEcom_EOSEcomCopyOfferByIndex");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferByIndex, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCopyOfferByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferByIndex, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCopyOfferByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferByIndex, OutOffer) == 0x000038, "Member 'CoreEcom_EOSEcomCopyOfferByIndex::OutOffer' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferByIndex, ReturnValue) == 0x000110, "Member 'CoreEcom_EOSEcomCopyOfferByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCopyOfferImageInfoByIndex
// 0x0080 (0x0080 - 0x0000)
struct CoreEcom_EOSEcomCopyOfferImageInfoByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCopyOfferImageInfoByIndexOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FEOSEcomKeyImageInfo                   OutImageInfo;                                      // 0x0048(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2980[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomCopyOfferImageInfoByIndex) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCopyOfferImageInfoByIndex");
static_assert(sizeof(CoreEcom_EOSEcomCopyOfferImageInfoByIndex) == 0x000080, "Wrong size on CoreEcom_EOSEcomCopyOfferImageInfoByIndex");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferImageInfoByIndex, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCopyOfferImageInfoByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferImageInfoByIndex, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCopyOfferImageInfoByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferImageInfoByIndex, OutImageInfo) == 0x000048, "Member 'CoreEcom_EOSEcomCopyOfferImageInfoByIndex::OutImageInfo' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferImageInfoByIndex, ReturnValue) == 0x000078, "Member 'CoreEcom_EOSEcomCopyOfferImageInfoByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCopyOfferItemByIndex
// 0x00F0 (0x00F0 - 0x0000)
struct CoreEcom_EOSEcomCopyOfferItemByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCopyOfferItemByIndexOptions    Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FEOSEcomCatalogItem                    OutItem;                                           // 0x0048(0x00A0)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2981[0x7];                                     // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomCopyOfferItemByIndex) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCopyOfferItemByIndex");
static_assert(sizeof(CoreEcom_EOSEcomCopyOfferItemByIndex) == 0x0000F0, "Wrong size on CoreEcom_EOSEcomCopyOfferItemByIndex");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferItemByIndex, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCopyOfferItemByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferItemByIndex, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCopyOfferItemByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferItemByIndex, OutItem) == 0x000048, "Member 'CoreEcom_EOSEcomCopyOfferItemByIndex::OutItem' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyOfferItemByIndex, ReturnValue) == 0x0000E8, "Member 'CoreEcom_EOSEcomCopyOfferItemByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCopyTransactionById
// 0x0050 (0x0050 - 0x0000)
struct CoreEcom_EOSEcomCopyTransactionById final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCopyTransactionByIdOptions     Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	struct FEOSEcomHTransaction                   OutTransaction;                                    // 0x0040(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2982[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomCopyTransactionById) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCopyTransactionById");
static_assert(sizeof(CoreEcom_EOSEcomCopyTransactionById) == 0x000050, "Wrong size on CoreEcom_EOSEcomCopyTransactionById");
static_assert(offsetof(CoreEcom_EOSEcomCopyTransactionById, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCopyTransactionById::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyTransactionById, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCopyTransactionById::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyTransactionById, OutTransaction) == 0x000040, "Member 'CoreEcom_EOSEcomCopyTransactionById::OutTransaction' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyTransactionById, ReturnValue) == 0x000048, "Member 'CoreEcom_EOSEcomCopyTransactionById::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCopyTransactionByIndex
// 0x0048 (0x0048 - 0x0000)
struct CoreEcom_EOSEcomCopyTransactionByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCopyTransactionByIndexOptions  Options;                                           // 0x0008(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2983[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSEcomHTransaction                   OutTransaction;                                    // 0x0038(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2984[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomCopyTransactionByIndex) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCopyTransactionByIndex");
static_assert(sizeof(CoreEcom_EOSEcomCopyTransactionByIndex) == 0x000048, "Wrong size on CoreEcom_EOSEcomCopyTransactionByIndex");
static_assert(offsetof(CoreEcom_EOSEcomCopyTransactionByIndex, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCopyTransactionByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyTransactionByIndex, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCopyTransactionByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyTransactionByIndex, OutTransaction) == 0x000038, "Member 'CoreEcom_EOSEcomCopyTransactionByIndex::OutTransaction' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyTransactionByIndex, ReturnValue) == 0x000040, "Member 'CoreEcom_EOSEcomCopyTransactionByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomGetEntitlementsByNameCount
// 0x0048 (0x0048 - 0x0000)
struct CoreEcom_EOSEcomGetEntitlementsByNameCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomGetEntitlementsByNameCountOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2985[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomGetEntitlementsByNameCount) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomGetEntitlementsByNameCount");
static_assert(sizeof(CoreEcom_EOSEcomGetEntitlementsByNameCount) == 0x000048, "Wrong size on CoreEcom_EOSEcomGetEntitlementsByNameCount");
static_assert(offsetof(CoreEcom_EOSEcomGetEntitlementsByNameCount, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomGetEntitlementsByNameCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetEntitlementsByNameCount, Options) == 0x000008, "Member 'CoreEcom_EOSEcomGetEntitlementsByNameCount::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetEntitlementsByNameCount, ReturnValue) == 0x000040, "Member 'CoreEcom_EOSEcomGetEntitlementsByNameCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomGetEntitlementsCount
// 0x0038 (0x0038 - 0x0000)
struct CoreEcom_EOSEcomGetEntitlementsCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomGetEntitlementsCountOptions    Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2986[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomGetEntitlementsCount) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomGetEntitlementsCount");
static_assert(sizeof(CoreEcom_EOSEcomGetEntitlementsCount) == 0x000038, "Wrong size on CoreEcom_EOSEcomGetEntitlementsCount");
static_assert(offsetof(CoreEcom_EOSEcomGetEntitlementsCount, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomGetEntitlementsCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetEntitlementsCount, Options) == 0x000008, "Member 'CoreEcom_EOSEcomGetEntitlementsCount::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetEntitlementsCount, ReturnValue) == 0x000030, "Member 'CoreEcom_EOSEcomGetEntitlementsCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomGetItemImageInfoCount
// 0x0048 (0x0048 - 0x0000)
struct CoreEcom_EOSEcomGetItemImageInfoCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomGetItemImageInfoCountOptions   Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2987[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomGetItemImageInfoCount) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomGetItemImageInfoCount");
static_assert(sizeof(CoreEcom_EOSEcomGetItemImageInfoCount) == 0x000048, "Wrong size on CoreEcom_EOSEcomGetItemImageInfoCount");
static_assert(offsetof(CoreEcom_EOSEcomGetItemImageInfoCount, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomGetItemImageInfoCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetItemImageInfoCount, Options) == 0x000008, "Member 'CoreEcom_EOSEcomGetItemImageInfoCount::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetItemImageInfoCount, ReturnValue) == 0x000040, "Member 'CoreEcom_EOSEcomGetItemImageInfoCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomGetItemReleaseCount
// 0x0048 (0x0048 - 0x0000)
struct CoreEcom_EOSEcomGetItemReleaseCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomGetItemReleaseCountOptions     Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2988[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomGetItemReleaseCount) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomGetItemReleaseCount");
static_assert(sizeof(CoreEcom_EOSEcomGetItemReleaseCount) == 0x000048, "Wrong size on CoreEcom_EOSEcomGetItemReleaseCount");
static_assert(offsetof(CoreEcom_EOSEcomGetItemReleaseCount, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomGetItemReleaseCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetItemReleaseCount, Options) == 0x000008, "Member 'CoreEcom_EOSEcomGetItemReleaseCount::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetItemReleaseCount, ReturnValue) == 0x000040, "Member 'CoreEcom_EOSEcomGetItemReleaseCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomGetOfferCount
// 0x0038 (0x0038 - 0x0000)
struct CoreEcom_EOSEcomGetOfferCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomGetOfferCountOptions           Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2989[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomGetOfferCount) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomGetOfferCount");
static_assert(sizeof(CoreEcom_EOSEcomGetOfferCount) == 0x000038, "Wrong size on CoreEcom_EOSEcomGetOfferCount");
static_assert(offsetof(CoreEcom_EOSEcomGetOfferCount, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomGetOfferCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetOfferCount, Options) == 0x000008, "Member 'CoreEcom_EOSEcomGetOfferCount::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetOfferCount, ReturnValue) == 0x000030, "Member 'CoreEcom_EOSEcomGetOfferCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomGetOfferImageInfoCount
// 0x0048 (0x0048 - 0x0000)
struct CoreEcom_EOSEcomGetOfferImageInfoCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomGetOfferImageInfoCountOptions  Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_298A[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomGetOfferImageInfoCount) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomGetOfferImageInfoCount");
static_assert(sizeof(CoreEcom_EOSEcomGetOfferImageInfoCount) == 0x000048, "Wrong size on CoreEcom_EOSEcomGetOfferImageInfoCount");
static_assert(offsetof(CoreEcom_EOSEcomGetOfferImageInfoCount, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomGetOfferImageInfoCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetOfferImageInfoCount, Options) == 0x000008, "Member 'CoreEcom_EOSEcomGetOfferImageInfoCount::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetOfferImageInfoCount, ReturnValue) == 0x000040, "Member 'CoreEcom_EOSEcomGetOfferImageInfoCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomGetOfferItemCount
// 0x0048 (0x0048 - 0x0000)
struct CoreEcom_EOSEcomGetOfferItemCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomGetOfferItemCountOptions       Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_298B[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomGetOfferItemCount) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomGetOfferItemCount");
static_assert(sizeof(CoreEcom_EOSEcomGetOfferItemCount) == 0x000048, "Wrong size on CoreEcom_EOSEcomGetOfferItemCount");
static_assert(offsetof(CoreEcom_EOSEcomGetOfferItemCount, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomGetOfferItemCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetOfferItemCount, Options) == 0x000008, "Member 'CoreEcom_EOSEcomGetOfferItemCount::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetOfferItemCount, ReturnValue) == 0x000040, "Member 'CoreEcom_EOSEcomGetOfferItemCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomGetTransactionCount
// 0x0038 (0x0038 - 0x0000)
struct CoreEcom_EOSEcomGetTransactionCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomGetTransactionCountOptions     Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_298C[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomGetTransactionCount) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomGetTransactionCount");
static_assert(sizeof(CoreEcom_EOSEcomGetTransactionCount) == 0x000038, "Wrong size on CoreEcom_EOSEcomGetTransactionCount");
static_assert(offsetof(CoreEcom_EOSEcomGetTransactionCount, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomGetTransactionCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetTransactionCount, Options) == 0x000008, "Member 'CoreEcom_EOSEcomGetTransactionCount::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetTransactionCount, ReturnValue) == 0x000030, "Member 'CoreEcom_EOSEcomGetTransactionCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomTransaction_CopyEntitlementByIndex
// 0x0070 (0x0070 - 0x0000)
struct CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomHTransaction                   Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomTransactionCopyEntitlementByIndexOptions Options;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSEcomEntitlement                    OutEntitlement;                                    // 0x0018(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_298D[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex");
static_assert(sizeof(CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex) == 0x000070, "Wrong size on CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex");
static_assert(offsetof(CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex, Handle) == 0x000008, "Member 'CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex::Handle' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex, Options) == 0x000010, "Member 'CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex, OutEntitlement) == 0x000018, "Member 'CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex::OutEntitlement' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex, ReturnValue) == 0x000068, "Member 'CoreEcom_EOSEcomTransaction_CopyEntitlementByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomTransaction_GetEntitlementsCount
// 0x0040 (0x0040 - 0x0000)
struct CoreEcom_EOSEcomTransaction_GetEntitlementsCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomHTransaction                   Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomTransactionGetEntitlementsCountOptions Options;                                           // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_298E[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomTransaction_GetEntitlementsCount) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomTransaction_GetEntitlementsCount");
static_assert(sizeof(CoreEcom_EOSEcomTransaction_GetEntitlementsCount) == 0x000040, "Wrong size on CoreEcom_EOSEcomTransaction_GetEntitlementsCount");
static_assert(offsetof(CoreEcom_EOSEcomTransaction_GetEntitlementsCount, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomTransaction_GetEntitlementsCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomTransaction_GetEntitlementsCount, Handle) == 0x000008, "Member 'CoreEcom_EOSEcomTransaction_GetEntitlementsCount::Handle' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomTransaction_GetEntitlementsCount, Options) == 0x000010, "Member 'CoreEcom_EOSEcomTransaction_GetEntitlementsCount::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomTransaction_GetEntitlementsCount, ReturnValue) == 0x000038, "Member 'CoreEcom_EOSEcomTransaction_GetEntitlementsCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomTransaction_GetTransactionId
// 0x0028 (0x0028 - 0x0000)
struct CoreEcom_EOSEcomTransaction_GetTransactionId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomHTransaction                   Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutTransactionId;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_298F[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomTransaction_GetTransactionId) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomTransaction_GetTransactionId");
static_assert(sizeof(CoreEcom_EOSEcomTransaction_GetTransactionId) == 0x000028, "Wrong size on CoreEcom_EOSEcomTransaction_GetTransactionId");
static_assert(offsetof(CoreEcom_EOSEcomTransaction_GetTransactionId, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomTransaction_GetTransactionId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomTransaction_GetTransactionId, Handle) == 0x000008, "Member 'CoreEcom_EOSEcomTransaction_GetTransactionId::Handle' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomTransaction_GetTransactionId, OutTransactionId) == 0x000010, "Member 'CoreEcom_EOSEcomTransaction_GetTransactionId::OutTransactionId' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomTransaction_GetTransactionId, ReturnValue) == 0x000020, "Member 'CoreEcom_EOSEcomTransaction_GetTransactionId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.GetEcom
// 0x0010 (0x0010 - 0x0000)
struct CoreEcom_GetEcom final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreEcom*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEcom_GetEcom) == 0x000008, "Wrong alignment on CoreEcom_GetEcom");
static_assert(sizeof(CoreEcom_GetEcom) == 0x000010, "Wrong size on CoreEcom_GetEcom");
static_assert(offsetof(CoreEcom_GetEcom, WorldContextObject) == 0x000000, "Member 'CoreEcom_GetEcom::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_GetEcom, ReturnValue) == 0x000008, "Member 'CoreEcom_GetEcom::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCheckout
// 0x0060 (0x0060 - 0x0000)
struct CoreEcom_EOSEcomCheckout final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCheckoutOptions                Options;                                           // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSEcomCheckoutCallbackInfo& Data)> Callback;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEcom_EOSEcomCheckout) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCheckout");
static_assert(sizeof(CoreEcom_EOSEcomCheckout) == 0x000060, "Wrong size on CoreEcom_EOSEcomCheckout");
static_assert(offsetof(CoreEcom_EOSEcomCheckout, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCheckout::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCheckout, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCheckout::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCheckout, Callback) == 0x000050, "Member 'CoreEcom_EOSEcomCheckout::Callback' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomCopyLastRedeemedEntitlementByIndex
// 0x0048 (0x0048 - 0x0000)
struct CoreEcom_EOSEcomCopyLastRedeemedEntitlementByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCopyLastRedeemedEntitlementByIndexOptions Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 OutRedeemedEntitlementId;                          // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2990[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreEcom_EOSEcomCopyLastRedeemedEntitlementByIndex) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomCopyLastRedeemedEntitlementByIndex");
static_assert(sizeof(CoreEcom_EOSEcomCopyLastRedeemedEntitlementByIndex) == 0x000048, "Wrong size on CoreEcom_EOSEcomCopyLastRedeemedEntitlementByIndex");
static_assert(offsetof(CoreEcom_EOSEcomCopyLastRedeemedEntitlementByIndex, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomCopyLastRedeemedEntitlementByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyLastRedeemedEntitlementByIndex, Options) == 0x000008, "Member 'CoreEcom_EOSEcomCopyLastRedeemedEntitlementByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyLastRedeemedEntitlementByIndex, OutRedeemedEntitlementId) == 0x000030, "Member 'CoreEcom_EOSEcomCopyLastRedeemedEntitlementByIndex::OutRedeemedEntitlementId' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomCopyLastRedeemedEntitlementByIndex, ReturnValue) == 0x000040, "Member 'CoreEcom_EOSEcomCopyLastRedeemedEntitlementByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomGetLastRedeemedEntitlementsCount
// 0x0030 (0x0030 - 0x0000)
struct CoreEcom_EOSEcomGetLastRedeemedEntitlementsCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomGetLastRedeemedEntitlementsCountOptions Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2991[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEcom_EOSEcomGetLastRedeemedEntitlementsCount) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomGetLastRedeemedEntitlementsCount");
static_assert(sizeof(CoreEcom_EOSEcomGetLastRedeemedEntitlementsCount) == 0x000030, "Wrong size on CoreEcom_EOSEcomGetLastRedeemedEntitlementsCount");
static_assert(offsetof(CoreEcom_EOSEcomGetLastRedeemedEntitlementsCount, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomGetLastRedeemedEntitlementsCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetLastRedeemedEntitlementsCount, Options) == 0x000008, "Member 'CoreEcom_EOSEcomGetLastRedeemedEntitlementsCount::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomGetLastRedeemedEntitlementsCount, ReturnValue) == 0x00002C, "Member 'CoreEcom_EOSEcomGetLastRedeemedEntitlementsCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomQueryEntitlements
// 0x0058 (0x0058 - 0x0000)
struct CoreEcom_EOSEcomQueryEntitlements final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomQueryEntitlementsOptions       Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSEcomQueryEntitlementsCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEcom_EOSEcomQueryEntitlements) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomQueryEntitlements");
static_assert(sizeof(CoreEcom_EOSEcomQueryEntitlements) == 0x000058, "Wrong size on CoreEcom_EOSEcomQueryEntitlements");
static_assert(offsetof(CoreEcom_EOSEcomQueryEntitlements, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomQueryEntitlements::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomQueryEntitlements, Options) == 0x000008, "Member 'CoreEcom_EOSEcomQueryEntitlements::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomQueryEntitlements, Callback) == 0x000048, "Member 'CoreEcom_EOSEcomQueryEntitlements::Callback' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomQueryEntitlementToken
// 0x0050 (0x0050 - 0x0000)
struct CoreEcom_EOSEcomQueryEntitlementToken final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomQueryEntitlementTokenOptions   Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSEcomQueryEntitlementTokenCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEcom_EOSEcomQueryEntitlementToken) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomQueryEntitlementToken");
static_assert(sizeof(CoreEcom_EOSEcomQueryEntitlementToken) == 0x000050, "Wrong size on CoreEcom_EOSEcomQueryEntitlementToken");
static_assert(offsetof(CoreEcom_EOSEcomQueryEntitlementToken, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomQueryEntitlementToken::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomQueryEntitlementToken, Options) == 0x000008, "Member 'CoreEcom_EOSEcomQueryEntitlementToken::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomQueryEntitlementToken, Callback) == 0x000040, "Member 'CoreEcom_EOSEcomQueryEntitlementToken::Callback' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomQueryOffers
// 0x0050 (0x0050 - 0x0000)
struct CoreEcom_EOSEcomQueryOffers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomQueryOffersOptions             Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSEcomQueryOffersCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEcom_EOSEcomQueryOffers) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomQueryOffers");
static_assert(sizeof(CoreEcom_EOSEcomQueryOffers) == 0x000050, "Wrong size on CoreEcom_EOSEcomQueryOffers");
static_assert(offsetof(CoreEcom_EOSEcomQueryOffers, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomQueryOffers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomQueryOffers, Options) == 0x000008, "Member 'CoreEcom_EOSEcomQueryOffers::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomQueryOffers, Callback) == 0x000040, "Member 'CoreEcom_EOSEcomQueryOffers::Callback' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomQueryOwnership
// 0x0060 (0x0060 - 0x0000)
struct CoreEcom_EOSEcomQueryOwnership final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomQueryOwnershipOptions          Options;                                           // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSEcomQueryOwnershipCallbackInfo& Data)> Callback;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEcom_EOSEcomQueryOwnership) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomQueryOwnership");
static_assert(sizeof(CoreEcom_EOSEcomQueryOwnership) == 0x000060, "Wrong size on CoreEcom_EOSEcomQueryOwnership");
static_assert(offsetof(CoreEcom_EOSEcomQueryOwnership, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomQueryOwnership::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomQueryOwnership, Options) == 0x000008, "Member 'CoreEcom_EOSEcomQueryOwnership::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomQueryOwnership, Callback) == 0x000050, "Member 'CoreEcom_EOSEcomQueryOwnership::Callback' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomQueryOwnershipToken
// 0x0068 (0x0068 - 0x0000)
struct CoreEcom_EOSEcomQueryOwnershipToken final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomQueryOwnershipTokenOptions     Options;                                           // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSEcomQueryOwnershipTokenCallbackInfo& Data)> Callback;                                          // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEcom_EOSEcomQueryOwnershipToken) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomQueryOwnershipToken");
static_assert(sizeof(CoreEcom_EOSEcomQueryOwnershipToken) == 0x000068, "Wrong size on CoreEcom_EOSEcomQueryOwnershipToken");
static_assert(offsetof(CoreEcom_EOSEcomQueryOwnershipToken, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomQueryOwnershipToken::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomQueryOwnershipToken, Options) == 0x000008, "Member 'CoreEcom_EOSEcomQueryOwnershipToken::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomQueryOwnershipToken, Callback) == 0x000058, "Member 'CoreEcom_EOSEcomQueryOwnershipToken::Callback' has a wrong offset!");

// Function EOSCore.CoreEcom.EOSEcomRedeemEntitlements
// 0x0050 (0x0050 - 0x0000)
struct CoreEcom_EOSEcomRedeemEntitlements final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomRedeemEntitlementsOptions      Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSEcomRedeemEntitlementsCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEcom_EOSEcomRedeemEntitlements) == 0x000008, "Wrong alignment on CoreEcom_EOSEcomRedeemEntitlements");
static_assert(sizeof(CoreEcom_EOSEcomRedeemEntitlements) == 0x000050, "Wrong size on CoreEcom_EOSEcomRedeemEntitlements");
static_assert(offsetof(CoreEcom_EOSEcomRedeemEntitlements, WorldContextObject) == 0x000000, "Member 'CoreEcom_EOSEcomRedeemEntitlements::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomRedeemEntitlements, Options) == 0x000008, "Member 'CoreEcom_EOSEcomRedeemEntitlements::Options' has a wrong offset!");
static_assert(offsetof(CoreEcom_EOSEcomRedeemEntitlements, Callback) == 0x000040, "Member 'CoreEcom_EOSEcomRedeemEntitlements::Callback' has a wrong offset!");

// Function EOSCore.EOSCoreEcomQueryOwnership.EOSEcomQueryOwnershipAsync
// 0x0058 (0x0058 - 0x0000)
struct EOSCoreEcomQueryOwnership_EOSEcomQueryOwnershipAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomQueryOwnershipOptions          Options;                                           // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreEcomQueryOwnership*             ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreEcomQueryOwnership_EOSEcomQueryOwnershipAsync) == 0x000008, "Wrong alignment on EOSCoreEcomQueryOwnership_EOSEcomQueryOwnershipAsync");
static_assert(sizeof(EOSCoreEcomQueryOwnership_EOSEcomQueryOwnershipAsync) == 0x000058, "Wrong size on EOSCoreEcomQueryOwnership_EOSEcomQueryOwnershipAsync");
static_assert(offsetof(EOSCoreEcomQueryOwnership_EOSEcomQueryOwnershipAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreEcomQueryOwnership_EOSEcomQueryOwnershipAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomQueryOwnership_EOSEcomQueryOwnershipAsync, Options) == 0x000008, "Member 'EOSCoreEcomQueryOwnership_EOSEcomQueryOwnershipAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomQueryOwnership_EOSEcomQueryOwnershipAsync, ReturnValue) == 0x000050, "Member 'EOSCoreEcomQueryOwnership_EOSEcomQueryOwnershipAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreEcomQueryOwnership.HandleCallback
// 0x0058 (0x0058 - 0x0000)
struct EOSCoreEcomQueryOwnership_HandleCallback final
{
public:
	struct FEOSEcomQueryOwnershipCallbackInfo     Data;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2993[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreEcomQueryOwnership_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreEcomQueryOwnership_HandleCallback");
static_assert(sizeof(EOSCoreEcomQueryOwnership_HandleCallback) == 0x000058, "Wrong size on EOSCoreEcomQueryOwnership_HandleCallback");
static_assert(offsetof(EOSCoreEcomQueryOwnership_HandleCallback, Data) == 0x000000, "Member 'EOSCoreEcomQueryOwnership_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomQueryOwnership_HandleCallback, bWasSuccessful) == 0x000050, "Member 'EOSCoreEcomQueryOwnership_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreEcomQueryOwnershipToken.EOSEcomQueryOwnershipTokenAsync
// 0x0060 (0x0060 - 0x0000)
struct EOSCoreEcomQueryOwnershipToken_EOSEcomQueryOwnershipTokenAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomQueryOwnershipTokenOptions     Options;                                           // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreEcomQueryOwnershipToken*        ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreEcomQueryOwnershipToken_EOSEcomQueryOwnershipTokenAsync) == 0x000008, "Wrong alignment on EOSCoreEcomQueryOwnershipToken_EOSEcomQueryOwnershipTokenAsync");
static_assert(sizeof(EOSCoreEcomQueryOwnershipToken_EOSEcomQueryOwnershipTokenAsync) == 0x000060, "Wrong size on EOSCoreEcomQueryOwnershipToken_EOSEcomQueryOwnershipTokenAsync");
static_assert(offsetof(EOSCoreEcomQueryOwnershipToken_EOSEcomQueryOwnershipTokenAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreEcomQueryOwnershipToken_EOSEcomQueryOwnershipTokenAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomQueryOwnershipToken_EOSEcomQueryOwnershipTokenAsync, Options) == 0x000008, "Member 'EOSCoreEcomQueryOwnershipToken_EOSEcomQueryOwnershipTokenAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomQueryOwnershipToken_EOSEcomQueryOwnershipTokenAsync, ReturnValue) == 0x000058, "Member 'EOSCoreEcomQueryOwnershipToken_EOSEcomQueryOwnershipTokenAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreEcomQueryOwnershipToken.HandleCallback
// 0x0050 (0x0050 - 0x0000)
struct EOSCoreEcomQueryOwnershipToken_HandleCallback final
{
public:
	struct FEOSEcomQueryOwnershipTokenCallbackInfo Data;                                              // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2995[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreEcomQueryOwnershipToken_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreEcomQueryOwnershipToken_HandleCallback");
static_assert(sizeof(EOSCoreEcomQueryOwnershipToken_HandleCallback) == 0x000050, "Wrong size on EOSCoreEcomQueryOwnershipToken_HandleCallback");
static_assert(offsetof(EOSCoreEcomQueryOwnershipToken_HandleCallback, Data) == 0x000000, "Member 'EOSCoreEcomQueryOwnershipToken_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomQueryOwnershipToken_HandleCallback, bWasSuccessful) == 0x000048, "Member 'EOSCoreEcomQueryOwnershipToken_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreEcomQueryEntitlements.EOSEcomQueryEntitlementsAsync
// 0x0050 (0x0050 - 0x0000)
struct EOSCoreEcomQueryEntitlements_EOSEcomQueryEntitlementsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomQueryEntitlementsOptions       Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreEcomQueryEntitlements*          ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreEcomQueryEntitlements_EOSEcomQueryEntitlementsAsync) == 0x000008, "Wrong alignment on EOSCoreEcomQueryEntitlements_EOSEcomQueryEntitlementsAsync");
static_assert(sizeof(EOSCoreEcomQueryEntitlements_EOSEcomQueryEntitlementsAsync) == 0x000050, "Wrong size on EOSCoreEcomQueryEntitlements_EOSEcomQueryEntitlementsAsync");
static_assert(offsetof(EOSCoreEcomQueryEntitlements_EOSEcomQueryEntitlementsAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreEcomQueryEntitlements_EOSEcomQueryEntitlementsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomQueryEntitlements_EOSEcomQueryEntitlementsAsync, Options) == 0x000008, "Member 'EOSCoreEcomQueryEntitlements_EOSEcomQueryEntitlementsAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomQueryEntitlements_EOSEcomQueryEntitlementsAsync, ReturnValue) == 0x000048, "Member 'EOSCoreEcomQueryEntitlements_EOSEcomQueryEntitlementsAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreEcomQueryEntitlements.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreEcomQueryEntitlements_HandleCallback final
{
public:
	struct FEOSEcomQueryEntitlementsCallbackInfo  Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2997[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreEcomQueryEntitlements_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreEcomQueryEntitlements_HandleCallback");
static_assert(sizeof(EOSCoreEcomQueryEntitlements_HandleCallback) == 0x000040, "Wrong size on EOSCoreEcomQueryEntitlements_HandleCallback");
static_assert(offsetof(EOSCoreEcomQueryEntitlements_HandleCallback, Data) == 0x000000, "Member 'EOSCoreEcomQueryEntitlements_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomQueryEntitlements_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreEcomQueryEntitlements_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreEcomQueryOffers.EOSEcomQueryOffersAsync
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreEcomQueryOffers_EOSEcomQueryOffersAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomQueryOffersOptions             Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreEcomQueryOffers*                ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreEcomQueryOffers_EOSEcomQueryOffersAsync) == 0x000008, "Wrong alignment on EOSCoreEcomQueryOffers_EOSEcomQueryOffersAsync");
static_assert(sizeof(EOSCoreEcomQueryOffers_EOSEcomQueryOffersAsync) == 0x000048, "Wrong size on EOSCoreEcomQueryOffers_EOSEcomQueryOffersAsync");
static_assert(offsetof(EOSCoreEcomQueryOffers_EOSEcomQueryOffersAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreEcomQueryOffers_EOSEcomQueryOffersAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomQueryOffers_EOSEcomQueryOffersAsync, Options) == 0x000008, "Member 'EOSCoreEcomQueryOffers_EOSEcomQueryOffersAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomQueryOffers_EOSEcomQueryOffersAsync, ReturnValue) == 0x000040, "Member 'EOSCoreEcomQueryOffers_EOSEcomQueryOffersAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreEcomQueryOffers.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreEcomQueryOffers_HandleCallback final
{
public:
	struct FEOSEcomQueryOffersCallbackInfo        Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2999[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreEcomQueryOffers_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreEcomQueryOffers_HandleCallback");
static_assert(sizeof(EOSCoreEcomQueryOffers_HandleCallback) == 0x000040, "Wrong size on EOSCoreEcomQueryOffers_HandleCallback");
static_assert(offsetof(EOSCoreEcomQueryOffers_HandleCallback, Data) == 0x000000, "Member 'EOSCoreEcomQueryOffers_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomQueryOffers_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreEcomQueryOffers_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLobbySendInvite.EOSLobbySendInviteAsync
// 0x0068 (0x0068 - 0x0000)
struct EOSCoreLobbySendInvite_EOSLobbySendInviteAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbySendInviteOptions             Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreLobbySendInvite*                ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLobbySendInvite_EOSLobbySendInviteAsync) == 0x000008, "Wrong alignment on EOSCoreLobbySendInvite_EOSLobbySendInviteAsync");
static_assert(sizeof(EOSCoreLobbySendInvite_EOSLobbySendInviteAsync) == 0x000068, "Wrong size on EOSCoreLobbySendInvite_EOSLobbySendInviteAsync");
static_assert(offsetof(EOSCoreLobbySendInvite_EOSLobbySendInviteAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLobbySendInvite_EOSLobbySendInviteAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbySendInvite_EOSLobbySendInviteAsync, Options) == 0x000008, "Member 'EOSCoreLobbySendInvite_EOSLobbySendInviteAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbySendInvite_EOSLobbySendInviteAsync, ReturnValue) == 0x000060, "Member 'EOSCoreLobbySendInvite_EOSLobbySendInviteAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLobbySendInvite.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreLobbySendInvite_HandleCallback final
{
public:
	struct FEOSLobbySendInviteCallbackInfo        Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299B[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLobbySendInvite_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLobbySendInvite_HandleCallback");
static_assert(sizeof(EOSCoreLobbySendInvite_HandleCallback) == 0x000028, "Wrong size on EOSCoreLobbySendInvite_HandleCallback");
static_assert(offsetof(EOSCoreLobbySendInvite_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLobbySendInvite_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbySendInvite_HandleCallback, bWasSuccessful) == 0x000020, "Member 'EOSCoreLobbySendInvite_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreEcomCheckout.EOSEcomCheckoutAsync
// 0x0058 (0x0058 - 0x0000)
struct EOSCoreEcomCheckout_EOSEcomCheckoutAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomCheckoutOptions                Options;                                           // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreEcomCheckout*                   ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreEcomCheckout_EOSEcomCheckoutAsync) == 0x000008, "Wrong alignment on EOSCoreEcomCheckout_EOSEcomCheckoutAsync");
static_assert(sizeof(EOSCoreEcomCheckout_EOSEcomCheckoutAsync) == 0x000058, "Wrong size on EOSCoreEcomCheckout_EOSEcomCheckoutAsync");
static_assert(offsetof(EOSCoreEcomCheckout_EOSEcomCheckoutAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreEcomCheckout_EOSEcomCheckoutAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomCheckout_EOSEcomCheckoutAsync, Options) == 0x000008, "Member 'EOSCoreEcomCheckout_EOSEcomCheckoutAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomCheckout_EOSEcomCheckoutAsync, ReturnValue) == 0x000050, "Member 'EOSCoreEcomCheckout_EOSEcomCheckoutAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreEcomCheckout.HandleCallback
// 0x0050 (0x0050 - 0x0000)
struct EOSCoreEcomCheckout_HandleCallback final
{
public:
	struct FEOSEcomCheckoutCallbackInfo           Data;                                              // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299D[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreEcomCheckout_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreEcomCheckout_HandleCallback");
static_assert(sizeof(EOSCoreEcomCheckout_HandleCallback) == 0x000050, "Wrong size on EOSCoreEcomCheckout_HandleCallback");
static_assert(offsetof(EOSCoreEcomCheckout_HandleCallback, Data) == 0x000000, "Member 'EOSCoreEcomCheckout_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomCheckout_HandleCallback, bWasSuccessful) == 0x000048, "Member 'EOSCoreEcomCheckout_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreSanctions.EOSSanctionsCopyPlayerSanctionByIndex
// 0x0060 (0x0060 - 0x0000)
struct CoreSanctions_EOSSanctionsCopyPlayerSanctionByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSanctionsCopyPlayerSanctionByIndexOptions Options;                                           // 0x0008(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_299E[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSSanctionsPlayerSanction            OutSanction;                                       // 0x0038(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299F[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSanctions_EOSSanctionsCopyPlayerSanctionByIndex) == 0x000008, "Wrong alignment on CoreSanctions_EOSSanctionsCopyPlayerSanctionByIndex");
static_assert(sizeof(CoreSanctions_EOSSanctionsCopyPlayerSanctionByIndex) == 0x000060, "Wrong size on CoreSanctions_EOSSanctionsCopyPlayerSanctionByIndex");
static_assert(offsetof(CoreSanctions_EOSSanctionsCopyPlayerSanctionByIndex, WorldContextObject) == 0x000000, "Member 'CoreSanctions_EOSSanctionsCopyPlayerSanctionByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSanctions_EOSSanctionsCopyPlayerSanctionByIndex, Options) == 0x000008, "Member 'CoreSanctions_EOSSanctionsCopyPlayerSanctionByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreSanctions_EOSSanctionsCopyPlayerSanctionByIndex, OutSanction) == 0x000038, "Member 'CoreSanctions_EOSSanctionsCopyPlayerSanctionByIndex::OutSanction' has a wrong offset!");
static_assert(offsetof(CoreSanctions_EOSSanctionsCopyPlayerSanctionByIndex, ReturnValue) == 0x000058, "Member 'CoreSanctions_EOSSanctionsCopyPlayerSanctionByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSanctions.EOSSanctionsGetPlayerSanctionCount
// 0x0038 (0x0038 - 0x0000)
struct CoreSanctions_EOSSanctionsGetPlayerSanctionCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSanctionsGetPlayerSanctionCountOptions Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A0[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSanctions_EOSSanctionsGetPlayerSanctionCount) == 0x000008, "Wrong alignment on CoreSanctions_EOSSanctionsGetPlayerSanctionCount");
static_assert(sizeof(CoreSanctions_EOSSanctionsGetPlayerSanctionCount) == 0x000038, "Wrong size on CoreSanctions_EOSSanctionsGetPlayerSanctionCount");
static_assert(offsetof(CoreSanctions_EOSSanctionsGetPlayerSanctionCount, WorldContextObject) == 0x000000, "Member 'CoreSanctions_EOSSanctionsGetPlayerSanctionCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSanctions_EOSSanctionsGetPlayerSanctionCount, Options) == 0x000008, "Member 'CoreSanctions_EOSSanctionsGetPlayerSanctionCount::Options' has a wrong offset!");
static_assert(offsetof(CoreSanctions_EOSSanctionsGetPlayerSanctionCount, ReturnValue) == 0x000030, "Member 'CoreSanctions_EOSSanctionsGetPlayerSanctionCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSanctions.GetSanctions
// 0x0010 (0x0010 - 0x0000)
struct CoreSanctions_GetSanctions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreSanctions*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSanctions_GetSanctions) == 0x000008, "Wrong alignment on CoreSanctions_GetSanctions");
static_assert(sizeof(CoreSanctions_GetSanctions) == 0x000010, "Wrong size on CoreSanctions_GetSanctions");
static_assert(offsetof(CoreSanctions_GetSanctions, WorldContextObject) == 0x000000, "Member 'CoreSanctions_GetSanctions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSanctions_GetSanctions, ReturnValue) == 0x000008, "Member 'CoreSanctions_GetSanctions::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreSanctions.EOSSanctionsQueryActivePlayerSanctions
// 0x0060 (0x0060 - 0x0000)
struct CoreSanctions_EOSSanctionsQueryActivePlayerSanctions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSanctionsQueryActivePlayerSanctionsOptions Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSanctionsQueryActivePlayerSanctionsCallbackInfo& Data)> Callback;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSanctions_EOSSanctionsQueryActivePlayerSanctions) == 0x000008, "Wrong alignment on CoreSanctions_EOSSanctionsQueryActivePlayerSanctions");
static_assert(sizeof(CoreSanctions_EOSSanctionsQueryActivePlayerSanctions) == 0x000060, "Wrong size on CoreSanctions_EOSSanctionsQueryActivePlayerSanctions");
static_assert(offsetof(CoreSanctions_EOSSanctionsQueryActivePlayerSanctions, WorldContextObject) == 0x000000, "Member 'CoreSanctions_EOSSanctionsQueryActivePlayerSanctions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSanctions_EOSSanctionsQueryActivePlayerSanctions, Options) == 0x000008, "Member 'CoreSanctions_EOSSanctionsQueryActivePlayerSanctions::Options' has a wrong offset!");
static_assert(offsetof(CoreSanctions_EOSSanctionsQueryActivePlayerSanctions, Callback) == 0x000050, "Member 'CoreSanctions_EOSSanctionsQueryActivePlayerSanctions::Callback' has a wrong offset!");

// Function EOSCore.EOSCoreEcomRedeemEntitlements.EOSEcomRedeemEntitlementsAsync
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreEcomRedeemEntitlements_EOSEcomRedeemEntitlementsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSEcomRedeemEntitlementsOptions      Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreEcomRedeemEntitlements*         ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreEcomRedeemEntitlements_EOSEcomRedeemEntitlementsAsync) == 0x000008, "Wrong alignment on EOSCoreEcomRedeemEntitlements_EOSEcomRedeemEntitlementsAsync");
static_assert(sizeof(EOSCoreEcomRedeemEntitlements_EOSEcomRedeemEntitlementsAsync) == 0x000048, "Wrong size on EOSCoreEcomRedeemEntitlements_EOSEcomRedeemEntitlementsAsync");
static_assert(offsetof(EOSCoreEcomRedeemEntitlements_EOSEcomRedeemEntitlementsAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreEcomRedeemEntitlements_EOSEcomRedeemEntitlementsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomRedeemEntitlements_EOSEcomRedeemEntitlementsAsync, Options) == 0x000008, "Member 'EOSCoreEcomRedeemEntitlements_EOSEcomRedeemEntitlementsAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomRedeemEntitlements_EOSEcomRedeemEntitlementsAsync, ReturnValue) == 0x000040, "Member 'EOSCoreEcomRedeemEntitlements_EOSEcomRedeemEntitlementsAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreEcomRedeemEntitlements.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreEcomRedeemEntitlements_HandleCallback final
{
public:
	struct FEOSEcomRedeemEntitlementsCallbackInfo Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A2[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreEcomRedeemEntitlements_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreEcomRedeemEntitlements_HandleCallback");
static_assert(sizeof(EOSCoreEcomRedeemEntitlements_HandleCallback) == 0x000040, "Wrong size on EOSCoreEcomRedeemEntitlements_HandleCallback");
static_assert(offsetof(EOSCoreEcomRedeemEntitlements_HandleCallback, Data) == 0x000000, "Member 'EOSCoreEcomRedeemEntitlements_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreEcomRedeemEntitlements_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreEcomRedeemEntitlements_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PAcceptConnection
// 0x0070 (0x0070 - 0x0000)
struct CoreP2P_EOSP2PAcceptConnection final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PAcceptConnectionOptions         Options;                                           // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A4[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreP2P_EOSP2PAcceptConnection) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PAcceptConnection");
static_assert(sizeof(CoreP2P_EOSP2PAcceptConnection) == 0x000070, "Wrong size on CoreP2P_EOSP2PAcceptConnection");
static_assert(offsetof(CoreP2P_EOSP2PAcceptConnection, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PAcceptConnection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAcceptConnection, Options) == 0x000008, "Member 'CoreP2P_EOSP2PAcceptConnection::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAcceptConnection, ReturnValue) == 0x000068, "Member 'CoreP2P_EOSP2PAcceptConnection::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PAddNotifyIncomingPacketQueueFull
// 0x0028 (0x0028 - 0x0000)
struct CoreP2P_EOSP2PAddNotifyIncomingPacketQueueFull final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PAddNotifyIncomingPacketQueueFullOptions Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSP2POnIncomingPacketQueueFullInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A5[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreP2P_EOSP2PAddNotifyIncomingPacketQueueFull) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PAddNotifyIncomingPacketQueueFull");
static_assert(sizeof(CoreP2P_EOSP2PAddNotifyIncomingPacketQueueFull) == 0x000028, "Wrong size on CoreP2P_EOSP2PAddNotifyIncomingPacketQueueFull");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyIncomingPacketQueueFull, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PAddNotifyIncomingPacketQueueFull::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyIncomingPacketQueueFull, Options) == 0x000008, "Member 'CoreP2P_EOSP2PAddNotifyIncomingPacketQueueFull::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyIncomingPacketQueueFull, Callback) == 0x00000C, "Member 'CoreP2P_EOSP2PAddNotifyIncomingPacketQueueFull::Callback' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyIncomingPacketQueueFull, ReturnValue) == 0x000020, "Member 'CoreP2P_EOSP2PAddNotifyIncomingPacketQueueFull::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PAddNotifyPeerConnectionEstablished
// 0x0060 (0x0060 - 0x0000)
struct CoreP2P_EOSP2PAddNotifyPeerConnectionEstablished final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PAddNotifyPeerConnectionEstablishedOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSP2POnPeerConnectionEstablishedInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreP2P_EOSP2PAddNotifyPeerConnectionEstablished) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PAddNotifyPeerConnectionEstablished");
static_assert(sizeof(CoreP2P_EOSP2PAddNotifyPeerConnectionEstablished) == 0x000060, "Wrong size on CoreP2P_EOSP2PAddNotifyPeerConnectionEstablished");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionEstablished, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionEstablished::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionEstablished, Options) == 0x000008, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionEstablished::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionEstablished, Callback) == 0x000048, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionEstablished::Callback' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionEstablished, ReturnValue) == 0x000058, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionEstablished::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PAddNotifyPeerConnectionInterrupted
// 0x0060 (0x0060 - 0x0000)
struct CoreP2P_EOSP2PAddNotifyPeerConnectionInterrupted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PAddNotifyPeerConnectionInterruptedOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSP2POnPeerConnectionInterruptedInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreP2P_EOSP2PAddNotifyPeerConnectionInterrupted) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PAddNotifyPeerConnectionInterrupted");
static_assert(sizeof(CoreP2P_EOSP2PAddNotifyPeerConnectionInterrupted) == 0x000060, "Wrong size on CoreP2P_EOSP2PAddNotifyPeerConnectionInterrupted");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionInterrupted, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionInterrupted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionInterrupted, Options) == 0x000008, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionInterrupted::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionInterrupted, Callback) == 0x000048, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionInterrupted::Callback' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionInterrupted, ReturnValue) == 0x000058, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionInterrupted::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PCloseConnection
// 0x0070 (0x0070 - 0x0000)
struct CoreP2P_EOSP2PCloseConnection final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PCloseConnectionOptions          Options;                                           // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A6[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreP2P_EOSP2PCloseConnection) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PCloseConnection");
static_assert(sizeof(CoreP2P_EOSP2PCloseConnection) == 0x000070, "Wrong size on CoreP2P_EOSP2PCloseConnection");
static_assert(offsetof(CoreP2P_EOSP2PCloseConnection, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PCloseConnection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PCloseConnection, Options) == 0x000008, "Member 'CoreP2P_EOSP2PCloseConnection::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PCloseConnection, ReturnValue) == 0x000068, "Member 'CoreP2P_EOSP2PCloseConnection::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PCloseConnections
// 0x0050 (0x0050 - 0x0000)
struct CoreP2P_EOSP2PCloseConnections final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PCloseConnectionsOptions         Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A7[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreP2P_EOSP2PCloseConnections) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PCloseConnections");
static_assert(sizeof(CoreP2P_EOSP2PCloseConnections) == 0x000050, "Wrong size on CoreP2P_EOSP2PCloseConnections");
static_assert(offsetof(CoreP2P_EOSP2PCloseConnections, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PCloseConnections::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PCloseConnections, Options) == 0x000008, "Member 'CoreP2P_EOSP2PCloseConnections::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PCloseConnections, ReturnValue) == 0x000048, "Member 'CoreP2P_EOSP2PCloseConnections::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PGetNATType
// 0x0010 (0x0010 - 0x0000)
struct CoreP2P_EOSP2PGetNATType final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PGetNATTypeOptions               Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EEOSENATType                                  OutNatType;                                        // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A8[0x2];                                     // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreP2P_EOSP2PGetNATType) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PGetNATType");
static_assert(sizeof(CoreP2P_EOSP2PGetNATType) == 0x000010, "Wrong size on CoreP2P_EOSP2PGetNATType");
static_assert(offsetof(CoreP2P_EOSP2PGetNATType, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PGetNATType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetNATType, Options) == 0x000008, "Member 'CoreP2P_EOSP2PGetNATType::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetNATType, OutNatType) == 0x00000C, "Member 'CoreP2P_EOSP2PGetNATType::OutNatType' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetNATType, ReturnValue) == 0x00000D, "Member 'CoreP2P_EOSP2PGetNATType::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PGetNextReceivedPacketSize
// 0x0040 (0x0040 - 0x0000)
struct CoreP2P_EOSP2PGetNextReceivedPacketSize final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PGetNextReceivedPacketSizeOptions Options;                                           // 0x0008(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutPacketSizeBytes;                                // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A9[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreP2P_EOSP2PGetNextReceivedPacketSize) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PGetNextReceivedPacketSize");
static_assert(sizeof(CoreP2P_EOSP2PGetNextReceivedPacketSize) == 0x000040, "Wrong size on CoreP2P_EOSP2PGetNextReceivedPacketSize");
static_assert(offsetof(CoreP2P_EOSP2PGetNextReceivedPacketSize, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PGetNextReceivedPacketSize::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetNextReceivedPacketSize, Options) == 0x000008, "Member 'CoreP2P_EOSP2PGetNextReceivedPacketSize::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetNextReceivedPacketSize, OutPacketSizeBytes) == 0x000034, "Member 'CoreP2P_EOSP2PGetNextReceivedPacketSize::OutPacketSizeBytes' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetNextReceivedPacketSize, ReturnValue) == 0x000038, "Member 'CoreP2P_EOSP2PGetNextReceivedPacketSize::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PGetPacketQueueInfo
// 0x0078 (0x0078 - 0x0000)
struct CoreP2P_EOSP2PGetPacketQueueInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PGetPacketQueueInfoOptions       Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29AA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSP2PPacketQueueInfo                 OutPacketQueueInfo;                                // 0x0010(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29AB[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreP2P_EOSP2PGetPacketQueueInfo) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PGetPacketQueueInfo");
static_assert(sizeof(CoreP2P_EOSP2PGetPacketQueueInfo) == 0x000078, "Wrong size on CoreP2P_EOSP2PGetPacketQueueInfo");
static_assert(offsetof(CoreP2P_EOSP2PGetPacketQueueInfo, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PGetPacketQueueInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetPacketQueueInfo, Options) == 0x000008, "Member 'CoreP2P_EOSP2PGetPacketQueueInfo::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetPacketQueueInfo, OutPacketQueueInfo) == 0x000010, "Member 'CoreP2P_EOSP2PGetPacketQueueInfo::OutPacketQueueInfo' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetPacketQueueInfo, ReturnValue) == 0x000070, "Member 'CoreP2P_EOSP2PGetPacketQueueInfo::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PGetPortRange
// 0x0018 (0x0018 - 0x0000)
struct CoreP2P_EOSP2PGetPortRange final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PGetPortRangeOptions             Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutPort;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNumAdditionalPortsToTry;                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29AC[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreP2P_EOSP2PGetPortRange) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PGetPortRange");
static_assert(sizeof(CoreP2P_EOSP2PGetPortRange) == 0x000018, "Wrong size on CoreP2P_EOSP2PGetPortRange");
static_assert(offsetof(CoreP2P_EOSP2PGetPortRange, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PGetPortRange::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetPortRange, Options) == 0x000008, "Member 'CoreP2P_EOSP2PGetPortRange::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetPortRange, OutPort) == 0x00000C, "Member 'CoreP2P_EOSP2PGetPortRange::OutPort' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetPortRange, OutNumAdditionalPortsToTry) == 0x000010, "Member 'CoreP2P_EOSP2PGetPortRange::OutNumAdditionalPortsToTry' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetPortRange, ReturnValue) == 0x000014, "Member 'CoreP2P_EOSP2PGetPortRange::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PGetRelayControl
// 0x0010 (0x0010 - 0x0000)
struct CoreP2P_EOSP2PGetRelayControl final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PGetRelayControlOptions          Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EEOSERelayControl                             OutRelayControl;                                   // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29AD[0x2];                                     // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreP2P_EOSP2PGetRelayControl) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PGetRelayControl");
static_assert(sizeof(CoreP2P_EOSP2PGetRelayControl) == 0x000010, "Wrong size on CoreP2P_EOSP2PGetRelayControl");
static_assert(offsetof(CoreP2P_EOSP2PGetRelayControl, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PGetRelayControl::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetRelayControl, Options) == 0x000008, "Member 'CoreP2P_EOSP2PGetRelayControl::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetRelayControl, OutRelayControl) == 0x00000C, "Member 'CoreP2P_EOSP2PGetRelayControl::OutRelayControl' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PGetRelayControl, ReturnValue) == 0x00000D, "Member 'CoreP2P_EOSP2PGetRelayControl::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PReceivePacket
// 0x0098 (0x0098 - 0x0000)
struct CoreP2P_EOSP2PReceivePacket final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PReceivePacketOptions            Options;                                           // 0x0008(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      OutPeerId;                                         // 0x0038(0x0021)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29AE[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSP2PSocketId                        OutSocketId;                                       // 0x0060(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         OutChannel;                                        // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29AF[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 OutData;                                           // 0x0080(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OutBytesWritten;                                   // 0x0090(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0094(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B0[0x3];                                     // 0x0095(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreP2P_EOSP2PReceivePacket) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PReceivePacket");
static_assert(sizeof(CoreP2P_EOSP2PReceivePacket) == 0x000098, "Wrong size on CoreP2P_EOSP2PReceivePacket");
static_assert(offsetof(CoreP2P_EOSP2PReceivePacket, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PReceivePacket::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PReceivePacket, Options) == 0x000008, "Member 'CoreP2P_EOSP2PReceivePacket::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PReceivePacket, OutPeerId) == 0x000038, "Member 'CoreP2P_EOSP2PReceivePacket::OutPeerId' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PReceivePacket, OutSocketId) == 0x000060, "Member 'CoreP2P_EOSP2PReceivePacket::OutSocketId' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PReceivePacket, OutChannel) == 0x000078, "Member 'CoreP2P_EOSP2PReceivePacket::OutChannel' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PReceivePacket, OutData) == 0x000080, "Member 'CoreP2P_EOSP2PReceivePacket::OutData' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PReceivePacket, OutBytesWritten) == 0x000090, "Member 'CoreP2P_EOSP2PReceivePacket::OutBytesWritten' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PReceivePacket, ReturnValue) == 0x000094, "Member 'CoreP2P_EOSP2PReceivePacket::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PRemoveNotifyIncomingPacketQueueFull
// 0x0010 (0x0010 - 0x0000)
struct CoreP2P_EOSP2PRemoveNotifyIncomingPacketQueueFull final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreP2P_EOSP2PRemoveNotifyIncomingPacketQueueFull) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PRemoveNotifyIncomingPacketQueueFull");
static_assert(sizeof(CoreP2P_EOSP2PRemoveNotifyIncomingPacketQueueFull) == 0x000010, "Wrong size on CoreP2P_EOSP2PRemoveNotifyIncomingPacketQueueFull");
static_assert(offsetof(CoreP2P_EOSP2PRemoveNotifyIncomingPacketQueueFull, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PRemoveNotifyIncomingPacketQueueFull::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PRemoveNotifyIncomingPacketQueueFull, NotificationID) == 0x000008, "Member 'CoreP2P_EOSP2PRemoveNotifyIncomingPacketQueueFull::NotificationID' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PRemoveNotifyPeerConnectionClosed
// 0x0010 (0x0010 - 0x0000)
struct CoreP2P_EOSP2PRemoveNotifyPeerConnectionClosed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionClosed) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PRemoveNotifyPeerConnectionClosed");
static_assert(sizeof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionClosed) == 0x000010, "Wrong size on CoreP2P_EOSP2PRemoveNotifyPeerConnectionClosed");
static_assert(offsetof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionClosed, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PRemoveNotifyPeerConnectionClosed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionClosed, NotificationID) == 0x000008, "Member 'CoreP2P_EOSP2PRemoveNotifyPeerConnectionClosed::NotificationID' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PRemoveNotifyPeerConnectionEstablished
// 0x0010 (0x0010 - 0x0000)
struct CoreP2P_EOSP2PRemoveNotifyPeerConnectionEstablished final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionEstablished) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PRemoveNotifyPeerConnectionEstablished");
static_assert(sizeof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionEstablished) == 0x000010, "Wrong size on CoreP2P_EOSP2PRemoveNotifyPeerConnectionEstablished");
static_assert(offsetof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionEstablished, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PRemoveNotifyPeerConnectionEstablished::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionEstablished, NotificationID) == 0x000008, "Member 'CoreP2P_EOSP2PRemoveNotifyPeerConnectionEstablished::NotificationID' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PRemoveNotifyPeerConnectionInterrupted
// 0x0010 (0x0010 - 0x0000)
struct CoreP2P_EOSP2PRemoveNotifyPeerConnectionInterrupted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionInterrupted) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PRemoveNotifyPeerConnectionInterrupted");
static_assert(sizeof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionInterrupted) == 0x000010, "Wrong size on CoreP2P_EOSP2PRemoveNotifyPeerConnectionInterrupted");
static_assert(offsetof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionInterrupted, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PRemoveNotifyPeerConnectionInterrupted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionInterrupted, NotificationID) == 0x000008, "Member 'CoreP2P_EOSP2PRemoveNotifyPeerConnectionInterrupted::NotificationID' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PRemoveNotifyPeerConnectionRequest
// 0x0010 (0x0010 - 0x0000)
struct CoreP2P_EOSP2PRemoveNotifyPeerConnectionRequest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionRequest) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PRemoveNotifyPeerConnectionRequest");
static_assert(sizeof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionRequest) == 0x000010, "Wrong size on CoreP2P_EOSP2PRemoveNotifyPeerConnectionRequest");
static_assert(offsetof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionRequest, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PRemoveNotifyPeerConnectionRequest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PRemoveNotifyPeerConnectionRequest, NotificationID) == 0x000008, "Member 'CoreP2P_EOSP2PRemoveNotifyPeerConnectionRequest::NotificationID' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PSendPacket
// 0x0090 (0x0090 - 0x0000)
struct CoreP2P_EOSP2PSendPacket final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PSendPacketOptions               Options;                                           // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B1[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreP2P_EOSP2PSendPacket) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PSendPacket");
static_assert(sizeof(CoreP2P_EOSP2PSendPacket) == 0x000090, "Wrong size on CoreP2P_EOSP2PSendPacket");
static_assert(offsetof(CoreP2P_EOSP2PSendPacket, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PSendPacket::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PSendPacket, Options) == 0x000008, "Member 'CoreP2P_EOSP2PSendPacket::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PSendPacket, ReturnValue) == 0x000088, "Member 'CoreP2P_EOSP2PSendPacket::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PSetPacketQueueSize
// 0x0038 (0x0038 - 0x0000)
struct CoreP2P_EOSP2PSetPacketQueueSize final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PSetPacketQueueSizeOptions       Options;                                           // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B2[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreP2P_EOSP2PSetPacketQueueSize) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PSetPacketQueueSize");
static_assert(sizeof(CoreP2P_EOSP2PSetPacketQueueSize) == 0x000038, "Wrong size on CoreP2P_EOSP2PSetPacketQueueSize");
static_assert(offsetof(CoreP2P_EOSP2PSetPacketQueueSize, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PSetPacketQueueSize::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PSetPacketQueueSize, Options) == 0x000008, "Member 'CoreP2P_EOSP2PSetPacketQueueSize::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PSetPacketQueueSize, ReturnValue) == 0x000030, "Member 'CoreP2P_EOSP2PSetPacketQueueSize::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PSetPortRange
// 0x0018 (0x0018 - 0x0000)
struct CoreP2P_EOSP2PSetPortRange final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PSetPortRangeOptions             Options;                                           // 0x0008(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B3[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreP2P_EOSP2PSetPortRange) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PSetPortRange");
static_assert(sizeof(CoreP2P_EOSP2PSetPortRange) == 0x000018, "Wrong size on CoreP2P_EOSP2PSetPortRange");
static_assert(offsetof(CoreP2P_EOSP2PSetPortRange, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PSetPortRange::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PSetPortRange, Options) == 0x000008, "Member 'CoreP2P_EOSP2PSetPortRange::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PSetPortRange, ReturnValue) == 0x000014, "Member 'CoreP2P_EOSP2PSetPortRange::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PSetRelayControl
// 0x0018 (0x0018 - 0x0000)
struct CoreP2P_EOSP2PSetRelayControl final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PSetRelayControlOptions          Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B4[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreP2P_EOSP2PSetRelayControl) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PSetRelayControl");
static_assert(sizeof(CoreP2P_EOSP2PSetRelayControl) == 0x000018, "Wrong size on CoreP2P_EOSP2PSetRelayControl");
static_assert(offsetof(CoreP2P_EOSP2PSetRelayControl, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PSetRelayControl::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PSetRelayControl, Options) == 0x000008, "Member 'CoreP2P_EOSP2PSetRelayControl::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PSetRelayControl, ReturnValue) == 0x000010, "Member 'CoreP2P_EOSP2PSetRelayControl::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.GetP2P
// 0x0010 (0x0010 - 0x0000)
struct CoreP2P_GetP2P final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreP2P*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreP2P_GetP2P) == 0x000008, "Wrong alignment on CoreP2P_GetP2P");
static_assert(sizeof(CoreP2P_GetP2P) == 0x000010, "Wrong size on CoreP2P_GetP2P");
static_assert(offsetof(CoreP2P_GetP2P, WorldContextObject) == 0x000000, "Member 'CoreP2P_GetP2P::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_GetP2P, ReturnValue) == 0x000008, "Member 'CoreP2P_GetP2P::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PAddNotifyPeerConnectionClosed
// 0x0050 (0x0050 - 0x0000)
struct CoreP2P_EOSP2PAddNotifyPeerConnectionClosed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PAddNotifyPeerConnectionClosedOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreP2P_EOSP2PAddNotifyPeerConnectionClosed) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PAddNotifyPeerConnectionClosed");
static_assert(sizeof(CoreP2P_EOSP2PAddNotifyPeerConnectionClosed) == 0x000050, "Wrong size on CoreP2P_EOSP2PAddNotifyPeerConnectionClosed");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionClosed, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionClosed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionClosed, Options) == 0x000008, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionClosed::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionClosed, ReturnValue) == 0x000048, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionClosed::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PAddNotifyPeerConnectionRequest
// 0x0060 (0x0060 - 0x0000)
struct CoreP2P_EOSP2PAddNotifyPeerConnectionRequest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSP2PAddNotifyPeerConnectionRequestOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSP2POnIncomingConnectionRequestInfo& Data, bool bWasSuccessful)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreP2P_EOSP2PAddNotifyPeerConnectionRequest) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PAddNotifyPeerConnectionRequest");
static_assert(sizeof(CoreP2P_EOSP2PAddNotifyPeerConnectionRequest) == 0x000060, "Wrong size on CoreP2P_EOSP2PAddNotifyPeerConnectionRequest");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionRequest, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionRequest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionRequest, Options) == 0x000008, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionRequest::Options' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionRequest, Callback) == 0x000048, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionRequest::Callback' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PAddNotifyPeerConnectionRequest, ReturnValue) == 0x000058, "Member 'CoreP2P_EOSP2PAddNotifyPeerConnectionRequest::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreP2P.EOSP2PQueryNATType
// 0x0018 (0x0018 - 0x0000)
struct CoreP2P_EOSP2PQueryNATType final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSP2POnQueryNATTypeCompleteInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreP2P_EOSP2PQueryNATType) == 0x000008, "Wrong alignment on CoreP2P_EOSP2PQueryNATType");
static_assert(sizeof(CoreP2P_EOSP2PQueryNATType) == 0x000018, "Wrong size on CoreP2P_EOSP2PQueryNATType");
static_assert(offsetof(CoreP2P_EOSP2PQueryNATType, WorldContextObject) == 0x000000, "Member 'CoreP2P_EOSP2PQueryNATType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreP2P_EOSP2PQueryNATType, Callback) == 0x000008, "Member 'CoreP2P_EOSP2PQueryNATType::Callback' has a wrong offset!");

// Function EOSCore.CoreFriends.EOSFriendsGetFriendAtIndex
// 0x0058 (0x0058 - 0x0000)
struct CoreFriends_EOSFriendsGetFriendAtIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSFriendsGetFriendAtIndexOptions     Options;                                           // 0x0008(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSEpicAccountId                      ReturnValue;                                       // 0x0034(0x0021)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B6[0x3];                                     // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreFriends_EOSFriendsGetFriendAtIndex) == 0x000008, "Wrong alignment on CoreFriends_EOSFriendsGetFriendAtIndex");
static_assert(sizeof(CoreFriends_EOSFriendsGetFriendAtIndex) == 0x000058, "Wrong size on CoreFriends_EOSFriendsGetFriendAtIndex");
static_assert(offsetof(CoreFriends_EOSFriendsGetFriendAtIndex, WorldContextObject) == 0x000000, "Member 'CoreFriends_EOSFriendsGetFriendAtIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsGetFriendAtIndex, Options) == 0x000008, "Member 'CoreFriends_EOSFriendsGetFriendAtIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsGetFriendAtIndex, ReturnValue) == 0x000034, "Member 'CoreFriends_EOSFriendsGetFriendAtIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreFriends.EOSFriendsGetFriendsCount
// 0x0038 (0x0038 - 0x0000)
struct CoreFriends_EOSFriendsGetFriendsCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSFriendsGetFriendsCountOptions      Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B7[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreFriends_EOSFriendsGetFriendsCount) == 0x000008, "Wrong alignment on CoreFriends_EOSFriendsGetFriendsCount");
static_assert(sizeof(CoreFriends_EOSFriendsGetFriendsCount) == 0x000038, "Wrong size on CoreFriends_EOSFriendsGetFriendsCount");
static_assert(offsetof(CoreFriends_EOSFriendsGetFriendsCount, WorldContextObject) == 0x000000, "Member 'CoreFriends_EOSFriendsGetFriendsCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsGetFriendsCount, Options) == 0x000008, "Member 'CoreFriends_EOSFriendsGetFriendsCount::Options' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsGetFriendsCount, ReturnValue) == 0x000030, "Member 'CoreFriends_EOSFriendsGetFriendsCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreFriends.EOSFriendsGetStatus
// 0x0058 (0x0058 - 0x0000)
struct CoreFriends_EOSFriendsGetStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSFriendsGetStatusOptions            Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EEOSEFriendsStatus                            ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B8[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreFriends_EOSFriendsGetStatus) == 0x000008, "Wrong alignment on CoreFriends_EOSFriendsGetStatus");
static_assert(sizeof(CoreFriends_EOSFriendsGetStatus) == 0x000058, "Wrong size on CoreFriends_EOSFriendsGetStatus");
static_assert(offsetof(CoreFriends_EOSFriendsGetStatus, WorldContextObject) == 0x000000, "Member 'CoreFriends_EOSFriendsGetStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsGetStatus, Options) == 0x000008, "Member 'CoreFriends_EOSFriendsGetStatus::Options' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsGetStatus, ReturnValue) == 0x000050, "Member 'CoreFriends_EOSFriendsGetStatus::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreFriends.EOSFriendsRemoveNotifyFriendsUpdate
// 0x0010 (0x0010 - 0x0000)
struct CoreFriends_EOSFriendsRemoveNotifyFriendsUpdate final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFriends_EOSFriendsRemoveNotifyFriendsUpdate) == 0x000008, "Wrong alignment on CoreFriends_EOSFriendsRemoveNotifyFriendsUpdate");
static_assert(sizeof(CoreFriends_EOSFriendsRemoveNotifyFriendsUpdate) == 0x000010, "Wrong size on CoreFriends_EOSFriendsRemoveNotifyFriendsUpdate");
static_assert(offsetof(CoreFriends_EOSFriendsRemoveNotifyFriendsUpdate, WorldContextObject) == 0x000000, "Member 'CoreFriends_EOSFriendsRemoveNotifyFriendsUpdate::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsRemoveNotifyFriendsUpdate, ID) == 0x000008, "Member 'CoreFriends_EOSFriendsRemoveNotifyFriendsUpdate::ID' has a wrong offset!");

// Function EOSCore.CoreFriends.GetFriends
// 0x0010 (0x0010 - 0x0000)
struct CoreFriends_GetFriends final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreFriends*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFriends_GetFriends) == 0x000008, "Wrong alignment on CoreFriends_GetFriends");
static_assert(sizeof(CoreFriends_GetFriends) == 0x000010, "Wrong size on CoreFriends_GetFriends");
static_assert(offsetof(CoreFriends_GetFriends, WorldContextObject) == 0x000000, "Member 'CoreFriends_GetFriends::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreFriends_GetFriends, ReturnValue) == 0x000008, "Member 'CoreFriends_GetFriends::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreFriends.EOSFriendsAcceptInvite
// 0x0060 (0x0060 - 0x0000)
struct CoreFriends_EOSFriendsAcceptInvite final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSFriendsAcceptInviteOptions         Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSFriendsAcceptInviteCallbackInfo& Data)> Callback;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFriends_EOSFriendsAcceptInvite) == 0x000008, "Wrong alignment on CoreFriends_EOSFriendsAcceptInvite");
static_assert(sizeof(CoreFriends_EOSFriendsAcceptInvite) == 0x000060, "Wrong size on CoreFriends_EOSFriendsAcceptInvite");
static_assert(offsetof(CoreFriends_EOSFriendsAcceptInvite, WorldContextObject) == 0x000000, "Member 'CoreFriends_EOSFriendsAcceptInvite::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsAcceptInvite, Options) == 0x000008, "Member 'CoreFriends_EOSFriendsAcceptInvite::Options' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsAcceptInvite, Callback) == 0x000050, "Member 'CoreFriends_EOSFriendsAcceptInvite::Callback' has a wrong offset!");

// Function EOSCore.CoreFriends.EOSFriendsAddNotifyFriendsUpdate
// 0x0020 (0x0020 - 0x0000)
struct CoreFriends_EOSFriendsAddNotifyFriendsUpdate final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSFriendsOnFriendsUpdateInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFriends_EOSFriendsAddNotifyFriendsUpdate) == 0x000008, "Wrong alignment on CoreFriends_EOSFriendsAddNotifyFriendsUpdate");
static_assert(sizeof(CoreFriends_EOSFriendsAddNotifyFriendsUpdate) == 0x000020, "Wrong size on CoreFriends_EOSFriendsAddNotifyFriendsUpdate");
static_assert(offsetof(CoreFriends_EOSFriendsAddNotifyFriendsUpdate, WorldContextObject) == 0x000000, "Member 'CoreFriends_EOSFriendsAddNotifyFriendsUpdate::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsAddNotifyFriendsUpdate, Callback) == 0x000008, "Member 'CoreFriends_EOSFriendsAddNotifyFriendsUpdate::Callback' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsAddNotifyFriendsUpdate, ReturnValue) == 0x000018, "Member 'CoreFriends_EOSFriendsAddNotifyFriendsUpdate::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreFriends.EOSFriendsQueryFriends
// 0x0040 (0x0040 - 0x0000)
struct CoreFriends_EOSFriendsQueryFriends final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSFriendsQueryFriendsOptions         Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSFriendsQueryFriendsCallbackInfo& Data)> Callback;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFriends_EOSFriendsQueryFriends) == 0x000008, "Wrong alignment on CoreFriends_EOSFriendsQueryFriends");
static_assert(sizeof(CoreFriends_EOSFriendsQueryFriends) == 0x000040, "Wrong size on CoreFriends_EOSFriendsQueryFriends");
static_assert(offsetof(CoreFriends_EOSFriendsQueryFriends, WorldContextObject) == 0x000000, "Member 'CoreFriends_EOSFriendsQueryFriends::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsQueryFriends, Options) == 0x000008, "Member 'CoreFriends_EOSFriendsQueryFriends::Options' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsQueryFriends, Callback) == 0x000030, "Member 'CoreFriends_EOSFriendsQueryFriends::Callback' has a wrong offset!");

// Function EOSCore.CoreFriends.EOSFriendsRejectInvite
// 0x0060 (0x0060 - 0x0000)
struct CoreFriends_EOSFriendsRejectInvite final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSFriendsRejectInviteOptions         Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSFriendsRejectInviteCallbackInfo& Data)> Callback;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFriends_EOSFriendsRejectInvite) == 0x000008, "Wrong alignment on CoreFriends_EOSFriendsRejectInvite");
static_assert(sizeof(CoreFriends_EOSFriendsRejectInvite) == 0x000060, "Wrong size on CoreFriends_EOSFriendsRejectInvite");
static_assert(offsetof(CoreFriends_EOSFriendsRejectInvite, WorldContextObject) == 0x000000, "Member 'CoreFriends_EOSFriendsRejectInvite::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsRejectInvite, Options) == 0x000008, "Member 'CoreFriends_EOSFriendsRejectInvite::Options' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsRejectInvite, Callback) == 0x000050, "Member 'CoreFriends_EOSFriendsRejectInvite::Callback' has a wrong offset!");

// Function EOSCore.CoreFriends.EOSFriendsSendInvite
// 0x0060 (0x0060 - 0x0000)
struct CoreFriends_EOSFriendsSendInvite final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSFriendsSendInviteOptions           Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSFriendsSendInviteCallbackInfo& Data)> Callback;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFriends_EOSFriendsSendInvite) == 0x000008, "Wrong alignment on CoreFriends_EOSFriendsSendInvite");
static_assert(sizeof(CoreFriends_EOSFriendsSendInvite) == 0x000060, "Wrong size on CoreFriends_EOSFriendsSendInvite");
static_assert(offsetof(CoreFriends_EOSFriendsSendInvite, WorldContextObject) == 0x000000, "Member 'CoreFriends_EOSFriendsSendInvite::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsSendInvite, Options) == 0x000008, "Member 'CoreFriends_EOSFriendsSendInvite::Options' has a wrong offset!");
static_assert(offsetof(CoreFriends_EOSFriendsSendInvite, Callback) == 0x000050, "Member 'CoreFriends_EOSFriendsSendInvite::Callback' has a wrong offset!");

// Function EOSCore.EOSCoreFriendsQueryFriends.EOSFriendsQueryFriendsAsync
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreFriendsQueryFriends_EOSFriendsQueryFriendsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSFriendsQueryFriendsOptions         Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreFriendsQueryFriends*            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreFriendsQueryFriends_EOSFriendsQueryFriendsAsync) == 0x000008, "Wrong alignment on EOSCoreFriendsQueryFriends_EOSFriendsQueryFriendsAsync");
static_assert(sizeof(EOSCoreFriendsQueryFriends_EOSFriendsQueryFriendsAsync) == 0x000038, "Wrong size on EOSCoreFriendsQueryFriends_EOSFriendsQueryFriendsAsync");
static_assert(offsetof(EOSCoreFriendsQueryFriends_EOSFriendsQueryFriendsAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreFriendsQueryFriends_EOSFriendsQueryFriendsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreFriendsQueryFriends_EOSFriendsQueryFriendsAsync, Options) == 0x000008, "Member 'EOSCoreFriendsQueryFriends_EOSFriendsQueryFriendsAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreFriendsQueryFriends_EOSFriendsQueryFriendsAsync, ReturnValue) == 0x000030, "Member 'EOSCoreFriendsQueryFriends_EOSFriendsQueryFriendsAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreFriendsQueryFriends.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreFriendsQueryFriends_HandleCallback final
{
public:
	struct FEOSFriendsQueryFriendsCallbackInfo    Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29BA[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreFriendsQueryFriends_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreFriendsQueryFriends_HandleCallback");
static_assert(sizeof(EOSCoreFriendsQueryFriends_HandleCallback) == 0x000040, "Wrong size on EOSCoreFriendsQueryFriends_HandleCallback");
static_assert(offsetof(EOSCoreFriendsQueryFriends_HandleCallback, Data) == 0x000000, "Member 'EOSCoreFriendsQueryFriends_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreFriendsQueryFriends_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreFriendsQueryFriends_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreFriendsSendInvite.EOSFriendsSendInviteAsync
// 0x0058 (0x0058 - 0x0000)
struct EOSCoreFriendsSendInvite_EOSFriendsSendInviteAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSFriendsSendInviteOptions           Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreFriendsSendInvite*              ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreFriendsSendInvite_EOSFriendsSendInviteAsync) == 0x000008, "Wrong alignment on EOSCoreFriendsSendInvite_EOSFriendsSendInviteAsync");
static_assert(sizeof(EOSCoreFriendsSendInvite_EOSFriendsSendInviteAsync) == 0x000058, "Wrong size on EOSCoreFriendsSendInvite_EOSFriendsSendInviteAsync");
static_assert(offsetof(EOSCoreFriendsSendInvite_EOSFriendsSendInviteAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreFriendsSendInvite_EOSFriendsSendInviteAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreFriendsSendInvite_EOSFriendsSendInviteAsync, Options) == 0x000008, "Member 'EOSCoreFriendsSendInvite_EOSFriendsSendInviteAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreFriendsSendInvite_EOSFriendsSendInviteAsync, ReturnValue) == 0x000050, "Member 'EOSCoreFriendsSendInvite_EOSFriendsSendInviteAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreFriendsSendInvite.HandleCallback
// 0x0060 (0x0060 - 0x0000)
struct EOSCoreFriendsSendInvite_HandleCallback final
{
public:
	struct FEOSFriendsSendInviteCallbackInfo      Data;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29BC[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreFriendsSendInvite_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreFriendsSendInvite_HandleCallback");
static_assert(sizeof(EOSCoreFriendsSendInvite_HandleCallback) == 0x000060, "Wrong size on EOSCoreFriendsSendInvite_HandleCallback");
static_assert(offsetof(EOSCoreFriendsSendInvite_HandleCallback, Data) == 0x000000, "Member 'EOSCoreFriendsSendInvite_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreFriendsSendInvite_HandleCallback, bWasSuccessful) == 0x000058, "Member 'EOSCoreFriendsSendInvite_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLobbySearchFind.EOSLobbySearchFindAsync
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreLobbySearchFind_EOSLobbySearchFindAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbySearch                       Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbySearchFindOptions             Options;                                           // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreLobbySearchFind*                ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLobbySearchFind_EOSLobbySearchFindAsync) == 0x000008, "Wrong alignment on EOSCoreLobbySearchFind_EOSLobbySearchFindAsync");
static_assert(sizeof(EOSCoreLobbySearchFind_EOSLobbySearchFindAsync) == 0x000040, "Wrong size on EOSCoreLobbySearchFind_EOSLobbySearchFindAsync");
static_assert(offsetof(EOSCoreLobbySearchFind_EOSLobbySearchFindAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLobbySearchFind_EOSLobbySearchFindAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbySearchFind_EOSLobbySearchFindAsync, Handle) == 0x000008, "Member 'EOSCoreLobbySearchFind_EOSLobbySearchFindAsync::Handle' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbySearchFind_EOSLobbySearchFindAsync, Options) == 0x000010, "Member 'EOSCoreLobbySearchFind_EOSLobbySearchFindAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbySearchFind_EOSLobbySearchFindAsync, ReturnValue) == 0x000038, "Member 'EOSCoreLobbySearchFind_EOSLobbySearchFindAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLobbySearchFind.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreLobbySearchFind_HandleCallback final
{
public:
	struct FEOSLobbySearchFindCallbackInfo        Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29BE[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLobbySearchFind_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLobbySearchFind_HandleCallback");
static_assert(sizeof(EOSCoreLobbySearchFind_HandleCallback) == 0x000018, "Wrong size on EOSCoreLobbySearchFind_HandleCallback");
static_assert(offsetof(EOSCoreLobbySearchFind_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLobbySearchFind_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbySearchFind_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreLobbySearchFind_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreFriendsAcceptInvite.EOSFriendsAcceptInviteAsync
// 0x0058 (0x0058 - 0x0000)
struct EOSCoreFriendsAcceptInvite_EOSFriendsAcceptInviteAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSFriendsAcceptInviteOptions         Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreFriendsAcceptInvite*            ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreFriendsAcceptInvite_EOSFriendsAcceptInviteAsync) == 0x000008, "Wrong alignment on EOSCoreFriendsAcceptInvite_EOSFriendsAcceptInviteAsync");
static_assert(sizeof(EOSCoreFriendsAcceptInvite_EOSFriendsAcceptInviteAsync) == 0x000058, "Wrong size on EOSCoreFriendsAcceptInvite_EOSFriendsAcceptInviteAsync");
static_assert(offsetof(EOSCoreFriendsAcceptInvite_EOSFriendsAcceptInviteAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreFriendsAcceptInvite_EOSFriendsAcceptInviteAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreFriendsAcceptInvite_EOSFriendsAcceptInviteAsync, Options) == 0x000008, "Member 'EOSCoreFriendsAcceptInvite_EOSFriendsAcceptInviteAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreFriendsAcceptInvite_EOSFriendsAcceptInviteAsync, ReturnValue) == 0x000050, "Member 'EOSCoreFriendsAcceptInvite_EOSFriendsAcceptInviteAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreFriendsAcceptInvite.HandleCallback
// 0x0060 (0x0060 - 0x0000)
struct EOSCoreFriendsAcceptInvite_HandleCallback final
{
public:
	struct FEOSFriendsAcceptInviteCallbackInfo    Data;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C0[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreFriendsAcceptInvite_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreFriendsAcceptInvite_HandleCallback");
static_assert(sizeof(EOSCoreFriendsAcceptInvite_HandleCallback) == 0x000060, "Wrong size on EOSCoreFriendsAcceptInvite_HandleCallback");
static_assert(offsetof(EOSCoreFriendsAcceptInvite_HandleCallback, Data) == 0x000000, "Member 'EOSCoreFriendsAcceptInvite_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreFriendsAcceptInvite_HandleCallback, bWasSuccessful) == 0x000058, "Member 'EOSCoreFriendsAcceptInvite_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreFriendsRejectInvite.EOSFriendsRejectInviteAsync
// 0x0058 (0x0058 - 0x0000)
struct EOSCoreFriendsRejectInvite_EOSFriendsRejectInviteAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSFriendsRejectInviteOptions         Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreFriendsRejectInvite*            ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreFriendsRejectInvite_EOSFriendsRejectInviteAsync) == 0x000008, "Wrong alignment on EOSCoreFriendsRejectInvite_EOSFriendsRejectInviteAsync");
static_assert(sizeof(EOSCoreFriendsRejectInvite_EOSFriendsRejectInviteAsync) == 0x000058, "Wrong size on EOSCoreFriendsRejectInvite_EOSFriendsRejectInviteAsync");
static_assert(offsetof(EOSCoreFriendsRejectInvite_EOSFriendsRejectInviteAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreFriendsRejectInvite_EOSFriendsRejectInviteAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreFriendsRejectInvite_EOSFriendsRejectInviteAsync, Options) == 0x000008, "Member 'EOSCoreFriendsRejectInvite_EOSFriendsRejectInviteAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreFriendsRejectInvite_EOSFriendsRejectInviteAsync, ReturnValue) == 0x000050, "Member 'EOSCoreFriendsRejectInvite_EOSFriendsRejectInviteAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreFriendsRejectInvite.HandleCallback
// 0x0060 (0x0060 - 0x0000)
struct EOSCoreFriendsRejectInvite_HandleCallback final
{
public:
	struct FEOSFriendsRejectInviteCallbackInfo    Data;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C2[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreFriendsRejectInvite_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreFriendsRejectInvite_HandleCallback");
static_assert(sizeof(EOSCoreFriendsRejectInvite_HandleCallback) == 0x000060, "Wrong size on EOSCoreFriendsRejectInvite_HandleCallback");
static_assert(offsetof(EOSCoreFriendsRejectInvite_HandleCallback, Data) == 0x000000, "Member 'EOSCoreFriendsRejectInvite_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreFriendsRejectInvite_HandleCallback, bWasSuccessful) == 0x000058, "Member 'EOSCoreFriendsRejectInvite_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreLeaderboards.EOSLeaderboardsCopyLeaderboardDefinitionByIndex
// 0x0068 (0x0068 - 0x0000)
struct CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsCopyLeaderboardDefinitionByIndexOptions Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsDefinition             OutLeaderboardDefinition;                          // 0x0010(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C3[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByIndex) == 0x000008, "Wrong alignment on CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByIndex");
static_assert(sizeof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByIndex) == 0x000068, "Wrong size on CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByIndex");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByIndex, WorldContextObject) == 0x000000, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByIndex, Options) == 0x000008, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByIndex, OutLeaderboardDefinition) == 0x000010, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByIndex::OutLeaderboardDefinition' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByIndex, ReturnValue) == 0x000060, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLeaderboards.EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId
// 0x0078 (0x0078 - 0x0000)
struct CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardIdOptions Options;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsDefinition             OutLeaderboardDefinition;                          // 0x0020(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C4[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId) == 0x000008, "Wrong alignment on CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId");
static_assert(sizeof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId) == 0x000078, "Wrong size on CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId, WorldContextObject) == 0x000000, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId, Options) == 0x000008, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId::Options' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId, OutLeaderboardDefinition) == 0x000020, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId::OutLeaderboardDefinition' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId, ReturnValue) == 0x000070, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLeaderboards.EOSLeaderboardsCopyLeaderboardRecordByIndex
// 0x0058 (0x0058 - 0x0000)
struct CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsCopyLeaderboardRecordByIndexOptions Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsLeaderboardRecord      OutLeaderboardRecord;                              // 0x0010(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C5[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByIndex) == 0x000008, "Wrong alignment on CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByIndex");
static_assert(sizeof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByIndex) == 0x000058, "Wrong size on CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByIndex");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByIndex, WorldContextObject) == 0x000000, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByIndex, Options) == 0x000008, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByIndex, OutLeaderboardRecord) == 0x000010, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByIndex::OutLeaderboardRecord' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByIndex, ReturnValue) == 0x000050, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLeaderboards.EOSLeaderboardsCopyLeaderboardRecordByUserId
// 0x0078 (0x0078 - 0x0000)
struct CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByUserId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsCopyLeaderboardRecordByUserIdOptions Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsLeaderboardRecord      OutLeaderboardRecord;                              // 0x0030(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C6[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByUserId) == 0x000008, "Wrong alignment on CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByUserId");
static_assert(sizeof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByUserId) == 0x000078, "Wrong size on CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByUserId");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByUserId, WorldContextObject) == 0x000000, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByUserId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByUserId, Options) == 0x000008, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByUserId::Options' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByUserId, OutLeaderboardRecord) == 0x000030, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByUserId::OutLeaderboardRecord' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByUserId, ReturnValue) == 0x000070, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardRecordByUserId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLeaderboards.EOSLeaderboardsCopyLeaderboardUserScoreByIndex
// 0x0050 (0x0050 - 0x0000)
struct CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsCopyLeaderboardUserScoreByIndexOptions Options;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsLeaderboardUserScore   OutLeaderboardUserScore;                           // 0x0020(0x002C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C7[0x3];                                     // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByIndex) == 0x000008, "Wrong alignment on CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByIndex");
static_assert(sizeof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByIndex) == 0x000050, "Wrong size on CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByIndex");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByIndex, WorldContextObject) == 0x000000, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByIndex, Options) == 0x000008, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByIndex, OutLeaderboardUserScore) == 0x000020, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByIndex::OutLeaderboardUserScore' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByIndex, ReturnValue) == 0x00004C, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLeaderboards.EOSLeaderboardsCopyLeaderboardUserScoreByUserId
// 0x0070 (0x0070 - 0x0000)
struct CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByUserId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsCopyLeaderboardUserScoreByUserIdOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsLeaderboardUserScore   OutLeaderboardUserScore;                           // 0x0040(0x002C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x006C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C8[0x3];                                     // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByUserId) == 0x000008, "Wrong alignment on CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByUserId");
static_assert(sizeof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByUserId) == 0x000070, "Wrong size on CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByUserId");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByUserId, WorldContextObject) == 0x000000, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByUserId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByUserId, Options) == 0x000008, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByUserId::Options' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByUserId, OutLeaderboardUserScore) == 0x000040, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByUserId::OutLeaderboardUserScore' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByUserId, ReturnValue) == 0x00006C, "Member 'CoreLeaderboards_EOSLeaderboardsCopyLeaderboardUserScoreByUserId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLeaderboards.EOSLeaderboardsGetLeaderboardDefinitionCount
// 0x0010 (0x0010 - 0x0000)
struct CoreLeaderboards_EOSLeaderboardsGetLeaderboardDefinitionCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsGetLeaderboardDefinitionCountOptions Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardDefinitionCount) == 0x000008, "Wrong alignment on CoreLeaderboards_EOSLeaderboardsGetLeaderboardDefinitionCount");
static_assert(sizeof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardDefinitionCount) == 0x000010, "Wrong size on CoreLeaderboards_EOSLeaderboardsGetLeaderboardDefinitionCount");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardDefinitionCount, WorldContextObject) == 0x000000, "Member 'CoreLeaderboards_EOSLeaderboardsGetLeaderboardDefinitionCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardDefinitionCount, Options) == 0x000008, "Member 'CoreLeaderboards_EOSLeaderboardsGetLeaderboardDefinitionCount::Options' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardDefinitionCount, ReturnValue) == 0x00000C, "Member 'CoreLeaderboards_EOSLeaderboardsGetLeaderboardDefinitionCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLeaderboards.EOSLeaderboardsGetLeaderboardRecordCount
// 0x0010 (0x0010 - 0x0000)
struct CoreLeaderboards_EOSLeaderboardsGetLeaderboardRecordCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsGetLeaderboardRecordCountOptions Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardRecordCount) == 0x000008, "Wrong alignment on CoreLeaderboards_EOSLeaderboardsGetLeaderboardRecordCount");
static_assert(sizeof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardRecordCount) == 0x000010, "Wrong size on CoreLeaderboards_EOSLeaderboardsGetLeaderboardRecordCount");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardRecordCount, WorldContextObject) == 0x000000, "Member 'CoreLeaderboards_EOSLeaderboardsGetLeaderboardRecordCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardRecordCount, Options) == 0x000008, "Member 'CoreLeaderboards_EOSLeaderboardsGetLeaderboardRecordCount::Options' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardRecordCount, ReturnValue) == 0x00000C, "Member 'CoreLeaderboards_EOSLeaderboardsGetLeaderboardRecordCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLeaderboards.EOSLeaderboardsGetLeaderboardUserScoreCount
// 0x0028 (0x0028 - 0x0000)
struct CoreLeaderboards_EOSLeaderboardsGetLeaderboardUserScoreCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsGetLeaderboardUserScoreCountOptions Options;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C9[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardUserScoreCount) == 0x000008, "Wrong alignment on CoreLeaderboards_EOSLeaderboardsGetLeaderboardUserScoreCount");
static_assert(sizeof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardUserScoreCount) == 0x000028, "Wrong size on CoreLeaderboards_EOSLeaderboardsGetLeaderboardUserScoreCount");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardUserScoreCount, WorldContextObject) == 0x000000, "Member 'CoreLeaderboards_EOSLeaderboardsGetLeaderboardUserScoreCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardUserScoreCount, Options) == 0x000008, "Member 'CoreLeaderboards_EOSLeaderboardsGetLeaderboardUserScoreCount::Options' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsGetLeaderboardUserScoreCount, ReturnValue) == 0x000020, "Member 'CoreLeaderboards_EOSLeaderboardsGetLeaderboardUserScoreCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLeaderboards.GetLeaderboards
// 0x0010 (0x0010 - 0x0000)
struct CoreLeaderboards_GetLeaderboards final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreLeaderboards*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLeaderboards_GetLeaderboards) == 0x000008, "Wrong alignment on CoreLeaderboards_GetLeaderboards");
static_assert(sizeof(CoreLeaderboards_GetLeaderboards) == 0x000010, "Wrong size on CoreLeaderboards_GetLeaderboards");
static_assert(offsetof(CoreLeaderboards_GetLeaderboards, WorldContextObject) == 0x000000, "Member 'CoreLeaderboards_GetLeaderboards::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_GetLeaderboards, ReturnValue) == 0x000008, "Member 'CoreLeaderboards_GetLeaderboards::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLeaderboards.EOSLeaderboardsQueryLeaderboardDefinitions
// 0x0068 (0x0068 - 0x0000)
struct CoreLeaderboards_EOSLeaderboardsQueryLeaderboardDefinitions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsQueryLeaderboardDefinitionsOptions Options;                                           // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLeaderboardsOnQueryLeaderboardDefinitionsCompleteCallbackInfo& Data)> Callback;                                          // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardDefinitions) == 0x000008, "Wrong alignment on CoreLeaderboards_EOSLeaderboardsQueryLeaderboardDefinitions");
static_assert(sizeof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardDefinitions) == 0x000068, "Wrong size on CoreLeaderboards_EOSLeaderboardsQueryLeaderboardDefinitions");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardDefinitions, WorldContextObject) == 0x000000, "Member 'CoreLeaderboards_EOSLeaderboardsQueryLeaderboardDefinitions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardDefinitions, Options) == 0x000008, "Member 'CoreLeaderboards_EOSLeaderboardsQueryLeaderboardDefinitions::Options' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardDefinitions, Callback) == 0x000058, "Member 'CoreLeaderboards_EOSLeaderboardsQueryLeaderboardDefinitions::Callback' has a wrong offset!");

// Function EOSCore.CoreLeaderboards.EOSLeaderboardsQueryLeaderboardRanks
// 0x0058 (0x0058 - 0x0000)
struct CoreLeaderboards_EOSLeaderboardsQueryLeaderboardRanks final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsQueryLeaderboardRanksOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLeaderboardsOnQueryLeaderboardRanksCompleteCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardRanks) == 0x000008, "Wrong alignment on CoreLeaderboards_EOSLeaderboardsQueryLeaderboardRanks");
static_assert(sizeof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardRanks) == 0x000058, "Wrong size on CoreLeaderboards_EOSLeaderboardsQueryLeaderboardRanks");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardRanks, WorldContextObject) == 0x000000, "Member 'CoreLeaderboards_EOSLeaderboardsQueryLeaderboardRanks::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardRanks, Options) == 0x000008, "Member 'CoreLeaderboards_EOSLeaderboardsQueryLeaderboardRanks::Options' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardRanks, Callback) == 0x000048, "Member 'CoreLeaderboards_EOSLeaderboardsQueryLeaderboardRanks::Callback' has a wrong offset!");

// Function EOSCore.CoreLeaderboards.EOSLeaderboardsQueryLeaderboardUserScores
// 0x0088 (0x0088 - 0x0000)
struct CoreLeaderboards_EOSLeaderboardsQueryLeaderboardUserScores final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsQueryLeaderboardUserScoresOptions Options;                                           // 0x0008(0x0070)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLeaderboardsOnQueryLeaderboardUserScoresCompleteCallbackInfo& Data)> Callback;                                          // 0x0078(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardUserScores) == 0x000008, "Wrong alignment on CoreLeaderboards_EOSLeaderboardsQueryLeaderboardUserScores");
static_assert(sizeof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardUserScores) == 0x000088, "Wrong size on CoreLeaderboards_EOSLeaderboardsQueryLeaderboardUserScores");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardUserScores, WorldContextObject) == 0x000000, "Member 'CoreLeaderboards_EOSLeaderboardsQueryLeaderboardUserScores::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardUserScores, Options) == 0x000008, "Member 'CoreLeaderboards_EOSLeaderboardsQueryLeaderboardUserScores::Options' has a wrong offset!");
static_assert(offsetof(CoreLeaderboards_EOSLeaderboardsQueryLeaderboardUserScores, Callback) == 0x000078, "Member 'CoreLeaderboards_EOSLeaderboardsQueryLeaderboardUserScores::Callback' has a wrong offset!");

// Function EOSCore.EOSCorePlayerDataStorageQueryFile.EOSPlayerDataStorageQueryFileAsync
// 0x0048 (0x0048 - 0x0000)
struct EOSCorePlayerDataStorageQueryFile_EOSPlayerDataStorageQueryFileAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageQueryFileOptions  QueryFileOptions;                                  // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class UEOSCorePlayerDataStorageQueryFile*     ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCorePlayerDataStorageQueryFile_EOSPlayerDataStorageQueryFileAsync) == 0x000008, "Wrong alignment on EOSCorePlayerDataStorageQueryFile_EOSPlayerDataStorageQueryFileAsync");
static_assert(sizeof(EOSCorePlayerDataStorageQueryFile_EOSPlayerDataStorageQueryFileAsync) == 0x000048, "Wrong size on EOSCorePlayerDataStorageQueryFile_EOSPlayerDataStorageQueryFileAsync");
static_assert(offsetof(EOSCorePlayerDataStorageQueryFile_EOSPlayerDataStorageQueryFileAsync, WorldContextObject) == 0x000000, "Member 'EOSCorePlayerDataStorageQueryFile_EOSPlayerDataStorageQueryFileAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageQueryFile_EOSPlayerDataStorageQueryFileAsync, QueryFileOptions) == 0x000008, "Member 'EOSCorePlayerDataStorageQueryFile_EOSPlayerDataStorageQueryFileAsync::QueryFileOptions' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageQueryFile_EOSPlayerDataStorageQueryFileAsync, ReturnValue) == 0x000040, "Member 'EOSCorePlayerDataStorageQueryFile_EOSPlayerDataStorageQueryFileAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCorePlayerDataStorageQueryFile.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCorePlayerDataStorageQueryFile_HandleCallback final
{
public:
	struct FEOSPlayerDataStorageQueryFileCallbackInfo Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29CB[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCorePlayerDataStorageQueryFile_HandleCallback) == 0x000008, "Wrong alignment on EOSCorePlayerDataStorageQueryFile_HandleCallback");
static_assert(sizeof(EOSCorePlayerDataStorageQueryFile_HandleCallback) == 0x000040, "Wrong size on EOSCorePlayerDataStorageQueryFile_HandleCallback");
static_assert(offsetof(EOSCorePlayerDataStorageQueryFile_HandleCallback, Data) == 0x000000, "Member 'EOSCorePlayerDataStorageQueryFile_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageQueryFile_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCorePlayerDataStorageQueryFile_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLeaderboardsQueryLeaderboardDefinitions.EOSLeaderboardsQueryLeaderboardDefinitionsAsync
// 0x0060 (0x0060 - 0x0000)
struct EOSCoreLeaderboardsQueryLeaderboardDefinitions_EOSLeaderboardsQueryLeaderboardDefinitionsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsQueryLeaderboardDefinitionsOptions Options;                                           // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreLeaderboardsQueryLeaderboardDefinitions* ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLeaderboardsQueryLeaderboardDefinitions_EOSLeaderboardsQueryLeaderboardDefinitionsAsync) == 0x000008, "Wrong alignment on EOSCoreLeaderboardsQueryLeaderboardDefinitions_EOSLeaderboardsQueryLeaderboardDefinitionsAsync");
static_assert(sizeof(EOSCoreLeaderboardsQueryLeaderboardDefinitions_EOSLeaderboardsQueryLeaderboardDefinitionsAsync) == 0x000060, "Wrong size on EOSCoreLeaderboardsQueryLeaderboardDefinitions_EOSLeaderboardsQueryLeaderboardDefinitionsAsync");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardDefinitions_EOSLeaderboardsQueryLeaderboardDefinitionsAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLeaderboardsQueryLeaderboardDefinitions_EOSLeaderboardsQueryLeaderboardDefinitionsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardDefinitions_EOSLeaderboardsQueryLeaderboardDefinitionsAsync, Options) == 0x000008, "Member 'EOSCoreLeaderboardsQueryLeaderboardDefinitions_EOSLeaderboardsQueryLeaderboardDefinitionsAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardDefinitions_EOSLeaderboardsQueryLeaderboardDefinitionsAsync, ReturnValue) == 0x000058, "Member 'EOSCoreLeaderboardsQueryLeaderboardDefinitions_EOSLeaderboardsQueryLeaderboardDefinitionsAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLeaderboardsQueryLeaderboardDefinitions.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreLeaderboardsQueryLeaderboardDefinitions_HandleCallback final
{
public:
	struct FEOSLeaderboardsOnQueryLeaderboardDefinitionsCompleteCallbackInfo Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29CD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLeaderboardsQueryLeaderboardDefinitions_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLeaderboardsQueryLeaderboardDefinitions_HandleCallback");
static_assert(sizeof(EOSCoreLeaderboardsQueryLeaderboardDefinitions_HandleCallback) == 0x000018, "Wrong size on EOSCoreLeaderboardsQueryLeaderboardDefinitions_HandleCallback");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardDefinitions_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLeaderboardsQueryLeaderboardDefinitions_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardDefinitions_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreLeaderboardsQueryLeaderboardDefinitions_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsRegisterPlayers.EOSSessionsRegisterPlayersAsync
// 0x0030 (0x0030 - 0x0000)
struct EOSCoreSessionsRegisterPlayers_EOSSessionsRegisterPlayersAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsRegisterPlayersOptions     Options;                                           // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreSessionsRegisterPlayers*        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreSessionsRegisterPlayers_EOSSessionsRegisterPlayersAsync) == 0x000008, "Wrong alignment on EOSCoreSessionsRegisterPlayers_EOSSessionsRegisterPlayersAsync");
static_assert(sizeof(EOSCoreSessionsRegisterPlayers_EOSSessionsRegisterPlayersAsync) == 0x000030, "Wrong size on EOSCoreSessionsRegisterPlayers_EOSSessionsRegisterPlayersAsync");
static_assert(offsetof(EOSCoreSessionsRegisterPlayers_EOSSessionsRegisterPlayersAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreSessionsRegisterPlayers_EOSSessionsRegisterPlayersAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsRegisterPlayers_EOSSessionsRegisterPlayersAsync, Options) == 0x000008, "Member 'EOSCoreSessionsRegisterPlayers_EOSSessionsRegisterPlayersAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsRegisterPlayers_EOSSessionsRegisterPlayersAsync, ReturnValue) == 0x000028, "Member 'EOSCoreSessionsRegisterPlayers_EOSSessionsRegisterPlayersAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsRegisterPlayers.HandleCallback
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreSessionsRegisterPlayers_HandleCallback final
{
public:
	struct FEOSSessionsRegisterPlayersCallbackInfo Data;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29CF[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreSessionsRegisterPlayers_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreSessionsRegisterPlayers_HandleCallback");
static_assert(sizeof(EOSCoreSessionsRegisterPlayers_HandleCallback) == 0x000038, "Wrong size on EOSCoreSessionsRegisterPlayers_HandleCallback");
static_assert(offsetof(EOSCoreSessionsRegisterPlayers_HandleCallback, Data) == 0x000000, "Member 'EOSCoreSessionsRegisterPlayers_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsRegisterPlayers_HandleCallback, bWasSuccessful) == 0x000030, "Member 'EOSCoreSessionsRegisterPlayers_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLeaderboardsQueryLeaderboardRanks.EOSLeaderboardsQueryLeaderboardRanksAsync
// 0x0050 (0x0050 - 0x0000)
struct EOSCoreLeaderboardsQueryLeaderboardRanks_EOSLeaderboardsQueryLeaderboardRanksAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsQueryLeaderboardRanksOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreLeaderboardsQueryLeaderboardRanks* ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLeaderboardsQueryLeaderboardRanks_EOSLeaderboardsQueryLeaderboardRanksAsync) == 0x000008, "Wrong alignment on EOSCoreLeaderboardsQueryLeaderboardRanks_EOSLeaderboardsQueryLeaderboardRanksAsync");
static_assert(sizeof(EOSCoreLeaderboardsQueryLeaderboardRanks_EOSLeaderboardsQueryLeaderboardRanksAsync) == 0x000050, "Wrong size on EOSCoreLeaderboardsQueryLeaderboardRanks_EOSLeaderboardsQueryLeaderboardRanksAsync");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardRanks_EOSLeaderboardsQueryLeaderboardRanksAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLeaderboardsQueryLeaderboardRanks_EOSLeaderboardsQueryLeaderboardRanksAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardRanks_EOSLeaderboardsQueryLeaderboardRanksAsync, Options) == 0x000008, "Member 'EOSCoreLeaderboardsQueryLeaderboardRanks_EOSLeaderboardsQueryLeaderboardRanksAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardRanks_EOSLeaderboardsQueryLeaderboardRanksAsync, ReturnValue) == 0x000048, "Member 'EOSCoreLeaderboardsQueryLeaderboardRanks_EOSLeaderboardsQueryLeaderboardRanksAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLeaderboardsQueryLeaderboardRanks.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreLeaderboardsQueryLeaderboardRanks_HandleCallback final
{
public:
	struct FEOSLeaderboardsOnQueryLeaderboardRanksCompleteCallbackInfo Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D1[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLeaderboardsQueryLeaderboardRanks_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLeaderboardsQueryLeaderboardRanks_HandleCallback");
static_assert(sizeof(EOSCoreLeaderboardsQueryLeaderboardRanks_HandleCallback) == 0x000018, "Wrong size on EOSCoreLeaderboardsQueryLeaderboardRanks_HandleCallback");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardRanks_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLeaderboardsQueryLeaderboardRanks_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardRanks_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreLeaderboardsQueryLeaderboardRanks_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLeaderboardsQueryLeaderboardUserScores.EOSLeaderboardsQueryLeaderboardUserScoresAsync
// 0x0080 (0x0080 - 0x0000)
struct EOSCoreLeaderboardsQueryLeaderboardUserScores_EOSLeaderboardsQueryLeaderboardUserScoresAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLeaderboardsQueryLeaderboardUserScoresOptions Options;                                           // 0x0008(0x0070)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreLeaderboardsQueryLeaderboardUserScores* ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLeaderboardsQueryLeaderboardUserScores_EOSLeaderboardsQueryLeaderboardUserScoresAsync) == 0x000008, "Wrong alignment on EOSCoreLeaderboardsQueryLeaderboardUserScores_EOSLeaderboardsQueryLeaderboardUserScoresAsync");
static_assert(sizeof(EOSCoreLeaderboardsQueryLeaderboardUserScores_EOSLeaderboardsQueryLeaderboardUserScoresAsync) == 0x000080, "Wrong size on EOSCoreLeaderboardsQueryLeaderboardUserScores_EOSLeaderboardsQueryLeaderboardUserScoresAsync");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardUserScores_EOSLeaderboardsQueryLeaderboardUserScoresAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLeaderboardsQueryLeaderboardUserScores_EOSLeaderboardsQueryLeaderboardUserScoresAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardUserScores_EOSLeaderboardsQueryLeaderboardUserScoresAsync, Options) == 0x000008, "Member 'EOSCoreLeaderboardsQueryLeaderboardUserScores_EOSLeaderboardsQueryLeaderboardUserScoresAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardUserScores_EOSLeaderboardsQueryLeaderboardUserScoresAsync, ReturnValue) == 0x000078, "Member 'EOSCoreLeaderboardsQueryLeaderboardUserScores_EOSLeaderboardsQueryLeaderboardUserScoresAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLeaderboardsQueryLeaderboardUserScores.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreLeaderboardsQueryLeaderboardUserScores_HandleCallback final
{
public:
	struct FEOSLeaderboardsOnQueryLeaderboardUserScoresCompleteCallbackInfo Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D3[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLeaderboardsQueryLeaderboardUserScores_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLeaderboardsQueryLeaderboardUserScores_HandleCallback");
static_assert(sizeof(EOSCoreLeaderboardsQueryLeaderboardUserScores_HandleCallback) == 0x000018, "Wrong size on EOSCoreLeaderboardsQueryLeaderboardUserScores_HandleCallback");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardUserScores_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLeaderboardsQueryLeaderboardUserScores_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLeaderboardsQueryLeaderboardUserScores_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreLeaderboardsQueryLeaderboardUserScores_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyAddNotifyJoinLobbyAccepted
// 0x0028 (0x0028 - 0x0000)
struct CoreLobby_EOSLobbyAddNotifyJoinLobbyAccepted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyAddNotifyJoinLobbyAcceptedOptions Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyJoinLobbyAcceptedCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D5[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyAddNotifyJoinLobbyAccepted) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyAddNotifyJoinLobbyAccepted");
static_assert(sizeof(CoreLobby_EOSLobbyAddNotifyJoinLobbyAccepted) == 0x000028, "Wrong size on CoreLobby_EOSLobbyAddNotifyJoinLobbyAccepted");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyJoinLobbyAccepted, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyAddNotifyJoinLobbyAccepted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyJoinLobbyAccepted, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyAddNotifyJoinLobbyAccepted::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyJoinLobbyAccepted, Callback) == 0x00000C, "Member 'CoreLobby_EOSLobbyAddNotifyJoinLobbyAccepted::Callback' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyJoinLobbyAccepted, ReturnValue) == 0x000020, "Member 'CoreLobby_EOSLobbyAddNotifyJoinLobbyAccepted::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyAddNotifyLobbyInviteAccepted
// 0x0028 (0x0028 - 0x0000)
struct CoreLobby_EOSLobbyAddNotifyLobbyInviteAccepted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyAddNotifyLobbyInviteAcceptedOptions Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D6[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSLobbyInviteAcceptedCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D7[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyAddNotifyLobbyInviteAccepted) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyAddNotifyLobbyInviteAccepted");
static_assert(sizeof(CoreLobby_EOSLobbyAddNotifyLobbyInviteAccepted) == 0x000028, "Wrong size on CoreLobby_EOSLobbyAddNotifyLobbyInviteAccepted");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyInviteAccepted, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyInviteAccepted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyInviteAccepted, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyInviteAccepted::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyInviteAccepted, Callback) == 0x00000C, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyInviteAccepted::Callback' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyInviteAccepted, ReturnValue) == 0x000020, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyInviteAccepted::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyAddNotifyLobbyInviteReceived
// 0x0020 (0x0020 - 0x0000)
struct CoreLobby_EOSLobbyAddNotifyLobbyInviteReceived final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyInviteReceivedCallbackInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyAddNotifyLobbyInviteReceived) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyAddNotifyLobbyInviteReceived");
static_assert(sizeof(CoreLobby_EOSLobbyAddNotifyLobbyInviteReceived) == 0x000020, "Wrong size on CoreLobby_EOSLobbyAddNotifyLobbyInviteReceived");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyInviteReceived, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyInviteReceived::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyInviteReceived, Callback) == 0x000008, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyInviteReceived::Callback' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyInviteReceived, ReturnValue) == 0x000018, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyInviteReceived::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyAddNotifyLobbyInviteRejected
// 0x0028 (0x0028 - 0x0000)
struct CoreLobby_EOSLobbyAddNotifyLobbyInviteRejected final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyAddNotifyLobbyInviteRejectedOptions Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D8[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSLobbyLobbyInviteRejectedCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D9[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyAddNotifyLobbyInviteRejected) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyAddNotifyLobbyInviteRejected");
static_assert(sizeof(CoreLobby_EOSLobbyAddNotifyLobbyInviteRejected) == 0x000028, "Wrong size on CoreLobby_EOSLobbyAddNotifyLobbyInviteRejected");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyInviteRejected, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyInviteRejected::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyInviteRejected, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyInviteRejected::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyInviteRejected, Callback) == 0x00000C, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyInviteRejected::Callback' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyInviteRejected, ReturnValue) == 0x000020, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyInviteRejected::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyAddNotifyLobbyMemberStatusReceived
// 0x0020 (0x0020 - 0x0000)
struct CoreLobby_EOSLobbyAddNotifyLobbyMemberStatusReceived final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyMemberStatusReceivedCallbackInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyAddNotifyLobbyMemberStatusReceived) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyAddNotifyLobbyMemberStatusReceived");
static_assert(sizeof(CoreLobby_EOSLobbyAddNotifyLobbyMemberStatusReceived) == 0x000020, "Wrong size on CoreLobby_EOSLobbyAddNotifyLobbyMemberStatusReceived");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyMemberStatusReceived, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyMemberStatusReceived::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyMemberStatusReceived, Callback) == 0x000008, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyMemberStatusReceived::Callback' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyMemberStatusReceived, ReturnValue) == 0x000018, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyMemberStatusReceived::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyAddNotifyLobbyMemberUpdateReceived
// 0x0020 (0x0020 - 0x0000)
struct CoreLobby_EOSLobbyAddNotifyLobbyMemberUpdateReceived final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyMemberUpdateReceivedCallbackInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyAddNotifyLobbyMemberUpdateReceived) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyAddNotifyLobbyMemberUpdateReceived");
static_assert(sizeof(CoreLobby_EOSLobbyAddNotifyLobbyMemberUpdateReceived) == 0x000020, "Wrong size on CoreLobby_EOSLobbyAddNotifyLobbyMemberUpdateReceived");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyMemberUpdateReceived, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyMemberUpdateReceived::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyMemberUpdateReceived, Callback) == 0x000008, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyMemberUpdateReceived::Callback' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyMemberUpdateReceived, ReturnValue) == 0x000018, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyMemberUpdateReceived::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyAddNotifyLobbyUpdateReceived
// 0x0020 (0x0020 - 0x0000)
struct CoreLobby_EOSLobbyAddNotifyLobbyUpdateReceived final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyUpdateReceivedCallbackInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyAddNotifyLobbyUpdateReceived) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyAddNotifyLobbyUpdateReceived");
static_assert(sizeof(CoreLobby_EOSLobbyAddNotifyLobbyUpdateReceived) == 0x000020, "Wrong size on CoreLobby_EOSLobbyAddNotifyLobbyUpdateReceived");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyUpdateReceived, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyUpdateReceived::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyUpdateReceived, Callback) == 0x000008, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyUpdateReceived::Callback' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyLobbyUpdateReceived, ReturnValue) == 0x000018, "Member 'CoreLobby_EOSLobbyAddNotifyLobbyUpdateReceived::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyAddNotifyRTCRoomConnectionChanged
// 0x0058 (0x0058 - 0x0000)
struct CoreLobby_EOSLobbyAddNotifyRTCRoomConnectionChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyAddNotifyRTCRoomConnectionChangedOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyRTCRoomConnectionChangedCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyAddNotifyRTCRoomConnectionChanged) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyAddNotifyRTCRoomConnectionChanged");
static_assert(sizeof(CoreLobby_EOSLobbyAddNotifyRTCRoomConnectionChanged) == 0x000058, "Wrong size on CoreLobby_EOSLobbyAddNotifyRTCRoomConnectionChanged");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyRTCRoomConnectionChanged, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyAddNotifyRTCRoomConnectionChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyRTCRoomConnectionChanged, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyAddNotifyRTCRoomConnectionChanged::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyRTCRoomConnectionChanged, Callback) == 0x000040, "Member 'CoreLobby_EOSLobbyAddNotifyRTCRoomConnectionChanged::Callback' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifyRTCRoomConnectionChanged, ReturnValue) == 0x000050, "Member 'CoreLobby_EOSLobbyAddNotifyRTCRoomConnectionChanged::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyAddNotifySendLobbyNativeInviteRequested
// 0x0028 (0x0028 - 0x0000)
struct CoreLobby_EOSLobbyAddNotifySendLobbyNativeInviteRequested final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyAddNotifySendLobbyNativeInviteRequestedOptions Options;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29DA[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSLobbySendLobbyNativeInviteRequestedCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29DB[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyAddNotifySendLobbyNativeInviteRequested) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyAddNotifySendLobbyNativeInviteRequested");
static_assert(sizeof(CoreLobby_EOSLobbyAddNotifySendLobbyNativeInviteRequested) == 0x000028, "Wrong size on CoreLobby_EOSLobbyAddNotifySendLobbyNativeInviteRequested");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifySendLobbyNativeInviteRequested, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyAddNotifySendLobbyNativeInviteRequested::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifySendLobbyNativeInviteRequested, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyAddNotifySendLobbyNativeInviteRequested::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifySendLobbyNativeInviteRequested, Callback) == 0x00000C, "Member 'CoreLobby_EOSLobbyAddNotifySendLobbyNativeInviteRequested::Callback' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyAddNotifySendLobbyNativeInviteRequested, ReturnValue) == 0x000020, "Member 'CoreLobby_EOSLobbyAddNotifySendLobbyNativeInviteRequested::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyCopyLobbyDetailsHandle
// 0x0050 (0x0050 - 0x0000)
struct CoreLobby_EOSLobbyCopyLobbyDetailsHandle final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyCopyLobbyDetailsHandleOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      OutLobbyDetailsHandle;                             // 0x0040(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29DC[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyCopyLobbyDetailsHandle) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyCopyLobbyDetailsHandle");
static_assert(sizeof(CoreLobby_EOSLobbyCopyLobbyDetailsHandle) == 0x000050, "Wrong size on CoreLobby_EOSLobbyCopyLobbyDetailsHandle");
static_assert(offsetof(CoreLobby_EOSLobbyCopyLobbyDetailsHandle, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyCopyLobbyDetailsHandle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCopyLobbyDetailsHandle, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyCopyLobbyDetailsHandle::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCopyLobbyDetailsHandle, OutLobbyDetailsHandle) == 0x000040, "Member 'CoreLobby_EOSLobbyCopyLobbyDetailsHandle::OutLobbyDetailsHandle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCopyLobbyDetailsHandle, ReturnValue) == 0x000048, "Member 'CoreLobby_EOSLobbyCopyLobbyDetailsHandle::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyCopyLobbyDetailsHandleByInviteId
// 0x0030 (0x0030 - 0x0000)
struct CoreLobby_EOSLobbyCopyLobbyDetailsHandleByInviteId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyCopyLobbyDetailsHandleByInviteIdOptions Options;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      OutLobbyDetailsHandle;                             // 0x0020(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29DD[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyCopyLobbyDetailsHandleByInviteId) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyCopyLobbyDetailsHandleByInviteId");
static_assert(sizeof(CoreLobby_EOSLobbyCopyLobbyDetailsHandleByInviteId) == 0x000030, "Wrong size on CoreLobby_EOSLobbyCopyLobbyDetailsHandleByInviteId");
static_assert(offsetof(CoreLobby_EOSLobbyCopyLobbyDetailsHandleByInviteId, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyCopyLobbyDetailsHandleByInviteId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCopyLobbyDetailsHandleByInviteId, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyCopyLobbyDetailsHandleByInviteId::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCopyLobbyDetailsHandleByInviteId, OutLobbyDetailsHandle) == 0x000020, "Member 'CoreLobby_EOSLobbyCopyLobbyDetailsHandleByInviteId::OutLobbyDetailsHandle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCopyLobbyDetailsHandleByInviteId, ReturnValue) == 0x000028, "Member 'CoreLobby_EOSLobbyCopyLobbyDetailsHandleByInviteId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyCopyLobbyDetailsHandleByUiEventId
// 0x0020 (0x0020 - 0x0000)
struct CoreLobby_EOSLobbyCopyLobbyDetailsHandleByUiEventId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyCopyLobbyDetailsHandleByUiEventIdOptions Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      OutLobbyDetailsHandle;                             // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29DE[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyCopyLobbyDetailsHandleByUiEventId) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyCopyLobbyDetailsHandleByUiEventId");
static_assert(sizeof(CoreLobby_EOSLobbyCopyLobbyDetailsHandleByUiEventId) == 0x000020, "Wrong size on CoreLobby_EOSLobbyCopyLobbyDetailsHandleByUiEventId");
static_assert(offsetof(CoreLobby_EOSLobbyCopyLobbyDetailsHandleByUiEventId, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyCopyLobbyDetailsHandleByUiEventId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCopyLobbyDetailsHandleByUiEventId, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyCopyLobbyDetailsHandleByUiEventId::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCopyLobbyDetailsHandleByUiEventId, OutLobbyDetailsHandle) == 0x000010, "Member 'CoreLobby_EOSLobbyCopyLobbyDetailsHandleByUiEventId::OutLobbyDetailsHandle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCopyLobbyDetailsHandleByUiEventId, ReturnValue) == 0x000018, "Member 'CoreLobby_EOSLobbyCopyLobbyDetailsHandleByUiEventId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyCreateLobbySearch
// 0x0020 (0x0020 - 0x0000)
struct CoreLobby_EOSLobbyCreateLobbySearch final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyCreateLobbySearchOptions      Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSHLobbySearch                       OutLobbySearchHandle;                              // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29DF[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyCreateLobbySearch) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyCreateLobbySearch");
static_assert(sizeof(CoreLobby_EOSLobbyCreateLobbySearch) == 0x000020, "Wrong size on CoreLobby_EOSLobbyCreateLobbySearch");
static_assert(offsetof(CoreLobby_EOSLobbyCreateLobbySearch, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyCreateLobbySearch::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCreateLobbySearch, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyCreateLobbySearch::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCreateLobbySearch, OutLobbySearchHandle) == 0x000010, "Member 'CoreLobby_EOSLobbyCreateLobbySearch::OutLobbySearchHandle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCreateLobbySearch, ReturnValue) == 0x000018, "Member 'CoreLobby_EOSLobbyCreateLobbySearch::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyDetailsCopyAttributeByIndex
// 0x0058 (0x0058 - 0x0000)
struct CoreLobby_EOSLobbyDetailsCopyAttributeByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyDetailsCopyAttributeByIndexOptions Options;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSLobbyAttribute                     OutAttribute;                                      // 0x0018(0x0038)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E0[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyDetailsCopyAttributeByIndex) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyDetailsCopyAttributeByIndex");
static_assert(sizeof(CoreLobby_EOSLobbyDetailsCopyAttributeByIndex) == 0x000058, "Wrong size on CoreLobby_EOSLobbyDetailsCopyAttributeByIndex");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyAttributeByIndex, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyDetailsCopyAttributeByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyAttributeByIndex, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyDetailsCopyAttributeByIndex::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyAttributeByIndex, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyDetailsCopyAttributeByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyAttributeByIndex, OutAttribute) == 0x000018, "Member 'CoreLobby_EOSLobbyDetailsCopyAttributeByIndex::OutAttribute' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyAttributeByIndex, ReturnValue) == 0x000050, "Member 'CoreLobby_EOSLobbyDetailsCopyAttributeByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyDetailsCopyAttributeByKey
// 0x0068 (0x0068 - 0x0000)
struct CoreLobby_EOSLobbyDetailsCopyAttributeByKey final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyDetailsCopyAttributeByKeyOptions Options;                                           // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FEOSLobbyAttribute                     OutAttribute;                                      // 0x0028(0x0038)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E1[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyDetailsCopyAttributeByKey) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyDetailsCopyAttributeByKey");
static_assert(sizeof(CoreLobby_EOSLobbyDetailsCopyAttributeByKey) == 0x000068, "Wrong size on CoreLobby_EOSLobbyDetailsCopyAttributeByKey");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyAttributeByKey, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyDetailsCopyAttributeByKey::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyAttributeByKey, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyDetailsCopyAttributeByKey::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyAttributeByKey, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyDetailsCopyAttributeByKey::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyAttributeByKey, OutAttribute) == 0x000028, "Member 'CoreLobby_EOSLobbyDetailsCopyAttributeByKey::OutAttribute' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyAttributeByKey, ReturnValue) == 0x000060, "Member 'CoreLobby_EOSLobbyDetailsCopyAttributeByKey::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyDetailsCopyInfo
// 0x0078 (0x0078 - 0x0000)
struct CoreLobby_EOSLobbyDetailsCopyInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyDetailsCopyInfoOptions        Options;                                           // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E2[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSLobbyDetailsInfo                   OutLobbyDetailsInfo;                               // 0x0018(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E3[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyDetailsCopyInfo) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyDetailsCopyInfo");
static_assert(sizeof(CoreLobby_EOSLobbyDetailsCopyInfo) == 0x000078, "Wrong size on CoreLobby_EOSLobbyDetailsCopyInfo");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyInfo, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyDetailsCopyInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyInfo, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyDetailsCopyInfo::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyInfo, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyDetailsCopyInfo::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyInfo, OutLobbyDetailsInfo) == 0x000018, "Member 'CoreLobby_EOSLobbyDetailsCopyInfo::OutLobbyDetailsInfo' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyInfo, ReturnValue) == 0x000070, "Member 'CoreLobby_EOSLobbyDetailsCopyInfo::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyDetailsCopyMemberAttributeByIndex
// 0x0080 (0x0080 - 0x0000)
struct CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyDetailsCopyMemberAttributeByIndexOptions Options;                                           // 0x0010(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E4[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSLobbyAttribute                     OutAttribute;                                      // 0x0040(0x0038)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E5[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex");
static_assert(sizeof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex) == 0x000080, "Wrong size on CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex, OutAttribute) == 0x000040, "Member 'CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex::OutAttribute' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex, ReturnValue) == 0x000078, "Member 'CoreLobby_EOSLobbyDetailsCopyMemberAttributeByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyDetailsCopyMemberAttributeByKey
// 0x0088 (0x0088 - 0x0000)
struct CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyDetailsCopyMemberAttributeByKeyOptions Options;                                           // 0x0010(0x0038)(Parm, NativeAccessSpecifierPublic)
	struct FEOSLobbyAttribute                     OutAttribute;                                      // 0x0048(0x0038)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E6[0x7];                                     // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey");
static_assert(sizeof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey) == 0x000088, "Wrong size on CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey, OutAttribute) == 0x000048, "Member 'CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey::OutAttribute' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey, ReturnValue) == 0x000080, "Member 'CoreLobby_EOSLobbyDetailsCopyMemberAttributeByKey::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyDetailsGetAttributeCount
// 0x0018 (0x0018 - 0x0000)
struct CoreLobby_EOSLobbyDetailsGetAttributeCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyDetailsGetAttributeCountOptions Options;                                           // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyDetailsGetAttributeCount) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyDetailsGetAttributeCount");
static_assert(sizeof(CoreLobby_EOSLobbyDetailsGetAttributeCount) == 0x000018, "Wrong size on CoreLobby_EOSLobbyDetailsGetAttributeCount");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetAttributeCount, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyDetailsGetAttributeCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetAttributeCount, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyDetailsGetAttributeCount::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetAttributeCount, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyDetailsGetAttributeCount::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetAttributeCount, ReturnValue) == 0x000014, "Member 'CoreLobby_EOSLobbyDetailsGetAttributeCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyDetailsGetLobbyOwner
// 0x0038 (0x0038 - 0x0000)
struct CoreLobby_EOSLobbyDetailsGetLobbyOwner final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyDetailsGetLobbyOwnerOptions   Options;                                           // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      ReturnValue;                                       // 0x0014(0x0021)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E7[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyDetailsGetLobbyOwner) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyDetailsGetLobbyOwner");
static_assert(sizeof(CoreLobby_EOSLobbyDetailsGetLobbyOwner) == 0x000038, "Wrong size on CoreLobby_EOSLobbyDetailsGetLobbyOwner");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetLobbyOwner, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyDetailsGetLobbyOwner::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetLobbyOwner, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyDetailsGetLobbyOwner::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetLobbyOwner, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyDetailsGetLobbyOwner::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetLobbyOwner, ReturnValue) == 0x000014, "Member 'CoreLobby_EOSLobbyDetailsGetLobbyOwner::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyDetailsGetMemberAttributeCount
// 0x0040 (0x0040 - 0x0000)
struct CoreLobby_EOSLobbyDetailsGetMemberAttributeCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyDetailsGetMemberAttributeCountOptions Options;                                           // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E8[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyDetailsGetMemberAttributeCount) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyDetailsGetMemberAttributeCount");
static_assert(sizeof(CoreLobby_EOSLobbyDetailsGetMemberAttributeCount) == 0x000040, "Wrong size on CoreLobby_EOSLobbyDetailsGetMemberAttributeCount");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetMemberAttributeCount, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyDetailsGetMemberAttributeCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetMemberAttributeCount, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyDetailsGetMemberAttributeCount::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetMemberAttributeCount, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyDetailsGetMemberAttributeCount::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetMemberAttributeCount, ReturnValue) == 0x000038, "Member 'CoreLobby_EOSLobbyDetailsGetMemberAttributeCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyDetailsGetMemberByIndex
// 0x0040 (0x0040 - 0x0000)
struct CoreLobby_EOSLobbyDetailsGetMemberByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyDetailsGetMemberByIndexOptions Options;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSProductUserId                      ReturnValue;                                       // 0x0018(0x0021)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E9[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyDetailsGetMemberByIndex) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyDetailsGetMemberByIndex");
static_assert(sizeof(CoreLobby_EOSLobbyDetailsGetMemberByIndex) == 0x000040, "Wrong size on CoreLobby_EOSLobbyDetailsGetMemberByIndex");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetMemberByIndex, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyDetailsGetMemberByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetMemberByIndex, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyDetailsGetMemberByIndex::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetMemberByIndex, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyDetailsGetMemberByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetMemberByIndex, ReturnValue) == 0x000018, "Member 'CoreLobby_EOSLobbyDetailsGetMemberByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyDetailsGetMemberCount
// 0x0018 (0x0018 - 0x0000)
struct CoreLobby_EOSLobbyDetailsGetMemberCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyDetailsGetMemberCountOptions  Options;                                           // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyDetailsGetMemberCount) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyDetailsGetMemberCount");
static_assert(sizeof(CoreLobby_EOSLobbyDetailsGetMemberCount) == 0x000018, "Wrong size on CoreLobby_EOSLobbyDetailsGetMemberCount");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetMemberCount, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyDetailsGetMemberCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetMemberCount, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyDetailsGetMemberCount::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetMemberCount, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyDetailsGetMemberCount::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsGetMemberCount, ReturnValue) == 0x000014, "Member 'CoreLobby_EOSLobbyDetailsGetMemberCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyDetailsRelease
// 0x0008 (0x0008 - 0x0000)
struct CoreLobby_EOSLobbyDetailsRelease final
{
public:
	struct FEOSHLobbyDetails                      LobbyHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyDetailsRelease) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyDetailsRelease");
static_assert(sizeof(CoreLobby_EOSLobbyDetailsRelease) == 0x000008, "Wrong size on CoreLobby_EOSLobbyDetailsRelease");
static_assert(offsetof(CoreLobby_EOSLobbyDetailsRelease, LobbyHandle) == 0x000000, "Member 'CoreLobby_EOSLobbyDetailsRelease::LobbyHandle' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyGetInviteCount
// 0x0038 (0x0038 - 0x0000)
struct CoreLobby_EOSLobbyGetInviteCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyGetInviteCountOptions         Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29EA[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyGetInviteCount) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyGetInviteCount");
static_assert(sizeof(CoreLobby_EOSLobbyGetInviteCount) == 0x000038, "Wrong size on CoreLobby_EOSLobbyGetInviteCount");
static_assert(offsetof(CoreLobby_EOSLobbyGetInviteCount, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyGetInviteCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyGetInviteCount, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyGetInviteCount::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyGetInviteCount, ReturnValue) == 0x000030, "Member 'CoreLobby_EOSLobbyGetInviteCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyGetInviteIdByIndex
// 0x0050 (0x0050 - 0x0000)
struct CoreLobby_EOSLobbyGetInviteIdByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyGetInviteIdByIndexOptions     Options;                                           // 0x0008(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29EB[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutInviteId;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29EC[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyGetInviteIdByIndex) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyGetInviteIdByIndex");
static_assert(sizeof(CoreLobby_EOSLobbyGetInviteIdByIndex) == 0x000050, "Wrong size on CoreLobby_EOSLobbyGetInviteIdByIndex");
static_assert(offsetof(CoreLobby_EOSLobbyGetInviteIdByIndex, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyGetInviteIdByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyGetInviteIdByIndex, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyGetInviteIdByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyGetInviteIdByIndex, OutInviteId) == 0x000038, "Member 'CoreLobby_EOSLobbyGetInviteIdByIndex::OutInviteId' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyGetInviteIdByIndex, ReturnValue) == 0x000048, "Member 'CoreLobby_EOSLobbyGetInviteIdByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyGetRTCRoomName
// 0x0058 (0x0058 - 0x0000)
struct CoreLobby_EOSLobbyGetRTCRoomName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyGetRTCRoomNameOptions         Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class FString                                 OutBuffer;                                         // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOutBufferLength;                                 // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0054(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29ED[0x3];                                     // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyGetRTCRoomName) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyGetRTCRoomName");
static_assert(sizeof(CoreLobby_EOSLobbyGetRTCRoomName) == 0x000058, "Wrong size on CoreLobby_EOSLobbyGetRTCRoomName");
static_assert(offsetof(CoreLobby_EOSLobbyGetRTCRoomName, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyGetRTCRoomName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyGetRTCRoomName, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyGetRTCRoomName::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyGetRTCRoomName, OutBuffer) == 0x000040, "Member 'CoreLobby_EOSLobbyGetRTCRoomName::OutBuffer' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyGetRTCRoomName, InOutBufferLength) == 0x000050, "Member 'CoreLobby_EOSLobbyGetRTCRoomName::InOutBufferLength' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyGetRTCRoomName, ReturnValue) == 0x000054, "Member 'CoreLobby_EOSLobbyGetRTCRoomName::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyIsRTCRoomConnected
// 0x0048 (0x0048 - 0x0000)
struct CoreLobby_EOSLobbyIsRTCRoomConnected final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyIsRTCRoomConnectedOptions     Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	bool                                          bOutIsConnected;                                   // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0041(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29EE[0x6];                                     // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyIsRTCRoomConnected) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyIsRTCRoomConnected");
static_assert(sizeof(CoreLobby_EOSLobbyIsRTCRoomConnected) == 0x000048, "Wrong size on CoreLobby_EOSLobbyIsRTCRoomConnected");
static_assert(offsetof(CoreLobby_EOSLobbyIsRTCRoomConnected, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyIsRTCRoomConnected::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyIsRTCRoomConnected, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyIsRTCRoomConnected::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyIsRTCRoomConnected, bOutIsConnected) == 0x000040, "Member 'CoreLobby_EOSLobbyIsRTCRoomConnected::bOutIsConnected' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyIsRTCRoomConnected, ReturnValue) == 0x000041, "Member 'CoreLobby_EOSLobbyIsRTCRoomConnected::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationAddAttribute
// 0x0050 (0x0050 - 0x0000)
struct CoreLobby_EOSLobbyModificationAddAttribute final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyModificationAddAttributeOptions Options;                                           // 0x0010(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29EF[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationAddAttribute) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationAddAttribute");
static_assert(sizeof(CoreLobby_EOSLobbyModificationAddAttribute) == 0x000050, "Wrong size on CoreLobby_EOSLobbyModificationAddAttribute");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttribute, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationAddAttribute::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttribute, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationAddAttribute::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttribute, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationAddAttribute::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttribute, ReturnValue) == 0x000048, "Member 'CoreLobby_EOSLobbyModificationAddAttribute::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationAddAttributeBool
// 0x0028 (0x0028 - 0x0000)
struct CoreLobby_EOSLobbyModificationAddAttributeBool final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSELobbyAttributeVisibility                 Visibility;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F0[0x5];                                     // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationAddAttributeBool) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationAddAttributeBool");
static_assert(sizeof(CoreLobby_EOSLobbyModificationAddAttributeBool) == 0x000028, "Wrong size on CoreLobby_EOSLobbyModificationAddAttributeBool");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeBool, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationAddAttributeBool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeBool, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationAddAttributeBool::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeBool, Key) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationAddAttributeBool::Key' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeBool, bValue) == 0x000020, "Member 'CoreLobby_EOSLobbyModificationAddAttributeBool::bValue' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeBool, Visibility) == 0x000021, "Member 'CoreLobby_EOSLobbyModificationAddAttributeBool::Visibility' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeBool, ReturnValue) == 0x000022, "Member 'CoreLobby_EOSLobbyModificationAddAttributeBool::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationAddAttributeDouble
// 0x0038 (0x0038 - 0x0000)
struct CoreLobby_EOSLobbyModificationAddAttributeDouble final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSELobbyAttributeVisibility                 Visibility;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F1[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationAddAttributeDouble) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationAddAttributeDouble");
static_assert(sizeof(CoreLobby_EOSLobbyModificationAddAttributeDouble) == 0x000038, "Wrong size on CoreLobby_EOSLobbyModificationAddAttributeDouble");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeDouble, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationAddAttributeDouble::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeDouble, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationAddAttributeDouble::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeDouble, Key) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationAddAttributeDouble::Key' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeDouble, Value) == 0x000020, "Member 'CoreLobby_EOSLobbyModificationAddAttributeDouble::Value' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeDouble, Visibility) == 0x000030, "Member 'CoreLobby_EOSLobbyModificationAddAttributeDouble::Visibility' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeDouble, ReturnValue) == 0x000031, "Member 'CoreLobby_EOSLobbyModificationAddAttributeDouble::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationAddAttributeInt64
// 0x0038 (0x0038 - 0x0000)
struct CoreLobby_EOSLobbyModificationAddAttributeInt64 final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSELobbyAttributeVisibility                 Visibility;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F2[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationAddAttributeInt64) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationAddAttributeInt64");
static_assert(sizeof(CoreLobby_EOSLobbyModificationAddAttributeInt64) == 0x000038, "Wrong size on CoreLobby_EOSLobbyModificationAddAttributeInt64");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeInt64, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationAddAttributeInt64::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeInt64, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationAddAttributeInt64::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeInt64, Key) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationAddAttributeInt64::Key' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeInt64, Value) == 0x000020, "Member 'CoreLobby_EOSLobbyModificationAddAttributeInt64::Value' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeInt64, Visibility) == 0x000030, "Member 'CoreLobby_EOSLobbyModificationAddAttributeInt64::Visibility' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeInt64, ReturnValue) == 0x000031, "Member 'CoreLobby_EOSLobbyModificationAddAttributeInt64::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationAddAttributeString
// 0x0038 (0x0038 - 0x0000)
struct CoreLobby_EOSLobbyModificationAddAttributeString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSELobbyAttributeVisibility                 Visibility;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F3[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationAddAttributeString) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationAddAttributeString");
static_assert(sizeof(CoreLobby_EOSLobbyModificationAddAttributeString) == 0x000038, "Wrong size on CoreLobby_EOSLobbyModificationAddAttributeString");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeString, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationAddAttributeString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeString, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationAddAttributeString::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeString, Key) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationAddAttributeString::Key' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeString, Value) == 0x000020, "Member 'CoreLobby_EOSLobbyModificationAddAttributeString::Value' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeString, Visibility) == 0x000030, "Member 'CoreLobby_EOSLobbyModificationAddAttributeString::Visibility' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddAttributeString, ReturnValue) == 0x000031, "Member 'CoreLobby_EOSLobbyModificationAddAttributeString::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationAddMemberAttributeBool
// 0x0028 (0x0028 - 0x0000)
struct CoreLobby_EOSLobbyModificationAddMemberAttributeBool final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSELobbyAttributeVisibility                 Visibility;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F4[0x5];                                     // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationAddMemberAttributeBool) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationAddMemberAttributeBool");
static_assert(sizeof(CoreLobby_EOSLobbyModificationAddMemberAttributeBool) == 0x000028, "Wrong size on CoreLobby_EOSLobbyModificationAddMemberAttributeBool");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeBool, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeBool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeBool, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeBool::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeBool, Key) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeBool::Key' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeBool, bValue) == 0x000020, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeBool::bValue' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeBool, Visibility) == 0x000021, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeBool::Visibility' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeBool, ReturnValue) == 0x000022, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeBool::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationAddMemberAttributeDouble
// 0x0038 (0x0038 - 0x0000)
struct CoreLobby_EOSLobbyModificationAddMemberAttributeDouble final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSELobbyAttributeVisibility                 Visibility;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F5[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationAddMemberAttributeDouble) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationAddMemberAttributeDouble");
static_assert(sizeof(CoreLobby_EOSLobbyModificationAddMemberAttributeDouble) == 0x000038, "Wrong size on CoreLobby_EOSLobbyModificationAddMemberAttributeDouble");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeDouble, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeDouble::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeDouble, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeDouble::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeDouble, Key) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeDouble::Key' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeDouble, Value) == 0x000020, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeDouble::Value' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeDouble, Visibility) == 0x000030, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeDouble::Visibility' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeDouble, ReturnValue) == 0x000031, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeDouble::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationAddMemberAttributeInt64
// 0x0038 (0x0038 - 0x0000)
struct CoreLobby_EOSLobbyModificationAddMemberAttributeInt64 final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSELobbyAttributeVisibility                 Visibility;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F6[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationAddMemberAttributeInt64) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationAddMemberAttributeInt64");
static_assert(sizeof(CoreLobby_EOSLobbyModificationAddMemberAttributeInt64) == 0x000038, "Wrong size on CoreLobby_EOSLobbyModificationAddMemberAttributeInt64");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeInt64, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeInt64::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeInt64, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeInt64::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeInt64, Key) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeInt64::Key' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeInt64, Value) == 0x000020, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeInt64::Value' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeInt64, Visibility) == 0x000030, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeInt64::Visibility' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeInt64, ReturnValue) == 0x000031, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeInt64::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationAddMemberAttributeString
// 0x0038 (0x0038 - 0x0000)
struct CoreLobby_EOSLobbyModificationAddMemberAttributeString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSELobbyAttributeVisibility                 Visibility;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F7[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationAddMemberAttributeString) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationAddMemberAttributeString");
static_assert(sizeof(CoreLobby_EOSLobbyModificationAddMemberAttributeString) == 0x000038, "Wrong size on CoreLobby_EOSLobbyModificationAddMemberAttributeString");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeString, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeString, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeString::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeString, Key) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeString::Key' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeString, Value) == 0x000020, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeString::Value' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeString, Visibility) == 0x000030, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeString::Visibility' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationAddMemberAttributeString, ReturnValue) == 0x000031, "Member 'CoreLobby_EOSLobbyModificationAddMemberAttributeString::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationRelease
// 0x0008 (0x0008 - 0x0000)
struct CoreLobby_EOSLobbyModificationRelease final
{
public:
	struct FEOSHLobbyModification                 LobbyModificationHandle;                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyModificationRelease) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationRelease");
static_assert(sizeof(CoreLobby_EOSLobbyModificationRelease) == 0x000008, "Wrong size on CoreLobby_EOSLobbyModificationRelease");
static_assert(offsetof(CoreLobby_EOSLobbyModificationRelease, LobbyModificationHandle) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationRelease::LobbyModificationHandle' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationRemoveAttribute
// 0x0030 (0x0030 - 0x0000)
struct CoreLobby_EOSLobbyModificationRemoveAttribute final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyModificationRemoveAttributeOptions Options;                                           // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F8[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationRemoveAttribute) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationRemoveAttribute");
static_assert(sizeof(CoreLobby_EOSLobbyModificationRemoveAttribute) == 0x000030, "Wrong size on CoreLobby_EOSLobbyModificationRemoveAttribute");
static_assert(offsetof(CoreLobby_EOSLobbyModificationRemoveAttribute, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationRemoveAttribute::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationRemoveAttribute, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationRemoveAttribute::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationRemoveAttribute, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationRemoveAttribute::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationRemoveAttribute, ReturnValue) == 0x000028, "Member 'CoreLobby_EOSLobbyModificationRemoveAttribute::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationRemoveMemberAttribute
// 0x0030 (0x0030 - 0x0000)
struct CoreLobby_EOSLobbyModificationRemoveMemberAttribute final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyModificationRemoveMemberAttributeOptions Options;                                           // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F9[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationRemoveMemberAttribute) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationRemoveMemberAttribute");
static_assert(sizeof(CoreLobby_EOSLobbyModificationRemoveMemberAttribute) == 0x000030, "Wrong size on CoreLobby_EOSLobbyModificationRemoveMemberAttribute");
static_assert(offsetof(CoreLobby_EOSLobbyModificationRemoveMemberAttribute, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationRemoveMemberAttribute::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationRemoveMemberAttribute, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationRemoveMemberAttribute::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationRemoveMemberAttribute, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationRemoveMemberAttribute::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationRemoveMemberAttribute, ReturnValue) == 0x000028, "Member 'CoreLobby_EOSLobbyModificationRemoveMemberAttribute::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationSetBucketId
// 0x0030 (0x0030 - 0x0000)
struct CoreLobby_EOSLobbyModificationSetBucketId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyModificationSetBucketIdOptions Options;                                           // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29FA[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationSetBucketId) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationSetBucketId");
static_assert(sizeof(CoreLobby_EOSLobbyModificationSetBucketId) == 0x000030, "Wrong size on CoreLobby_EOSLobbyModificationSetBucketId");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetBucketId, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationSetBucketId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetBucketId, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationSetBucketId::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetBucketId, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationSetBucketId::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetBucketId, ReturnValue) == 0x000028, "Member 'CoreLobby_EOSLobbyModificationSetBucketId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationSetInvitesAllowed
// 0x0020 (0x0020 - 0x0000)
struct CoreLobby_EOSLobbyModificationSetInvitesAllowed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyModificationSetInvitesAllowedOptions Options;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29FB[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationSetInvitesAllowed) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationSetInvitesAllowed");
static_assert(sizeof(CoreLobby_EOSLobbyModificationSetInvitesAllowed) == 0x000020, "Wrong size on CoreLobby_EOSLobbyModificationSetInvitesAllowed");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetInvitesAllowed, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationSetInvitesAllowed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetInvitesAllowed, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationSetInvitesAllowed::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetInvitesAllowed, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationSetInvitesAllowed::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetInvitesAllowed, ReturnValue) == 0x000018, "Member 'CoreLobby_EOSLobbyModificationSetInvitesAllowed::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationSetMaxMembers
// 0x0020 (0x0020 - 0x0000)
struct CoreLobby_EOSLobbyModificationSetMaxMembers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyModificationSetMaxMembersOptions Options;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29FC[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationSetMaxMembers) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationSetMaxMembers");
static_assert(sizeof(CoreLobby_EOSLobbyModificationSetMaxMembers) == 0x000020, "Wrong size on CoreLobby_EOSLobbyModificationSetMaxMembers");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetMaxMembers, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationSetMaxMembers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetMaxMembers, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationSetMaxMembers::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetMaxMembers, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationSetMaxMembers::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetMaxMembers, ReturnValue) == 0x000018, "Member 'CoreLobby_EOSLobbyModificationSetMaxMembers::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyModificationSetPermissionLevel
// 0x0020 (0x0020 - 0x0000)
struct CoreLobby_EOSLobbyModificationSetPermissionLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyModificationSetPermissionLevelOptions Options;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29FD[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyModificationSetPermissionLevel) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyModificationSetPermissionLevel");
static_assert(sizeof(CoreLobby_EOSLobbyModificationSetPermissionLevel) == 0x000020, "Wrong size on CoreLobby_EOSLobbyModificationSetPermissionLevel");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetPermissionLevel, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyModificationSetPermissionLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetPermissionLevel, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbyModificationSetPermissionLevel::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetPermissionLevel, Options) == 0x000010, "Member 'CoreLobby_EOSLobbyModificationSetPermissionLevel::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyModificationSetPermissionLevel, ReturnValue) == 0x000018, "Member 'CoreLobby_EOSLobbyModificationSetPermissionLevel::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyRemoveNotifyJoinLobbyAccepted
// 0x0010 (0x0010 - 0x0000)
struct CoreLobby_EOSLobbyRemoveNotifyJoinLobbyAccepted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyRemoveNotifyJoinLobbyAccepted) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyRemoveNotifyJoinLobbyAccepted");
static_assert(sizeof(CoreLobby_EOSLobbyRemoveNotifyJoinLobbyAccepted) == 0x000010, "Wrong size on CoreLobby_EOSLobbyRemoveNotifyJoinLobbyAccepted");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyJoinLobbyAccepted, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyRemoveNotifyJoinLobbyAccepted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyJoinLobbyAccepted, ID) == 0x000008, "Member 'CoreLobby_EOSLobbyRemoveNotifyJoinLobbyAccepted::ID' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyRemoveNotifyLobbyInviteAccepted
// 0x0010 (0x0010 - 0x0000)
struct CoreLobby_EOSLobbyRemoveNotifyLobbyInviteAccepted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyRemoveNotifyLobbyInviteAccepted) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyRemoveNotifyLobbyInviteAccepted");
static_assert(sizeof(CoreLobby_EOSLobbyRemoveNotifyLobbyInviteAccepted) == 0x000010, "Wrong size on CoreLobby_EOSLobbyRemoveNotifyLobbyInviteAccepted");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyLobbyInviteAccepted, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyRemoveNotifyLobbyInviteAccepted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyLobbyInviteAccepted, ID) == 0x000008, "Member 'CoreLobby_EOSLobbyRemoveNotifyLobbyInviteAccepted::ID' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyRemoveNotifyLobbyInviteReceived
// 0x0010 (0x0010 - 0x0000)
struct CoreLobby_EOSLobbyRemoveNotifyLobbyInviteReceived final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyRemoveNotifyLobbyInviteReceived) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyRemoveNotifyLobbyInviteReceived");
static_assert(sizeof(CoreLobby_EOSLobbyRemoveNotifyLobbyInviteReceived) == 0x000010, "Wrong size on CoreLobby_EOSLobbyRemoveNotifyLobbyInviteReceived");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyLobbyInviteReceived, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyRemoveNotifyLobbyInviteReceived::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyLobbyInviteReceived, ID) == 0x000008, "Member 'CoreLobby_EOSLobbyRemoveNotifyLobbyInviteReceived::ID' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyRemoveNotifyLobbyInviteRejected
// 0x0010 (0x0010 - 0x0000)
struct CoreLobby_EOSLobbyRemoveNotifyLobbyInviteRejected final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyRemoveNotifyLobbyInviteRejected) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyRemoveNotifyLobbyInviteRejected");
static_assert(sizeof(CoreLobby_EOSLobbyRemoveNotifyLobbyInviteRejected) == 0x000010, "Wrong size on CoreLobby_EOSLobbyRemoveNotifyLobbyInviteRejected");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyLobbyInviteRejected, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyRemoveNotifyLobbyInviteRejected::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyLobbyInviteRejected, ID) == 0x000008, "Member 'CoreLobby_EOSLobbyRemoveNotifyLobbyInviteRejected::ID' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyRemoveNotifyLobbyMemberStatusReceived
// 0x0010 (0x0010 - 0x0000)
struct CoreLobby_EOSLobbyRemoveNotifyLobbyMemberStatusReceived final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyRemoveNotifyLobbyMemberStatusReceived) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyRemoveNotifyLobbyMemberStatusReceived");
static_assert(sizeof(CoreLobby_EOSLobbyRemoveNotifyLobbyMemberStatusReceived) == 0x000010, "Wrong size on CoreLobby_EOSLobbyRemoveNotifyLobbyMemberStatusReceived");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyLobbyMemberStatusReceived, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyRemoveNotifyLobbyMemberStatusReceived::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyLobbyMemberStatusReceived, ID) == 0x000008, "Member 'CoreLobby_EOSLobbyRemoveNotifyLobbyMemberStatusReceived::ID' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyRemoveNotifyLobbyMemberUpdateReceived
// 0x0010 (0x0010 - 0x0000)
struct CoreLobby_EOSLobbyRemoveNotifyLobbyMemberUpdateReceived final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyRemoveNotifyLobbyMemberUpdateReceived) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyRemoveNotifyLobbyMemberUpdateReceived");
static_assert(sizeof(CoreLobby_EOSLobbyRemoveNotifyLobbyMemberUpdateReceived) == 0x000010, "Wrong size on CoreLobby_EOSLobbyRemoveNotifyLobbyMemberUpdateReceived");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyLobbyMemberUpdateReceived, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyRemoveNotifyLobbyMemberUpdateReceived::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyLobbyMemberUpdateReceived, ID) == 0x000008, "Member 'CoreLobby_EOSLobbyRemoveNotifyLobbyMemberUpdateReceived::ID' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyRemoveNotifyLobbyUpdateReceived
// 0x0010 (0x0010 - 0x0000)
struct CoreLobby_EOSLobbyRemoveNotifyLobbyUpdateReceived final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyRemoveNotifyLobbyUpdateReceived) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyRemoveNotifyLobbyUpdateReceived");
static_assert(sizeof(CoreLobby_EOSLobbyRemoveNotifyLobbyUpdateReceived) == 0x000010, "Wrong size on CoreLobby_EOSLobbyRemoveNotifyLobbyUpdateReceived");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyLobbyUpdateReceived, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyRemoveNotifyLobbyUpdateReceived::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyLobbyUpdateReceived, ID) == 0x000008, "Member 'CoreLobby_EOSLobbyRemoveNotifyLobbyUpdateReceived::ID' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyRemoveNotifyRTCRoomConnectionChanged
// 0x0010 (0x0010 - 0x0000)
struct CoreLobby_EOSLobbyRemoveNotifyRTCRoomConnectionChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyRemoveNotifyRTCRoomConnectionChanged) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyRemoveNotifyRTCRoomConnectionChanged");
static_assert(sizeof(CoreLobby_EOSLobbyRemoveNotifyRTCRoomConnectionChanged) == 0x000010, "Wrong size on CoreLobby_EOSLobbyRemoveNotifyRTCRoomConnectionChanged");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyRTCRoomConnectionChanged, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyRemoveNotifyRTCRoomConnectionChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifyRTCRoomConnectionChanged, ID) == 0x000008, "Member 'CoreLobby_EOSLobbyRemoveNotifyRTCRoomConnectionChanged::ID' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyRemoveNotifySendLobbyNativeInviteRequested
// 0x0010 (0x0010 - 0x0000)
struct CoreLobby_EOSLobbyRemoveNotifySendLobbyNativeInviteRequested final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyRemoveNotifySendLobbyNativeInviteRequested) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyRemoveNotifySendLobbyNativeInviteRequested");
static_assert(sizeof(CoreLobby_EOSLobbyRemoveNotifySendLobbyNativeInviteRequested) == 0x000010, "Wrong size on CoreLobby_EOSLobbyRemoveNotifySendLobbyNativeInviteRequested");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifySendLobbyNativeInviteRequested, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyRemoveNotifySendLobbyNativeInviteRequested::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyRemoveNotifySendLobbyNativeInviteRequested, ID) == 0x000008, "Member 'CoreLobby_EOSLobbyRemoveNotifySendLobbyNativeInviteRequested::ID' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbySearchCopySearchResultByIndex
// 0x0028 (0x0028 - 0x0000)
struct CoreLobby_EOSLobbySearchCopySearchResultByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbySearch                       Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbySearchCopySearchResultByIndexOptions Options;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSHLobbyDetails                      OutLobbyDetailsHandle;                             // 0x0018(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29FE[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbySearchCopySearchResultByIndex) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbySearchCopySearchResultByIndex");
static_assert(sizeof(CoreLobby_EOSLobbySearchCopySearchResultByIndex) == 0x000028, "Wrong size on CoreLobby_EOSLobbySearchCopySearchResultByIndex");
static_assert(offsetof(CoreLobby_EOSLobbySearchCopySearchResultByIndex, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbySearchCopySearchResultByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchCopySearchResultByIndex, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbySearchCopySearchResultByIndex::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchCopySearchResultByIndex, Options) == 0x000010, "Member 'CoreLobby_EOSLobbySearchCopySearchResultByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchCopySearchResultByIndex, OutLobbyDetailsHandle) == 0x000018, "Member 'CoreLobby_EOSLobbySearchCopySearchResultByIndex::OutLobbyDetailsHandle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchCopySearchResultByIndex, ReturnValue) == 0x000020, "Member 'CoreLobby_EOSLobbySearchCopySearchResultByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbySearchGetSearchResultCount
// 0x0018 (0x0018 - 0x0000)
struct CoreLobby_EOSLobbySearchGetSearchResultCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbySearch                       Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbySearchGetSearchResultCountOptions Options;                                           // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbySearchGetSearchResultCount) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbySearchGetSearchResultCount");
static_assert(sizeof(CoreLobby_EOSLobbySearchGetSearchResultCount) == 0x000018, "Wrong size on CoreLobby_EOSLobbySearchGetSearchResultCount");
static_assert(offsetof(CoreLobby_EOSLobbySearchGetSearchResultCount, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbySearchGetSearchResultCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchGetSearchResultCount, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbySearchGetSearchResultCount::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchGetSearchResultCount, Options) == 0x000010, "Member 'CoreLobby_EOSLobbySearchGetSearchResultCount::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchGetSearchResultCount, ReturnValue) == 0x000014, "Member 'CoreLobby_EOSLobbySearchGetSearchResultCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbySearchRelease
// 0x0008 (0x0008 - 0x0000)
struct CoreLobby_EOSLobbySearchRelease final
{
public:
	struct FEOSHLobbySearch                       LobbySearchHandle;                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbySearchRelease) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbySearchRelease");
static_assert(sizeof(CoreLobby_EOSLobbySearchRelease) == 0x000008, "Wrong size on CoreLobby_EOSLobbySearchRelease");
static_assert(offsetof(CoreLobby_EOSLobbySearchRelease, LobbySearchHandle) == 0x000000, "Member 'CoreLobby_EOSLobbySearchRelease::LobbySearchHandle' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbySearchRemoveParameter
// 0x0038 (0x0038 - 0x0000)
struct CoreLobby_EOSLobbySearchRemoveParameter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbySearch                       Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbySearchRemoveParameterOptions  Options;                                           // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29FF[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbySearchRemoveParameter) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbySearchRemoveParameter");
static_assert(sizeof(CoreLobby_EOSLobbySearchRemoveParameter) == 0x000038, "Wrong size on CoreLobby_EOSLobbySearchRemoveParameter");
static_assert(offsetof(CoreLobby_EOSLobbySearchRemoveParameter, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbySearchRemoveParameter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchRemoveParameter, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbySearchRemoveParameter::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchRemoveParameter, Options) == 0x000010, "Member 'CoreLobby_EOSLobbySearchRemoveParameter::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchRemoveParameter, ReturnValue) == 0x000030, "Member 'CoreLobby_EOSLobbySearchRemoveParameter::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbySearchSetLobbyId
// 0x0028 (0x0028 - 0x0000)
struct CoreLobby_EOSLobbySearchSetLobbyId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbySearch                       Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbySearchSetLobbyIdOptions       Options;                                           // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A00[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbySearchSetLobbyId) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbySearchSetLobbyId");
static_assert(sizeof(CoreLobby_EOSLobbySearchSetLobbyId) == 0x000028, "Wrong size on CoreLobby_EOSLobbySearchSetLobbyId");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetLobbyId, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbySearchSetLobbyId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetLobbyId, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbySearchSetLobbyId::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetLobbyId, Options) == 0x000010, "Member 'CoreLobby_EOSLobbySearchSetLobbyId::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetLobbyId, ReturnValue) == 0x000020, "Member 'CoreLobby_EOSLobbySearchSetLobbyId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbySearchSetMaxResults
// 0x0020 (0x0020 - 0x0000)
struct CoreLobby_EOSLobbySearchSetMaxResults final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbySearch                       Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbySearchSetMaxResultsOptions    Options;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A01[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbySearchSetMaxResults) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbySearchSetMaxResults");
static_assert(sizeof(CoreLobby_EOSLobbySearchSetMaxResults) == 0x000020, "Wrong size on CoreLobby_EOSLobbySearchSetMaxResults");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetMaxResults, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbySearchSetMaxResults::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetMaxResults, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbySearchSetMaxResults::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetMaxResults, Options) == 0x000010, "Member 'CoreLobby_EOSLobbySearchSetMaxResults::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetMaxResults, ReturnValue) == 0x000018, "Member 'CoreLobby_EOSLobbySearchSetMaxResults::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbySearchSetParameterBool
// 0x0028 (0x0028 - 0x0000)
struct CoreLobby_EOSLobbySearchSetParameterBool final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbySearch                       Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSEComparisonOp                             ComparisonOp;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A02[0x5];                                     // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbySearchSetParameterBool) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbySearchSetParameterBool");
static_assert(sizeof(CoreLobby_EOSLobbySearchSetParameterBool) == 0x000028, "Wrong size on CoreLobby_EOSLobbySearchSetParameterBool");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterBool, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbySearchSetParameterBool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterBool, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbySearchSetParameterBool::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterBool, Key) == 0x000010, "Member 'CoreLobby_EOSLobbySearchSetParameterBool::Key' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterBool, bValue) == 0x000020, "Member 'CoreLobby_EOSLobbySearchSetParameterBool::bValue' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterBool, ComparisonOp) == 0x000021, "Member 'CoreLobby_EOSLobbySearchSetParameterBool::ComparisonOp' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterBool, ReturnValue) == 0x000022, "Member 'CoreLobby_EOSLobbySearchSetParameterBool::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbySearchSetParameterDouble
// 0x0038 (0x0038 - 0x0000)
struct CoreLobby_EOSLobbySearchSetParameterDouble final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbySearch                       Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSEComparisonOp                             ComparisonOp;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A03[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbySearchSetParameterDouble) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbySearchSetParameterDouble");
static_assert(sizeof(CoreLobby_EOSLobbySearchSetParameterDouble) == 0x000038, "Wrong size on CoreLobby_EOSLobbySearchSetParameterDouble");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterDouble, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbySearchSetParameterDouble::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterDouble, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbySearchSetParameterDouble::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterDouble, Key) == 0x000010, "Member 'CoreLobby_EOSLobbySearchSetParameterDouble::Key' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterDouble, Value) == 0x000020, "Member 'CoreLobby_EOSLobbySearchSetParameterDouble::Value' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterDouble, ComparisonOp) == 0x000030, "Member 'CoreLobby_EOSLobbySearchSetParameterDouble::ComparisonOp' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterDouble, ReturnValue) == 0x000031, "Member 'CoreLobby_EOSLobbySearchSetParameterDouble::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbySearchSetParameterInt64
// 0x0038 (0x0038 - 0x0000)
struct CoreLobby_EOSLobbySearchSetParameterInt64 final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbySearch                       Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSEComparisonOp                             ComparisonOp;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A04[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbySearchSetParameterInt64) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbySearchSetParameterInt64");
static_assert(sizeof(CoreLobby_EOSLobbySearchSetParameterInt64) == 0x000038, "Wrong size on CoreLobby_EOSLobbySearchSetParameterInt64");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterInt64, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbySearchSetParameterInt64::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterInt64, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbySearchSetParameterInt64::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterInt64, Key) == 0x000010, "Member 'CoreLobby_EOSLobbySearchSetParameterInt64::Key' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterInt64, Value) == 0x000020, "Member 'CoreLobby_EOSLobbySearchSetParameterInt64::Value' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterInt64, ComparisonOp) == 0x000030, "Member 'CoreLobby_EOSLobbySearchSetParameterInt64::ComparisonOp' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterInt64, ReturnValue) == 0x000031, "Member 'CoreLobby_EOSLobbySearchSetParameterInt64::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbySearchSetParameterString
// 0x0038 (0x0038 - 0x0000)
struct CoreLobby_EOSLobbySearchSetParameterString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbySearch                       Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSEComparisonOp                             ComparisonOp;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A05[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbySearchSetParameterString) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbySearchSetParameterString");
static_assert(sizeof(CoreLobby_EOSLobbySearchSetParameterString) == 0x000038, "Wrong size on CoreLobby_EOSLobbySearchSetParameterString");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterString, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbySearchSetParameterString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterString, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbySearchSetParameterString::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterString, Key) == 0x000010, "Member 'CoreLobby_EOSLobbySearchSetParameterString::Key' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterString, Value) == 0x000020, "Member 'CoreLobby_EOSLobbySearchSetParameterString::Value' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterString, ComparisonOp) == 0x000030, "Member 'CoreLobby_EOSLobbySearchSetParameterString::ComparisonOp' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetParameterString, ReturnValue) == 0x000031, "Member 'CoreLobby_EOSLobbySearchSetParameterString::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbySearchSetTargetUserId
// 0x0040 (0x0040 - 0x0000)
struct CoreLobby_EOSLobbySearchSetTargetUserId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbySearch                       Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbySearchSetTargetUserIdOptions  Options;                                           // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A06[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbySearchSetTargetUserId) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbySearchSetTargetUserId");
static_assert(sizeof(CoreLobby_EOSLobbySearchSetTargetUserId) == 0x000040, "Wrong size on CoreLobby_EOSLobbySearchSetTargetUserId");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetTargetUserId, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbySearchSetTargetUserId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetTargetUserId, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbySearchSetTargetUserId::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetTargetUserId, Options) == 0x000010, "Member 'CoreLobby_EOSLobbySearchSetTargetUserId::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchSetTargetUserId, ReturnValue) == 0x000038, "Member 'CoreLobby_EOSLobbySearchSetTargetUserId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyUpdateLobbyModification
// 0x0050 (0x0050 - 0x0000)
struct CoreLobby_EOSLobbyUpdateLobbyModification final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyUpdateLobbyModificationOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	struct FEOSHLobbyModification                 OutLobbyModificationHandle;                        // 0x0040(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A07[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobby_EOSLobbyUpdateLobbyModification) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyUpdateLobbyModification");
static_assert(sizeof(CoreLobby_EOSLobbyUpdateLobbyModification) == 0x000050, "Wrong size on CoreLobby_EOSLobbyUpdateLobbyModification");
static_assert(offsetof(CoreLobby_EOSLobbyUpdateLobbyModification, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyUpdateLobbyModification::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyUpdateLobbyModification, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyUpdateLobbyModification::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyUpdateLobbyModification, OutLobbyModificationHandle) == 0x000040, "Member 'CoreLobby_EOSLobbyUpdateLobbyModification::OutLobbyModificationHandle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyUpdateLobbyModification, ReturnValue) == 0x000048, "Member 'CoreLobby_EOSLobbyUpdateLobbyModification::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.GetLobby
// 0x0010 (0x0010 - 0x0000)
struct CoreLobby_GetLobby final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreLobby*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_GetLobby) == 0x000008, "Wrong alignment on CoreLobby_GetLobby");
static_assert(sizeof(CoreLobby_GetLobby) == 0x000010, "Wrong size on CoreLobby_GetLobby");
static_assert(offsetof(CoreLobby_GetLobby, WorldContextObject) == 0x000000, "Member 'CoreLobby_GetLobby::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_GetLobby, ReturnValue) == 0x000008, "Member 'CoreLobby_GetLobby::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyCreateLobby
// 0x0080 (0x0080 - 0x0000)
struct CoreLobby_EOSLobbyCreateLobby final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyCreateLobbyOptions            Options;                                           // 0x0008(0x0068)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyCreateLobbyCallbackInfo& Data)> Callback;                                          // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyCreateLobby) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyCreateLobby");
static_assert(sizeof(CoreLobby_EOSLobbyCreateLobby) == 0x000080, "Wrong size on CoreLobby_EOSLobbyCreateLobby");
static_assert(offsetof(CoreLobby_EOSLobbyCreateLobby, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyCreateLobby::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCreateLobby, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyCreateLobby::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyCreateLobby, Callback) == 0x000070, "Member 'CoreLobby_EOSLobbyCreateLobby::Callback' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyDestroyLobby
// 0x0050 (0x0050 - 0x0000)
struct CoreLobby_EOSLobbyDestroyLobby final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyDestroyLobbyOptions           Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyDestroyLobbyCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyDestroyLobby) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyDestroyLobby");
static_assert(sizeof(CoreLobby_EOSLobbyDestroyLobby) == 0x000050, "Wrong size on CoreLobby_EOSLobbyDestroyLobby");
static_assert(offsetof(CoreLobby_EOSLobbyDestroyLobby, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyDestroyLobby::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDestroyLobby, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyDestroyLobby::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyDestroyLobby, Callback) == 0x000040, "Member 'CoreLobby_EOSLobbyDestroyLobby::Callback' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyHardMuteMember
// 0x0070 (0x0070 - 0x0000)
struct CoreLobby_EOSLobbyHardMuteMember final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyHardMuteMemberOptions         Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyHardMuteMemberCallbackInfo& Data)> Callback;                                          // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyHardMuteMember) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyHardMuteMember");
static_assert(sizeof(CoreLobby_EOSLobbyHardMuteMember) == 0x000070, "Wrong size on CoreLobby_EOSLobbyHardMuteMember");
static_assert(offsetof(CoreLobby_EOSLobbyHardMuteMember, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyHardMuteMember::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyHardMuteMember, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyHardMuteMember::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyHardMuteMember, Callback) == 0x000060, "Member 'CoreLobby_EOSLobbyHardMuteMember::Callback' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyJoinLobby
// 0x0050 (0x0050 - 0x0000)
struct CoreLobby_EOSLobbyJoinLobby final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyJoinLobbyOptions              Options;                                           // 0x0008(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyJoinLobbyCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyJoinLobby) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyJoinLobby");
static_assert(sizeof(CoreLobby_EOSLobbyJoinLobby) == 0x000050, "Wrong size on CoreLobby_EOSLobbyJoinLobby");
static_assert(offsetof(CoreLobby_EOSLobbyJoinLobby, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyJoinLobby::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyJoinLobby, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyJoinLobby::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyJoinLobby, Callback) == 0x000040, "Member 'CoreLobby_EOSLobbyJoinLobby::Callback' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyJoinLobbyById
// 0x0058 (0x0058 - 0x0000)
struct CoreLobby_EOSLobbyJoinLobbyById final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyJoinLobbyByIdOptions          Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyJoinLobbyByIdCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyJoinLobbyById) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyJoinLobbyById");
static_assert(sizeof(CoreLobby_EOSLobbyJoinLobbyById) == 0x000058, "Wrong size on CoreLobby_EOSLobbyJoinLobbyById");
static_assert(offsetof(CoreLobby_EOSLobbyJoinLobbyById, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyJoinLobbyById::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyJoinLobbyById, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyJoinLobbyById::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyJoinLobbyById, Callback) == 0x000048, "Member 'CoreLobby_EOSLobbyJoinLobbyById::Callback' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyKickMember
// 0x0070 (0x0070 - 0x0000)
struct CoreLobby_EOSLobbyKickMember final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyKickMemberOptions             Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyKickMemberCallbackInfo& Data)> Callback;                                          // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyKickMember) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyKickMember");
static_assert(sizeof(CoreLobby_EOSLobbyKickMember) == 0x000070, "Wrong size on CoreLobby_EOSLobbyKickMember");
static_assert(offsetof(CoreLobby_EOSLobbyKickMember, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyKickMember::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyKickMember, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyKickMember::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyKickMember, Callback) == 0x000060, "Member 'CoreLobby_EOSLobbyKickMember::Callback' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyLeaveLobby
// 0x0050 (0x0050 - 0x0000)
struct CoreLobby_EOSLobbyLeaveLobby final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyLeaveLobbyOptions             Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyLeaveLobbyCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyLeaveLobby) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyLeaveLobby");
static_assert(sizeof(CoreLobby_EOSLobbyLeaveLobby) == 0x000050, "Wrong size on CoreLobby_EOSLobbyLeaveLobby");
static_assert(offsetof(CoreLobby_EOSLobbyLeaveLobby, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyLeaveLobby::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyLeaveLobby, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyLeaveLobby::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyLeaveLobby, Callback) == 0x000040, "Member 'CoreLobby_EOSLobbyLeaveLobby::Callback' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyPromoteMember
// 0x0070 (0x0070 - 0x0000)
struct CoreLobby_EOSLobbyPromoteMember final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyPromoteMemberOptions          Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyPromoteMemberCallbackInfo& Data)> Callback;                                          // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyPromoteMember) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyPromoteMember");
static_assert(sizeof(CoreLobby_EOSLobbyPromoteMember) == 0x000070, "Wrong size on CoreLobby_EOSLobbyPromoteMember");
static_assert(offsetof(CoreLobby_EOSLobbyPromoteMember, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyPromoteMember::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyPromoteMember, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyPromoteMember::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyPromoteMember, Callback) == 0x000060, "Member 'CoreLobby_EOSLobbyPromoteMember::Callback' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyQueryInvites
// 0x0040 (0x0040 - 0x0000)
struct CoreLobby_EOSLobbyQueryInvites final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyQueryInvitesOptions           Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyQueryInvitesCallbackInfo& Data)> Callback;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyQueryInvites) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyQueryInvites");
static_assert(sizeof(CoreLobby_EOSLobbyQueryInvites) == 0x000040, "Wrong size on CoreLobby_EOSLobbyQueryInvites");
static_assert(offsetof(CoreLobby_EOSLobbyQueryInvites, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyQueryInvites::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyQueryInvites, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyQueryInvites::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyQueryInvites, Callback) == 0x000030, "Member 'CoreLobby_EOSLobbyQueryInvites::Callback' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyRejectInvite
// 0x0058 (0x0058 - 0x0000)
struct CoreLobby_EOSLobbyRejectInvite final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyRejectInviteOptions           Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyRejectInviteCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyRejectInvite) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyRejectInvite");
static_assert(sizeof(CoreLobby_EOSLobbyRejectInvite) == 0x000058, "Wrong size on CoreLobby_EOSLobbyRejectInvite");
static_assert(offsetof(CoreLobby_EOSLobbyRejectInvite, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyRejectInvite::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyRejectInvite, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyRejectInvite::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyRejectInvite, Callback) == 0x000048, "Member 'CoreLobby_EOSLobbyRejectInvite::Callback' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbySearchFind
// 0x0048 (0x0048 - 0x0000)
struct CoreLobby_EOSLobbySearchFind final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHLobbySearch                       Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbySearchFindOptions             Options;                                           // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbySearchFindCallbackInfo& Data)> Callback;                                          // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbySearchFind) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbySearchFind");
static_assert(sizeof(CoreLobby_EOSLobbySearchFind) == 0x000048, "Wrong size on CoreLobby_EOSLobbySearchFind");
static_assert(offsetof(CoreLobby_EOSLobbySearchFind, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbySearchFind::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchFind, Handle) == 0x000008, "Member 'CoreLobby_EOSLobbySearchFind::Handle' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchFind, Options) == 0x000010, "Member 'CoreLobby_EOSLobbySearchFind::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySearchFind, Callback) == 0x000038, "Member 'CoreLobby_EOSLobbySearchFind::Callback' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbySendInvite
// 0x0070 (0x0070 - 0x0000)
struct CoreLobby_EOSLobbySendInvite final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbySendInviteOptions             Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbySendInviteCallbackInfo& Data)> Callback;                                          // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbySendInvite) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbySendInvite");
static_assert(sizeof(CoreLobby_EOSLobbySendInvite) == 0x000070, "Wrong size on CoreLobby_EOSLobbySendInvite");
static_assert(offsetof(CoreLobby_EOSLobbySendInvite, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbySendInvite::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySendInvite, Options) == 0x000008, "Member 'CoreLobby_EOSLobbySendInvite::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbySendInvite, Callback) == 0x000060, "Member 'CoreLobby_EOSLobbySendInvite::Callback' has a wrong offset!");

// Function EOSCore.CoreLobby.EOSLobbyUpdateLobby
// 0x0028 (0x0028 - 0x0000)
struct CoreLobby_EOSLobbyUpdateLobby final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyUpdateLobbyOptions            Options;                                           // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSLobbyUpdateLobbyCallbackInfo& Data)> Callback;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobby_EOSLobbyUpdateLobby) == 0x000008, "Wrong alignment on CoreLobby_EOSLobbyUpdateLobby");
static_assert(sizeof(CoreLobby_EOSLobbyUpdateLobby) == 0x000028, "Wrong size on CoreLobby_EOSLobbyUpdateLobby");
static_assert(offsetof(CoreLobby_EOSLobbyUpdateLobby, WorldContextObject) == 0x000000, "Member 'CoreLobby_EOSLobbyUpdateLobby::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyUpdateLobby, Options) == 0x000008, "Member 'CoreLobby_EOSLobbyUpdateLobby::Options' has a wrong offset!");
static_assert(offsetof(CoreLobby_EOSLobbyUpdateLobby, Callback) == 0x000018, "Member 'CoreLobby_EOSLobbyUpdateLobby::Callback' has a wrong offset!");

// Function EOSCore.CoreMetrics.GetMetrics
// 0x0010 (0x0010 - 0x0000)
struct CoreMetrics_GetMetrics final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreMetrics*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMetrics_GetMetrics) == 0x000008, "Wrong alignment on CoreMetrics_GetMetrics");
static_assert(sizeof(CoreMetrics_GetMetrics) == 0x000010, "Wrong size on CoreMetrics_GetMetrics");
static_assert(offsetof(CoreMetrics_GetMetrics, WorldContextObject) == 0x000000, "Member 'CoreMetrics_GetMetrics::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreMetrics_GetMetrics, ReturnValue) == 0x000008, "Member 'CoreMetrics_GetMetrics::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreMetrics.EOSMetricsBeginPlayerSession
// 0x0080 (0x0080 - 0x0000)
struct CoreMetrics_EOSMetricsBeginPlayerSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSMetricsBeginPlayerSessionOptions   Options;                                           // 0x0008(0x0070)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A08[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreMetrics_EOSMetricsBeginPlayerSession) == 0x000008, "Wrong alignment on CoreMetrics_EOSMetricsBeginPlayerSession");
static_assert(sizeof(CoreMetrics_EOSMetricsBeginPlayerSession) == 0x000080, "Wrong size on CoreMetrics_EOSMetricsBeginPlayerSession");
static_assert(offsetof(CoreMetrics_EOSMetricsBeginPlayerSession, WorldContextObject) == 0x000000, "Member 'CoreMetrics_EOSMetricsBeginPlayerSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreMetrics_EOSMetricsBeginPlayerSession, Options) == 0x000008, "Member 'CoreMetrics_EOSMetricsBeginPlayerSession::Options' has a wrong offset!");
static_assert(offsetof(CoreMetrics_EOSMetricsBeginPlayerSession, ReturnValue) == 0x000078, "Member 'CoreMetrics_EOSMetricsBeginPlayerSession::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreMetrics.EOSMetricsEndPlayerSession
// 0x0048 (0x0048 - 0x0000)
struct CoreMetrics_EOSMetricsEndPlayerSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSMetricsEndPlayerSessionOptions     Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A09[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreMetrics_EOSMetricsEndPlayerSession) == 0x000008, "Wrong alignment on CoreMetrics_EOSMetricsEndPlayerSession");
static_assert(sizeof(CoreMetrics_EOSMetricsEndPlayerSession) == 0x000048, "Wrong size on CoreMetrics_EOSMetricsEndPlayerSession");
static_assert(offsetof(CoreMetrics_EOSMetricsEndPlayerSession, WorldContextObject) == 0x000000, "Member 'CoreMetrics_EOSMetricsEndPlayerSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreMetrics_EOSMetricsEndPlayerSession, Options) == 0x000008, "Member 'CoreMetrics_EOSMetricsEndPlayerSession::Options' has a wrong offset!");
static_assert(offsetof(CoreMetrics_EOSMetricsEndPlayerSession, ReturnValue) == 0x000040, "Member 'CoreMetrics_EOSMetricsEndPlayerSession::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyCreateLobby.EOSLobbyCreateLobbyAsync
// 0x0078 (0x0078 - 0x0000)
struct EOSCoreLobbyCreateLobby_EOSLobbyCreateLobbyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyCreateLobbyOptions            Options;                                           // 0x0008(0x0068)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreLobbyCreateLobby*               ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLobbyCreateLobby_EOSLobbyCreateLobbyAsync) == 0x000008, "Wrong alignment on EOSCoreLobbyCreateLobby_EOSLobbyCreateLobbyAsync");
static_assert(sizeof(EOSCoreLobbyCreateLobby_EOSLobbyCreateLobbyAsync) == 0x000078, "Wrong size on EOSCoreLobbyCreateLobby_EOSLobbyCreateLobbyAsync");
static_assert(offsetof(EOSCoreLobbyCreateLobby_EOSLobbyCreateLobbyAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLobbyCreateLobby_EOSLobbyCreateLobbyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyCreateLobby_EOSLobbyCreateLobbyAsync, Options) == 0x000008, "Member 'EOSCoreLobbyCreateLobby_EOSLobbyCreateLobbyAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyCreateLobby_EOSLobbyCreateLobbyAsync, ReturnValue) == 0x000070, "Member 'EOSCoreLobbyCreateLobby_EOSLobbyCreateLobbyAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyCreateLobby.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreLobbyCreateLobby_HandleCallback final
{
public:
	struct FEOSLobbyCreateLobbyCallbackInfo       Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0B[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLobbyCreateLobby_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLobbyCreateLobby_HandleCallback");
static_assert(sizeof(EOSCoreLobbyCreateLobby_HandleCallback) == 0x000028, "Wrong size on EOSCoreLobbyCreateLobby_HandleCallback");
static_assert(offsetof(EOSCoreLobbyCreateLobby_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLobbyCreateLobby_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyCreateLobby_HandleCallback, bWasSuccessful) == 0x000020, "Member 'EOSCoreLobbyCreateLobby_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCorePlayerDataStorageDeleteFile.EOSPlayerDataStorageDeleteFileAsync
// 0x0048 (0x0048 - 0x0000)
struct EOSCorePlayerDataStorageDeleteFile_EOSPlayerDataStorageDeleteFileAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageDeleteFileOptions DeleteOptions;                                     // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class UEOSCorePlayerDataStorageDeleteFile*    ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCorePlayerDataStorageDeleteFile_EOSPlayerDataStorageDeleteFileAsync) == 0x000008, "Wrong alignment on EOSCorePlayerDataStorageDeleteFile_EOSPlayerDataStorageDeleteFileAsync");
static_assert(sizeof(EOSCorePlayerDataStorageDeleteFile_EOSPlayerDataStorageDeleteFileAsync) == 0x000048, "Wrong size on EOSCorePlayerDataStorageDeleteFile_EOSPlayerDataStorageDeleteFileAsync");
static_assert(offsetof(EOSCorePlayerDataStorageDeleteFile_EOSPlayerDataStorageDeleteFileAsync, WorldContextObject) == 0x000000, "Member 'EOSCorePlayerDataStorageDeleteFile_EOSPlayerDataStorageDeleteFileAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageDeleteFile_EOSPlayerDataStorageDeleteFileAsync, DeleteOptions) == 0x000008, "Member 'EOSCorePlayerDataStorageDeleteFile_EOSPlayerDataStorageDeleteFileAsync::DeleteOptions' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageDeleteFile_EOSPlayerDataStorageDeleteFileAsync, ReturnValue) == 0x000040, "Member 'EOSCorePlayerDataStorageDeleteFile_EOSPlayerDataStorageDeleteFileAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCorePlayerDataStorageDeleteFile.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCorePlayerDataStorageDeleteFile_HandleCallback final
{
public:
	struct FEOSPlayerDataStorageDeleteFileCallbackInfo Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0D[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCorePlayerDataStorageDeleteFile_HandleCallback) == 0x000008, "Wrong alignment on EOSCorePlayerDataStorageDeleteFile_HandleCallback");
static_assert(sizeof(EOSCorePlayerDataStorageDeleteFile_HandleCallback) == 0x000040, "Wrong size on EOSCorePlayerDataStorageDeleteFile_HandleCallback");
static_assert(offsetof(EOSCorePlayerDataStorageDeleteFile_HandleCallback, Data) == 0x000000, "Member 'EOSCorePlayerDataStorageDeleteFile_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageDeleteFile_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCorePlayerDataStorageDeleteFile_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyDestroyLobby.EOSLobbyDestroyLobbyAsync
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreLobbyDestroyLobby_EOSLobbyDestroyLobbyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyDestroyLobbyOptions           Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreLobbyDestroyLobby*              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLobbyDestroyLobby_EOSLobbyDestroyLobbyAsync) == 0x000008, "Wrong alignment on EOSCoreLobbyDestroyLobby_EOSLobbyDestroyLobbyAsync");
static_assert(sizeof(EOSCoreLobbyDestroyLobby_EOSLobbyDestroyLobbyAsync) == 0x000048, "Wrong size on EOSCoreLobbyDestroyLobby_EOSLobbyDestroyLobbyAsync");
static_assert(offsetof(EOSCoreLobbyDestroyLobby_EOSLobbyDestroyLobbyAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLobbyDestroyLobby_EOSLobbyDestroyLobbyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyDestroyLobby_EOSLobbyDestroyLobbyAsync, Options) == 0x000008, "Member 'EOSCoreLobbyDestroyLobby_EOSLobbyDestroyLobbyAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyDestroyLobby_EOSLobbyDestroyLobbyAsync, ReturnValue) == 0x000040, "Member 'EOSCoreLobbyDestroyLobby_EOSLobbyDestroyLobbyAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyDestroyLobby.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreLobbyDestroyLobby_HandleCallback final
{
public:
	struct FEOSLobbyDestroyLobbyCallbackInfo      Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0F[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLobbyDestroyLobby_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLobbyDestroyLobby_HandleCallback");
static_assert(sizeof(EOSCoreLobbyDestroyLobby_HandleCallback) == 0x000028, "Wrong size on EOSCoreLobbyDestroyLobby_HandleCallback");
static_assert(offsetof(EOSCoreLobbyDestroyLobby_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLobbyDestroyLobby_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyDestroyLobby_HandleCallback, bWasSuccessful) == 0x000020, "Member 'EOSCoreLobbyDestroyLobby_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyJoinLobby.EOSLobbyJoinLobbyAsync
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreLobbyJoinLobby_EOSLobbyJoinLobbyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyJoinLobbyOptions              Options;                                           // 0x0008(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreLobbyJoinLobby*                 ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLobbyJoinLobby_EOSLobbyJoinLobbyAsync) == 0x000008, "Wrong alignment on EOSCoreLobbyJoinLobby_EOSLobbyJoinLobbyAsync");
static_assert(sizeof(EOSCoreLobbyJoinLobby_EOSLobbyJoinLobbyAsync) == 0x000048, "Wrong size on EOSCoreLobbyJoinLobby_EOSLobbyJoinLobbyAsync");
static_assert(offsetof(EOSCoreLobbyJoinLobby_EOSLobbyJoinLobbyAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLobbyJoinLobby_EOSLobbyJoinLobbyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyJoinLobby_EOSLobbyJoinLobbyAsync, Options) == 0x000008, "Member 'EOSCoreLobbyJoinLobby_EOSLobbyJoinLobbyAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyJoinLobby_EOSLobbyJoinLobbyAsync, ReturnValue) == 0x000040, "Member 'EOSCoreLobbyJoinLobby_EOSLobbyJoinLobbyAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyJoinLobby.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreLobbyJoinLobby_HandleCallback final
{
public:
	struct FEOSLobbyJoinLobbyCallbackInfo         Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A11[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLobbyJoinLobby_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLobbyJoinLobby_HandleCallback");
static_assert(sizeof(EOSCoreLobbyJoinLobby_HandleCallback) == 0x000028, "Wrong size on EOSCoreLobbyJoinLobby_HandleCallback");
static_assert(offsetof(EOSCoreLobbyJoinLobby_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLobbyJoinLobby_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyJoinLobby_HandleCallback, bWasSuccessful) == 0x000020, "Member 'EOSCoreLobbyJoinLobby_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyLeaveLobby.EOSLobbyLeaveLobbyAsync
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreLobbyLeaveLobby_EOSLobbyLeaveLobbyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyLeaveLobbyOptions             Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreLobbyLeaveLobby*                ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLobbyLeaveLobby_EOSLobbyLeaveLobbyAsync) == 0x000008, "Wrong alignment on EOSCoreLobbyLeaveLobby_EOSLobbyLeaveLobbyAsync");
static_assert(sizeof(EOSCoreLobbyLeaveLobby_EOSLobbyLeaveLobbyAsync) == 0x000048, "Wrong size on EOSCoreLobbyLeaveLobby_EOSLobbyLeaveLobbyAsync");
static_assert(offsetof(EOSCoreLobbyLeaveLobby_EOSLobbyLeaveLobbyAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLobbyLeaveLobby_EOSLobbyLeaveLobbyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyLeaveLobby_EOSLobbyLeaveLobbyAsync, Options) == 0x000008, "Member 'EOSCoreLobbyLeaveLobby_EOSLobbyLeaveLobbyAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyLeaveLobby_EOSLobbyLeaveLobbyAsync, ReturnValue) == 0x000040, "Member 'EOSCoreLobbyLeaveLobby_EOSLobbyLeaveLobbyAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyLeaveLobby.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreLobbyLeaveLobby_HandleCallback final
{
public:
	struct FEOSLobbyLeaveLobbyCallbackInfo        Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A13[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLobbyLeaveLobby_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLobbyLeaveLobby_HandleCallback");
static_assert(sizeof(EOSCoreLobbyLeaveLobby_HandleCallback) == 0x000028, "Wrong size on EOSCoreLobbyLeaveLobby_HandleCallback");
static_assert(offsetof(EOSCoreLobbyLeaveLobby_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLobbyLeaveLobby_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyLeaveLobby_HandleCallback, bWasSuccessful) == 0x000020, "Member 'EOSCoreLobbyLeaveLobby_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyUpdateLobby.EOSLobbyUpdateLobbyAsync
// 0x0020 (0x0020 - 0x0000)
struct EOSCoreLobbyUpdateLobby_EOSLobbyUpdateLobbyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyUpdateLobbyOptions            Options;                                           // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreLobbyUpdateLobby*               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLobbyUpdateLobby_EOSLobbyUpdateLobbyAsync) == 0x000008, "Wrong alignment on EOSCoreLobbyUpdateLobby_EOSLobbyUpdateLobbyAsync");
static_assert(sizeof(EOSCoreLobbyUpdateLobby_EOSLobbyUpdateLobbyAsync) == 0x000020, "Wrong size on EOSCoreLobbyUpdateLobby_EOSLobbyUpdateLobbyAsync");
static_assert(offsetof(EOSCoreLobbyUpdateLobby_EOSLobbyUpdateLobbyAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLobbyUpdateLobby_EOSLobbyUpdateLobbyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyUpdateLobby_EOSLobbyUpdateLobbyAsync, Options) == 0x000008, "Member 'EOSCoreLobbyUpdateLobby_EOSLobbyUpdateLobbyAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyUpdateLobby_EOSLobbyUpdateLobbyAsync, ReturnValue) == 0x000018, "Member 'EOSCoreLobbyUpdateLobby_EOSLobbyUpdateLobbyAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyUpdateLobby.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreLobbyUpdateLobby_HandleCallback final
{
public:
	struct FEOSLobbyUpdateLobbyCallbackInfo       Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A15[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLobbyUpdateLobby_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLobbyUpdateLobby_HandleCallback");
static_assert(sizeof(EOSCoreLobbyUpdateLobby_HandleCallback) == 0x000028, "Wrong size on EOSCoreLobbyUpdateLobby_HandleCallback");
static_assert(offsetof(EOSCoreLobbyUpdateLobby_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLobbyUpdateLobby_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyUpdateLobby_HandleCallback, bWasSuccessful) == 0x000020, "Member 'EOSCoreLobbyUpdateLobby_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyPromoteMember.EOSLobbyPromoteMemberAsync
// 0x0068 (0x0068 - 0x0000)
struct EOSCoreLobbyPromoteMember_EOSLobbyPromoteMemberAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyPromoteMemberOptions          Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreLobbyPromoteMember*             ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLobbyPromoteMember_EOSLobbyPromoteMemberAsync) == 0x000008, "Wrong alignment on EOSCoreLobbyPromoteMember_EOSLobbyPromoteMemberAsync");
static_assert(sizeof(EOSCoreLobbyPromoteMember_EOSLobbyPromoteMemberAsync) == 0x000068, "Wrong size on EOSCoreLobbyPromoteMember_EOSLobbyPromoteMemberAsync");
static_assert(offsetof(EOSCoreLobbyPromoteMember_EOSLobbyPromoteMemberAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLobbyPromoteMember_EOSLobbyPromoteMemberAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyPromoteMember_EOSLobbyPromoteMemberAsync, Options) == 0x000008, "Member 'EOSCoreLobbyPromoteMember_EOSLobbyPromoteMemberAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyPromoteMember_EOSLobbyPromoteMemberAsync, ReturnValue) == 0x000060, "Member 'EOSCoreLobbyPromoteMember_EOSLobbyPromoteMemberAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyPromoteMember.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreLobbyPromoteMember_HandleCallback final
{
public:
	struct FEOSLobbyPromoteMemberCallbackInfo     Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A17[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLobbyPromoteMember_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLobbyPromoteMember_HandleCallback");
static_assert(sizeof(EOSCoreLobbyPromoteMember_HandleCallback) == 0x000028, "Wrong size on EOSCoreLobbyPromoteMember_HandleCallback");
static_assert(offsetof(EOSCoreLobbyPromoteMember_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLobbyPromoteMember_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyPromoteMember_HandleCallback, bWasSuccessful) == 0x000020, "Member 'EOSCoreLobbyPromoteMember_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyKickMember.EOSLobbyKickMemberAsync
// 0x0068 (0x0068 - 0x0000)
struct EOSCoreLobbyKickMember_EOSLobbyKickMemberAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyKickMemberOptions             Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreLobbyKickMember*                ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLobbyKickMember_EOSLobbyKickMemberAsync) == 0x000008, "Wrong alignment on EOSCoreLobbyKickMember_EOSLobbyKickMemberAsync");
static_assert(sizeof(EOSCoreLobbyKickMember_EOSLobbyKickMemberAsync) == 0x000068, "Wrong size on EOSCoreLobbyKickMember_EOSLobbyKickMemberAsync");
static_assert(offsetof(EOSCoreLobbyKickMember_EOSLobbyKickMemberAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLobbyKickMember_EOSLobbyKickMemberAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyKickMember_EOSLobbyKickMemberAsync, Options) == 0x000008, "Member 'EOSCoreLobbyKickMember_EOSLobbyKickMemberAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyKickMember_EOSLobbyKickMemberAsync, ReturnValue) == 0x000060, "Member 'EOSCoreLobbyKickMember_EOSLobbyKickMemberAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyKickMember.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreLobbyKickMember_HandleCallback final
{
public:
	struct FEOSLobbyKickMemberCallbackInfo        Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A19[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLobbyKickMember_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLobbyKickMember_HandleCallback");
static_assert(sizeof(EOSCoreLobbyKickMember_HandleCallback) == 0x000028, "Wrong size on EOSCoreLobbyKickMember_HandleCallback");
static_assert(offsetof(EOSCoreLobbyKickMember_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLobbyKickMember_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyKickMember_HandleCallback, bWasSuccessful) == 0x000020, "Member 'EOSCoreLobbyKickMember_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyRejectInvite.EOSLobbyRejectInviteAsync
// 0x0050 (0x0050 - 0x0000)
struct EOSCoreLobbyRejectInvite_EOSLobbyRejectInviteAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSLobbyRejectInviteOptions           Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreLobbyRejectInvite*              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreLobbyRejectInvite_EOSLobbyRejectInviteAsync) == 0x000008, "Wrong alignment on EOSCoreLobbyRejectInvite_EOSLobbyRejectInviteAsync");
static_assert(sizeof(EOSCoreLobbyRejectInvite_EOSLobbyRejectInviteAsync) == 0x000050, "Wrong size on EOSCoreLobbyRejectInvite_EOSLobbyRejectInviteAsync");
static_assert(offsetof(EOSCoreLobbyRejectInvite_EOSLobbyRejectInviteAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreLobbyRejectInvite_EOSLobbyRejectInviteAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyRejectInvite_EOSLobbyRejectInviteAsync, Options) == 0x000008, "Member 'EOSCoreLobbyRejectInvite_EOSLobbyRejectInviteAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyRejectInvite_EOSLobbyRejectInviteAsync, ReturnValue) == 0x000048, "Member 'EOSCoreLobbyRejectInvite_EOSLobbyRejectInviteAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreLobbyRejectInvite.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreLobbyRejectInvite_HandleCallback final
{
public:
	struct FEOSLobbyRejectInviteCallbackInfo      Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1B[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreLobbyRejectInvite_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreLobbyRejectInvite_HandleCallback");
static_assert(sizeof(EOSCoreLobbyRejectInvite_HandleCallback) == 0x000028, "Wrong size on EOSCoreLobbyRejectInvite_HandleCallback");
static_assert(offsetof(EOSCoreLobbyRejectInvite_HandleCallback, Data) == 0x000000, "Member 'EOSCoreLobbyRejectInvite_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreLobbyRejectInvite_HandleCallback, bWasSuccessful) == 0x000020, "Member 'EOSCoreLobbyRejectInvite_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCorePlayerDataStorageReadFile.EOSPlayerDataStorageReadFileAsync
// 0x0070 (0x0070 - 0x0000)
struct EOSCorePlayerDataStorageReadFile_EOSPlayerDataStorageReadFileAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageReadFileOptions   ReadOptions;                                       // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	class UEOSCorePlayerDataStorageReadFile*      ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCorePlayerDataStorageReadFile_EOSPlayerDataStorageReadFileAsync) == 0x000008, "Wrong alignment on EOSCorePlayerDataStorageReadFile_EOSPlayerDataStorageReadFileAsync");
static_assert(sizeof(EOSCorePlayerDataStorageReadFile_EOSPlayerDataStorageReadFileAsync) == 0x000070, "Wrong size on EOSCorePlayerDataStorageReadFile_EOSPlayerDataStorageReadFileAsync");
static_assert(offsetof(EOSCorePlayerDataStorageReadFile_EOSPlayerDataStorageReadFileAsync, WorldContextObject) == 0x000000, "Member 'EOSCorePlayerDataStorageReadFile_EOSPlayerDataStorageReadFileAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageReadFile_EOSPlayerDataStorageReadFileAsync, ReadOptions) == 0x000008, "Member 'EOSCorePlayerDataStorageReadFile_EOSPlayerDataStorageReadFileAsync::ReadOptions' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageReadFile_EOSPlayerDataStorageReadFileAsync, ReturnValue) == 0x000068, "Member 'EOSCorePlayerDataStorageReadFile_EOSPlayerDataStorageReadFileAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCorePlayerDataStorageReadFile.HandleCallback
// 0x0058 (0x0058 - 0x0000)
struct EOSCorePlayerDataStorageReadFile_HandleCallback final
{
public:
	struct FEOSPlayerDataStorageReadFileCallbackInfo Data;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1D[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCorePlayerDataStorageReadFile_HandleCallback) == 0x000008, "Wrong alignment on EOSCorePlayerDataStorageReadFile_HandleCallback");
static_assert(sizeof(EOSCorePlayerDataStorageReadFile_HandleCallback) == 0x000058, "Wrong size on EOSCorePlayerDataStorageReadFile_HandleCallback");
static_assert(offsetof(EOSCorePlayerDataStorageReadFile_HandleCallback, Data) == 0x000000, "Member 'EOSCorePlayerDataStorageReadFile_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageReadFile_HandleCallback, bWasSuccessful) == 0x000050, "Member 'EOSCorePlayerDataStorageReadFile_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCorePlayerDataStorageWriteFile.EOSPlayerDataStorageWriteFileAsync
// 0x0070 (0x0070 - 0x0000)
struct EOSCorePlayerDataStorageWriteFile_EOSPlayerDataStorageWriteFileAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPlayerDataStorageWriteFileOptions  WriteOptions;                                      // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	class UEOSCorePlayerDataStorageWriteFile*     ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCorePlayerDataStorageWriteFile_EOSPlayerDataStorageWriteFileAsync) == 0x000008, "Wrong alignment on EOSCorePlayerDataStorageWriteFile_EOSPlayerDataStorageWriteFileAsync");
static_assert(sizeof(EOSCorePlayerDataStorageWriteFile_EOSPlayerDataStorageWriteFileAsync) == 0x000070, "Wrong size on EOSCorePlayerDataStorageWriteFile_EOSPlayerDataStorageWriteFileAsync");
static_assert(offsetof(EOSCorePlayerDataStorageWriteFile_EOSPlayerDataStorageWriteFileAsync, WorldContextObject) == 0x000000, "Member 'EOSCorePlayerDataStorageWriteFile_EOSPlayerDataStorageWriteFileAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageWriteFile_EOSPlayerDataStorageWriteFileAsync, WriteOptions) == 0x000008, "Member 'EOSCorePlayerDataStorageWriteFile_EOSPlayerDataStorageWriteFileAsync::WriteOptions' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageWriteFile_EOSPlayerDataStorageWriteFileAsync, ReturnValue) == 0x000068, "Member 'EOSCorePlayerDataStorageWriteFile_EOSPlayerDataStorageWriteFileAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCorePlayerDataStorageWriteFile.HandleCallback
// 0x0058 (0x0058 - 0x0000)
struct EOSCorePlayerDataStorageWriteFile_HandleCallback final
{
public:
	struct FEOSPlayerDataStorageWriteFileCallbackInfo Data;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1F[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCorePlayerDataStorageWriteFile_HandleCallback) == 0x000008, "Wrong alignment on EOSCorePlayerDataStorageWriteFile_HandleCallback");
static_assert(sizeof(EOSCorePlayerDataStorageWriteFile_HandleCallback) == 0x000058, "Wrong size on EOSCorePlayerDataStorageWriteFile_HandleCallback");
static_assert(offsetof(EOSCorePlayerDataStorageWriteFile_HandleCallback, Data) == 0x000000, "Member 'EOSCorePlayerDataStorageWriteFile_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCorePlayerDataStorageWriteFile_HandleCallback, bWasSuccessful) == 0x000050, "Member 'EOSCorePlayerDataStorageWriteFile_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceAddNotifyJoinGameAccepted
// 0x0020 (0x0020 - 0x0000)
struct CorePresence_EOSPresenceAddNotifyJoinGameAccepted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSPresenceJoinGameAcceptedCallbackInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresence_EOSPresenceAddNotifyJoinGameAccepted) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceAddNotifyJoinGameAccepted");
static_assert(sizeof(CorePresence_EOSPresenceAddNotifyJoinGameAccepted) == 0x000020, "Wrong size on CorePresence_EOSPresenceAddNotifyJoinGameAccepted");
static_assert(offsetof(CorePresence_EOSPresenceAddNotifyJoinGameAccepted, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceAddNotifyJoinGameAccepted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceAddNotifyJoinGameAccepted, Callback) == 0x000008, "Member 'CorePresence_EOSPresenceAddNotifyJoinGameAccepted::Callback' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceAddNotifyJoinGameAccepted, ReturnValue) == 0x000018, "Member 'CorePresence_EOSPresenceAddNotifyJoinGameAccepted::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceAddNotifyOnPresenceChanged
// 0x0020 (0x0020 - 0x0000)
struct CorePresence_EOSPresenceAddNotifyOnPresenceChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSPresencePresenceChangedCallbackInfo& Data)> Callback;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresence_EOSPresenceAddNotifyOnPresenceChanged) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceAddNotifyOnPresenceChanged");
static_assert(sizeof(CorePresence_EOSPresenceAddNotifyOnPresenceChanged) == 0x000020, "Wrong size on CorePresence_EOSPresenceAddNotifyOnPresenceChanged");
static_assert(offsetof(CorePresence_EOSPresenceAddNotifyOnPresenceChanged, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceAddNotifyOnPresenceChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceAddNotifyOnPresenceChanged, Callback) == 0x000008, "Member 'CorePresence_EOSPresenceAddNotifyOnPresenceChanged::Callback' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceAddNotifyOnPresenceChanged, ReturnValue) == 0x000018, "Member 'CorePresence_EOSPresenceAddNotifyOnPresenceChanged::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceCopyPresence
// 0x00E8 (0x00E8 - 0x0000)
struct CorePresence_EOSPresenceCopyPresence final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPresenceCopyPresenceOptions        Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSPresenceInfo                       OutPresence;                                       // 0x0050(0x0090)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A21[0x7];                                     // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePresence_EOSPresenceCopyPresence) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceCopyPresence");
static_assert(sizeof(CorePresence_EOSPresenceCopyPresence) == 0x0000E8, "Wrong size on CorePresence_EOSPresenceCopyPresence");
static_assert(offsetof(CorePresence_EOSPresenceCopyPresence, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceCopyPresence::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceCopyPresence, Options) == 0x000008, "Member 'CorePresence_EOSPresenceCopyPresence::Options' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceCopyPresence, OutPresence) == 0x000050, "Member 'CorePresence_EOSPresenceCopyPresence::OutPresence' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceCopyPresence, ReturnValue) == 0x0000E0, "Member 'CorePresence_EOSPresenceCopyPresence::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceCreatePresenceModification
// 0x0040 (0x0040 - 0x0000)
struct CorePresence_EOSPresenceCreatePresenceModification final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPresenceCreatePresenceModificationOptions Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSHPresenceModification              OutPresenceModificationHandle;                     // 0x0030(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A22[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePresence_EOSPresenceCreatePresenceModification) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceCreatePresenceModification");
static_assert(sizeof(CorePresence_EOSPresenceCreatePresenceModification) == 0x000040, "Wrong size on CorePresence_EOSPresenceCreatePresenceModification");
static_assert(offsetof(CorePresence_EOSPresenceCreatePresenceModification, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceCreatePresenceModification::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceCreatePresenceModification, Options) == 0x000008, "Member 'CorePresence_EOSPresenceCreatePresenceModification::Options' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceCreatePresenceModification, OutPresenceModificationHandle) == 0x000030, "Member 'CorePresence_EOSPresenceCreatePresenceModification::OutPresenceModificationHandle' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceCreatePresenceModification, ReturnValue) == 0x000038, "Member 'CorePresence_EOSPresenceCreatePresenceModification::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceGetJoinInfo
// 0x0068 (0x0068 - 0x0000)
struct CorePresence_EOSPresenceGetJoinInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPresenceGetJoinInfoOptions         Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 OutInfo;                                           // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A23[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePresence_EOSPresenceGetJoinInfo) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceGetJoinInfo");
static_assert(sizeof(CorePresence_EOSPresenceGetJoinInfo) == 0x000068, "Wrong size on CorePresence_EOSPresenceGetJoinInfo");
static_assert(offsetof(CorePresence_EOSPresenceGetJoinInfo, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceGetJoinInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceGetJoinInfo, Options) == 0x000008, "Member 'CorePresence_EOSPresenceGetJoinInfo::Options' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceGetJoinInfo, OutInfo) == 0x000050, "Member 'CorePresence_EOSPresenceGetJoinInfo::OutInfo' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceGetJoinInfo, ReturnValue) == 0x000060, "Member 'CorePresence_EOSPresenceGetJoinInfo::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceHasPresence
// 0x0058 (0x0058 - 0x0000)
struct CorePresence_EOSPresenceHasPresence final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPresenceHasPresenceOptions         Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A24[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePresence_EOSPresenceHasPresence) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceHasPresence");
static_assert(sizeof(CorePresence_EOSPresenceHasPresence) == 0x000058, "Wrong size on CorePresence_EOSPresenceHasPresence");
static_assert(offsetof(CorePresence_EOSPresenceHasPresence, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceHasPresence::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceHasPresence, Options) == 0x000008, "Member 'CorePresence_EOSPresenceHasPresence::Options' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceHasPresence, ReturnValue) == 0x000050, "Member 'CorePresence_EOSPresenceHasPresence::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceModificationDeleteData
// 0x0030 (0x0030 - 0x0000)
struct CorePresence_EOSPresenceModificationDeleteData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHPresenceModification              Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPresenceModificationDeleteDataOptions Options;                                           // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A25[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePresence_EOSPresenceModificationDeleteData) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceModificationDeleteData");
static_assert(sizeof(CorePresence_EOSPresenceModificationDeleteData) == 0x000030, "Wrong size on CorePresence_EOSPresenceModificationDeleteData");
static_assert(offsetof(CorePresence_EOSPresenceModificationDeleteData, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceModificationDeleteData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationDeleteData, Handle) == 0x000008, "Member 'CorePresence_EOSPresenceModificationDeleteData::Handle' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationDeleteData, Options) == 0x000010, "Member 'CorePresence_EOSPresenceModificationDeleteData::Options' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationDeleteData, ReturnValue) == 0x000028, "Member 'CorePresence_EOSPresenceModificationDeleteData::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceModificationRelease
// 0x0010 (0x0010 - 0x0000)
struct CorePresence_EOSPresenceModificationRelease final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHPresenceModification              PresenceModificationHandle;                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresence_EOSPresenceModificationRelease) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceModificationRelease");
static_assert(sizeof(CorePresence_EOSPresenceModificationRelease) == 0x000010, "Wrong size on CorePresence_EOSPresenceModificationRelease");
static_assert(offsetof(CorePresence_EOSPresenceModificationRelease, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceModificationRelease::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationRelease, PresenceModificationHandle) == 0x000008, "Member 'CorePresence_EOSPresenceModificationRelease::PresenceModificationHandle' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceModificationSetData
// 0x0030 (0x0030 - 0x0000)
struct CorePresence_EOSPresenceModificationSetData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHPresenceModification              Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPresenceModificationSetDataOptions Options;                                           // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A26[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePresence_EOSPresenceModificationSetData) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceModificationSetData");
static_assert(sizeof(CorePresence_EOSPresenceModificationSetData) == 0x000030, "Wrong size on CorePresence_EOSPresenceModificationSetData");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetData, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceModificationSetData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetData, Handle) == 0x000008, "Member 'CorePresence_EOSPresenceModificationSetData::Handle' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetData, Options) == 0x000010, "Member 'CorePresence_EOSPresenceModificationSetData::Options' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetData, ReturnValue) == 0x000028, "Member 'CorePresence_EOSPresenceModificationSetData::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceModificationSetJoinInfo
// 0x0030 (0x0030 - 0x0000)
struct CorePresence_EOSPresenceModificationSetJoinInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHPresenceModification              Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPresenceModificationSetJoinInfoOptions Options;                                           // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A27[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePresence_EOSPresenceModificationSetJoinInfo) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceModificationSetJoinInfo");
static_assert(sizeof(CorePresence_EOSPresenceModificationSetJoinInfo) == 0x000030, "Wrong size on CorePresence_EOSPresenceModificationSetJoinInfo");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetJoinInfo, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceModificationSetJoinInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetJoinInfo, Handle) == 0x000008, "Member 'CorePresence_EOSPresenceModificationSetJoinInfo::Handle' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetJoinInfo, Options) == 0x000010, "Member 'CorePresence_EOSPresenceModificationSetJoinInfo::Options' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetJoinInfo, ReturnValue) == 0x000028, "Member 'CorePresence_EOSPresenceModificationSetJoinInfo::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceModificationSetRawRichText
// 0x0030 (0x0030 - 0x0000)
struct CorePresence_EOSPresenceModificationSetRawRichText final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHPresenceModification              Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPresenceModificationSetRawRichTextOptions Options;                                           // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A28[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePresence_EOSPresenceModificationSetRawRichText) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceModificationSetRawRichText");
static_assert(sizeof(CorePresence_EOSPresenceModificationSetRawRichText) == 0x000030, "Wrong size on CorePresence_EOSPresenceModificationSetRawRichText");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetRawRichText, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceModificationSetRawRichText::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetRawRichText, Handle) == 0x000008, "Member 'CorePresence_EOSPresenceModificationSetRawRichText::Handle' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetRawRichText, Options) == 0x000010, "Member 'CorePresence_EOSPresenceModificationSetRawRichText::Options' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetRawRichText, ReturnValue) == 0x000028, "Member 'CorePresence_EOSPresenceModificationSetRawRichText::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceModificationSetStatus
// 0x0020 (0x0020 - 0x0000)
struct CorePresence_EOSPresenceModificationSetStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHPresenceModification              Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPresenceModificationSetStatusOptions Options;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A29[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePresence_EOSPresenceModificationSetStatus) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceModificationSetStatus");
static_assert(sizeof(CorePresence_EOSPresenceModificationSetStatus) == 0x000020, "Wrong size on CorePresence_EOSPresenceModificationSetStatus");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetStatus, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceModificationSetStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetStatus, Handle) == 0x000008, "Member 'CorePresence_EOSPresenceModificationSetStatus::Handle' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetStatus, Options) == 0x000010, "Member 'CorePresence_EOSPresenceModificationSetStatus::Options' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceModificationSetStatus, ReturnValue) == 0x000018, "Member 'CorePresence_EOSPresenceModificationSetStatus::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceRemoveNotifyJoinGameAccepted
// 0x0010 (0x0010 - 0x0000)
struct CorePresence_EOSPresenceRemoveNotifyJoinGameAccepted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresence_EOSPresenceRemoveNotifyJoinGameAccepted) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceRemoveNotifyJoinGameAccepted");
static_assert(sizeof(CorePresence_EOSPresenceRemoveNotifyJoinGameAccepted) == 0x000010, "Wrong size on CorePresence_EOSPresenceRemoveNotifyJoinGameAccepted");
static_assert(offsetof(CorePresence_EOSPresenceRemoveNotifyJoinGameAccepted, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceRemoveNotifyJoinGameAccepted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceRemoveNotifyJoinGameAccepted, ID) == 0x000008, "Member 'CorePresence_EOSPresenceRemoveNotifyJoinGameAccepted::ID' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceRemoveNotifyOnPresenceChanged
// 0x0010 (0x0010 - 0x0000)
struct CorePresence_EOSPresenceRemoveNotifyOnPresenceChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresence_EOSPresenceRemoveNotifyOnPresenceChanged) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceRemoveNotifyOnPresenceChanged");
static_assert(sizeof(CorePresence_EOSPresenceRemoveNotifyOnPresenceChanged) == 0x000010, "Wrong size on CorePresence_EOSPresenceRemoveNotifyOnPresenceChanged");
static_assert(offsetof(CorePresence_EOSPresenceRemoveNotifyOnPresenceChanged, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceRemoveNotifyOnPresenceChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceRemoveNotifyOnPresenceChanged, NotificationID) == 0x000008, "Member 'CorePresence_EOSPresenceRemoveNotifyOnPresenceChanged::NotificationID' has a wrong offset!");

// Function EOSCore.CorePresence.GetPresence
// 0x0010 (0x0010 - 0x0000)
struct CorePresence_GetPresence final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCorePresence*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresence_GetPresence) == 0x000008, "Wrong alignment on CorePresence_GetPresence");
static_assert(sizeof(CorePresence_GetPresence) == 0x000010, "Wrong size on CorePresence_GetPresence");
static_assert(offsetof(CorePresence_GetPresence, WorldContextObject) == 0x000000, "Member 'CorePresence_GetPresence::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_GetPresence, ReturnValue) == 0x000008, "Member 'CorePresence_GetPresence::ReturnValue' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceQueryPresence
// 0x0060 (0x0060 - 0x0000)
struct CorePresence_EOSPresenceQueryPresence final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPresenceQueryPresenceOptions       Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSPresenceQueryPresenceCallbackInfo& Data)> Callback;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresence_EOSPresenceQueryPresence) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceQueryPresence");
static_assert(sizeof(CorePresence_EOSPresenceQueryPresence) == 0x000060, "Wrong size on CorePresence_EOSPresenceQueryPresence");
static_assert(offsetof(CorePresence_EOSPresenceQueryPresence, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceQueryPresence::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceQueryPresence, Options) == 0x000008, "Member 'CorePresence_EOSPresenceQueryPresence::Options' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceQueryPresence, Callback) == 0x000050, "Member 'CorePresence_EOSPresenceQueryPresence::Callback' has a wrong offset!");

// Function EOSCore.CorePresence.EOSPresenceSetPresence
// 0x0048 (0x0048 - 0x0000)
struct CorePresence_EOSPresenceSetPresence final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPresenceSetPresenceOptions         Options;                                           // 0x0008(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSPresenceSetPresenceCallbackInfo& Data)> Callback;                                          // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresence_EOSPresenceSetPresence) == 0x000008, "Wrong alignment on CorePresence_EOSPresenceSetPresence");
static_assert(sizeof(CorePresence_EOSPresenceSetPresence) == 0x000048, "Wrong size on CorePresence_EOSPresenceSetPresence");
static_assert(offsetof(CorePresence_EOSPresenceSetPresence, WorldContextObject) == 0x000000, "Member 'CorePresence_EOSPresenceSetPresence::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceSetPresence, Options) == 0x000008, "Member 'CorePresence_EOSPresenceSetPresence::Options' has a wrong offset!");
static_assert(offsetof(CorePresence_EOSPresenceSetPresence, Callback) == 0x000038, "Member 'CorePresence_EOSPresenceSetPresence::Callback' has a wrong offset!");

// Function EOSCore.EOSCorePresenceSetPresence.EOSPresenceSetPresenceAsync
// 0x0040 (0x0040 - 0x0000)
struct EOSCorePresenceSetPresence_EOSPresenceSetPresenceAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSPresenceSetPresenceOptions         Options;                                           // 0x0008(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCorePresenceSetPresence*            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCorePresenceSetPresence_EOSPresenceSetPresenceAsync) == 0x000008, "Wrong alignment on EOSCorePresenceSetPresence_EOSPresenceSetPresenceAsync");
static_assert(sizeof(EOSCorePresenceSetPresence_EOSPresenceSetPresenceAsync) == 0x000040, "Wrong size on EOSCorePresenceSetPresence_EOSPresenceSetPresenceAsync");
static_assert(offsetof(EOSCorePresenceSetPresence_EOSPresenceSetPresenceAsync, WorldContextObject) == 0x000000, "Member 'EOSCorePresenceSetPresence_EOSPresenceSetPresenceAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCorePresenceSetPresence_EOSPresenceSetPresenceAsync, Options) == 0x000008, "Member 'EOSCorePresenceSetPresence_EOSPresenceSetPresenceAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCorePresenceSetPresence_EOSPresenceSetPresenceAsync, ReturnValue) == 0x000038, "Member 'EOSCorePresenceSetPresence_EOSPresenceSetPresenceAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCorePresenceSetPresence.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCorePresenceSetPresence_HandleCallback final
{
public:
	struct FEOSPresenceSetPresenceCallbackInfo    Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2B[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCorePresenceSetPresence_HandleCallback) == 0x000008, "Wrong alignment on EOSCorePresenceSetPresence_HandleCallback");
static_assert(sizeof(EOSCorePresenceSetPresence_HandleCallback) == 0x000040, "Wrong size on EOSCorePresenceSetPresence_HandleCallback");
static_assert(offsetof(EOSCorePresenceSetPresence_HandleCallback, Data) == 0x000000, "Member 'EOSCorePresenceSetPresence_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCorePresenceSetPresence_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCorePresenceSetPresence_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreProgressionSnapshot.EOSProgressionSnapshotAddProgression
// 0x0038 (0x0038 - 0x0000)
struct CoreProgressionSnapshot_EOSProgressionSnapshotAddProgression final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProgressionSnapshotAddProgressionOptions Options;                                           // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2C[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreProgressionSnapshot_EOSProgressionSnapshotAddProgression) == 0x000008, "Wrong alignment on CoreProgressionSnapshot_EOSProgressionSnapshotAddProgression");
static_assert(sizeof(CoreProgressionSnapshot_EOSProgressionSnapshotAddProgression) == 0x000038, "Wrong size on CoreProgressionSnapshot_EOSProgressionSnapshotAddProgression");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotAddProgression, WorldContextObject) == 0x000000, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotAddProgression::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotAddProgression, Options) == 0x000008, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotAddProgression::Options' has a wrong offset!");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotAddProgression, ReturnValue) == 0x000030, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotAddProgression::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreProgressionSnapshot.EOSProgressionSnapshotBeginSnapshot
// 0x0038 (0x0038 - 0x0000)
struct CoreProgressionSnapshot_EOSProgressionSnapshotBeginSnapshot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProgressionSnapshotBeginSnapshotOptions Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2D[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutSnapshotId;                                     // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2E[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreProgressionSnapshot_EOSProgressionSnapshotBeginSnapshot) == 0x000008, "Wrong alignment on CoreProgressionSnapshot_EOSProgressionSnapshotBeginSnapshot");
static_assert(sizeof(CoreProgressionSnapshot_EOSProgressionSnapshotBeginSnapshot) == 0x000038, "Wrong size on CoreProgressionSnapshot_EOSProgressionSnapshotBeginSnapshot");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotBeginSnapshot, WorldContextObject) == 0x000000, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotBeginSnapshot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotBeginSnapshot, Options) == 0x000008, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotBeginSnapshot::Options' has a wrong offset!");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotBeginSnapshot, OutSnapshotId) == 0x00002C, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotBeginSnapshot::OutSnapshotId' has a wrong offset!");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotBeginSnapshot, ReturnValue) == 0x000030, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotBeginSnapshot::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreProgressionSnapshot.EOSProgressionSnapshotDeleteSnapshot
// 0x0040 (0x0040 - 0x0000)
struct CoreProgressionSnapshot_EOSProgressionSnapshotDeleteSnapshot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProgressionSnapshotDeleteSnapshotOptions Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2F[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSProgressionSnapshotDeleteSnapshotCallbackInfo& Data)> Callback;                                          // 0x002C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A30[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreProgressionSnapshot_EOSProgressionSnapshotDeleteSnapshot) == 0x000008, "Wrong alignment on CoreProgressionSnapshot_EOSProgressionSnapshotDeleteSnapshot");
static_assert(sizeof(CoreProgressionSnapshot_EOSProgressionSnapshotDeleteSnapshot) == 0x000040, "Wrong size on CoreProgressionSnapshot_EOSProgressionSnapshotDeleteSnapshot");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotDeleteSnapshot, WorldContextObject) == 0x000000, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotDeleteSnapshot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotDeleteSnapshot, Options) == 0x000008, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotDeleteSnapshot::Options' has a wrong offset!");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotDeleteSnapshot, Callback) == 0x00002C, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotDeleteSnapshot::Callback' has a wrong offset!");

// Function EOSCore.CoreProgressionSnapshot.EOSProgressionSnapshotEndSnapshot
// 0x0010 (0x0010 - 0x0000)
struct CoreProgressionSnapshot_EOSProgressionSnapshotEndSnapshot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProgressionSnapshotEndSnapshotOptions Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A31[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreProgressionSnapshot_EOSProgressionSnapshotEndSnapshot) == 0x000008, "Wrong alignment on CoreProgressionSnapshot_EOSProgressionSnapshotEndSnapshot");
static_assert(sizeof(CoreProgressionSnapshot_EOSProgressionSnapshotEndSnapshot) == 0x000010, "Wrong size on CoreProgressionSnapshot_EOSProgressionSnapshotEndSnapshot");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotEndSnapshot, WorldContextObject) == 0x000000, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotEndSnapshot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotEndSnapshot, Options) == 0x000008, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotEndSnapshot::Options' has a wrong offset!");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotEndSnapshot, ReturnValue) == 0x00000C, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotEndSnapshot::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreProgressionSnapshot.EOSProgressionSnapshotSubmitSnapshot
// 0x0020 (0x0020 - 0x0000)
struct CoreProgressionSnapshot_EOSProgressionSnapshotSubmitSnapshot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSProgressionSnapshotSubmitSnapshotOptions Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSProgressionSnapshotSubmitSnapshotCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A32[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreProgressionSnapshot_EOSProgressionSnapshotSubmitSnapshot) == 0x000008, "Wrong alignment on CoreProgressionSnapshot_EOSProgressionSnapshotSubmitSnapshot");
static_assert(sizeof(CoreProgressionSnapshot_EOSProgressionSnapshotSubmitSnapshot) == 0x000020, "Wrong size on CoreProgressionSnapshot_EOSProgressionSnapshotSubmitSnapshot");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotSubmitSnapshot, WorldContextObject) == 0x000000, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotSubmitSnapshot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotSubmitSnapshot, Options) == 0x000008, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotSubmitSnapshot::Options' has a wrong offset!");
static_assert(offsetof(CoreProgressionSnapshot_EOSProgressionSnapshotSubmitSnapshot, Callback) == 0x00000C, "Member 'CoreProgressionSnapshot_EOSProgressionSnapshotSubmitSnapshot::Callback' has a wrong offset!");

// Function EOSCore.CoreProgressionSnapshot.GetProgressionSnapshot
// 0x0010 (0x0010 - 0x0000)
struct CoreProgressionSnapshot_GetProgressionSnapshot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreProgressionSnapshot*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreProgressionSnapshot_GetProgressionSnapshot) == 0x000008, "Wrong alignment on CoreProgressionSnapshot_GetProgressionSnapshot");
static_assert(sizeof(CoreProgressionSnapshot_GetProgressionSnapshot) == 0x000010, "Wrong size on CoreProgressionSnapshot_GetProgressionSnapshot");
static_assert(offsetof(CoreProgressionSnapshot_GetProgressionSnapshot, WorldContextObject) == 0x000000, "Member 'CoreProgressionSnapshot_GetProgressionSnapshot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreProgressionSnapshot_GetProgressionSnapshot, ReturnValue) == 0x000008, "Member 'CoreProgressionSnapshot_GetProgressionSnapshot::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreReports.GetReports
// 0x0010 (0x0010 - 0x0000)
struct CoreReports_GetReports final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreReports*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreReports_GetReports) == 0x000008, "Wrong alignment on CoreReports_GetReports");
static_assert(sizeof(CoreReports_GetReports) == 0x000010, "Wrong size on CoreReports_GetReports");
static_assert(offsetof(CoreReports_GetReports, WorldContextObject) == 0x000000, "Member 'CoreReports_GetReports::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreReports_GetReports, ReturnValue) == 0x000008, "Member 'CoreReports_GetReports::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreReports.EOSReportsSendPlayerBehaviorReport
// 0x0080 (0x0080 - 0x0000)
struct CoreReports_EOSReportsSendPlayerBehaviorReport final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSReportsSendPlayerBehaviorReportOptions Options;                                           // 0x0008(0x0068)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSReportsSendPlayerBehaviorReportCompleteCallbackInfo& Data)> Callback;                                          // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreReports_EOSReportsSendPlayerBehaviorReport) == 0x000008, "Wrong alignment on CoreReports_EOSReportsSendPlayerBehaviorReport");
static_assert(sizeof(CoreReports_EOSReportsSendPlayerBehaviorReport) == 0x000080, "Wrong size on CoreReports_EOSReportsSendPlayerBehaviorReport");
static_assert(offsetof(CoreReports_EOSReportsSendPlayerBehaviorReport, WorldContextObject) == 0x000000, "Member 'CoreReports_EOSReportsSendPlayerBehaviorReport::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreReports_EOSReportsSendPlayerBehaviorReport, Options) == 0x000008, "Member 'CoreReports_EOSReportsSendPlayerBehaviorReport::Options' has a wrong offset!");
static_assert(offsetof(CoreReports_EOSReportsSendPlayerBehaviorReport, Callback) == 0x000070, "Member 'CoreReports_EOSReportsSendPlayerBehaviorReport::Callback' has a wrong offset!");

// Function EOSCore.EOSReportsSendPlayerBehaviorReport.EOSReportsSendPlayerBehaviorReportAsync
// 0x0078 (0x0078 - 0x0000)
struct EOSReportsSendPlayerBehaviorReport_EOSReportsSendPlayerBehaviorReportAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSReportsSendPlayerBehaviorReportOptions Options;                                           // 0x0008(0x0068)(Parm, NativeAccessSpecifierPublic)
	class UEOSReportsSendPlayerBehaviorReport*    ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSReportsSendPlayerBehaviorReport_EOSReportsSendPlayerBehaviorReportAsync) == 0x000008, "Wrong alignment on EOSReportsSendPlayerBehaviorReport_EOSReportsSendPlayerBehaviorReportAsync");
static_assert(sizeof(EOSReportsSendPlayerBehaviorReport_EOSReportsSendPlayerBehaviorReportAsync) == 0x000078, "Wrong size on EOSReportsSendPlayerBehaviorReport_EOSReportsSendPlayerBehaviorReportAsync");
static_assert(offsetof(EOSReportsSendPlayerBehaviorReport_EOSReportsSendPlayerBehaviorReportAsync, WorldContextObject) == 0x000000, "Member 'EOSReportsSendPlayerBehaviorReport_EOSReportsSendPlayerBehaviorReportAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSReportsSendPlayerBehaviorReport_EOSReportsSendPlayerBehaviorReportAsync, Options) == 0x000008, "Member 'EOSReportsSendPlayerBehaviorReport_EOSReportsSendPlayerBehaviorReportAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSReportsSendPlayerBehaviorReport_EOSReportsSendPlayerBehaviorReportAsync, ReturnValue) == 0x000070, "Member 'EOSReportsSendPlayerBehaviorReport_EOSReportsSendPlayerBehaviorReportAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSReportsSendPlayerBehaviorReport.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSReportsSendPlayerBehaviorReport_HandleCallback final
{
public:
	struct FEOSReportsSendPlayerBehaviorReportCompleteCallbackInfo Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A34[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSReportsSendPlayerBehaviorReport_HandleCallback) == 0x000008, "Wrong alignment on EOSReportsSendPlayerBehaviorReport_HandleCallback");
static_assert(sizeof(EOSReportsSendPlayerBehaviorReport_HandleCallback) == 0x000018, "Wrong size on EOSReportsSendPlayerBehaviorReport_HandleCallback");
static_assert(offsetof(EOSReportsSendPlayerBehaviorReport_HandleCallback, Data) == 0x000000, "Member 'EOSReportsSendPlayerBehaviorReport_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSReportsSendPlayerBehaviorReport_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSReportsSendPlayerBehaviorReport_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreRTC.EOSRTCAddNotifyDisconnected
// 0x0058 (0x0058 - 0x0000)
struct CoreRTC_EOSRTCAddNotifyDisconnected final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAddNotifyDisconnectedOptions          Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSRTCDisconnectedCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTC_EOSRTCAddNotifyDisconnected) == 0x000008, "Wrong alignment on CoreRTC_EOSRTCAddNotifyDisconnected");
static_assert(sizeof(CoreRTC_EOSRTCAddNotifyDisconnected) == 0x000058, "Wrong size on CoreRTC_EOSRTCAddNotifyDisconnected");
static_assert(offsetof(CoreRTC_EOSRTCAddNotifyDisconnected, WorldContextObject) == 0x000000, "Member 'CoreRTC_EOSRTCAddNotifyDisconnected::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCAddNotifyDisconnected, Options) == 0x000008, "Member 'CoreRTC_EOSRTCAddNotifyDisconnected::Options' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCAddNotifyDisconnected, Callback) == 0x000040, "Member 'CoreRTC_EOSRTCAddNotifyDisconnected::Callback' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCAddNotifyDisconnected, ReturnValue) == 0x000050, "Member 'CoreRTC_EOSRTCAddNotifyDisconnected::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTC.EOSRTCAddNotifyParticipantStatusChanged
// 0x0058 (0x0058 - 0x0000)
struct CoreRTC_EOSRTCAddNotifyParticipantStatusChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAddNotifyParticipantStatusChangedOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSRTCParticipantStatusChangedCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTC_EOSRTCAddNotifyParticipantStatusChanged) == 0x000008, "Wrong alignment on CoreRTC_EOSRTCAddNotifyParticipantStatusChanged");
static_assert(sizeof(CoreRTC_EOSRTCAddNotifyParticipantStatusChanged) == 0x000058, "Wrong size on CoreRTC_EOSRTCAddNotifyParticipantStatusChanged");
static_assert(offsetof(CoreRTC_EOSRTCAddNotifyParticipantStatusChanged, WorldContextObject) == 0x000000, "Member 'CoreRTC_EOSRTCAddNotifyParticipantStatusChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCAddNotifyParticipantStatusChanged, Options) == 0x000008, "Member 'CoreRTC_EOSRTCAddNotifyParticipantStatusChanged::Options' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCAddNotifyParticipantStatusChanged, Callback) == 0x000040, "Member 'CoreRTC_EOSRTCAddNotifyParticipantStatusChanged::Callback' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCAddNotifyParticipantStatusChanged, ReturnValue) == 0x000050, "Member 'CoreRTC_EOSRTCAddNotifyParticipantStatusChanged::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTC.EOSRTCGetAudioInterface
// 0x0010 (0x0010 - 0x0000)
struct CoreRTC_EOSRTCGetAudioInterface final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHRTCAudio                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTC_EOSRTCGetAudioInterface) == 0x000008, "Wrong alignment on CoreRTC_EOSRTCGetAudioInterface");
static_assert(sizeof(CoreRTC_EOSRTCGetAudioInterface) == 0x000010, "Wrong size on CoreRTC_EOSRTCGetAudioInterface");
static_assert(offsetof(CoreRTC_EOSRTCGetAudioInterface, WorldContextObject) == 0x000000, "Member 'CoreRTC_EOSRTCGetAudioInterface::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCGetAudioInterface, ReturnValue) == 0x000008, "Member 'CoreRTC_EOSRTCGetAudioInterface::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTC.EOSRTCRemoveNotifyDisconnected
// 0x0010 (0x0010 - 0x0000)
struct CoreRTC_EOSRTCRemoveNotifyDisconnected final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTC_EOSRTCRemoveNotifyDisconnected) == 0x000008, "Wrong alignment on CoreRTC_EOSRTCRemoveNotifyDisconnected");
static_assert(sizeof(CoreRTC_EOSRTCRemoveNotifyDisconnected) == 0x000010, "Wrong size on CoreRTC_EOSRTCRemoveNotifyDisconnected");
static_assert(offsetof(CoreRTC_EOSRTCRemoveNotifyDisconnected, WorldContextObject) == 0x000000, "Member 'CoreRTC_EOSRTCRemoveNotifyDisconnected::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCRemoveNotifyDisconnected, NotificationID) == 0x000008, "Member 'CoreRTC_EOSRTCRemoveNotifyDisconnected::NotificationID' has a wrong offset!");

// Function EOSCore.CoreRTC.EOSRTCRemoveNotifyParticipantStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct CoreRTC_EOSRTCRemoveNotifyParticipantStatusChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTC_EOSRTCRemoveNotifyParticipantStatusChanged) == 0x000008, "Wrong alignment on CoreRTC_EOSRTCRemoveNotifyParticipantStatusChanged");
static_assert(sizeof(CoreRTC_EOSRTCRemoveNotifyParticipantStatusChanged) == 0x000010, "Wrong size on CoreRTC_EOSRTCRemoveNotifyParticipantStatusChanged");
static_assert(offsetof(CoreRTC_EOSRTCRemoveNotifyParticipantStatusChanged, WorldContextObject) == 0x000000, "Member 'CoreRTC_EOSRTCRemoveNotifyParticipantStatusChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCRemoveNotifyParticipantStatusChanged, NotificationID) == 0x000008, "Member 'CoreRTC_EOSRTCRemoveNotifyParticipantStatusChanged::NotificationID' has a wrong offset!");

// Function EOSCore.CoreRTC.GetRTC
// 0x0010 (0x0010 - 0x0000)
struct CoreRTC_GetRTC final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreRTC*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTC_GetRTC) == 0x000008, "Wrong alignment on CoreRTC_GetRTC");
static_assert(sizeof(CoreRTC_GetRTC) == 0x000010, "Wrong size on CoreRTC_GetRTC");
static_assert(offsetof(CoreRTC_GetRTC, WorldContextObject) == 0x000000, "Member 'CoreRTC_GetRTC::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTC_GetRTC, ReturnValue) == 0x000008, "Member 'CoreRTC_GetRTC::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTC.EOSRTCBlockParticipant
// 0x0078 (0x0078 - 0x0000)
struct CoreRTC_EOSRTCBlockParticipant final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlockParticipantOptions               Options;                                           // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSRTCBlockParticipantCallbackInfo& Data)> Callback;                                          // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTC_EOSRTCBlockParticipant) == 0x000008, "Wrong alignment on CoreRTC_EOSRTCBlockParticipant");
static_assert(sizeof(CoreRTC_EOSRTCBlockParticipant) == 0x000078, "Wrong size on CoreRTC_EOSRTCBlockParticipant");
static_assert(offsetof(CoreRTC_EOSRTCBlockParticipant, WorldContextObject) == 0x000000, "Member 'CoreRTC_EOSRTCBlockParticipant::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCBlockParticipant, Options) == 0x000008, "Member 'CoreRTC_EOSRTCBlockParticipant::Options' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCBlockParticipant, Callback) == 0x000068, "Member 'CoreRTC_EOSRTCBlockParticipant::Callback' has a wrong offset!");

// Function EOSCore.CoreRTC.EOSRTCJoinRoom
// 0x00A0 (0x00A0 - 0x0000)
struct CoreRTC_EOSRTCJoinRoom final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJoinRoomOptions                       Options;                                           // 0x0008(0x0088)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSRTCJoinRoomCallbackInfo& Data)> Callback;                                          // 0x0090(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTC_EOSRTCJoinRoom) == 0x000008, "Wrong alignment on CoreRTC_EOSRTCJoinRoom");
static_assert(sizeof(CoreRTC_EOSRTCJoinRoom) == 0x0000A0, "Wrong size on CoreRTC_EOSRTCJoinRoom");
static_assert(offsetof(CoreRTC_EOSRTCJoinRoom, WorldContextObject) == 0x000000, "Member 'CoreRTC_EOSRTCJoinRoom::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCJoinRoom, Options) == 0x000008, "Member 'CoreRTC_EOSRTCJoinRoom::Options' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCJoinRoom, Callback) == 0x000090, "Member 'CoreRTC_EOSRTCJoinRoom::Callback' has a wrong offset!");

// Function EOSCore.CoreRTC.EOSRTCLeaveRoom
// 0x0050 (0x0050 - 0x0000)
struct CoreRTC_EOSRTCLeaveRoom final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLeaveRoomOptions                      Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSRTCLeaveRoomCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTC_EOSRTCLeaveRoom) == 0x000008, "Wrong alignment on CoreRTC_EOSRTCLeaveRoom");
static_assert(sizeof(CoreRTC_EOSRTCLeaveRoom) == 0x000050, "Wrong size on CoreRTC_EOSRTCLeaveRoom");
static_assert(offsetof(CoreRTC_EOSRTCLeaveRoom, WorldContextObject) == 0x000000, "Member 'CoreRTC_EOSRTCLeaveRoom::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCLeaveRoom, Options) == 0x000008, "Member 'CoreRTC_EOSRTCLeaveRoom::Options' has a wrong offset!");
static_assert(offsetof(CoreRTC_EOSRTCLeaveRoom, Callback) == 0x000040, "Member 'CoreRTC_EOSRTCLeaveRoom::Callback' has a wrong offset!");

// Function EOSCore.CoreRTCAdmin.GetRTCAdmin
// 0x0010 (0x0010 - 0x0000)
struct CoreRTCAdmin_GetRTCAdmin final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreRTCAdmin*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAdmin_GetRTCAdmin) == 0x000008, "Wrong alignment on CoreRTCAdmin_GetRTCAdmin");
static_assert(sizeof(CoreRTCAdmin_GetRTCAdmin) == 0x000010, "Wrong size on CoreRTCAdmin_GetRTCAdmin");
static_assert(offsetof(CoreRTCAdmin_GetRTCAdmin, WorldContextObject) == 0x000000, "Member 'CoreRTCAdmin_GetRTCAdmin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAdmin_GetRTCAdmin, ReturnValue) == 0x000008, "Member 'CoreRTCAdmin_GetRTCAdmin::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAdmin.EOSRTCAdminCopyUserTokenByIndex
// 0x0050 (0x0050 - 0x0000)
struct CoreRTCAdmin_EOSRTCAdminCopyUserTokenByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSCopyUserTokenByIndexOptions        Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSUserToken                          OutUserToken;                                      // 0x0010(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A36[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreRTCAdmin_EOSRTCAdminCopyUserTokenByIndex) == 0x000008, "Wrong alignment on CoreRTCAdmin_EOSRTCAdminCopyUserTokenByIndex");
static_assert(sizeof(CoreRTCAdmin_EOSRTCAdminCopyUserTokenByIndex) == 0x000050, "Wrong size on CoreRTCAdmin_EOSRTCAdminCopyUserTokenByIndex");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminCopyUserTokenByIndex, WorldContextObject) == 0x000000, "Member 'CoreRTCAdmin_EOSRTCAdminCopyUserTokenByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminCopyUserTokenByIndex, Options) == 0x000008, "Member 'CoreRTCAdmin_EOSRTCAdminCopyUserTokenByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminCopyUserTokenByIndex, OutUserToken) == 0x000010, "Member 'CoreRTCAdmin_EOSRTCAdminCopyUserTokenByIndex::OutUserToken' has a wrong offset!");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminCopyUserTokenByIndex, ReturnValue) == 0x000048, "Member 'CoreRTCAdmin_EOSRTCAdminCopyUserTokenByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAdmin.EOSRTCAdminCopyUserTokenByUserId
// 0x0070 (0x0070 - 0x0000)
struct CoreRTCAdmin_EOSRTCAdminCopyUserTokenByUserId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSCopyUserTokenByUserIdOptions       Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSUserToken                          OutUserToken;                                      // 0x0030(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A37[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreRTCAdmin_EOSRTCAdminCopyUserTokenByUserId) == 0x000008, "Wrong alignment on CoreRTCAdmin_EOSRTCAdminCopyUserTokenByUserId");
static_assert(sizeof(CoreRTCAdmin_EOSRTCAdminCopyUserTokenByUserId) == 0x000070, "Wrong size on CoreRTCAdmin_EOSRTCAdminCopyUserTokenByUserId");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminCopyUserTokenByUserId, WorldContextObject) == 0x000000, "Member 'CoreRTCAdmin_EOSRTCAdminCopyUserTokenByUserId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminCopyUserTokenByUserId, Options) == 0x000008, "Member 'CoreRTCAdmin_EOSRTCAdminCopyUserTokenByUserId::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminCopyUserTokenByUserId, OutUserToken) == 0x000030, "Member 'CoreRTCAdmin_EOSRTCAdminCopyUserTokenByUserId::OutUserToken' has a wrong offset!");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminCopyUserTokenByUserId, ReturnValue) == 0x000068, "Member 'CoreRTCAdmin_EOSRTCAdminCopyUserTokenByUserId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAdmin.EOSRTCAdminKick
// 0x0050 (0x0050 - 0x0000)
struct CoreRTCAdmin_EOSRTCAdminKick final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSKickOptions                        Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSKickCompleteCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAdmin_EOSRTCAdminKick) == 0x000008, "Wrong alignment on CoreRTCAdmin_EOSRTCAdminKick");
static_assert(sizeof(CoreRTCAdmin_EOSRTCAdminKick) == 0x000050, "Wrong size on CoreRTCAdmin_EOSRTCAdminKick");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminKick, WorldContextObject) == 0x000000, "Member 'CoreRTCAdmin_EOSRTCAdminKick::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminKick, Options) == 0x000008, "Member 'CoreRTCAdmin_EOSRTCAdminKick::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminKick, Callback) == 0x000040, "Member 'CoreRTCAdmin_EOSRTCAdminKick::Callback' has a wrong offset!");

// Function EOSCore.CoreRTCAdmin.EOSRTCAdminQueryJoinRoomToken
// 0x0070 (0x0070 - 0x0000)
struct CoreRTCAdmin_EOSRTCAdminQueryJoinRoomToken final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSQueryJoinRoomTokenOptions          Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSQueryJoinRoomTokenCompleteCallbackInfo& Data)> Callback;                                          // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAdmin_EOSRTCAdminQueryJoinRoomToken) == 0x000008, "Wrong alignment on CoreRTCAdmin_EOSRTCAdminQueryJoinRoomToken");
static_assert(sizeof(CoreRTCAdmin_EOSRTCAdminQueryJoinRoomToken) == 0x000070, "Wrong size on CoreRTCAdmin_EOSRTCAdminQueryJoinRoomToken");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminQueryJoinRoomToken, WorldContextObject) == 0x000000, "Member 'CoreRTCAdmin_EOSRTCAdminQueryJoinRoomToken::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminQueryJoinRoomToken, Options) == 0x000008, "Member 'CoreRTCAdmin_EOSRTCAdminQueryJoinRoomToken::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminQueryJoinRoomToken, Callback) == 0x000060, "Member 'CoreRTCAdmin_EOSRTCAdminQueryJoinRoomToken::Callback' has a wrong offset!");

// Function EOSCore.CoreRTCAdmin.EOSRTCAdminSetParticipantHardMute
// 0x0050 (0x0050 - 0x0000)
struct CoreRTCAdmin_EOSRTCAdminSetParticipantHardMute final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSetParticipantHardMuteOptions      Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSSetParticipantHardMuteCompleteCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAdmin_EOSRTCAdminSetParticipantHardMute) == 0x000008, "Wrong alignment on CoreRTCAdmin_EOSRTCAdminSetParticipantHardMute");
static_assert(sizeof(CoreRTCAdmin_EOSRTCAdminSetParticipantHardMute) == 0x000050, "Wrong size on CoreRTCAdmin_EOSRTCAdminSetParticipantHardMute");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminSetParticipantHardMute, WorldContextObject) == 0x000000, "Member 'CoreRTCAdmin_EOSRTCAdminSetParticipantHardMute::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminSetParticipantHardMute, Options) == 0x000008, "Member 'CoreRTCAdmin_EOSRTCAdminSetParticipantHardMute::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAdmin_EOSRTCAdminSetParticipantHardMute, Callback) == 0x000040, "Member 'CoreRTCAdmin_EOSRTCAdminSetParticipantHardMute::Callback' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioAddNotifyAudioBeforeRender
// 0x0068 (0x0068 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHRTCAudio                          Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAddNotifyAudioBeforeRenderOptions  Options;                                           // 0x0010(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSBeforeRenderCallbackInfo& Data)> Callback;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender) == 0x000068, "Wrong size on CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender, WorldContextObject) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender, Handle) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender, Options) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender, Callback) == 0x000050, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender::Callback' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender, ReturnValue) == 0x000060, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeRender::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioAddNotifyAudioBeforeSend
// 0x0060 (0x0060 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHRTCAudio                          Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAddNotifyAudioBeforeSendOptions    Options;                                           // 0x0010(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSBeforeSendCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend) == 0x000060, "Wrong size on CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend, WorldContextObject) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend, Handle) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend, Options) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend, Callback) == 0x000048, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend::Callback' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend, ReturnValue) == 0x000058, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioBeforeSend::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioAddNotifyAudioDevicesChanged
// 0x0030 (0x0030 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHRTCAudio                          Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAddNotifyAudioDevicesChangedOptions Options;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A39[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSAudioDevicesChangedCallbackInfo& Data)> Callback;                                          // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3A[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged) == 0x000030, "Wrong size on CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged, WorldContextObject) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged, Handle) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged, Options) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged, Callback) == 0x000014, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged::Callback' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged, ReturnValue) == 0x000028, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioDevicesChanged::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioAddNotifyAudioInputState
// 0x0060 (0x0060 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHRTCAudio                          Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAddNotifyAudioInputStateOptions    Options;                                           // 0x0010(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSAudioInputStateCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState) == 0x000060, "Wrong size on CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState, WorldContextObject) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState, Handle) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState, Options) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState, Callback) == 0x000048, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState::Callback' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState, ReturnValue) == 0x000058, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioInputState::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioAddNotifyAudioOutputState
// 0x0060 (0x0060 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHRTCAudio                          Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAddNotifyAudioOutputStateOptions   Options;                                           // 0x0010(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSOutputStateCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState) == 0x000060, "Wrong size on CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState, WorldContextObject) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState, Handle) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState, Options) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState, Callback) == 0x000048, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState::Callback' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState, ReturnValue) == 0x000058, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyAudioOutputState::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioAddNotifyParticipantUpdated
// 0x0060 (0x0060 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHRTCAudio                          Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSAddNotifyParticipantUpdatedOptions Options;                                           // 0x0010(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSJoinRoomCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated) == 0x000060, "Wrong size on CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated, WorldContextObject) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated, Handle) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated, Options) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated, Callback) == 0x000048, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated::Callback' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated, ReturnValue) == 0x000058, "Member 'CoreRTCAudio_EOSRTCAudioAddNotifyParticipantUpdated::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioGetAudioInputDeviceByIndex
// 0x0038 (0x0038 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioGetAudioInputDeviceByIndex final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSGetAudioOutputDeviceByIndexOptions Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSAudioInputDeviceInfo               ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioGetAudioInputDeviceByIndex) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioGetAudioInputDeviceByIndex");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioGetAudioInputDeviceByIndex) == 0x000038, "Wrong size on CoreRTCAudio_EOSRTCAudioGetAudioInputDeviceByIndex");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioGetAudioInputDeviceByIndex, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioGetAudioInputDeviceByIndex::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioGetAudioInputDeviceByIndex, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioGetAudioInputDeviceByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioGetAudioInputDeviceByIndex, ReturnValue) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioGetAudioInputDeviceByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioGetAudioInputDevicesCount
// 0x0010 (0x0010 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioGetAudioInputDevicesCount final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSGetAudioInputDevicesCountOptions   Options;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioGetAudioInputDevicesCount) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioGetAudioInputDevicesCount");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioGetAudioInputDevicesCount) == 0x000010, "Wrong size on CoreRTCAudio_EOSRTCAudioGetAudioInputDevicesCount");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioGetAudioInputDevicesCount, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioGetAudioInputDevicesCount::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioGetAudioInputDevicesCount, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioGetAudioInputDevicesCount::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioGetAudioInputDevicesCount, ReturnValue) == 0x00000C, "Member 'CoreRTCAudio_EOSRTCAudioGetAudioInputDevicesCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioGetAudioOutputDeviceByIndex
// 0x0038 (0x0038 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioGetAudioOutputDeviceByIndex final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSGetAudioOutputDeviceByIndexOptions Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3D[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSAudioOutputDeviceInfo              ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioGetAudioOutputDeviceByIndex) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioGetAudioOutputDeviceByIndex");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioGetAudioOutputDeviceByIndex) == 0x000038, "Wrong size on CoreRTCAudio_EOSRTCAudioGetAudioOutputDeviceByIndex");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioGetAudioOutputDeviceByIndex, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioGetAudioOutputDeviceByIndex::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioGetAudioOutputDeviceByIndex, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioGetAudioOutputDeviceByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioGetAudioOutputDeviceByIndex, ReturnValue) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioGetAudioOutputDeviceByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioGetAudioOutputDevicesCount
// 0x0010 (0x0010 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioGetAudioOutputDevicesCount final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSGetAudioOutputDevicesCountOptions  Options;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioGetAudioOutputDevicesCount) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioGetAudioOutputDevicesCount");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioGetAudioOutputDevicesCount) == 0x000010, "Wrong size on CoreRTCAudio_EOSRTCAudioGetAudioOutputDevicesCount");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioGetAudioOutputDevicesCount, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioGetAudioOutputDevicesCount::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioGetAudioOutputDevicesCount, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioGetAudioOutputDevicesCount::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioGetAudioOutputDevicesCount, ReturnValue) == 0x00000C, "Member 'CoreRTCAudio_EOSRTCAudioGetAudioOutputDevicesCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioRegisterPlatformAudioUser
// 0x0020 (0x0020 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioRegisterPlatformAudioUser final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSRegisterPlatformAudioUserOptions   Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3F[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioRegisterPlatformAudioUser) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioRegisterPlatformAudioUser");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioRegisterPlatformAudioUser) == 0x000020, "Wrong size on CoreRTCAudio_EOSRTCAudioRegisterPlatformAudioUser");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRegisterPlatformAudioUser, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioRegisterPlatformAudioUser::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRegisterPlatformAudioUser, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioRegisterPlatformAudioUser::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRegisterPlatformAudioUser, ReturnValue) == 0x000018, "Member 'CoreRTCAudio_EOSRTCAudioRegisterPlatformAudioUser::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioRemoveNotifyAudioBeforeRender
// 0x0018 (0x0018 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeRender final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHRTCAudio                          Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeRender) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeRender");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeRender) == 0x000018, "Wrong size on CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeRender");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeRender, WorldContextObject) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeRender::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeRender, Handle) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeRender::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeRender, NotificationID) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeRender::NotificationID' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioRemoveNotifyAudioBeforeSend
// 0x0018 (0x0018 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeSend final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHRTCAudio                          Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeSend) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeSend");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeSend) == 0x000018, "Wrong size on CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeSend");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeSend, WorldContextObject) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeSend::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeSend, Handle) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeSend::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeSend, NotificationID) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioBeforeSend::NotificationID' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioRemoveNotifyAudioDevicesChanged
// 0x0018 (0x0018 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioDevicesChanged final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHRTCAudio                          Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioDevicesChanged) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioDevicesChanged");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioDevicesChanged) == 0x000018, "Wrong size on CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioDevicesChanged");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioDevicesChanged, WorldContextObject) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioDevicesChanged::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioDevicesChanged, Handle) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioDevicesChanged::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioDevicesChanged, NotificationID) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioDevicesChanged::NotificationID' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioRemoveNotifyAudioInputState
// 0x0018 (0x0018 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioInputState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHRTCAudio                          Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioInputState) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioInputState");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioInputState) == 0x000018, "Wrong size on CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioInputState");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioInputState, WorldContextObject) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioInputState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioInputState, Handle) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioInputState::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioInputState, NotificationID) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioInputState::NotificationID' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioRemoveNotifyAudioOutputState
// 0x0018 (0x0018 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioOutputState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHRTCAudio                          Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioOutputState) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioOutputState");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioOutputState) == 0x000018, "Wrong size on CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioOutputState");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioOutputState, WorldContextObject) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioOutputState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioOutputState, Handle) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioOutputState::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioOutputState, NotificationID) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyAudioOutputState::NotificationID' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioRemoveNotifyParticipantUpdated
// 0x0018 (0x0018 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioRemoveNotifyParticipantUpdated final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHRTCAudio                          Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     NotificationID;                                    // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioRemoveNotifyParticipantUpdated) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioRemoveNotifyParticipantUpdated");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioRemoveNotifyParticipantUpdated) == 0x000018, "Wrong size on CoreRTCAudio_EOSRTCAudioRemoveNotifyParticipantUpdated");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyParticipantUpdated, WorldContextObject) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyParticipantUpdated::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyParticipantUpdated, Handle) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyParticipantUpdated::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioRemoveNotifyParticipantUpdated, NotificationID) == 0x000010, "Member 'CoreRTCAudio_EOSRTCAudioRemoveNotifyParticipantUpdated::NotificationID' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioSendAudio
// 0x0058 (0x0058 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioSendAudio final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSendAudioOptions                   Options;                                           // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A40[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioSendAudio) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioSendAudio");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioSendAudio) == 0x000058, "Wrong size on CoreRTCAudio_EOSRTCAudioSendAudio");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioSendAudio, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioSendAudio::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioSendAudio, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioSendAudio::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioSendAudio, ReturnValue) == 0x000050, "Member 'CoreRTCAudio_EOSRTCAudioSendAudio::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioSetAudioInputSettings
// 0x0050 (0x0050 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioSetAudioInputSettings final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSetAudioInputSettingsOptions       Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A41[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioSetAudioInputSettings) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioSetAudioInputSettings");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioSetAudioInputSettings) == 0x000050, "Wrong size on CoreRTCAudio_EOSRTCAudioSetAudioInputSettings");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioSetAudioInputSettings, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioSetAudioInputSettings::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioSetAudioInputSettings, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioSetAudioInputSettings::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioSetAudioInputSettings, ReturnValue) == 0x000048, "Member 'CoreRTCAudio_EOSRTCAudioSetAudioInputSettings::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioSetAudioOutputSettings
// 0x0050 (0x0050 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioSetAudioOutputSettings final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSetAudioOutputSettingsOptions      Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A42[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioSetAudioOutputSettings) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioSetAudioOutputSettings");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioSetAudioOutputSettings) == 0x000050, "Wrong size on CoreRTCAudio_EOSRTCAudioSetAudioOutputSettings");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioSetAudioOutputSettings, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioSetAudioOutputSettings::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioSetAudioOutputSettings, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioSetAudioOutputSettings::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioSetAudioOutputSettings, ReturnValue) == 0x000048, "Member 'CoreRTCAudio_EOSRTCAudioSetAudioOutputSettings::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioUnregisterPlatformAudioUser
// 0x0020 (0x0020 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioUnregisterPlatformAudioUser final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUnregisterPlatformAudioUserOptions Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A43[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioUnregisterPlatformAudioUser) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioUnregisterPlatformAudioUser");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioUnregisterPlatformAudioUser) == 0x000020, "Wrong size on CoreRTCAudio_EOSRTCAudioUnregisterPlatformAudioUser");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUnregisterPlatformAudioUser, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioUnregisterPlatformAudioUser::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUnregisterPlatformAudioUser, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioUnregisterPlatformAudioUser::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUnregisterPlatformAudioUser, ReturnValue) == 0x000018, "Member 'CoreRTCAudio_EOSRTCAudioUnregisterPlatformAudioUser::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioUpdateParticipantVolume
// 0x0078 (0x0078 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioUpdateParticipantVolume final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSRTCAudioUpdateParticipantVolumeOptions Options;                                           // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSRTCAudioUpdateParticipantVolumeCallbackInfo& Data)> Callback;                                          // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioUpdateParticipantVolume) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioUpdateParticipantVolume");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioUpdateParticipantVolume) == 0x000078, "Wrong size on CoreRTCAudio_EOSRTCAudioUpdateParticipantVolume");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateParticipantVolume, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioUpdateParticipantVolume::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateParticipantVolume, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioUpdateParticipantVolume::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateParticipantVolume, Callback) == 0x000068, "Member 'CoreRTCAudio_EOSRTCAudioUpdateParticipantVolume::Callback' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioUpdateReceiving
// 0x0078 (0x0078 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioUpdateReceiving final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUpdateReceivingOptions             Options;                                           // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSUpdateReceivingCallbackInfo& Data)> Callback;                                          // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioUpdateReceiving) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioUpdateReceiving");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioUpdateReceiving) == 0x000078, "Wrong size on CoreRTCAudio_EOSRTCAudioUpdateReceiving");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateReceiving, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioUpdateReceiving::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateReceiving, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioUpdateReceiving::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateReceiving, Callback) == 0x000068, "Member 'CoreRTCAudio_EOSRTCAudioUpdateReceiving::Callback' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioUpdateReceivingVolume
// 0x0058 (0x0058 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioUpdateReceivingVolume final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSRTCAudioUpdateReceivingVolumeOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSRTCAudioUpdateReceivingVolumeCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioUpdateReceivingVolume) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioUpdateReceivingVolume");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioUpdateReceivingVolume) == 0x000058, "Wrong size on CoreRTCAudio_EOSRTCAudioUpdateReceivingVolume");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateReceivingVolume, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioUpdateReceivingVolume::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateReceivingVolume, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioUpdateReceivingVolume::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateReceivingVolume, Callback) == 0x000048, "Member 'CoreRTCAudio_EOSRTCAudioUpdateReceivingVolume::Callback' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioUpdateSending
// 0x0058 (0x0058 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioUpdateSending final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUpdateSendingOptions               Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSUpdateSendingCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioUpdateSending) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioUpdateSending");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioUpdateSending) == 0x000058, "Wrong size on CoreRTCAudio_EOSRTCAudioUpdateSending");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateSending, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioUpdateSending::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateSending, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioUpdateSending::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateSending, Callback) == 0x000048, "Member 'CoreRTCAudio_EOSRTCAudioUpdateSending::Callback' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.EOSRTCAudioUpdateSendingVolume
// 0x0058 (0x0058 - 0x0000)
struct CoreRTCAudio_EOSRTCAudioUpdateSendingVolume final
{
public:
	struct FEOSHRTCAudio                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSRTCAudioUpdateSendingVolumeOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSRTCAudioUpdateSendingVolumeCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_EOSRTCAudioUpdateSendingVolume) == 0x000008, "Wrong alignment on CoreRTCAudio_EOSRTCAudioUpdateSendingVolume");
static_assert(sizeof(CoreRTCAudio_EOSRTCAudioUpdateSendingVolume) == 0x000058, "Wrong size on CoreRTCAudio_EOSRTCAudioUpdateSendingVolume");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateSendingVolume, Handle) == 0x000000, "Member 'CoreRTCAudio_EOSRTCAudioUpdateSendingVolume::Handle' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateSendingVolume, Options) == 0x000008, "Member 'CoreRTCAudio_EOSRTCAudioUpdateSendingVolume::Options' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_EOSRTCAudioUpdateSendingVolume, Callback) == 0x000048, "Member 'CoreRTCAudio_EOSRTCAudioUpdateSendingVolume::Callback' has a wrong offset!");

// Function EOSCore.CoreRTCAudio.GetRTCAudio
// 0x0010 (0x0010 - 0x0000)
struct CoreRTCAudio_GetRTCAudio final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreRTCAudio*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRTCAudio_GetRTCAudio) == 0x000008, "Wrong alignment on CoreRTCAudio_GetRTCAudio");
static_assert(sizeof(CoreRTCAudio_GetRTCAudio) == 0x000010, "Wrong size on CoreRTCAudio_GetRTCAudio");
static_assert(offsetof(CoreRTCAudio_GetRTCAudio, WorldContextObject) == 0x000000, "Member 'CoreRTCAudio_GetRTCAudio::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreRTCAudio_GetRTCAudio, ReturnValue) == 0x000008, "Member 'CoreRTCAudio_GetRTCAudio::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSSanctionsQueryActivePlayerSanctions.EOSSanctionsQueryActivePlayerSanctionsAsync
// 0x0058 (0x0058 - 0x0000)
struct EOSSanctionsQueryActivePlayerSanctions_EOSSanctionsQueryActivePlayerSanctionsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSanctionsQueryActivePlayerSanctionsOptions Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSSanctionsQueryActivePlayerSanctions* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSSanctionsQueryActivePlayerSanctions_EOSSanctionsQueryActivePlayerSanctionsAsync) == 0x000008, "Wrong alignment on EOSSanctionsQueryActivePlayerSanctions_EOSSanctionsQueryActivePlayerSanctionsAsync");
static_assert(sizeof(EOSSanctionsQueryActivePlayerSanctions_EOSSanctionsQueryActivePlayerSanctionsAsync) == 0x000058, "Wrong size on EOSSanctionsQueryActivePlayerSanctions_EOSSanctionsQueryActivePlayerSanctionsAsync");
static_assert(offsetof(EOSSanctionsQueryActivePlayerSanctions_EOSSanctionsQueryActivePlayerSanctionsAsync, WorldContextObject) == 0x000000, "Member 'EOSSanctionsQueryActivePlayerSanctions_EOSSanctionsQueryActivePlayerSanctionsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSSanctionsQueryActivePlayerSanctions_EOSSanctionsQueryActivePlayerSanctionsAsync, Options) == 0x000008, "Member 'EOSSanctionsQueryActivePlayerSanctions_EOSSanctionsQueryActivePlayerSanctionsAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSSanctionsQueryActivePlayerSanctions_EOSSanctionsQueryActivePlayerSanctionsAsync, ReturnValue) == 0x000050, "Member 'EOSSanctionsQueryActivePlayerSanctions_EOSSanctionsQueryActivePlayerSanctionsAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSSanctionsQueryActivePlayerSanctions.HandleCallback
// 0x0060 (0x0060 - 0x0000)
struct EOSSanctionsQueryActivePlayerSanctions_HandleCallback final
{
public:
	struct FEOSSanctionsQueryActivePlayerSanctionsCallbackInfo Data;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A45[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSSanctionsQueryActivePlayerSanctions_HandleCallback) == 0x000008, "Wrong alignment on EOSSanctionsQueryActivePlayerSanctions_HandleCallback");
static_assert(sizeof(EOSSanctionsQueryActivePlayerSanctions_HandleCallback) == 0x000060, "Wrong size on EOSSanctionsQueryActivePlayerSanctions_HandleCallback");
static_assert(offsetof(EOSSanctionsQueryActivePlayerSanctions_HandleCallback, Data) == 0x000000, "Member 'EOSSanctionsQueryActivePlayerSanctions_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSSanctionsQueryActivePlayerSanctions_HandleCallback, bWasSuccessful) == 0x000058, "Member 'EOSSanctionsQueryActivePlayerSanctions_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsUpdateSession.EOSSessionsUpdateSessionAsync
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreSessionsUpdateSession_EOSSessionsUpdateSessionAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsUpdateSessionOptions       Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreSessionsUpdateSession*          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreSessionsUpdateSession_EOSSessionsUpdateSessionAsync) == 0x000008, "Wrong alignment on EOSCoreSessionsUpdateSession_EOSSessionsUpdateSessionAsync");
static_assert(sizeof(EOSCoreSessionsUpdateSession_EOSSessionsUpdateSessionAsync) == 0x000018, "Wrong size on EOSCoreSessionsUpdateSession_EOSSessionsUpdateSessionAsync");
static_assert(offsetof(EOSCoreSessionsUpdateSession_EOSSessionsUpdateSessionAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreSessionsUpdateSession_EOSSessionsUpdateSessionAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsUpdateSession_EOSSessionsUpdateSessionAsync, Options) == 0x000008, "Member 'EOSCoreSessionsUpdateSession_EOSSessionsUpdateSessionAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsUpdateSession_EOSSessionsUpdateSessionAsync, ReturnValue) == 0x000010, "Member 'EOSCoreSessionsUpdateSession_EOSSessionsUpdateSessionAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsUpdateSession.HandleCallback
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreSessionsUpdateSession_HandleCallback final
{
public:
	struct FEOSSessionsUpdateSessionCallbackInfo  Data;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A47[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreSessionsUpdateSession_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreSessionsUpdateSession_HandleCallback");
static_assert(sizeof(EOSCoreSessionsUpdateSession_HandleCallback) == 0x000038, "Wrong size on EOSCoreSessionsUpdateSession_HandleCallback");
static_assert(offsetof(EOSCoreSessionsUpdateSession_HandleCallback, Data) == 0x000000, "Member 'EOSCoreSessionsUpdateSession_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsUpdateSession_HandleCallback, bWasSuccessful) == 0x000030, "Member 'EOSCoreSessionsUpdateSession_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsDestroySession.EOSSessionsDestroySessionAsync
// 0x0020 (0x0020 - 0x0000)
struct EOSCoreSessionsDestroySession_EOSSessionsDestroySessionAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsDestroySessionOptions      Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreSessionsDestroySession*         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreSessionsDestroySession_EOSSessionsDestroySessionAsync) == 0x000008, "Wrong alignment on EOSCoreSessionsDestroySession_EOSSessionsDestroySessionAsync");
static_assert(sizeof(EOSCoreSessionsDestroySession_EOSSessionsDestroySessionAsync) == 0x000020, "Wrong size on EOSCoreSessionsDestroySession_EOSSessionsDestroySessionAsync");
static_assert(offsetof(EOSCoreSessionsDestroySession_EOSSessionsDestroySessionAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreSessionsDestroySession_EOSSessionsDestroySessionAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsDestroySession_EOSSessionsDestroySessionAsync, Options) == 0x000008, "Member 'EOSCoreSessionsDestroySession_EOSSessionsDestroySessionAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsDestroySession_EOSSessionsDestroySessionAsync, ReturnValue) == 0x000018, "Member 'EOSCoreSessionsDestroySession_EOSSessionsDestroySessionAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsDestroySession.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreSessionsDestroySession_HandleCallback final
{
public:
	struct FEOSSessionsDestroySessionCallbackInfo Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A49[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreSessionsDestroySession_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreSessionsDestroySession_HandleCallback");
static_assert(sizeof(EOSCoreSessionsDestroySession_HandleCallback) == 0x000018, "Wrong size on EOSCoreSessionsDestroySession_HandleCallback");
static_assert(offsetof(EOSCoreSessionsDestroySession_HandleCallback, Data) == 0x000000, "Member 'EOSCoreSessionsDestroySession_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsDestroySession_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreSessionsDestroySession_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsJoinSession.EOSSessionsJoinSessionAsync
// 0x0050 (0x0050 - 0x0000)
struct EOSCoreSessionsJoinSession_EOSSessionsJoinSessionAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsJoinSessionOptions         Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreSessionsJoinSession*            ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreSessionsJoinSession_EOSSessionsJoinSessionAsync) == 0x000008, "Wrong alignment on EOSCoreSessionsJoinSession_EOSSessionsJoinSessionAsync");
static_assert(sizeof(EOSCoreSessionsJoinSession_EOSSessionsJoinSessionAsync) == 0x000050, "Wrong size on EOSCoreSessionsJoinSession_EOSSessionsJoinSessionAsync");
static_assert(offsetof(EOSCoreSessionsJoinSession_EOSSessionsJoinSessionAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreSessionsJoinSession_EOSSessionsJoinSessionAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsJoinSession_EOSSessionsJoinSessionAsync, Options) == 0x000008, "Member 'EOSCoreSessionsJoinSession_EOSSessionsJoinSessionAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsJoinSession_EOSSessionsJoinSessionAsync, ReturnValue) == 0x000048, "Member 'EOSCoreSessionsJoinSession_EOSSessionsJoinSessionAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsJoinSession.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreSessionsJoinSession_HandleCallback final
{
public:
	struct FEOSSessionsJoinSessionCallbackInfo    Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreSessionsJoinSession_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreSessionsJoinSession_HandleCallback");
static_assert(sizeof(EOSCoreSessionsJoinSession_HandleCallback) == 0x000018, "Wrong size on EOSCoreSessionsJoinSession_HandleCallback");
static_assert(offsetof(EOSCoreSessionsJoinSession_HandleCallback, Data) == 0x000000, "Member 'EOSCoreSessionsJoinSession_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsJoinSession_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreSessionsJoinSession_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsStartSession.EOSSessionsStartSessionAsync
// 0x0020 (0x0020 - 0x0000)
struct EOSCoreSessionsStartSession_EOSSessionsStartSessionAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsStartSessionOptions        Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreSessionsStartSession*           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreSessionsStartSession_EOSSessionsStartSessionAsync) == 0x000008, "Wrong alignment on EOSCoreSessionsStartSession_EOSSessionsStartSessionAsync");
static_assert(sizeof(EOSCoreSessionsStartSession_EOSSessionsStartSessionAsync) == 0x000020, "Wrong size on EOSCoreSessionsStartSession_EOSSessionsStartSessionAsync");
static_assert(offsetof(EOSCoreSessionsStartSession_EOSSessionsStartSessionAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreSessionsStartSession_EOSSessionsStartSessionAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsStartSession_EOSSessionsStartSessionAsync, Options) == 0x000008, "Member 'EOSCoreSessionsStartSession_EOSSessionsStartSessionAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsStartSession_EOSSessionsStartSessionAsync, ReturnValue) == 0x000018, "Member 'EOSCoreSessionsStartSession_EOSSessionsStartSessionAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsStartSession.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreSessionsStartSession_HandleCallback final
{
public:
	struct FEOSSessionsStartSessionCallbackInfo   Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreSessionsStartSession_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreSessionsStartSession_HandleCallback");
static_assert(sizeof(EOSCoreSessionsStartSession_HandleCallback) == 0x000018, "Wrong size on EOSCoreSessionsStartSession_HandleCallback");
static_assert(offsetof(EOSCoreSessionsStartSession_HandleCallback, Data) == 0x000000, "Member 'EOSCoreSessionsStartSession_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsStartSession_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreSessionsStartSession_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsEndSession.EOSSessionsEndSessionAsync
// 0x0020 (0x0020 - 0x0000)
struct EOSCoreSessionsEndSession_EOSSessionsEndSessionAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsEndSessionOptions          Options;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreSessionsEndSession*             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreSessionsEndSession_EOSSessionsEndSessionAsync) == 0x000008, "Wrong alignment on EOSCoreSessionsEndSession_EOSSessionsEndSessionAsync");
static_assert(sizeof(EOSCoreSessionsEndSession_EOSSessionsEndSessionAsync) == 0x000020, "Wrong size on EOSCoreSessionsEndSession_EOSSessionsEndSessionAsync");
static_assert(offsetof(EOSCoreSessionsEndSession_EOSSessionsEndSessionAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreSessionsEndSession_EOSSessionsEndSessionAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsEndSession_EOSSessionsEndSessionAsync, Options) == 0x000008, "Member 'EOSCoreSessionsEndSession_EOSSessionsEndSessionAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsEndSession_EOSSessionsEndSessionAsync, ReturnValue) == 0x000018, "Member 'EOSCoreSessionsEndSession_EOSSessionsEndSessionAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsEndSession.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreSessionsEndSession_HandleCallback final
{
public:
	struct FEOSSessionsEndSessionCallbackInfo     Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreSessionsEndSession_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreSessionsEndSession_HandleCallback");
static_assert(sizeof(EOSCoreSessionsEndSession_HandleCallback) == 0x000018, "Wrong size on EOSCoreSessionsEndSession_HandleCallback");
static_assert(offsetof(EOSCoreSessionsEndSession_HandleCallback, Data) == 0x000000, "Member 'EOSCoreSessionsEndSession_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsEndSession_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreSessionsEndSession_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsUnregisterPlayers.EOSSessionsUnregisterPlayersAsync
// 0x0030 (0x0030 - 0x0000)
struct EOSCoreSessionsUnregisterPlayers_EOSSessionsUnregisterPlayersAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsUnregisterPlayersOptions   Options;                                           // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreSessionsUnregisterPlayers*      ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreSessionsUnregisterPlayers_EOSSessionsUnregisterPlayersAsync) == 0x000008, "Wrong alignment on EOSCoreSessionsUnregisterPlayers_EOSSessionsUnregisterPlayersAsync");
static_assert(sizeof(EOSCoreSessionsUnregisterPlayers_EOSSessionsUnregisterPlayersAsync) == 0x000030, "Wrong size on EOSCoreSessionsUnregisterPlayers_EOSSessionsUnregisterPlayersAsync");
static_assert(offsetof(EOSCoreSessionsUnregisterPlayers_EOSSessionsUnregisterPlayersAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreSessionsUnregisterPlayers_EOSSessionsUnregisterPlayersAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsUnregisterPlayers_EOSSessionsUnregisterPlayersAsync, Options) == 0x000008, "Member 'EOSCoreSessionsUnregisterPlayers_EOSSessionsUnregisterPlayersAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsUnregisterPlayers_EOSSessionsUnregisterPlayersAsync, ReturnValue) == 0x000028, "Member 'EOSCoreSessionsUnregisterPlayers_EOSSessionsUnregisterPlayersAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsUnregisterPlayers.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct EOSCoreSessionsUnregisterPlayers_HandleCallback final
{
public:
	struct FEOSSessionsUnregisterPlayersCallbackInfo Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A51[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreSessionsUnregisterPlayers_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreSessionsUnregisterPlayers_HandleCallback");
static_assert(sizeof(EOSCoreSessionsUnregisterPlayers_HandleCallback) == 0x000028, "Wrong size on EOSCoreSessionsUnregisterPlayers_HandleCallback");
static_assert(offsetof(EOSCoreSessionsUnregisterPlayers_HandleCallback, Data) == 0x000000, "Member 'EOSCoreSessionsUnregisterPlayers_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsUnregisterPlayers_HandleCallback, bWasSuccessful) == 0x000020, "Member 'EOSCoreSessionsUnregisterPlayers_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsSendInvite.EOSSessionsSendInviteAsync
// 0x0068 (0x0068 - 0x0000)
struct EOSCoreSessionsSendInvite_EOSSessionsSendInviteAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsSendInviteOptions          Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreSessionsSendInvite*             ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreSessionsSendInvite_EOSSessionsSendInviteAsync) == 0x000008, "Wrong alignment on EOSCoreSessionsSendInvite_EOSSessionsSendInviteAsync");
static_assert(sizeof(EOSCoreSessionsSendInvite_EOSSessionsSendInviteAsync) == 0x000068, "Wrong size on EOSCoreSessionsSendInvite_EOSSessionsSendInviteAsync");
static_assert(offsetof(EOSCoreSessionsSendInvite_EOSSessionsSendInviteAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreSessionsSendInvite_EOSSessionsSendInviteAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsSendInvite_EOSSessionsSendInviteAsync, Options) == 0x000008, "Member 'EOSCoreSessionsSendInvite_EOSSessionsSendInviteAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsSendInvite_EOSSessionsSendInviteAsync, ReturnValue) == 0x000060, "Member 'EOSCoreSessionsSendInvite_EOSSessionsSendInviteAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsSendInvite.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreSessionsSendInvite_HandleCallback final
{
public:
	struct FEOSSessionsSendInviteCallbackInfo     Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A53[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreSessionsSendInvite_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreSessionsSendInvite_HandleCallback");
static_assert(sizeof(EOSCoreSessionsSendInvite_HandleCallback) == 0x000018, "Wrong size on EOSCoreSessionsSendInvite_HandleCallback");
static_assert(offsetof(EOSCoreSessionsSendInvite_HandleCallback, Data) == 0x000000, "Member 'EOSCoreSessionsSendInvite_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsSendInvite_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreSessionsSendInvite_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsRejectInvite.EOSSessionsRejectInviteAsync
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreSessionsRejectInvite_EOSSessionsRejectInviteAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsRejectInviteOptions        Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreSessionsRejectInvite*           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreSessionsRejectInvite_EOSSessionsRejectInviteAsync) == 0x000008, "Wrong alignment on EOSCoreSessionsRejectInvite_EOSSessionsRejectInviteAsync");
static_assert(sizeof(EOSCoreSessionsRejectInvite_EOSSessionsRejectInviteAsync) == 0x000048, "Wrong size on EOSCoreSessionsRejectInvite_EOSSessionsRejectInviteAsync");
static_assert(offsetof(EOSCoreSessionsRejectInvite_EOSSessionsRejectInviteAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreSessionsRejectInvite_EOSSessionsRejectInviteAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsRejectInvite_EOSSessionsRejectInviteAsync, Options) == 0x000008, "Member 'EOSCoreSessionsRejectInvite_EOSSessionsRejectInviteAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsRejectInvite_EOSSessionsRejectInviteAsync, ReturnValue) == 0x000040, "Member 'EOSCoreSessionsRejectInvite_EOSSessionsRejectInviteAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsRejectInvite.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreSessionsRejectInvite_HandleCallback final
{
public:
	struct FEOSSessionsRejectInviteCallbackInfo   Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A55[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreSessionsRejectInvite_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreSessionsRejectInvite_HandleCallback");
static_assert(sizeof(EOSCoreSessionsRejectInvite_HandleCallback) == 0x000018, "Wrong size on EOSCoreSessionsRejectInvite_HandleCallback");
static_assert(offsetof(EOSCoreSessionsRejectInvite_HandleCallback, Data) == 0x000000, "Member 'EOSCoreSessionsRejectInvite_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsRejectInvite_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreSessionsRejectInvite_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsQueryInvites.EOSSessionsQueryInvitesAsync
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreSessionsQueryInvites_EOSSessionsQueryInvitesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionsQueryInvitesOptions        Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A57[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEOSCoreSessionsQueryInvites*           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreSessionsQueryInvites_EOSSessionsQueryInvitesAsync) == 0x000008, "Wrong alignment on EOSCoreSessionsQueryInvites_EOSSessionsQueryInvitesAsync");
static_assert(sizeof(EOSCoreSessionsQueryInvites_EOSSessionsQueryInvitesAsync) == 0x000038, "Wrong size on EOSCoreSessionsQueryInvites_EOSSessionsQueryInvitesAsync");
static_assert(offsetof(EOSCoreSessionsQueryInvites_EOSSessionsQueryInvitesAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreSessionsQueryInvites_EOSSessionsQueryInvitesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsQueryInvites_EOSSessionsQueryInvitesAsync, Options) == 0x000008, "Member 'EOSCoreSessionsQueryInvites_EOSSessionsQueryInvitesAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsQueryInvites_EOSSessionsQueryInvitesAsync, ReturnValue) == 0x000030, "Member 'EOSCoreSessionsQueryInvites_EOSSessionsQueryInvitesAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsQueryInvites.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreSessionsQueryInvites_HandleCallback final
{
public:
	struct FEOSSessionsQueryInvitesCallbackInfo   Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A58[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreSessionsQueryInvites_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreSessionsQueryInvites_HandleCallback");
static_assert(sizeof(EOSCoreSessionsQueryInvites_HandleCallback) == 0x000040, "Wrong size on EOSCoreSessionsQueryInvites_HandleCallback");
static_assert(offsetof(EOSCoreSessionsQueryInvites_HandleCallback, Data) == 0x000000, "Member 'EOSCoreSessionsQueryInvites_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsQueryInvites_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreSessionsQueryInvites_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsSearchFind.EOSSessionSearchFindAsync
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreSessionsSearchFind_EOSSessionSearchFindAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSHSessionSearch                     SearchHandle;                                      // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSSessionSearchFindOptions           Options;                                           // 0x0010(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5A[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEOSCoreSessionsSearchFind*             ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreSessionsSearchFind_EOSSessionSearchFindAsync) == 0x000008, "Wrong alignment on EOSCoreSessionsSearchFind_EOSSessionSearchFindAsync");
static_assert(sizeof(EOSCoreSessionsSearchFind_EOSSessionSearchFindAsync) == 0x000040, "Wrong size on EOSCoreSessionsSearchFind_EOSSessionSearchFindAsync");
static_assert(offsetof(EOSCoreSessionsSearchFind_EOSSessionSearchFindAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreSessionsSearchFind_EOSSessionSearchFindAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsSearchFind_EOSSessionSearchFindAsync, SearchHandle) == 0x000008, "Member 'EOSCoreSessionsSearchFind_EOSSessionSearchFindAsync::SearchHandle' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsSearchFind_EOSSessionSearchFindAsync, Options) == 0x000010, "Member 'EOSCoreSessionsSearchFind_EOSSessionSearchFindAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsSearchFind_EOSSessionSearchFindAsync, ReturnValue) == 0x000038, "Member 'EOSCoreSessionsSearchFind_EOSSessionSearchFindAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreSessionsSearchFind.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct EOSCoreSessionsSearchFind_HandleCallback final
{
public:
	struct FEOSSessionSearchFindCallbackInfo      Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreSessionsSearchFind_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreSessionsSearchFind_HandleCallback");
static_assert(sizeof(EOSCoreSessionsSearchFind_HandleCallback) == 0x000018, "Wrong size on EOSCoreSessionsSearchFind_HandleCallback");
static_assert(offsetof(EOSCoreSessionsSearchFind_HandleCallback, Data) == 0x000000, "Member 'EOSCoreSessionsSearchFind_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreSessionsSearchFind_HandleCallback, bWasSuccessful) == 0x000010, "Member 'EOSCoreSessionsSearchFind_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreStats.EOSStatsCopyStatByIndex
// 0x0080 (0x0080 - 0x0000)
struct CoreStats_EOSStatsCopyStatByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSStatsCopyStatByIndexOptions        Options;                                           // 0x0008(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5C[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSStatsStat                          OutStat;                                           // 0x0038(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5D[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStats_EOSStatsCopyStatByIndex) == 0x000008, "Wrong alignment on CoreStats_EOSStatsCopyStatByIndex");
static_assert(sizeof(CoreStats_EOSStatsCopyStatByIndex) == 0x000080, "Wrong size on CoreStats_EOSStatsCopyStatByIndex");
static_assert(offsetof(CoreStats_EOSStatsCopyStatByIndex, WorldContextObject) == 0x000000, "Member 'CoreStats_EOSStatsCopyStatByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreStats_EOSStatsCopyStatByIndex, Options) == 0x000008, "Member 'CoreStats_EOSStatsCopyStatByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreStats_EOSStatsCopyStatByIndex, OutStat) == 0x000038, "Member 'CoreStats_EOSStatsCopyStatByIndex::OutStat' has a wrong offset!");
static_assert(offsetof(CoreStats_EOSStatsCopyStatByIndex, ReturnValue) == 0x000078, "Member 'CoreStats_EOSStatsCopyStatByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreStats.EOSStatsCopyStatByName
// 0x0088 (0x0088 - 0x0000)
struct CoreStats_EOSStatsCopyStatByName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSStatsCopyStatByNameOptions         Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	struct FEOSStatsStat                          OutStat;                                           // 0x0040(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5E[0x7];                                     // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStats_EOSStatsCopyStatByName) == 0x000008, "Wrong alignment on CoreStats_EOSStatsCopyStatByName");
static_assert(sizeof(CoreStats_EOSStatsCopyStatByName) == 0x000088, "Wrong size on CoreStats_EOSStatsCopyStatByName");
static_assert(offsetof(CoreStats_EOSStatsCopyStatByName, WorldContextObject) == 0x000000, "Member 'CoreStats_EOSStatsCopyStatByName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreStats_EOSStatsCopyStatByName, Options) == 0x000008, "Member 'CoreStats_EOSStatsCopyStatByName::Options' has a wrong offset!");
static_assert(offsetof(CoreStats_EOSStatsCopyStatByName, OutStat) == 0x000040, "Member 'CoreStats_EOSStatsCopyStatByName::OutStat' has a wrong offset!");
static_assert(offsetof(CoreStats_EOSStatsCopyStatByName, ReturnValue) == 0x000080, "Member 'CoreStats_EOSStatsCopyStatByName::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreStats.EOSStatsGetStatsCount
// 0x0038 (0x0038 - 0x0000)
struct CoreStats_EOSStatsGetStatsCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSStatsGetStatCountOptions           Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5F[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStats_EOSStatsGetStatsCount) == 0x000008, "Wrong alignment on CoreStats_EOSStatsGetStatsCount");
static_assert(sizeof(CoreStats_EOSStatsGetStatsCount) == 0x000038, "Wrong size on CoreStats_EOSStatsGetStatsCount");
static_assert(offsetof(CoreStats_EOSStatsGetStatsCount, WorldContextObject) == 0x000000, "Member 'CoreStats_EOSStatsGetStatsCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreStats_EOSStatsGetStatsCount, Options) == 0x000008, "Member 'CoreStats_EOSStatsGetStatsCount::Options' has a wrong offset!");
static_assert(offsetof(CoreStats_EOSStatsGetStatsCount, ReturnValue) == 0x000030, "Member 'CoreStats_EOSStatsGetStatsCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreStats.GetStats
// 0x0010 (0x0010 - 0x0000)
struct CoreStats_GetStats final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreStats*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStats_GetStats) == 0x000008, "Wrong alignment on CoreStats_GetStats");
static_assert(sizeof(CoreStats_GetStats) == 0x000010, "Wrong size on CoreStats_GetStats");
static_assert(offsetof(CoreStats_GetStats, WorldContextObject) == 0x000000, "Member 'CoreStats_GetStats::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreStats_GetStats, ReturnValue) == 0x000008, "Member 'CoreStats_GetStats::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreStats.EOSStatsIngestStat
// 0x0078 (0x0078 - 0x0000)
struct CoreStats_EOSStatsIngestStat final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSStatsIngestStatOptions             Options;                                           // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSStatsIngestStatCompleteCallbackInfo& Data)> Callback;                                          // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStats_EOSStatsIngestStat) == 0x000008, "Wrong alignment on CoreStats_EOSStatsIngestStat");
static_assert(sizeof(CoreStats_EOSStatsIngestStat) == 0x000078, "Wrong size on CoreStats_EOSStatsIngestStat");
static_assert(offsetof(CoreStats_EOSStatsIngestStat, WorldContextObject) == 0x000000, "Member 'CoreStats_EOSStatsIngestStat::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreStats_EOSStatsIngestStat, Options) == 0x000008, "Member 'CoreStats_EOSStatsIngestStat::Options' has a wrong offset!");
static_assert(offsetof(CoreStats_EOSStatsIngestStat, Callback) == 0x000068, "Member 'CoreStats_EOSStatsIngestStat::Callback' has a wrong offset!");

// Function EOSCore.CoreStats.EOSStatsQueryStats
// 0x0098 (0x0098 - 0x0000)
struct CoreStats_EOSStatsQueryStats final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSStatsQueryStatsOptions             Options;                                           // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSStatsOnQueryStatsCompleteCallbackInfo& Data)> Callback;                                          // 0x0088(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStats_EOSStatsQueryStats) == 0x000008, "Wrong alignment on CoreStats_EOSStatsQueryStats");
static_assert(sizeof(CoreStats_EOSStatsQueryStats) == 0x000098, "Wrong size on CoreStats_EOSStatsQueryStats");
static_assert(offsetof(CoreStats_EOSStatsQueryStats, WorldContextObject) == 0x000000, "Member 'CoreStats_EOSStatsQueryStats::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreStats_EOSStatsQueryStats, Options) == 0x000008, "Member 'CoreStats_EOSStatsQueryStats::Options' has a wrong offset!");
static_assert(offsetof(CoreStats_EOSStatsQueryStats, Callback) == 0x000088, "Member 'CoreStats_EOSStatsQueryStats::Callback' has a wrong offset!");

// Function EOSCore.EOSCoreStatsIngestStat.EOSStatsIngestStatAsync
// 0x0070 (0x0070 - 0x0000)
struct EOSCoreStatsIngestStat_EOSStatsIngestStatAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSStatsIngestStatOptions             Options;                                           // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreStatsIngestStat*                ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreStatsIngestStat_EOSStatsIngestStatAsync) == 0x000008, "Wrong alignment on EOSCoreStatsIngestStat_EOSStatsIngestStatAsync");
static_assert(sizeof(EOSCoreStatsIngestStat_EOSStatsIngestStatAsync) == 0x000070, "Wrong size on EOSCoreStatsIngestStat_EOSStatsIngestStatAsync");
static_assert(offsetof(EOSCoreStatsIngestStat_EOSStatsIngestStatAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreStatsIngestStat_EOSStatsIngestStatAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreStatsIngestStat_EOSStatsIngestStatAsync, Options) == 0x000008, "Member 'EOSCoreStatsIngestStat_EOSStatsIngestStatAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreStatsIngestStat_EOSStatsIngestStatAsync, ReturnValue) == 0x000068, "Member 'EOSCoreStatsIngestStat_EOSStatsIngestStatAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreStatsIngestStat.HandleCallback
// 0x0060 (0x0060 - 0x0000)
struct EOSCoreStatsIngestStat_HandleCallback final
{
public:
	struct FEOSStatsIngestStatCompleteCallbackInfo Data;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A61[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreStatsIngestStat_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreStatsIngestStat_HandleCallback");
static_assert(sizeof(EOSCoreStatsIngestStat_HandleCallback) == 0x000060, "Wrong size on EOSCoreStatsIngestStat_HandleCallback");
static_assert(offsetof(EOSCoreStatsIngestStat_HandleCallback, Data) == 0x000000, "Member 'EOSCoreStatsIngestStat_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreStatsIngestStat_HandleCallback, bWasSuccessful) == 0x000058, "Member 'EOSCoreStatsIngestStat_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreStatsQueryStats.EOSStatsQueryStatsAsync
// 0x0090 (0x0090 - 0x0000)
struct EOSCoreStatsQueryStats_EOSStatsQueryStatsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSStatsQueryStatsOptions             Options;                                           // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreStatsQueryStats*                ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreStatsQueryStats_EOSStatsQueryStatsAsync) == 0x000008, "Wrong alignment on EOSCoreStatsQueryStats_EOSStatsQueryStatsAsync");
static_assert(sizeof(EOSCoreStatsQueryStats_EOSStatsQueryStatsAsync) == 0x000090, "Wrong size on EOSCoreStatsQueryStats_EOSStatsQueryStatsAsync");
static_assert(offsetof(EOSCoreStatsQueryStats_EOSStatsQueryStatsAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreStatsQueryStats_EOSStatsQueryStatsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreStatsQueryStats_EOSStatsQueryStatsAsync, Options) == 0x000008, "Member 'EOSCoreStatsQueryStats_EOSStatsQueryStatsAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreStatsQueryStats_EOSStatsQueryStatsAsync, ReturnValue) == 0x000088, "Member 'EOSCoreStatsQueryStats_EOSStatsQueryStatsAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreStatsQueryStats.HandleCallback
// 0x0060 (0x0060 - 0x0000)
struct EOSCoreStatsQueryStats_HandleCallback final
{
public:
	struct FEOSStatsOnQueryStatsCompleteCallbackInfo Data;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A63[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreStatsQueryStats_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreStatsQueryStats_HandleCallback");
static_assert(sizeof(EOSCoreStatsQueryStats_HandleCallback) == 0x000060, "Wrong size on EOSCoreStatsQueryStats_HandleCallback");
static_assert(offsetof(EOSCoreStatsQueryStats_HandleCallback, Data) == 0x000000, "Member 'EOSCoreStatsQueryStats_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreStatsQueryStats_HandleCallback, bWasSuccessful) == 0x000058, "Member 'EOSCoreStatsQueryStats_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreTitleStorage.EOSTitleStorageCopyFileMetadataAtIndex
// 0x0068 (0x0068 - 0x0000)
struct CoreTitleStorage_EOSTitleStorageCopyFileMetadataAtIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageCopyFileMetadataAtIndexOptions Options;                                           // 0x0008(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A64[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSTitleStorageFileMetadata           OutMetadata;                                       // 0x0038(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A65[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTitleStorage_EOSTitleStorageCopyFileMetadataAtIndex) == 0x000008, "Wrong alignment on CoreTitleStorage_EOSTitleStorageCopyFileMetadataAtIndex");
static_assert(sizeof(CoreTitleStorage_EOSTitleStorageCopyFileMetadataAtIndex) == 0x000068, "Wrong size on CoreTitleStorage_EOSTitleStorageCopyFileMetadataAtIndex");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageCopyFileMetadataAtIndex, WorldContextObject) == 0x000000, "Member 'CoreTitleStorage_EOSTitleStorageCopyFileMetadataAtIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageCopyFileMetadataAtIndex, Options) == 0x000008, "Member 'CoreTitleStorage_EOSTitleStorageCopyFileMetadataAtIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageCopyFileMetadataAtIndex, OutMetadata) == 0x000038, "Member 'CoreTitleStorage_EOSTitleStorageCopyFileMetadataAtIndex::OutMetadata' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageCopyFileMetadataAtIndex, ReturnValue) == 0x000060, "Member 'CoreTitleStorage_EOSTitleStorageCopyFileMetadataAtIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreTitleStorage.EOSTitleStorageCopyFileMetadataByFilename
// 0x0070 (0x0070 - 0x0000)
struct CoreTitleStorage_EOSTitleStorageCopyFileMetadataByFilename final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageCopyFileMetadataByFilenameOptions Options;                                           // 0x0008(0x0038)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageFileMetadata           OutMetadata;                                       // 0x0040(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A66[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTitleStorage_EOSTitleStorageCopyFileMetadataByFilename) == 0x000008, "Wrong alignment on CoreTitleStorage_EOSTitleStorageCopyFileMetadataByFilename");
static_assert(sizeof(CoreTitleStorage_EOSTitleStorageCopyFileMetadataByFilename) == 0x000070, "Wrong size on CoreTitleStorage_EOSTitleStorageCopyFileMetadataByFilename");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageCopyFileMetadataByFilename, WorldContextObject) == 0x000000, "Member 'CoreTitleStorage_EOSTitleStorageCopyFileMetadataByFilename::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageCopyFileMetadataByFilename, Options) == 0x000008, "Member 'CoreTitleStorage_EOSTitleStorageCopyFileMetadataByFilename::Options' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageCopyFileMetadataByFilename, OutMetadata) == 0x000040, "Member 'CoreTitleStorage_EOSTitleStorageCopyFileMetadataByFilename::OutMetadata' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageCopyFileMetadataByFilename, ReturnValue) == 0x000068, "Member 'CoreTitleStorage_EOSTitleStorageCopyFileMetadataByFilename::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreTitleStorage.EOSTitleStorageFileTransferRequestCancelRequest
// 0x0018 (0x0018 - 0x0000)
struct CoreTitleStorage_EOSTitleStorageFileTransferRequestCancelRequest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageFileTransferRequestHandle Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A67[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTitleStorage_EOSTitleStorageFileTransferRequestCancelRequest) == 0x000008, "Wrong alignment on CoreTitleStorage_EOSTitleStorageFileTransferRequestCancelRequest");
static_assert(sizeof(CoreTitleStorage_EOSTitleStorageFileTransferRequestCancelRequest) == 0x000018, "Wrong size on CoreTitleStorage_EOSTitleStorageFileTransferRequestCancelRequest");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageFileTransferRequestCancelRequest, WorldContextObject) == 0x000000, "Member 'CoreTitleStorage_EOSTitleStorageFileTransferRequestCancelRequest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageFileTransferRequestCancelRequest, Handle) == 0x000008, "Member 'CoreTitleStorage_EOSTitleStorageFileTransferRequestCancelRequest::Handle' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageFileTransferRequestCancelRequest, ReturnValue) == 0x000010, "Member 'CoreTitleStorage_EOSTitleStorageFileTransferRequestCancelRequest::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreTitleStorage.EOSTitleStorageFileTransferRequestGetFilename
// 0x0030 (0x0030 - 0x0000)
struct CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageFileTransferRequestHandle Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FilenameStringBufferSizeBytes;                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A68[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutStringBuffer;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A69[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename) == 0x000008, "Wrong alignment on CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename");
static_assert(sizeof(CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename) == 0x000030, "Wrong size on CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename, WorldContextObject) == 0x000000, "Member 'CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename, Handle) == 0x000008, "Member 'CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename::Handle' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename, FilenameStringBufferSizeBytes) == 0x000010, "Member 'CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename::FilenameStringBufferSizeBytes' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename, OutStringBuffer) == 0x000018, "Member 'CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename::OutStringBuffer' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename, ReturnValue) == 0x000028, "Member 'CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFilename::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreTitleStorage.EOSTitleStorageFileTransferRequestGetFileRequestState
// 0x0018 (0x0018 - 0x0000)
struct CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFileRequestState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageFileTransferRequestHandle Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A6A[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFileRequestState) == 0x000008, "Wrong alignment on CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFileRequestState");
static_assert(sizeof(CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFileRequestState) == 0x000018, "Wrong size on CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFileRequestState");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFileRequestState, WorldContextObject) == 0x000000, "Member 'CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFileRequestState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFileRequestState, Handle) == 0x000008, "Member 'CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFileRequestState::Handle' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFileRequestState, ReturnValue) == 0x000010, "Member 'CoreTitleStorage_EOSTitleStorageFileTransferRequestGetFileRequestState::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreTitleStorage.EOSTitleStorageGetFileMetadataCount
// 0x0038 (0x0038 - 0x0000)
struct CoreTitleStorage_EOSTitleStorageGetFileMetadataCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageGetFileMetadataCountOptions Options;                                           // 0x0008(0x0028)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A6B[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTitleStorage_EOSTitleStorageGetFileMetadataCount) == 0x000008, "Wrong alignment on CoreTitleStorage_EOSTitleStorageGetFileMetadataCount");
static_assert(sizeof(CoreTitleStorage_EOSTitleStorageGetFileMetadataCount) == 0x000038, "Wrong size on CoreTitleStorage_EOSTitleStorageGetFileMetadataCount");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageGetFileMetadataCount, WorldContextObject) == 0x000000, "Member 'CoreTitleStorage_EOSTitleStorageGetFileMetadataCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageGetFileMetadataCount, Options) == 0x000008, "Member 'CoreTitleStorage_EOSTitleStorageGetFileMetadataCount::Options' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageGetFileMetadataCount, ReturnValue) == 0x000030, "Member 'CoreTitleStorage_EOSTitleStorageGetFileMetadataCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreTitleStorage.GetTitleStorage
// 0x0010 (0x0010 - 0x0000)
struct CoreTitleStorage_GetTitleStorage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreTitleStorage*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTitleStorage_GetTitleStorage) == 0x000008, "Wrong alignment on CoreTitleStorage_GetTitleStorage");
static_assert(sizeof(CoreTitleStorage_GetTitleStorage) == 0x000010, "Wrong size on CoreTitleStorage_GetTitleStorage");
static_assert(offsetof(CoreTitleStorage_GetTitleStorage, WorldContextObject) == 0x000000, "Member 'CoreTitleStorage_GetTitleStorage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_GetTitleStorage, ReturnValue) == 0x000008, "Member 'CoreTitleStorage_GetTitleStorage::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreTitleStorage.EOSTitleStorageDeleteCache
// 0x0048 (0x0048 - 0x0000)
struct CoreTitleStorage_EOSTitleStorageDeleteCache final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageDeleteCacheOptions     Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSTitleStorageDeleteCacheCallbackInfo& Data)> Callback;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A6C[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTitleStorage_EOSTitleStorageDeleteCache) == 0x000008, "Wrong alignment on CoreTitleStorage_EOSTitleStorageDeleteCache");
static_assert(sizeof(CoreTitleStorage_EOSTitleStorageDeleteCache) == 0x000048, "Wrong size on CoreTitleStorage_EOSTitleStorageDeleteCache");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageDeleteCache, WorldContextObject) == 0x000000, "Member 'CoreTitleStorage_EOSTitleStorageDeleteCache::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageDeleteCache, Options) == 0x000008, "Member 'CoreTitleStorage_EOSTitleStorageDeleteCache::Options' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageDeleteCache, Callback) == 0x000030, "Member 'CoreTitleStorage_EOSTitleStorageDeleteCache::Callback' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageDeleteCache, ReturnValue) == 0x000040, "Member 'CoreTitleStorage_EOSTitleStorageDeleteCache::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreTitleStorage.EOSTitleStorageQueryFile
// 0x0050 (0x0050 - 0x0000)
struct CoreTitleStorage_EOSTitleStorageQueryFile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageQueryFileOptions       Options;                                           // 0x0008(0x0038)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSTitleStorageQueryFileCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTitleStorage_EOSTitleStorageQueryFile) == 0x000008, "Wrong alignment on CoreTitleStorage_EOSTitleStorageQueryFile");
static_assert(sizeof(CoreTitleStorage_EOSTitleStorageQueryFile) == 0x000050, "Wrong size on CoreTitleStorage_EOSTitleStorageQueryFile");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageQueryFile, WorldContextObject) == 0x000000, "Member 'CoreTitleStorage_EOSTitleStorageQueryFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageQueryFile, Options) == 0x000008, "Member 'CoreTitleStorage_EOSTitleStorageQueryFile::Options' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageQueryFile, Callback) == 0x000040, "Member 'CoreTitleStorage_EOSTitleStorageQueryFile::Callback' has a wrong offset!");

// Function EOSCore.CoreTitleStorage.EOSTitleStorageQueryFileList
// 0x0050 (0x0050 - 0x0000)
struct CoreTitleStorage_EOSTitleStorageQueryFileList final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageQueryFileListOptions   Options;                                           // 0x0008(0x0038)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSTitleStorageQueryFileListCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTitleStorage_EOSTitleStorageQueryFileList) == 0x000008, "Wrong alignment on CoreTitleStorage_EOSTitleStorageQueryFileList");
static_assert(sizeof(CoreTitleStorage_EOSTitleStorageQueryFileList) == 0x000050, "Wrong size on CoreTitleStorage_EOSTitleStorageQueryFileList");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageQueryFileList, WorldContextObject) == 0x000000, "Member 'CoreTitleStorage_EOSTitleStorageQueryFileList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageQueryFileList, Options) == 0x000008, "Member 'CoreTitleStorage_EOSTitleStorageQueryFileList::Options' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageQueryFileList, Callback) == 0x000040, "Member 'CoreTitleStorage_EOSTitleStorageQueryFileList::Callback' has a wrong offset!");

// Function EOSCore.CoreTitleStorage.EOSTitleStorageReadFile
// 0x0078 (0x0078 - 0x0000)
struct CoreTitleStorage_EOSTitleStorageReadFile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageReadFileOptions        Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSTitleStorageReadFileCallbackInfo& Data)> Callback;                                          // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageFileTransferRequestHandle ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTitleStorage_EOSTitleStorageReadFile) == 0x000008, "Wrong alignment on CoreTitleStorage_EOSTitleStorageReadFile");
static_assert(sizeof(CoreTitleStorage_EOSTitleStorageReadFile) == 0x000078, "Wrong size on CoreTitleStorage_EOSTitleStorageReadFile");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageReadFile, WorldContextObject) == 0x000000, "Member 'CoreTitleStorage_EOSTitleStorageReadFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageReadFile, Options) == 0x000008, "Member 'CoreTitleStorage_EOSTitleStorageReadFile::Options' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageReadFile, Callback) == 0x000060, "Member 'CoreTitleStorage_EOSTitleStorageReadFile::Callback' has a wrong offset!");
static_assert(offsetof(CoreTitleStorage_EOSTitleStorageReadFile, ReturnValue) == 0x000070, "Member 'CoreTitleStorage_EOSTitleStorageReadFile::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreTitleStorageQueryFile.EOSTitleStorageQueryFileAsync
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreTitleStorageQueryFile_EOSTitleStorageQueryFileAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageQueryFileOptions       Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreTitleStorageQueryFile*          ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreTitleStorageQueryFile_EOSTitleStorageQueryFileAsync) == 0x000008, "Wrong alignment on EOSCoreTitleStorageQueryFile_EOSTitleStorageQueryFileAsync");
static_assert(sizeof(EOSCoreTitleStorageQueryFile_EOSTitleStorageQueryFileAsync) == 0x000048, "Wrong size on EOSCoreTitleStorageQueryFile_EOSTitleStorageQueryFileAsync");
static_assert(offsetof(EOSCoreTitleStorageQueryFile_EOSTitleStorageQueryFileAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreTitleStorageQueryFile_EOSTitleStorageQueryFileAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreTitleStorageQueryFile_EOSTitleStorageQueryFileAsync, Options) == 0x000008, "Member 'EOSCoreTitleStorageQueryFile_EOSTitleStorageQueryFileAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreTitleStorageQueryFile_EOSTitleStorageQueryFileAsync, ReturnValue) == 0x000040, "Member 'EOSCoreTitleStorageQueryFile_EOSTitleStorageQueryFileAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreTitleStorageQueryFile.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreTitleStorageQueryFile_HandleCallback final
{
public:
	struct FEOSTitleStorageQueryFileCallbackInfo  Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A6E[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreTitleStorageQueryFile_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreTitleStorageQueryFile_HandleCallback");
static_assert(sizeof(EOSCoreTitleStorageQueryFile_HandleCallback) == 0x000040, "Wrong size on EOSCoreTitleStorageQueryFile_HandleCallback");
static_assert(offsetof(EOSCoreTitleStorageQueryFile_HandleCallback, Data) == 0x000000, "Member 'EOSCoreTitleStorageQueryFile_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreTitleStorageQueryFile_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreTitleStorageQueryFile_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreTitleStorageQueryFileList.EOSTitleStorageQueryFileListAsync
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreTitleStorageQueryFileList_EOSTitleStorageQueryFileListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageQueryFileListOptions   Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreTitleStorageQueryFileList*      ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreTitleStorageQueryFileList_EOSTitleStorageQueryFileListAsync) == 0x000008, "Wrong alignment on EOSCoreTitleStorageQueryFileList_EOSTitleStorageQueryFileListAsync");
static_assert(sizeof(EOSCoreTitleStorageQueryFileList_EOSTitleStorageQueryFileListAsync) == 0x000048, "Wrong size on EOSCoreTitleStorageQueryFileList_EOSTitleStorageQueryFileListAsync");
static_assert(offsetof(EOSCoreTitleStorageQueryFileList_EOSTitleStorageQueryFileListAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreTitleStorageQueryFileList_EOSTitleStorageQueryFileListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreTitleStorageQueryFileList_EOSTitleStorageQueryFileListAsync, Options) == 0x000008, "Member 'EOSCoreTitleStorageQueryFileList_EOSTitleStorageQueryFileListAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreTitleStorageQueryFileList_EOSTitleStorageQueryFileListAsync, ReturnValue) == 0x000040, "Member 'EOSCoreTitleStorageQueryFileList_EOSTitleStorageQueryFileListAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreTitleStorageQueryFileList.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreTitleStorageQueryFileList_HandleCallback final
{
public:
	struct FEOSTitleStorageQueryFileListCallbackInfo Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A70[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreTitleStorageQueryFileList_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreTitleStorageQueryFileList_HandleCallback");
static_assert(sizeof(EOSCoreTitleStorageQueryFileList_HandleCallback) == 0x000040, "Wrong size on EOSCoreTitleStorageQueryFileList_HandleCallback");
static_assert(offsetof(EOSCoreTitleStorageQueryFileList_HandleCallback, Data) == 0x000000, "Member 'EOSCoreTitleStorageQueryFileList_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreTitleStorageQueryFileList_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreTitleStorageQueryFileList_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreTitleStorageReadFile.EOSTitleStorageReadFileAsync
// 0x0068 (0x0068 - 0x0000)
struct EOSCoreTitleStorageReadFile_EOSTitleStorageReadFileAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageReadFileOptions        Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreTitleStorageReadFile*           ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreTitleStorageReadFile_EOSTitleStorageReadFileAsync) == 0x000008, "Wrong alignment on EOSCoreTitleStorageReadFile_EOSTitleStorageReadFileAsync");
static_assert(sizeof(EOSCoreTitleStorageReadFile_EOSTitleStorageReadFileAsync) == 0x000068, "Wrong size on EOSCoreTitleStorageReadFile_EOSTitleStorageReadFileAsync");
static_assert(offsetof(EOSCoreTitleStorageReadFile_EOSTitleStorageReadFileAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreTitleStorageReadFile_EOSTitleStorageReadFileAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreTitleStorageReadFile_EOSTitleStorageReadFileAsync, Options) == 0x000008, "Member 'EOSCoreTitleStorageReadFile_EOSTitleStorageReadFileAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreTitleStorageReadFile_EOSTitleStorageReadFileAsync, ReturnValue) == 0x000060, "Member 'EOSCoreTitleStorageReadFile_EOSTitleStorageReadFileAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreTitleStorageReadFile.HandleCallback
// 0x0050 (0x0050 - 0x0000)
struct EOSCoreTitleStorageReadFile_HandleCallback final
{
public:
	struct FEOSTitleStorageReadFileCallbackInfo   Data;                                              // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A72[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreTitleStorageReadFile_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreTitleStorageReadFile_HandleCallback");
static_assert(sizeof(EOSCoreTitleStorageReadFile_HandleCallback) == 0x000050, "Wrong size on EOSCoreTitleStorageReadFile_HandleCallback");
static_assert(offsetof(EOSCoreTitleStorageReadFile_HandleCallback, Data) == 0x000000, "Member 'EOSCoreTitleStorageReadFile_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreTitleStorageReadFile_HandleCallback, bWasSuccessful) == 0x000048, "Member 'EOSCoreTitleStorageReadFile_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreTitleStorageDeleteCache.EOSTitleStorageDeleteCacheAsync
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreTitleStorageDeleteCache_EOSTitleStorageDeleteCacheAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSTitleStorageDeleteCacheOptions     Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreTitleStorageDeleteCache*        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreTitleStorageDeleteCache_EOSTitleStorageDeleteCacheAsync) == 0x000008, "Wrong alignment on EOSCoreTitleStorageDeleteCache_EOSTitleStorageDeleteCacheAsync");
static_assert(sizeof(EOSCoreTitleStorageDeleteCache_EOSTitleStorageDeleteCacheAsync) == 0x000038, "Wrong size on EOSCoreTitleStorageDeleteCache_EOSTitleStorageDeleteCacheAsync");
static_assert(offsetof(EOSCoreTitleStorageDeleteCache_EOSTitleStorageDeleteCacheAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreTitleStorageDeleteCache_EOSTitleStorageDeleteCacheAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreTitleStorageDeleteCache_EOSTitleStorageDeleteCacheAsync, Options) == 0x000008, "Member 'EOSCoreTitleStorageDeleteCache_EOSTitleStorageDeleteCacheAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreTitleStorageDeleteCache_EOSTitleStorageDeleteCacheAsync, ReturnValue) == 0x000030, "Member 'EOSCoreTitleStorageDeleteCache_EOSTitleStorageDeleteCacheAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreTitleStorageDeleteCache.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreTitleStorageDeleteCache_HandleCallback final
{
public:
	struct FEOSTitleStorageDeleteCacheCallbackInfo Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A74[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreTitleStorageDeleteCache_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreTitleStorageDeleteCache_HandleCallback");
static_assert(sizeof(EOSCoreTitleStorageDeleteCache_HandleCallback) == 0x000040, "Wrong size on EOSCoreTitleStorageDeleteCache_HandleCallback");
static_assert(offsetof(EOSCoreTitleStorageDeleteCache_HandleCallback, Data) == 0x000000, "Member 'EOSCoreTitleStorageDeleteCache_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreTitleStorageDeleteCache_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreTitleStorageDeleteCache_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIAcknowledgeEventId
// 0x0028 (0x0028 - 0x0000)
struct CoreUI_EOSUIAcknowledgeEventId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUIAcknowledgeEventIdOptions        Options;                                           // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A76[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUI_EOSUIAcknowledgeEventId) == 0x000008, "Wrong alignment on CoreUI_EOSUIAcknowledgeEventId");
static_assert(sizeof(CoreUI_EOSUIAcknowledgeEventId) == 0x000028, "Wrong size on CoreUI_EOSUIAcknowledgeEventId");
static_assert(offsetof(CoreUI_EOSUIAcknowledgeEventId, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIAcknowledgeEventId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIAcknowledgeEventId, Options) == 0x000008, "Member 'CoreUI_EOSUIAcknowledgeEventId::Options' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIAcknowledgeEventId, ReturnValue) == 0x000020, "Member 'CoreUI_EOSUIAcknowledgeEventId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIAddNotifyDisplaySettingsUpdated
// 0x0028 (0x0028 - 0x0000)
struct CoreUI_EOSUIAddNotifyDisplaySettingsUpdated final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUIAddNotifyDisplaySettingsUpdatedOptions Options;                                           // 0x0008(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSUIOnDisplaySettingsUpdatedCallbackInfo& Data)> Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A77[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSNotificationId                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUI_EOSUIAddNotifyDisplaySettingsUpdated) == 0x000008, "Wrong alignment on CoreUI_EOSUIAddNotifyDisplaySettingsUpdated");
static_assert(sizeof(CoreUI_EOSUIAddNotifyDisplaySettingsUpdated) == 0x000028, "Wrong size on CoreUI_EOSUIAddNotifyDisplaySettingsUpdated");
static_assert(offsetof(CoreUI_EOSUIAddNotifyDisplaySettingsUpdated, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIAddNotifyDisplaySettingsUpdated::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIAddNotifyDisplaySettingsUpdated, Options) == 0x000008, "Member 'CoreUI_EOSUIAddNotifyDisplaySettingsUpdated::Options' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIAddNotifyDisplaySettingsUpdated, Callback) == 0x00000C, "Member 'CoreUI_EOSUIAddNotifyDisplaySettingsUpdated::Callback' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIAddNotifyDisplaySettingsUpdated, ReturnValue) == 0x000020, "Member 'CoreUI_EOSUIAddNotifyDisplaySettingsUpdated::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIGetFriendsExclusiveInput
// 0x0030 (0x0030 - 0x0000)
struct CoreUI_EOSUIGetFriendsExclusiveInput final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUIGetFriendsExclusiveInputOptions  Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A78[0x6];                                     // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUI_EOSUIGetFriendsExclusiveInput) == 0x000008, "Wrong alignment on CoreUI_EOSUIGetFriendsExclusiveInput");
static_assert(sizeof(CoreUI_EOSUIGetFriendsExclusiveInput) == 0x000030, "Wrong size on CoreUI_EOSUIGetFriendsExclusiveInput");
static_assert(offsetof(CoreUI_EOSUIGetFriendsExclusiveInput, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIGetFriendsExclusiveInput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIGetFriendsExclusiveInput, Options) == 0x000008, "Member 'CoreUI_EOSUIGetFriendsExclusiveInput::Options' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIGetFriendsExclusiveInput, ReturnValue) == 0x000029, "Member 'CoreUI_EOSUIGetFriendsExclusiveInput::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIGetFriendsVisible
// 0x0038 (0x0038 - 0x0000)
struct CoreUI_EOSUIGetFriendsVisible final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUIGetFriendsVisibleOptions         Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A79[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUI_EOSUIGetFriendsVisible) == 0x000008, "Wrong alignment on CoreUI_EOSUIGetFriendsVisible");
static_assert(sizeof(CoreUI_EOSUIGetFriendsVisible) == 0x000038, "Wrong size on CoreUI_EOSUIGetFriendsVisible");
static_assert(offsetof(CoreUI_EOSUIGetFriendsVisible, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIGetFriendsVisible::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIGetFriendsVisible, Options) == 0x000008, "Member 'CoreUI_EOSUIGetFriendsVisible::Options' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIGetFriendsVisible, ReturnValue) == 0x000030, "Member 'CoreUI_EOSUIGetFriendsVisible::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIGetNotificationLocationPreference
// 0x0010 (0x0010 - 0x0000)
struct CoreUI_EOSUIGetNotificationLocationPreference final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEOSUIENotificationLocation                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A7A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUI_EOSUIGetNotificationLocationPreference) == 0x000008, "Wrong alignment on CoreUI_EOSUIGetNotificationLocationPreference");
static_assert(sizeof(CoreUI_EOSUIGetNotificationLocationPreference) == 0x000010, "Wrong size on CoreUI_EOSUIGetNotificationLocationPreference");
static_assert(offsetof(CoreUI_EOSUIGetNotificationLocationPreference, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIGetNotificationLocationPreference::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIGetNotificationLocationPreference, ReturnValue) == 0x000008, "Member 'CoreUI_EOSUIGetNotificationLocationPreference::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIGetToggleFriendsKey
// 0x0010 (0x0010 - 0x0000)
struct CoreUI_EOSUIGetToggleFriendsKey final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUIGetToggleFriendsKeyOptions       Options;                                           // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUI_EOSUIGetToggleFriendsKey) == 0x000008, "Wrong alignment on CoreUI_EOSUIGetToggleFriendsKey");
static_assert(sizeof(CoreUI_EOSUIGetToggleFriendsKey) == 0x000010, "Wrong size on CoreUI_EOSUIGetToggleFriendsKey");
static_assert(offsetof(CoreUI_EOSUIGetToggleFriendsKey, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIGetToggleFriendsKey::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIGetToggleFriendsKey, Options) == 0x000008, "Member 'CoreUI_EOSUIGetToggleFriendsKey::Options' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIGetToggleFriendsKey, ReturnValue) == 0x00000C, "Member 'CoreUI_EOSUIGetToggleFriendsKey::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIIsValidKeyCombination
// 0x0010 (0x0010 - 0x0000)
struct CoreUI_EOSUIIsValidKeyCombination final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyCombination;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A7B[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUI_EOSUIIsValidKeyCombination) == 0x000008, "Wrong alignment on CoreUI_EOSUIIsValidKeyCombination");
static_assert(sizeof(CoreUI_EOSUIIsValidKeyCombination) == 0x000010, "Wrong size on CoreUI_EOSUIIsValidKeyCombination");
static_assert(offsetof(CoreUI_EOSUIIsValidKeyCombination, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIIsValidKeyCombination::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIIsValidKeyCombination, KeyCombination) == 0x000008, "Member 'CoreUI_EOSUIIsValidKeyCombination::KeyCombination' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIIsValidKeyCombination, ReturnValue) == 0x00000C, "Member 'CoreUI_EOSUIIsValidKeyCombination::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIRemoveNotifyDisplaySettingsUpdated
// 0x0010 (0x0010 - 0x0000)
struct CoreUI_EOSUIRemoveNotifyDisplaySettingsUpdated final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSNotificationId                     ID;                                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUI_EOSUIRemoveNotifyDisplaySettingsUpdated) == 0x000008, "Wrong alignment on CoreUI_EOSUIRemoveNotifyDisplaySettingsUpdated");
static_assert(sizeof(CoreUI_EOSUIRemoveNotifyDisplaySettingsUpdated) == 0x000010, "Wrong size on CoreUI_EOSUIRemoveNotifyDisplaySettingsUpdated");
static_assert(offsetof(CoreUI_EOSUIRemoveNotifyDisplaySettingsUpdated, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIRemoveNotifyDisplaySettingsUpdated::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIRemoveNotifyDisplaySettingsUpdated, ID) == 0x000008, "Member 'CoreUI_EOSUIRemoveNotifyDisplaySettingsUpdated::ID' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUISetDisplayPreference
// 0x0018 (0x0018 - 0x0000)
struct CoreUI_EOSUISetDisplayPreference final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUISetDisplayPreferenceOptions      Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A7C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUI_EOSUISetDisplayPreference) == 0x000008, "Wrong alignment on CoreUI_EOSUISetDisplayPreference");
static_assert(sizeof(CoreUI_EOSUISetDisplayPreference) == 0x000018, "Wrong size on CoreUI_EOSUISetDisplayPreference");
static_assert(offsetof(CoreUI_EOSUISetDisplayPreference, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUISetDisplayPreference::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUISetDisplayPreference, Options) == 0x000008, "Member 'CoreUI_EOSUISetDisplayPreference::Options' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUISetDisplayPreference, ReturnValue) == 0x000010, "Member 'CoreUI_EOSUISetDisplayPreference::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUISetToggleFriendsKey
// 0x0018 (0x0018 - 0x0000)
struct CoreUI_EOSUISetToggleFriendsKey final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUISetToggleFriendsKeyOptions       Options;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A7D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUI_EOSUISetToggleFriendsKey) == 0x000008, "Wrong alignment on CoreUI_EOSUISetToggleFriendsKey");
static_assert(sizeof(CoreUI_EOSUISetToggleFriendsKey) == 0x000018, "Wrong size on CoreUI_EOSUISetToggleFriendsKey");
static_assert(offsetof(CoreUI_EOSUISetToggleFriendsKey, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUISetToggleFriendsKey::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUISetToggleFriendsKey, Options) == 0x000008, "Member 'CoreUI_EOSUISetToggleFriendsKey::Options' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUISetToggleFriendsKey, ReturnValue) == 0x000010, "Member 'CoreUI_EOSUISetToggleFriendsKey::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUI.GetUI
// 0x0010 (0x0010 - 0x0000)
struct CoreUI_GetUI final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreUI*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUI_GetUI) == 0x000008, "Wrong alignment on CoreUI_GetUI");
static_assert(sizeof(CoreUI_GetUI) == 0x000010, "Wrong size on CoreUI_GetUI");
static_assert(offsetof(CoreUI_GetUI, WorldContextObject) == 0x000000, "Member 'CoreUI_GetUI::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_GetUI, ReturnValue) == 0x000008, "Member 'CoreUI_GetUI::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIHideFriends
// 0x0040 (0x0040 - 0x0000)
struct CoreUI_EOSUIHideFriends final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUIHideFriendsOptions               Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSUIHideFriendsCallbackInfo& Data)> Callback;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUI_EOSUIHideFriends) == 0x000008, "Wrong alignment on CoreUI_EOSUIHideFriends");
static_assert(sizeof(CoreUI_EOSUIHideFriends) == 0x000040, "Wrong size on CoreUI_EOSUIHideFriends");
static_assert(offsetof(CoreUI_EOSUIHideFriends, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIHideFriends::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIHideFriends, Options) == 0x000008, "Member 'CoreUI_EOSUIHideFriends::Options' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIHideFriends, Callback) == 0x000030, "Member 'CoreUI_EOSUIHideFriends::Callback' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIIsSocialOverlayPaused
// 0x0010 (0x0010 - 0x0000)
struct CoreUI_EOSUIIsSocialOverlayPaused final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUIIsSocialOverlayPausedOptions     Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A7E[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUI_EOSUIIsSocialOverlayPaused) == 0x000008, "Wrong alignment on CoreUI_EOSUIIsSocialOverlayPaused");
static_assert(sizeof(CoreUI_EOSUIIsSocialOverlayPaused) == 0x000010, "Wrong size on CoreUI_EOSUIIsSocialOverlayPaused");
static_assert(offsetof(CoreUI_EOSUIIsSocialOverlayPaused, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIIsSocialOverlayPaused::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIIsSocialOverlayPaused, Options) == 0x000008, "Member 'CoreUI_EOSUIIsSocialOverlayPaused::Options' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIIsSocialOverlayPaused, ReturnValue) == 0x000009, "Member 'CoreUI_EOSUIIsSocialOverlayPaused::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIPauseSocialOverlay
// 0x0010 (0x0010 - 0x0000)
struct CoreUI_EOSUIPauseSocialOverlay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUIPauseSocialOverlayOptions        Options;                                           // 0x0008(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A7F[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUI_EOSUIPauseSocialOverlay) == 0x000008, "Wrong alignment on CoreUI_EOSUIPauseSocialOverlay");
static_assert(sizeof(CoreUI_EOSUIPauseSocialOverlay) == 0x000010, "Wrong size on CoreUI_EOSUIPauseSocialOverlay");
static_assert(offsetof(CoreUI_EOSUIPauseSocialOverlay, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIPauseSocialOverlay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIPauseSocialOverlay, Options) == 0x000008, "Member 'CoreUI_EOSUIPauseSocialOverlay::Options' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIPauseSocialOverlay, ReturnValue) == 0x000009, "Member 'CoreUI_EOSUIPauseSocialOverlay::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIShowBlockPlayer
// 0x0060 (0x0060 - 0x0000)
struct CoreUI_EOSUIShowBlockPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUIShowBlockPlayerOptions           Options;                                           // 0x0008(0x0042)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A80[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSUIOnShowBlockPlayerCallbackInfo& Data)> Callback;                                          // 0x004C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A81[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUI_EOSUIShowBlockPlayer) == 0x000008, "Wrong alignment on CoreUI_EOSUIShowBlockPlayer");
static_assert(sizeof(CoreUI_EOSUIShowBlockPlayer) == 0x000060, "Wrong size on CoreUI_EOSUIShowBlockPlayer");
static_assert(offsetof(CoreUI_EOSUIShowBlockPlayer, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIShowBlockPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIShowBlockPlayer, Options) == 0x000008, "Member 'CoreUI_EOSUIShowBlockPlayer::Options' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIShowBlockPlayer, Callback) == 0x00004C, "Member 'CoreUI_EOSUIShowBlockPlayer::Callback' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIShowFriends
// 0x0040 (0x0040 - 0x0000)
struct CoreUI_EOSUIShowFriends final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUIShowFriendsOptions               Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A82[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSUIShowFriendsCallbackInfo& Data)> Callback;                                          // 0x002C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A83[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUI_EOSUIShowFriends) == 0x000008, "Wrong alignment on CoreUI_EOSUIShowFriends");
static_assert(sizeof(CoreUI_EOSUIShowFriends) == 0x000040, "Wrong size on CoreUI_EOSUIShowFriends");
static_assert(offsetof(CoreUI_EOSUIShowFriends, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIShowFriends::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIShowFriends, Options) == 0x000008, "Member 'CoreUI_EOSUIShowFriends::Options' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIShowFriends, Callback) == 0x00002C, "Member 'CoreUI_EOSUIShowFriends::Callback' has a wrong offset!");

// Function EOSCore.CoreUI.EOSUIShowReportPlayer
// 0x0060 (0x0060 - 0x0000)
struct CoreUI_EOSUIShowReportPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUIShowReportPlayerOptions          Options;                                           // 0x0008(0x0042)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A84[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FEOSUIOnShowReportPlayerCallbackInfo& Data)> Callback;                                          // 0x004C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A85[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUI_EOSUIShowReportPlayer) == 0x000008, "Wrong alignment on CoreUI_EOSUIShowReportPlayer");
static_assert(sizeof(CoreUI_EOSUIShowReportPlayer) == 0x000060, "Wrong size on CoreUI_EOSUIShowReportPlayer");
static_assert(offsetof(CoreUI_EOSUIShowReportPlayer, WorldContextObject) == 0x000000, "Member 'CoreUI_EOSUIShowReportPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIShowReportPlayer, Options) == 0x000008, "Member 'CoreUI_EOSUIShowReportPlayer::Options' has a wrong offset!");
static_assert(offsetof(CoreUI_EOSUIShowReportPlayer, Callback) == 0x00004C, "Member 'CoreUI_EOSUIShowReportPlayer::Callback' has a wrong offset!");

// Function EOSCore.EOSCoreUIShowFriends.EOSUIShowFriendsAsync
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreUIShowFriends_EOSUIShowFriendsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUIShowFriendsOptions               Options;                                           // 0x0008(0x0021)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A87[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEOSCoreUIShowFriends*                  ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreUIShowFriends_EOSUIShowFriendsAsync) == 0x000008, "Wrong alignment on EOSCoreUIShowFriends_EOSUIShowFriendsAsync");
static_assert(sizeof(EOSCoreUIShowFriends_EOSUIShowFriendsAsync) == 0x000038, "Wrong size on EOSCoreUIShowFriends_EOSUIShowFriendsAsync");
static_assert(offsetof(EOSCoreUIShowFriends_EOSUIShowFriendsAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreUIShowFriends_EOSUIShowFriendsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreUIShowFriends_EOSUIShowFriendsAsync, Options) == 0x000008, "Member 'EOSCoreUIShowFriends_EOSUIShowFriendsAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreUIShowFriends_EOSUIShowFriendsAsync, ReturnValue) == 0x000030, "Member 'EOSCoreUIShowFriends_EOSUIShowFriendsAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreUIShowFriends.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreUIShowFriends_HandleCallback final
{
public:
	struct FEOSUIShowFriendsCallbackInfo          Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A88[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreUIShowFriends_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreUIShowFriends_HandleCallback");
static_assert(sizeof(EOSCoreUIShowFriends_HandleCallback) == 0x000040, "Wrong size on EOSCoreUIShowFriends_HandleCallback");
static_assert(offsetof(EOSCoreUIShowFriends_HandleCallback, Data) == 0x000000, "Member 'EOSCoreUIShowFriends_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreUIShowFriends_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreUIShowFriends_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreUIHideFriends.EOSUIHideFriendsAsync
// 0x0038 (0x0038 - 0x0000)
struct EOSCoreUIHideFriends_EOSUIHideFriendsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUIHideFriendsOptions               Options;                                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreUIHideFriends*                  ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreUIHideFriends_EOSUIHideFriendsAsync) == 0x000008, "Wrong alignment on EOSCoreUIHideFriends_EOSUIHideFriendsAsync");
static_assert(sizeof(EOSCoreUIHideFriends_EOSUIHideFriendsAsync) == 0x000038, "Wrong size on EOSCoreUIHideFriends_EOSUIHideFriendsAsync");
static_assert(offsetof(EOSCoreUIHideFriends_EOSUIHideFriendsAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreUIHideFriends_EOSUIHideFriendsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreUIHideFriends_EOSUIHideFriendsAsync, Options) == 0x000008, "Member 'EOSCoreUIHideFriends_EOSUIHideFriendsAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreUIHideFriends_EOSUIHideFriendsAsync, ReturnValue) == 0x000030, "Member 'EOSCoreUIHideFriends_EOSUIHideFriendsAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreUIHideFriends.HandleCallback
// 0x0040 (0x0040 - 0x0000)
struct EOSCoreUIHideFriends_HandleCallback final
{
public:
	struct FEOSUIHideFriendsCallbackInfo          Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8A[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreUIHideFriends_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreUIHideFriends_HandleCallback");
static_assert(sizeof(EOSCoreUIHideFriends_HandleCallback) == 0x000040, "Wrong size on EOSCoreUIHideFriends_HandleCallback");
static_assert(offsetof(EOSCoreUIHideFriends_HandleCallback, Data) == 0x000000, "Member 'EOSCoreUIHideFriends_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreUIHideFriends_HandleCallback, bWasSuccessful) == 0x000038, "Member 'EOSCoreUIHideFriends_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.CoreUserInfo.EOSUserInfoCopyExternalUserInfoByAccountId
// 0x0090 (0x0090 - 0x0000)
struct CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUserInfoCopyExternalUserInfoByAccountIdOptions Options;                                           // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	struct FEOSUserInfoExternalUserInfo           OutExternalUserInfo;                               // 0x0060(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8B[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountId) == 0x000008, "Wrong alignment on CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountId");
static_assert(sizeof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountId) == 0x000090, "Wrong size on CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountId");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountId, WorldContextObject) == 0x000000, "Member 'CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountId, Options) == 0x000008, "Member 'CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountId::Options' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountId, OutExternalUserInfo) == 0x000060, "Member 'CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountId::OutExternalUserInfo' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountId, ReturnValue) == 0x000088, "Member 'CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountId::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUserInfo.EOSUserInfoCopyExternalUserInfoByAccountType
// 0x0080 (0x0080 - 0x0000)
struct CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountType final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUserInfoCopyExternalUserInfoByAccountTypeOptions Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSUserInfoExternalUserInfo           OutExternalUserInfo;                               // 0x0050(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8C[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountType) == 0x000008, "Wrong alignment on CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountType");
static_assert(sizeof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountType) == 0x000080, "Wrong size on CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountType");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountType, WorldContextObject) == 0x000000, "Member 'CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountType, Options) == 0x000008, "Member 'CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountType::Options' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountType, OutExternalUserInfo) == 0x000050, "Member 'CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountType::OutExternalUserInfo' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountType, ReturnValue) == 0x000078, "Member 'CoreUserInfo_EOSUserInfoCopyExternalUserInfoByAccountType::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUserInfo.EOSUserInfoCopyExternalUserInfoByIndex
// 0x0088 (0x0088 - 0x0000)
struct CoreUserInfo_EOSUserInfoCopyExternalUserInfoByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUserInfoCopyExternalUserInfoByIndexOptions Options;                                           // 0x0008(0x004C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8D[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEOSUserInfoExternalUserInfo           OutExternalUserInfo;                               // 0x0058(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8E[0x7];                                     // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByIndex) == 0x000008, "Wrong alignment on CoreUserInfo_EOSUserInfoCopyExternalUserInfoByIndex");
static_assert(sizeof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByIndex) == 0x000088, "Wrong size on CoreUserInfo_EOSUserInfoCopyExternalUserInfoByIndex");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByIndex, WorldContextObject) == 0x000000, "Member 'CoreUserInfo_EOSUserInfoCopyExternalUserInfoByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByIndex, Options) == 0x000008, "Member 'CoreUserInfo_EOSUserInfoCopyExternalUserInfoByIndex::Options' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByIndex, OutExternalUserInfo) == 0x000058, "Member 'CoreUserInfo_EOSUserInfoCopyExternalUserInfoByIndex::OutExternalUserInfo' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyExternalUserInfoByIndex, ReturnValue) == 0x000080, "Member 'CoreUserInfo_EOSUserInfoCopyExternalUserInfoByIndex::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUserInfo.EOSUserInfoCopyUserInfo
// 0x00D0 (0x00D0 - 0x0000)
struct CoreUserInfo_EOSUserInfoCopyUserInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUserInfoCopyUserInfoOptions        Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEOSUserInfo                           OutUserInfo;                                       // 0x0050(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	EOSResult                                     ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8F[0x7];                                     // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUserInfo_EOSUserInfoCopyUserInfo) == 0x000008, "Wrong alignment on CoreUserInfo_EOSUserInfoCopyUserInfo");
static_assert(sizeof(CoreUserInfo_EOSUserInfoCopyUserInfo) == 0x0000D0, "Wrong size on CoreUserInfo_EOSUserInfoCopyUserInfo");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyUserInfo, WorldContextObject) == 0x000000, "Member 'CoreUserInfo_EOSUserInfoCopyUserInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyUserInfo, Options) == 0x000008, "Member 'CoreUserInfo_EOSUserInfoCopyUserInfo::Options' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyUserInfo, OutUserInfo) == 0x000050, "Member 'CoreUserInfo_EOSUserInfoCopyUserInfo::OutUserInfo' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoCopyUserInfo, ReturnValue) == 0x0000C8, "Member 'CoreUserInfo_EOSUserInfoCopyUserInfo::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUserInfo.EOSUserInfoGetExternalUserInfoCount
// 0x0058 (0x0058 - 0x0000)
struct CoreUserInfo_EOSUserInfoGetExternalUserInfoCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUserInfoGetExternalUserInfoCountOptions Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A90[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreUserInfo_EOSUserInfoGetExternalUserInfoCount) == 0x000008, "Wrong alignment on CoreUserInfo_EOSUserInfoGetExternalUserInfoCount");
static_assert(sizeof(CoreUserInfo_EOSUserInfoGetExternalUserInfoCount) == 0x000058, "Wrong size on CoreUserInfo_EOSUserInfoGetExternalUserInfoCount");
static_assert(offsetof(CoreUserInfo_EOSUserInfoGetExternalUserInfoCount, WorldContextObject) == 0x000000, "Member 'CoreUserInfo_EOSUserInfoGetExternalUserInfoCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoGetExternalUserInfoCount, Options) == 0x000008, "Member 'CoreUserInfo_EOSUserInfoGetExternalUserInfoCount::Options' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoGetExternalUserInfoCount, ReturnValue) == 0x000050, "Member 'CoreUserInfo_EOSUserInfoGetExternalUserInfoCount::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUserInfo.GetUserInfo
// 0x0010 (0x0010 - 0x0000)
struct CoreUserInfo_GetUserInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreUserInfo*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUserInfo_GetUserInfo) == 0x000008, "Wrong alignment on CoreUserInfo_GetUserInfo");
static_assert(sizeof(CoreUserInfo_GetUserInfo) == 0x000010, "Wrong size on CoreUserInfo_GetUserInfo");
static_assert(offsetof(CoreUserInfo_GetUserInfo, WorldContextObject) == 0x000000, "Member 'CoreUserInfo_GetUserInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_GetUserInfo, ReturnValue) == 0x000008, "Member 'CoreUserInfo_GetUserInfo::ReturnValue' has a wrong offset!");

// Function EOSCore.CoreUserInfo.EOSUserInfoQueryUserInfo
// 0x0060 (0x0060 - 0x0000)
struct CoreUserInfo_EOSUserInfoQueryUserInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUserInfoQueryUserInfoOptions       Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSUserInfoQueryUserInfoCallbackInfo& Data)> Callback;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUserInfo_EOSUserInfoQueryUserInfo) == 0x000008, "Wrong alignment on CoreUserInfo_EOSUserInfoQueryUserInfo");
static_assert(sizeof(CoreUserInfo_EOSUserInfoQueryUserInfo) == 0x000060, "Wrong size on CoreUserInfo_EOSUserInfoQueryUserInfo");
static_assert(offsetof(CoreUserInfo_EOSUserInfoQueryUserInfo, WorldContextObject) == 0x000000, "Member 'CoreUserInfo_EOSUserInfoQueryUserInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoQueryUserInfo, Options) == 0x000008, "Member 'CoreUserInfo_EOSUserInfoQueryUserInfo::Options' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoQueryUserInfo, Callback) == 0x000050, "Member 'CoreUserInfo_EOSUserInfoQueryUserInfo::Callback' has a wrong offset!");

// Function EOSCore.CoreUserInfo.EOSUserInfoQueryUserInfoByDisplayName
// 0x0050 (0x0050 - 0x0000)
struct CoreUserInfo_EOSUserInfoQueryUserInfoByDisplayName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUserInfoQueryUserInfoByDisplayNameOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSUserInfoQueryUserInfoByDisplayNameCallbackInfo& Data)> Callback;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUserInfo_EOSUserInfoQueryUserInfoByDisplayName) == 0x000008, "Wrong alignment on CoreUserInfo_EOSUserInfoQueryUserInfoByDisplayName");
static_assert(sizeof(CoreUserInfo_EOSUserInfoQueryUserInfoByDisplayName) == 0x000050, "Wrong size on CoreUserInfo_EOSUserInfoQueryUserInfoByDisplayName");
static_assert(offsetof(CoreUserInfo_EOSUserInfoQueryUserInfoByDisplayName, WorldContextObject) == 0x000000, "Member 'CoreUserInfo_EOSUserInfoQueryUserInfoByDisplayName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoQueryUserInfoByDisplayName, Options) == 0x000008, "Member 'CoreUserInfo_EOSUserInfoQueryUserInfoByDisplayName::Options' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoQueryUserInfoByDisplayName, Callback) == 0x000040, "Member 'CoreUserInfo_EOSUserInfoQueryUserInfoByDisplayName::Callback' has a wrong offset!");

// Function EOSCore.CoreUserInfo.EOSUserInfoQueryUserInfoByExternalAccount
// 0x0058 (0x0058 - 0x0000)
struct CoreUserInfo_EOSUserInfoQueryUserInfoByExternalAccount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUserInfoQueryUserInfoByExternalAccountOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(struct FEOSUserInfoQueryUserInfoByExternalAccountCallbackInfo& Data)> Callback;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUserInfo_EOSUserInfoQueryUserInfoByExternalAccount) == 0x000008, "Wrong alignment on CoreUserInfo_EOSUserInfoQueryUserInfoByExternalAccount");
static_assert(sizeof(CoreUserInfo_EOSUserInfoQueryUserInfoByExternalAccount) == 0x000058, "Wrong size on CoreUserInfo_EOSUserInfoQueryUserInfoByExternalAccount");
static_assert(offsetof(CoreUserInfo_EOSUserInfoQueryUserInfoByExternalAccount, WorldContextObject) == 0x000000, "Member 'CoreUserInfo_EOSUserInfoQueryUserInfoByExternalAccount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoQueryUserInfoByExternalAccount, Options) == 0x000008, "Member 'CoreUserInfo_EOSUserInfoQueryUserInfoByExternalAccount::Options' has a wrong offset!");
static_assert(offsetof(CoreUserInfo_EOSUserInfoQueryUserInfoByExternalAccount, Callback) == 0x000048, "Member 'CoreUserInfo_EOSUserInfoQueryUserInfoByExternalAccount::Callback' has a wrong offset!");

// Function EOSCore.EOSCoreUserInfoQueryUserInfo.EOSUserInfoQueryUserInfoAsync
// 0x0058 (0x0058 - 0x0000)
struct EOSCoreUserInfoQueryUserInfo_EOSUserInfoQueryUserInfoAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUserInfoQueryUserInfoOptions       Options;                                           // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UEOSCoreUserInfoQueryUserInfo*          ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreUserInfoQueryUserInfo_EOSUserInfoQueryUserInfoAsync) == 0x000008, "Wrong alignment on EOSCoreUserInfoQueryUserInfo_EOSUserInfoQueryUserInfoAsync");
static_assert(sizeof(EOSCoreUserInfoQueryUserInfo_EOSUserInfoQueryUserInfoAsync) == 0x000058, "Wrong size on EOSCoreUserInfoQueryUserInfo_EOSUserInfoQueryUserInfoAsync");
static_assert(offsetof(EOSCoreUserInfoQueryUserInfo_EOSUserInfoQueryUserInfoAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreUserInfoQueryUserInfo_EOSUserInfoQueryUserInfoAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreUserInfoQueryUserInfo_EOSUserInfoQueryUserInfoAsync, Options) == 0x000008, "Member 'EOSCoreUserInfoQueryUserInfo_EOSUserInfoQueryUserInfoAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreUserInfoQueryUserInfo_EOSUserInfoQueryUserInfoAsync, ReturnValue) == 0x000050, "Member 'EOSCoreUserInfoQueryUserInfo_EOSUserInfoQueryUserInfoAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreUserInfoQueryUserInfo.HandleCallback
// 0x0060 (0x0060 - 0x0000)
struct EOSCoreUserInfoQueryUserInfo_HandleCallback final
{
public:
	struct FEOSUserInfoQueryUserInfoCallbackInfo  Data;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A92[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreUserInfoQueryUserInfo_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreUserInfoQueryUserInfo_HandleCallback");
static_assert(sizeof(EOSCoreUserInfoQueryUserInfo_HandleCallback) == 0x000060, "Wrong size on EOSCoreUserInfoQueryUserInfo_HandleCallback");
static_assert(offsetof(EOSCoreUserInfoQueryUserInfo_HandleCallback, Data) == 0x000000, "Member 'EOSCoreUserInfoQueryUserInfo_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreUserInfoQueryUserInfo_HandleCallback, bWasSuccessful) == 0x000058, "Member 'EOSCoreUserInfoQueryUserInfo_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreUserInfoQueryUserInfoByDisplayName.EOSUserInfoQueryUserInfoByDisplayNameAsync
// 0x0048 (0x0048 - 0x0000)
struct EOSCoreUserInfoQueryUserInfoByDisplayName_EOSUserInfoQueryUserInfoByDisplayNameAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUserInfoQueryUserInfoByDisplayNameOptions Options;                                           // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreUserInfoQueryUserInfoByDisplayName* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreUserInfoQueryUserInfoByDisplayName_EOSUserInfoQueryUserInfoByDisplayNameAsync) == 0x000008, "Wrong alignment on EOSCoreUserInfoQueryUserInfoByDisplayName_EOSUserInfoQueryUserInfoByDisplayNameAsync");
static_assert(sizeof(EOSCoreUserInfoQueryUserInfoByDisplayName_EOSUserInfoQueryUserInfoByDisplayNameAsync) == 0x000048, "Wrong size on EOSCoreUserInfoQueryUserInfoByDisplayName_EOSUserInfoQueryUserInfoByDisplayNameAsync");
static_assert(offsetof(EOSCoreUserInfoQueryUserInfoByDisplayName_EOSUserInfoQueryUserInfoByDisplayNameAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreUserInfoQueryUserInfoByDisplayName_EOSUserInfoQueryUserInfoByDisplayNameAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreUserInfoQueryUserInfoByDisplayName_EOSUserInfoQueryUserInfoByDisplayNameAsync, Options) == 0x000008, "Member 'EOSCoreUserInfoQueryUserInfoByDisplayName_EOSUserInfoQueryUserInfoByDisplayNameAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreUserInfoQueryUserInfoByDisplayName_EOSUserInfoQueryUserInfoByDisplayNameAsync, ReturnValue) == 0x000040, "Member 'EOSCoreUserInfoQueryUserInfoByDisplayName_EOSUserInfoQueryUserInfoByDisplayNameAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreUserInfoQueryUserInfoByDisplayName.HandleCallback
// 0x0070 (0x0070 - 0x0000)
struct EOSCoreUserInfoQueryUserInfoByDisplayName_HandleCallback final
{
public:
	struct FEOSUserInfoQueryUserInfoByDisplayNameCallbackInfo Data;                                              // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A94[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreUserInfoQueryUserInfoByDisplayName_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreUserInfoQueryUserInfoByDisplayName_HandleCallback");
static_assert(sizeof(EOSCoreUserInfoQueryUserInfoByDisplayName_HandleCallback) == 0x000070, "Wrong size on EOSCoreUserInfoQueryUserInfoByDisplayName_HandleCallback");
static_assert(offsetof(EOSCoreUserInfoQueryUserInfoByDisplayName_HandleCallback, Data) == 0x000000, "Member 'EOSCoreUserInfoQueryUserInfoByDisplayName_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreUserInfoQueryUserInfoByDisplayName_HandleCallback, bWasSuccessful) == 0x000068, "Member 'EOSCoreUserInfoQueryUserInfoByDisplayName_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function EOSCore.EOSCoreUserInfoByExternalAccount.EOSUserInfoQueryUserInfoByExternalAccountAsync
// 0x0050 (0x0050 - 0x0000)
struct EOSCoreUserInfoByExternalAccount_EOSUserInfoQueryUserInfoByExternalAccountAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEOSUserInfoQueryUserInfoByExternalAccountOptions Options;                                           // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	class UEOSCoreUserInfoByExternalAccount*      ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSCoreUserInfoByExternalAccount_EOSUserInfoQueryUserInfoByExternalAccountAsync) == 0x000008, "Wrong alignment on EOSCoreUserInfoByExternalAccount_EOSUserInfoQueryUserInfoByExternalAccountAsync");
static_assert(sizeof(EOSCoreUserInfoByExternalAccount_EOSUserInfoQueryUserInfoByExternalAccountAsync) == 0x000050, "Wrong size on EOSCoreUserInfoByExternalAccount_EOSUserInfoQueryUserInfoByExternalAccountAsync");
static_assert(offsetof(EOSCoreUserInfoByExternalAccount_EOSUserInfoQueryUserInfoByExternalAccountAsync, WorldContextObject) == 0x000000, "Member 'EOSCoreUserInfoByExternalAccount_EOSUserInfoQueryUserInfoByExternalAccountAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSCoreUserInfoByExternalAccount_EOSUserInfoQueryUserInfoByExternalAccountAsync, Options) == 0x000008, "Member 'EOSCoreUserInfoByExternalAccount_EOSUserInfoQueryUserInfoByExternalAccountAsync::Options' has a wrong offset!");
static_assert(offsetof(EOSCoreUserInfoByExternalAccount_EOSUserInfoQueryUserInfoByExternalAccountAsync, ReturnValue) == 0x000048, "Member 'EOSCoreUserInfoByExternalAccount_EOSUserInfoQueryUserInfoByExternalAccountAsync::ReturnValue' has a wrong offset!");

// Function EOSCore.EOSCoreUserInfoByExternalAccount.HandleCallback
// 0x0078 (0x0078 - 0x0000)
struct EOSCoreUserInfoByExternalAccount_HandleCallback final
{
public:
	struct FEOSUserInfoQueryUserInfoByExternalAccountCallbackInfo Data;                                              // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A96[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSCoreUserInfoByExternalAccount_HandleCallback) == 0x000008, "Wrong alignment on EOSCoreUserInfoByExternalAccount_HandleCallback");
static_assert(sizeof(EOSCoreUserInfoByExternalAccount_HandleCallback) == 0x000078, "Wrong size on EOSCoreUserInfoByExternalAccount_HandleCallback");
static_assert(offsetof(EOSCoreUserInfoByExternalAccount_HandleCallback, Data) == 0x000000, "Member 'EOSCoreUserInfoByExternalAccount_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(EOSCoreUserInfoByExternalAccount_HandleCallback, bWasSuccessful) == 0x000070, "Member 'EOSCoreUserInfoByExternalAccount_HandleCallback::bWasSuccessful' has a wrong offset!");

}

