#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AttachmentSlot

#include "Basic.hpp"

#include "E_AttachmentType_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_AttachmentSlot_structs.hpp"
#include "SlateCore_structs.hpp"
#include "S_InvItem_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_AttachmentSlot.BP_AttachmentSlot_C
// 0x01E8 (0x0460 - 0x0278)
class UBP_AttachmentSlot_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       InUseFlash;                                        // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             AmountText;                                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemBackround;                                     // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemIcon;                                          // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ItemNameText;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_1;                                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                SlotIconBorder;                                    // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SlotIconSizeBox;                                   // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SlotNameText;                                      // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Tint;                                              // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ItemTooltip_C*                      Tooltip;                                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     NewVar_0;                                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_MoveIcon_C*                         MoveIconL;                                         // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_SGKSettingsSaveData_C*              OptionsSave;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          MouseOver;                                         // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BB5[0x7];                                     // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_AttachmentSlot                      LastAttachmentItem;                                // 0x02F8(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_InvItem                             WeaponItem;                                        // 0x0340(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_AttachmentSlot                      AttachmentItem;                                    // 0x0370(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	class FName                                   SlotName;                                          // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AttachmentType                              AttachmentSlotType;                                // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BB6[0x7];                                     // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SlotIconSize;                                      // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             SlotImage;                                         // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             SlotOccupiedImage;                                 // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         TitleStyle;                                        // 0x03E8(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash)
	double                                        SlotImageOpacity;                                  // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseItemBackroundColor;                             // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BB7[0x3];                                     // 0x0449(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShortNameCutOff;                                   // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerInventory_C*                  PlayerInventory;                                   // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_WeaponInventory_C*                  Inventory;                                         // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_BP_AttachmentSlot(int32 EntryPoint);
	class FText GetItemName();
	bool IsItemValid();
	void LoadGameSettings();
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void PreConstruct(bool IsDesignTime);
	void StartAnim();
	void StopAnim();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateAttachmentItem();
	void UpdateCountBind();
	void UpdateItemCount();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AttachmentSlot_C">();
	}
	static class UBP_AttachmentSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AttachmentSlot_C>();
	}
};
static_assert(alignof(UBP_AttachmentSlot_C) == 0x000008, "Wrong alignment on UBP_AttachmentSlot_C");
static_assert(sizeof(UBP_AttachmentSlot_C) == 0x000460, "Wrong size on UBP_AttachmentSlot_C");
static_assert(offsetof(UBP_AttachmentSlot_C, UberGraphFrame) == 0x000278, "Member 'UBP_AttachmentSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, InUseFlash) == 0x000280, "Member 'UBP_AttachmentSlot_C::InUseFlash' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, AmountText) == 0x000288, "Member 'UBP_AttachmentSlot_C::AmountText' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, ItemBackround) == 0x000290, "Member 'UBP_AttachmentSlot_C::ItemBackround' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, ItemIcon) == 0x000298, "Member 'UBP_AttachmentSlot_C::ItemIcon' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, ItemNameText) == 0x0002A0, "Member 'UBP_AttachmentSlot_C::ItemNameText' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, SizeBox_1) == 0x0002A8, "Member 'UBP_AttachmentSlot_C::SizeBox_1' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, SlotIconBorder) == 0x0002B0, "Member 'UBP_AttachmentSlot_C::SlotIconBorder' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, SlotIconSizeBox) == 0x0002B8, "Member 'UBP_AttachmentSlot_C::SlotIconSizeBox' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, SlotNameText) == 0x0002C0, "Member 'UBP_AttachmentSlot_C::SlotNameText' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, Tint) == 0x0002C8, "Member 'UBP_AttachmentSlot_C::Tint' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, Tooltip) == 0x0002D0, "Member 'UBP_AttachmentSlot_C::Tooltip' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, NewVar_0) == 0x0002D8, "Member 'UBP_AttachmentSlot_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, MoveIconL) == 0x0002E0, "Member 'UBP_AttachmentSlot_C::MoveIconL' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, OptionsSave) == 0x0002E8, "Member 'UBP_AttachmentSlot_C::OptionsSave' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, MouseOver) == 0x0002F0, "Member 'UBP_AttachmentSlot_C::MouseOver' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, LastAttachmentItem) == 0x0002F8, "Member 'UBP_AttachmentSlot_C::LastAttachmentItem' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, WeaponItem) == 0x000340, "Member 'UBP_AttachmentSlot_C::WeaponItem' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, AttachmentItem) == 0x000370, "Member 'UBP_AttachmentSlot_C::AttachmentItem' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, SlotName) == 0x0003B8, "Member 'UBP_AttachmentSlot_C::SlotName' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, AttachmentSlotType) == 0x0003C0, "Member 'UBP_AttachmentSlot_C::AttachmentSlotType' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, SlotIconSize) == 0x0003C8, "Member 'UBP_AttachmentSlot_C::SlotIconSize' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, SlotImage) == 0x0003D8, "Member 'UBP_AttachmentSlot_C::SlotImage' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, SlotOccupiedImage) == 0x0003E0, "Member 'UBP_AttachmentSlot_C::SlotOccupiedImage' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, TitleStyle) == 0x0003E8, "Member 'UBP_AttachmentSlot_C::TitleStyle' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, SlotImageOpacity) == 0x000440, "Member 'UBP_AttachmentSlot_C::SlotImageOpacity' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, UseItemBackroundColor) == 0x000448, "Member 'UBP_AttachmentSlot_C::UseItemBackroundColor' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, ShortNameCutOff) == 0x00044C, "Member 'UBP_AttachmentSlot_C::ShortNameCutOff' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, PlayerInventory) == 0x000450, "Member 'UBP_AttachmentSlot_C::PlayerInventory' has a wrong offset!");
static_assert(offsetof(UBP_AttachmentSlot_C, Inventory) == 0x000458, "Member 'UBP_AttachmentSlot_C::Inventory' has a wrong offset!");

}

