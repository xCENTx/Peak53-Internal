#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NumericalTextBox

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_NumericalTextBox.BP_NumericalTextBox_C
// 0x0058 (0x02D0 - 0x0278)
class UBP_NumericalTextBox_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UEditableTextBox*                       EditableTextBox_25;                                // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0288(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USlider*                                Slider;                                            // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   DownName;                                          // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TurnMappingName;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CharacterLimit;                                    // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_560D[0x4];                                     // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxSensitivity;                                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AimSense_;                                         // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void AxisMapping(class FName Param_Name, bool* AxisFound, struct FInputAxisKeyMapping* Output);
	void BndEvt__EditableTextBox_25_K2Node_ComponentBoundEvent_0_OnEditableTextBoxChangedEvent__DelegateSignature(const class FText& Param_Text);
	void Construct();
	void ExecuteUbergraph_BP_NumericalTextBox(int32 EntryPoint);
	void Reconstruct();
	void SliderUpdated(float Value);
	void UpdateSensitivity(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NumericalTextBox_C">();
	}
	static class UBP_NumericalTextBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_NumericalTextBox_C>();
	}
};
static_assert(alignof(UBP_NumericalTextBox_C) == 0x000008, "Wrong alignment on UBP_NumericalTextBox_C");
static_assert(sizeof(UBP_NumericalTextBox_C) == 0x0002D0, "Wrong size on UBP_NumericalTextBox_C");
static_assert(offsetof(UBP_NumericalTextBox_C, UberGraphFrame) == 0x000278, "Member 'UBP_NumericalTextBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_NumericalTextBox_C, EditableTextBox_25) == 0x000280, "Member 'UBP_NumericalTextBox_C::EditableTextBox_25' has a wrong offset!");
static_assert(offsetof(UBP_NumericalTextBox_C, Text) == 0x000288, "Member 'UBP_NumericalTextBox_C::Text' has a wrong offset!");
static_assert(offsetof(UBP_NumericalTextBox_C, Slider) == 0x0002A0, "Member 'UBP_NumericalTextBox_C::Slider' has a wrong offset!");
static_assert(offsetof(UBP_NumericalTextBox_C, DownName) == 0x0002A8, "Member 'UBP_NumericalTextBox_C::DownName' has a wrong offset!");
static_assert(offsetof(UBP_NumericalTextBox_C, TurnMappingName) == 0x0002B0, "Member 'UBP_NumericalTextBox_C::TurnMappingName' has a wrong offset!");
static_assert(offsetof(UBP_NumericalTextBox_C, CharacterLimit) == 0x0002B8, "Member 'UBP_NumericalTextBox_C::CharacterLimit' has a wrong offset!");
static_assert(offsetof(UBP_NumericalTextBox_C, MaxSensitivity) == 0x0002C0, "Member 'UBP_NumericalTextBox_C::MaxSensitivity' has a wrong offset!");
static_assert(offsetof(UBP_NumericalTextBox_C, AimSense_) == 0x0002C8, "Member 'UBP_NumericalTextBox_C::AimSense_' has a wrong offset!");

}

