#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinimapComponent

#include "Basic.hpp"

#include "MinimapComponent_classes.hpp"
#include "MinimapComponent_parameters.hpp"


namespace SDK
{

// Function MinimapComponent.MinimapComponent_C.AddActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           POIActors                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    FollowActorRotation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        TextureSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    bShowHeightIndicator                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ToolTipOnHover                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Blink                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlinkSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::AddActor(class AActor* POIActors, bool FollowActorRotation, class UTexture2D* Texture, const struct FVector2D& TextureSize, const struct FSlateColor& Color, bool bShowHeightIndicator, const class FText& ToolTipOnHover, bool Blink, double BlinkSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "AddActor");

	Params::MinimapComponent_C_AddActor Parms{};

	Parms.POIActors = POIActors;
	Parms.FollowActorRotation = FollowActorRotation;
	Parms.Texture = Texture;
	Parms.TextureSize = std::move(TextureSize);
	Parms.Color = std::move(Color);
	Parms.bShowHeightIndicator = bShowHeightIndicator;
	Parms.ToolTipOnHover = std::move(ToolTipOnHover);
	Parms.Blink = Blink;
	Parms.BlinkSpeed = BlinkSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.AddActors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   POIActors                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    FollowActorRotation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        TextureSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    bShowHeightIndicator                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ToolTipOnHover                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Blink                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlinkSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::AddActors(TArray<class AActor*>& POIActors, bool FollowActorRotation, class UTexture2D* Texture, const struct FVector2D& TextureSize, const struct FSlateColor& Color, bool bShowHeightIndicator, const class FText& ToolTipOnHover, bool Blink, double BlinkSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "AddActors");

	Params::MinimapComponent_C_AddActors Parms{};

	Parms.POIActors = std::move(POIActors);
	Parms.FollowActorRotation = FollowActorRotation;
	Parms.Texture = Texture;
	Parms.TextureSize = std::move(TextureSize);
	Parms.Color = std::move(Color);
	Parms.bShowHeightIndicator = bShowHeightIndicator;
	Parms.ToolTipOnHover = std::move(ToolTipOnHover);
	Parms.Blink = Blink;
	Parms.BlinkSpeed = BlinkSpeed;

	UObject::ProcessEvent(Func, &Parms);

	POIActors = std::move(Parms.POIActors);
}


// Function MinimapComponent.MinimapComponent_C.AddMarker
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Persistent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        TextureSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             ToolTipOnHover                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// class UTexture2D*                       OffMinimapTexture__If_persistent_                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        OffMinimapTextureSize                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ADummyMarker_C*                   MarkerRef                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::AddMarker(const struct FVector& Location, bool Persistent, class UTexture2D* Texture, const struct FVector2D& TextureSize, const struct FSlateColor& Color, const class FText& ToolTipOnHover, class UTexture2D* OffMinimapTexture__If_persistent_, const struct FVector2D& OffMinimapTextureSize, class ADummyMarker_C** MarkerRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "AddMarker");

	Params::MinimapComponent_C_AddMarker Parms{};

	Parms.Location = std::move(Location);
	Parms.Persistent = Persistent;
	Parms.Texture = Texture;
	Parms.TextureSize = std::move(TextureSize);
	Parms.Color = std::move(Color);
	Parms.ToolTipOnHover = std::move(ToolTipOnHover);
	Parms.OffMinimapTexture__If_persistent_ = OffMinimapTexture__If_persistent_;
	Parms.OffMinimapTextureSize = std::move(OffMinimapTextureSize);

	UObject::ProcessEvent(Func, &Parms);

	if (MarkerRef != nullptr)
		*MarkerRef = Parms.MarkerRef;
}


// Function MinimapComponent.MinimapComponent_C.AddMultiplePointOfInterest
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateColor                      Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<class AActor*>                   Actors                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    bIsPersistent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FollowActorRotation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        TextureSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       OutOfMapTextureIfPersistent                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    bKeepOutOfMinimapTexStraightIfPersistent               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOnlyShowWhenOutOfMinimapIfPersistent                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::AddMultiplePointOfInterest(const struct FSlateColor& Color, TArray<class AActor*>& Actors, bool bIsPersistent, bool FollowActorRotation, class UTexture2D* Texture, const struct FVector2D& TextureSize, class UTexture2D* OutOfMapTextureIfPersistent, bool bKeepOutOfMinimapTexStraightIfPersistent, bool bOnlyShowWhenOutOfMinimapIfPersistent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "AddMultiplePointOfInterest");

	Params::MinimapComponent_C_AddMultiplePointOfInterest Parms{};

	Parms.Color = std::move(Color);
	Parms.Actors = std::move(Actors);
	Parms.bIsPersistent = bIsPersistent;
	Parms.FollowActorRotation = FollowActorRotation;
	Parms.Texture = Texture;
	Parms.TextureSize = std::move(TextureSize);
	Parms.OutOfMapTextureIfPersistent = OutOfMapTextureIfPersistent;
	Parms.bKeepOutOfMinimapTexStraightIfPersistent = bKeepOutOfMinimapTexStraightIfPersistent;
	Parms.bOnlyShowWhenOutOfMinimapIfPersistent = bOnlyShowWhenOutOfMinimapIfPersistent;

	UObject::ProcessEvent(Func, &Parms);

	Actors = std::move(Parms.Actors);
}


// Function MinimapComponent.MinimapComponent_C.AddPersistentActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           POIActors                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    FollowActorRotation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        TextureSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// class UTexture2D*                       OffMinimapTexture                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        OffMinimapTextureSize                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bKeepOffMinimapTextureStraight                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOnlyShowWhenOffMinimap                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bShowHeightIndicator                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ToolTipOnHover                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Blink                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlinkSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::AddPersistentActor(class AActor* POIActors, bool FollowActorRotation, class UTexture2D* Texture, const struct FVector2D& TextureSize, const struct FSlateColor& Color, class UTexture2D* OffMinimapTexture, const struct FVector2D& OffMinimapTextureSize, bool bKeepOffMinimapTextureStraight, bool bOnlyShowWhenOffMinimap, bool bShowHeightIndicator, const class FText& ToolTipOnHover, bool Blink, double BlinkSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "AddPersistentActor");

	Params::MinimapComponent_C_AddPersistentActor Parms{};

	Parms.POIActors = POIActors;
	Parms.FollowActorRotation = FollowActorRotation;
	Parms.Texture = Texture;
	Parms.TextureSize = std::move(TextureSize);
	Parms.Color = std::move(Color);
	Parms.OffMinimapTexture = OffMinimapTexture;
	Parms.OffMinimapTextureSize = std::move(OffMinimapTextureSize);
	Parms.bKeepOffMinimapTextureStraight = bKeepOffMinimapTextureStraight;
	Parms.bOnlyShowWhenOffMinimap = bOnlyShowWhenOffMinimap;
	Parms.bShowHeightIndicator = bShowHeightIndicator;
	Parms.ToolTipOnHover = std::move(ToolTipOnHover);
	Parms.Blink = Blink;
	Parms.BlinkSpeed = BlinkSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.AddPersistentActors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   POIActors                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    FollowActorRotation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        TextureSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// class UTexture2D*                       OffMinimapTexture                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        OffScreenTextureSize                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bKeepOffMinimapTextureStraight                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOnlyShowWhenOffMinimap                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bShowHeightIndicator                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ToolTipOnHover                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Blink                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlinkSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::AddPersistentActors(TArray<class AActor*>& POIActors, bool FollowActorRotation, class UTexture2D* Texture, const struct FVector2D& TextureSize, const struct FSlateColor& Color, class UTexture2D* OffMinimapTexture, const struct FVector2D& OffScreenTextureSize, bool bKeepOffMinimapTextureStraight, bool bOnlyShowWhenOffMinimap, bool bShowHeightIndicator, const class FText& ToolTipOnHover, bool Blink, double BlinkSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "AddPersistentActors");

	Params::MinimapComponent_C_AddPersistentActors Parms{};

	Parms.POIActors = std::move(POIActors);
	Parms.FollowActorRotation = FollowActorRotation;
	Parms.Texture = Texture;
	Parms.TextureSize = std::move(TextureSize);
	Parms.Color = std::move(Color);
	Parms.OffMinimapTexture = OffMinimapTexture;
	Parms.OffScreenTextureSize = std::move(OffScreenTextureSize);
	Parms.bKeepOffMinimapTextureStraight = bKeepOffMinimapTextureStraight;
	Parms.bOnlyShowWhenOffMinimap = bOnlyShowWhenOffMinimap;
	Parms.bShowHeightIndicator = bShowHeightIndicator;
	Parms.ToolTipOnHover = std::move(ToolTipOnHover);
	Parms.Blink = Blink;
	Parms.BlinkSpeed = BlinkSpeed;

	UObject::ProcessEvent(Func, &Parms);

	POIActors = std::move(Parms.POIActors);
}


// Function MinimapComponent.MinimapComponent_C.AddPointOfInterest
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateColor                      Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// class AActor*                           POIActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsPersistent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FollowActorRotation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        TextureSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       OutOfMinniMapTextureIfPersistent                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        OffScreenTexSize                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bKeepOutOfMinimapTexStraightIfPersistent               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOnlyShowWhenOutOfMinimapIfPersistent                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bShowHeightIndicator                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Tooltip                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Blink                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlinkSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::AddPointOfInterest(const struct FSlateColor& Color, class AActor* POIActor, bool bIsPersistent, bool FollowActorRotation, class UTexture2D* Texture, const struct FVector2D& TextureSize, class UTexture2D* OutOfMinniMapTextureIfPersistent, const struct FVector2D& OffScreenTexSize, bool bKeepOutOfMinimapTexStraightIfPersistent, bool bOnlyShowWhenOutOfMinimapIfPersistent, bool bIsLocation, const struct FVector& Location, bool bShowHeightIndicator, const class FText& Tooltip, bool Blink, double BlinkSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "AddPointOfInterest");

	Params::MinimapComponent_C_AddPointOfInterest Parms{};

	Parms.Color = std::move(Color);
	Parms.POIActor = POIActor;
	Parms.bIsPersistent = bIsPersistent;
	Parms.FollowActorRotation = FollowActorRotation;
	Parms.Texture = Texture;
	Parms.TextureSize = std::move(TextureSize);
	Parms.OutOfMinniMapTextureIfPersistent = OutOfMinniMapTextureIfPersistent;
	Parms.OffScreenTexSize = std::move(OffScreenTexSize);
	Parms.bKeepOutOfMinimapTexStraightIfPersistent = bKeepOutOfMinimapTexStraightIfPersistent;
	Parms.bOnlyShowWhenOutOfMinimapIfPersistent = bOnlyShowWhenOutOfMinimapIfPersistent;
	Parms.bIsLocation = bIsLocation;
	Parms.Location = std::move(Location);
	Parms.bShowHeightIndicator = bShowHeightIndicator;
	Parms.Tooltip = std::move(Tooltip);
	Parms.Blink = Blink;
	Parms.BlinkSpeed = BlinkSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.AdjustHeightIndicatorSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       ArrowUP                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      ArrowUpColor                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UTexture2D*                       ArrowDown                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      ArrowDownColor                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FVector2D                        Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_AcceptableHeightDifference                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::AdjustHeightIndicatorSettings(class UTexture2D* ArrowUP, const struct FSlateColor& ArrowUpColor, class UTexture2D* ArrowDown, const struct FSlateColor& ArrowDownColor, const struct FVector2D& Size, double Param_AcceptableHeightDifference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "AdjustHeightIndicatorSettings");

	Params::MinimapComponent_C_AdjustHeightIndicatorSettings Parms{};

	Parms.ArrowUP = ArrowUP;
	Parms.ArrowUpColor = std::move(ArrowUpColor);
	Parms.ArrowDown = ArrowDown;
	Parms.ArrowDownColor = std::move(ArrowDownColor);
	Parms.Size = std::move(Size);
	Parms.Param_AcceptableHeightDifference = Param_AcceptableHeightDifference;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.CenterOverviewMapOnOwner
// (Public, BlueprintCallable, BlueprintEvent)

void UMinimapComponent_C::CenterOverviewMapOnOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "CenterOverviewMapOnOwner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinimapComponent.MinimapComponent_C.ChangeBlinkSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           POIActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ChangeBlinkSpeed(class AActor* POIActor, double Speed, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ChangeBlinkSpeed");

	Params::MinimapComponent_C_ChangeBlinkSpeed Parms{};

	Parms.POIActor = POIActor;
	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function MinimapComponent.MinimapComponent_C.ChangeBlinkSpeedMultiplePOI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   POIs                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double                                  NewSpeed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ChangeBlinkSpeedMultiplePOI(const TArray<class AActor*>& POIs, double NewSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ChangeBlinkSpeedMultiplePOI");

	Params::MinimapComponent_C_ChangeBlinkSpeedMultiplePOI Parms{};

	Parms.POIs = std::move(POIs);
	Parms.NewSpeed = NewSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.ChangeBorderSize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewSize                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ChangeBorderSize(double NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ChangeBorderSize");

	Params::MinimapComponent_C_ChangeBorderSize Parms{};

	Parms.NewSize = NewSize;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.ChangeBorderTextureAndSize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Border_Size                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ChangeBorderTextureAndSize(class UTexture2D* Texture, double Param_Border_Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ChangeBorderTextureAndSize");

	Params::MinimapComponent_C_ChangeBorderTextureAndSize Parms{};

	Parms.Texture = Texture;
	Parms.Param_Border_Size = Param_Border_Size;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.ChangeMinimapBorder
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       BorderTexture                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bBorderRotates_                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ChangeMinimapBorder(class UTexture2D* BorderTexture, double Size, bool bBorderRotates_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ChangeMinimapBorder");

	Params::MinimapComponent_C_ChangeMinimapBorder Parms{};

	Parms.BorderTexture = BorderTexture;
	Parms.Size = Size;
	Parms.bBorderRotates_ = bBorderRotates_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.ChangeMinimapTexture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Param_MapTexture                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           OrRenderTarget                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  MapLength                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_bIsDesignTime                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ChangeMinimapTexture(class UTexture2D* Param_MapTexture, class UTextureRenderTarget2D* OrRenderTarget, double MapLength, bool Param_bIsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ChangeMinimapTexture");

	Params::MinimapComponent_C_ChangeMinimapTexture Parms{};

	Parms.Param_MapTexture = Param_MapTexture;
	Parms.OrRenderTarget = OrRenderTarget;
	Parms.MapLength = MapLength;
	Parms.Param_bIsDesignTime = Param_bIsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.ChangeMyLocationColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateColor                      Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UMinimapComponent_C::ChangeMyLocationColor(const struct FSlateColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ChangeMyLocationColor");

	Params::MinimapComponent_C_ChangeMyLocationColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.ChangeMyLocationTexture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ChangeMyLocationTexture(class UTexture2D* Texture, const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ChangeMyLocationTexture");

	Params::MinimapComponent_C_ChangeMyLocationTexture Parms{};

	Parms.Texture = Texture;
	Parms.Size = std::move(Size);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.ChangePOIColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      Tint                                                   (BlueprintVisible, BlueprintReadOnly, Parm)

void UMinimapComponent_C::ChangePOIColor(class AActor* Actor, const struct FSlateColor& Tint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ChangePOIColor");

	Params::MinimapComponent_C_ChangePOIColor Parms{};

	Parms.Actor = Actor;
	Parms.Tint = std::move(Tint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.ChangePOITexture
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Texture_Size                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Changed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ChangePOITexture(class AActor* Actor, class UTexture2D* Texture, const struct FVector2D& Texture_Size, bool* Changed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ChangePOITexture");

	Params::MinimapComponent_C_ChangePOITexture Parms{};

	Parms.Actor = Actor;
	Parms.Texture = Texture;
	Parms.Texture_Size = std::move(Texture_Size);

	UObject::ProcessEvent(Func, &Parms);

	if (Changed != nullptr)
		*Changed = Parms.Changed;
}


// Function MinimapComponent.MinimapComponent_C.ChangePOITextureAndColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Texture_Size                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      Tint                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Changed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ChangePOITextureAndColor(class AActor* Actor, class UTexture2D* Texture, const struct FVector2D& Texture_Size, const struct FSlateColor& Tint, bool* Changed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ChangePOITextureAndColor");

	Params::MinimapComponent_C_ChangePOITextureAndColor Parms{};

	Parms.Actor = Actor;
	Parms.Texture = Texture;
	Parms.Texture_Size = std::move(Texture_Size);
	Parms.Tint = std::move(Tint);

	UObject::ProcessEvent(Func, &Parms);

	if (Changed != nullptr)
		*Changed = Parms.Changed;
}


// Function MinimapComponent.MinimapComponent_C.ChangeToCircularMinimap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMinimapRotates_                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ChangeToCircularMinimap(bool bMinimapRotates_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ChangeToCircularMinimap");

	Params::MinimapComponent_C_ChangeToCircularMinimap Parms{};

	Parms.bMinimapRotates_ = bMinimapRotates_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.ChangeToRectangularMinimap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMinimapRotates_                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ChangeToRectangularMinimap(bool bMinimapRotates_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ChangeToRectangularMinimap");

	Params::MinimapComponent_C_ChangeToRectangularMinimap Parms{};

	Parms.bMinimapRotates_ = bMinimapRotates_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.ClampXY
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  X                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Y                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BorderSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ExtraClamp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsOutside                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ClampXY(double& X, double& Y, double& BorderSize, double ExtraClamp, bool* bIsOutside)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ClampXY");

	Params::MinimapComponent_C_ClampXY Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.BorderSize = BorderSize;
	Parms.ExtraClamp = ExtraClamp;

	UObject::ProcessEvent(Func, &Parms);

	X = Parms.X;
	Y = Parms.Y;
	BorderSize = Parms.BorderSize;

	if (bIsOutside != nullptr)
		*bIsOutside = Parms.bIsOutside;
}


// Function MinimapComponent.MinimapComponent_C.ClearAllPOI
// (Public, BlueprintCallable, BlueprintEvent)

void UMinimapComponent_C::ClearAllPOI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ClearAllPOI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinimapComponent.MinimapComponent_C.ClonePOIArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UPOIW_C*>                  Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    KeepPersistentActors                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    KeepHeightIndicator                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ClonePOIArray(TArray<class UPOIW_C*>& Source, bool KeepPersistentActors, bool KeepHeightIndicator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ClonePOIArray");

	Params::MinimapComponent_C_ClonePOIArray Parms{};

	Parms.Source = std::move(Source);
	Parms.KeepPersistentActors = KeepPersistentActors;
	Parms.KeepHeightIndicator = KeepHeightIndicator;

	UObject::ProcessEvent(Func, &Parms);

	Source = std::move(Parms.Source);
}


// Function MinimapComponent.MinimapComponent_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UMinimapComponent_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinimapComponent.MinimapComponent_C.EValidateMinimapClick
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey                             Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UMinimapComponent_C::EValidateMinimapClick(const struct FVector& Location, const struct FKey& Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "EValidateMinimapClick");

	Params::MinimapComponent_C_EValidateMinimapClick Parms{};

	Parms.Location = std::move(Location);
	Parms.Button = std::move(Button);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.EValidateMinimapClick_Timer
// (BlueprintCallable, BlueprintEvent)

void UMinimapComponent_C::EValidateMinimapClick_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "EValidateMinimapClick_Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinimapComponent.MinimapComponent_C.ExecuteUbergraph_MinimapComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::ExecuteUbergraph_MinimapComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ExecuteUbergraph_MinimapComponent");

	Params::MinimapComponent_C_ExecuteUbergraph_MinimapComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.GetBorderSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  BorderSize                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::GetBorderSize(double* BorderSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "GetBorderSize");

	Params::MinimapComponent_C_GetBorderSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BorderSize != nullptr)
		*BorderSize = Parms.BorderSize;
}


// Function MinimapComponent.MinimapComponent_C.GetMarker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Param_Marker                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::GetMarker(class AActor** Param_Marker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "GetMarker");

	Params::MinimapComponent_C_GetMarker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Marker != nullptr)
		*Param_Marker = Parms.Param_Marker;
}


// Function MinimapComponent.MinimapComponent_C.GetPOIArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UPOIW_C*>                  Param_ArrayOfPOI                                       (Parm, OutParm, ContainsInstancedReference)

void UMinimapComponent_C::GetPOIArray(TArray<class UPOIW_C*>* Param_ArrayOfPOI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "GetPOIArray");

	Params::MinimapComponent_C_GetPOIArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_ArrayOfPOI != nullptr)
		*Param_ArrayOfPOI = std::move(Parms.Param_ArrayOfPOI);
}


// Function MinimapComponent.MinimapComponent_C.Initialize
// (BlueprintCallable, BlueprintEvent)

void UMinimapComponent_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinimapComponent.MinimapComponent_C.IsOutsideOfCircle
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  X                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Y                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  R                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOutside                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::IsOutsideOfCircle(double& X, double& Y, double& R, bool* IsOutside)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "IsOutsideOfCircle");

	Params::MinimapComponent_C_IsOutsideOfCircle Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.R = R;

	UObject::ProcessEvent(Func, &Parms);

	X = Parms.X;
	Y = Parms.Y;
	R = Parms.R;

	if (IsOutside != nullptr)
		*IsOutside = Parms.IsOutside;
}


// Function MinimapComponent.MinimapComponent_C.IsOwnerAdded
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::IsOwnerAdded(bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "IsOwnerAdded");

	Params::MinimapComponent_C_IsOwnerAdded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function MinimapComponent.MinimapComponent_C.MiniMapClicked__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WolrdLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey                             ButtonUsed                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UMinimapComponent_C::MiniMapClicked__DelegateSignature(const struct FVector& WolrdLocation, const struct FKey& ButtonUsed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "MiniMapClicked__DelegateSignature");

	Params::MinimapComponent_C_MiniMapClicked__DelegateSignature Parms{};

	Parms.WolrdLocation = std::move(WolrdLocation);
	Parms.ButtonUsed = std::move(ButtonUsed);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.MinimapStartUpdate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            OwnerPawn                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::MinimapStartUpdate(class APawn* OwnerPawn, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "MinimapStartUpdate");

	Params::MinimapComponent_C_MinimapStartUpdate Parms{};

	Parms.OwnerPawn = OwnerPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function MinimapComponent.MinimapComponent_C.MinimapStopUpdate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ClearPOIs                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::MinimapStopUpdate(bool ClearPOIs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "MinimapStopUpdate");

	Params::MinimapComponent_C_MinimapStopUpdate Parms{};

	Parms.ClearPOIs = ClearPOIs;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.MinimapZoomIn
// (Public, BlueprintCallable, BlueprintEvent)

void UMinimapComponent_C::MinimapZoomIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "MinimapZoomIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinimapComponent.MinimapComponent_C.MinimapZoomOut
// (Public, BlueprintCallable, BlueprintEvent)

void UMinimapComponent_C::MinimapZoomOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "MinimapZoomOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinimapComponent.MinimapComponent_C.On_MinimapClick
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UMinimapComponent_C::On_MinimapClick(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "On_MinimapClick");

	Params::MinimapComponent_C_On_MinimapClick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	MouseEvent = std::move(Parms.MouseEvent);

	return Parms.ReturnValue;
}


// Function MinimapComponent.MinimapComponent_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UMinimapComponent_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "OnMouseButtonDown");

	Params::MinimapComponent_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MinimapComponent.MinimapComponent_C.OnMouseButtonUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UMinimapComponent_C::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "OnMouseButtonUp");

	Params::MinimapComponent_C_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MinimapComponent.MinimapComponent_C.OnMouseEnter
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UMinimapComponent_C::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "OnMouseEnter");

	Params::MinimapComponent_C_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UMinimapComponent_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "OnMouseLeave");

	Params::MinimapComponent_C_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.OnMouseMove
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UMinimapComponent_C::OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "OnMouseMove");

	Params::MinimapComponent_C_OnMouseMove Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MinimapComponent.MinimapComponent_C.OnMouseWheel
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UMinimapComponent_C::OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "OnMouseWheel");

	Params::MinimapComponent_C_OnMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MinimapComponent.MinimapComponent_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "PreConstruct");

	Params::MinimapComponent_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.RemoveActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Removed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::RemoveActor(class AActor* Actor, bool* Removed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "RemoveActor");

	Params::MinimapComponent_C_RemoveActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Removed != nullptr)
		*Removed = Parms.Removed;
}


// Function MinimapComponent.MinimapComponent_C.RemoveMarker
// (Public, BlueprintCallable, BlueprintEvent)

void UMinimapComponent_C::RemoveMarker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "RemoveMarker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinimapComponent.MinimapComponent_C.RoundMapAdjsuter
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  X                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Y                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BorderSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Clamp                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Left                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Bottom                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::RoundMapAdjsuter(double X, double Y, double& BorderSize, double Clamp, double* Left, double* Bottom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "RoundMapAdjsuter");

	Params::MinimapComponent_C_RoundMapAdjsuter Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.BorderSize = BorderSize;
	Parms.Clamp = Clamp;

	UObject::ProcessEvent(Func, &Parms);

	BorderSize = Parms.BorderSize;

	if (Left != nullptr)
		*Left = Parms.Left;

	if (Bottom != nullptr)
		*Bottom = Parms.Bottom;
}


// Function MinimapComponent.MinimapComponent_C.SetBlinkEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           POIActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::SetBlinkEnabled(class AActor* POIActor, bool Enabled, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "SetBlinkEnabled");

	Params::MinimapComponent_C_SetBlinkEnabled Parms{};

	Parms.POIActor = POIActor;
	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function MinimapComponent.MinimapComponent_C.SetBlinkEnabledMultiplePOI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   POIs                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::SetBlinkEnabledMultiplePOI(TArray<class AActor*>& POIs, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "SetBlinkEnabledMultiplePOI");

	Params::MinimapComponent_C_SetBlinkEnabledMultiplePOI Parms{};

	Parms.POIs = std::move(POIs);
	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);

	POIs = std::move(Parms.POIs);
}


// Function MinimapComponent.MinimapComponent_C.SetMarkerRef
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADummyMarker_C*                   Param_Marker                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        TextureSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             ToolTipOnHover                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Persistent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       OffMinimapTexture__If_persistent_                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        OffMinimapTextureSize                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::SetMarkerRef(class ADummyMarker_C* Param_Marker, class UTexture2D* Texture, const struct FVector2D& TextureSize, const struct FSlateColor& Color, const class FText& ToolTipOnHover, bool Persistent, class UTexture2D* OffMinimapTexture__If_persistent_, const struct FVector2D& OffMinimapTextureSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "SetMarkerRef");

	Params::MinimapComponent_C_SetMarkerRef Parms{};

	Parms.Param_Marker = Param_Marker;
	Parms.Texture = Texture;
	Parms.TextureSize = std::move(TextureSize);
	Parms.Color = std::move(Color);
	Parms.ToolTipOnHover = std::move(ToolTipOnHover);
	Parms.Persistent = Persistent;
	Parms.OffMinimapTexture__If_persistent_ = OffMinimapTexture__If_persistent_;
	Parms.OffMinimapTextureSize = std::move(OffMinimapTextureSize);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.SetOpacity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Opacity                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::SetOpacity(double Opacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "SetOpacity");

	Params::MinimapComponent_C_SetOpacity Parms{};

	Parms.Opacity = Opacity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.SetZoomValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Zoom                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::SetZoomValue(double Param_Zoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "SetZoomValue");

	Params::MinimapComponent_C_SetZoomValue Parms{};

	Parms.Param_Zoom = Param_Zoom;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.SquareCoorToCircle
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  XSquare                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  YSquare                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XCircle                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  YCircle                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::SquareCoorToCircle(double XSquare, double YSquare, double* XCircle, double* YCircle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "SquareCoorToCircle");

	Params::MinimapComponent_C_SquareCoorToCircle Parms{};

	Parms.XSquare = XSquare;
	Parms.YSquare = YSquare;

	UObject::ProcessEvent(Func, &Parms);

	if (XCircle != nullptr)
		*XCircle = Parms.XCircle;

	if (YCircle != nullptr)
		*YCircle = Parms.YCircle;
}


// Function MinimapComponent.MinimapComponent_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "Tick");

	Params::MinimapComponent_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.ToggleMyLocationVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UMinimapComponent_C::ToggleMyLocationVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ToggleMyLocationVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinimapComponent.MinimapComponent_C.ToggleViewAngleVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UMinimapComponent_C::ToggleViewAngleVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "ToggleViewAngleVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinimapComponent.MinimapComponent_C.UpdateMarker
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMinimapComponent_C::UpdateMarker(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "UpdateMarker");

	Params::MinimapComponent_C_UpdateMarker Parms{};

	Parms.NewLocation = std::move(NewLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinimapComponent.MinimapComponent_C.UpdatePOIs
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UMinimapComponent_C::UpdatePOIs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinimapComponent_C", "UpdatePOIs");

	UObject::ProcessEvent(Func, nullptr);
}

}

