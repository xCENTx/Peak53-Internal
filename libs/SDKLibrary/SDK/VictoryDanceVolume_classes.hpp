#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VictoryDanceVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass VictoryDanceVolume.VictoryDanceVolume_C
// 0x0020 (0x02B0 - 0x0290)
class AVictoryDanceVolume_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Area;                                              // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_SGKMasterCharacter_C*               SgkOwner;                                          // 0x02A8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BndEvt__VictoryDanceVolume_Area_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ExecuteUbergraph_VictoryDanceVolume(int32 EntryPoint);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"VictoryDanceVolume_C">();
	}
	static class AVictoryDanceVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVictoryDanceVolume_C>();
	}
};
static_assert(alignof(AVictoryDanceVolume_C) == 0x000008, "Wrong alignment on AVictoryDanceVolume_C");
static_assert(sizeof(AVictoryDanceVolume_C) == 0x0002B0, "Wrong size on AVictoryDanceVolume_C");
static_assert(offsetof(AVictoryDanceVolume_C, UberGraphFrame) == 0x000290, "Member 'AVictoryDanceVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AVictoryDanceVolume_C, Area) == 0x000298, "Member 'AVictoryDanceVolume_C::Area' has a wrong offset!");
static_assert(offsetof(AVictoryDanceVolume_C, DefaultSceneRoot) == 0x0002A0, "Member 'AVictoryDanceVolume_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AVictoryDanceVolume_C, SgkOwner) == 0x0002A8, "Member 'AVictoryDanceVolume_C::SgkOwner' has a wrong offset!");

}

