#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CookingSlot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_EquipmentType_structs.hpp"
#include "S_InvSlot_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "E_SpecialSlotType_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_CookingSlot.BP_CookingSlot_C
// 0x0138 (0x03B0 - 0x0278)
class UBP_CookingSlot_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextBlock*                             AmountText;                                        // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemBackround;                                     // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemIcon;                                          // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ItemNameText;                                      // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ProgressText;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                SlotIconBorder;                                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SlotIconSizeBox;                                   // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Tint;                                              // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             SlotImage;                                         // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        SlotImageOpacity;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   SlotName;                                          // 0x02D0(0x0018)(Edit, BlueprintVisible)
	E_EquipmentType                               EquipmentSlotType;                                 // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55D2[0x7];                                     // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SlotOccupiedImage;                                 // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          UseItemBackroundColor;                             // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55D3[0x3];                                     // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShortNameCutOff;                                   // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SlotIconSize;                                      // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_ItemTooltip_C*                      Tooltip;                                           // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentTime;                                       // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MouseOver;                                         // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55D4[0x7];                                     // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_Handle;                                      // 0x0328(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ResumeTimerLength;                                 // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_SGKSettingsSaveData_C*              OptionsSave;                                       // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TimerLength;                                       // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CookingSlotIndex;                                  // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55D5[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InvSlot                             CookingSlot;                                       // 0x0350(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	class UBP_PlayerInventory_C*                  PlayerInventory;                                   // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CookingComponent_C*                 CookingInventory;                                  // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_BP_CookingSlot(int32 EntryPoint);
	class FText Get_ProgressText_Text_0();
	class FText GetItemName();
	class FText GetProgressPercentText();
	void HideOverlay();
	void IsItemValid(bool* ItemValid);
	void LoadGameSettings();
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	struct FEventReply OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void PauseTimer();
	void PreConstruct(bool IsDesignTime);
	void RestartTimer();
	void ResumeFrom(double Param_CurrentTime, double Param_TimerLength, bool Paused);
	void ResumeTimer();
	void SetProgressPercent();
	void ShowGreenOverlay();
	void ShowRedOverlay();
	void StartTimer(double Time);
	void UpdateCookingItem(const struct FS_InvSlot& Param_CookingSlot);
	void UpdateItemCount();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CookingSlot_C">();
	}
	static class UBP_CookingSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CookingSlot_C>();
	}
};
static_assert(alignof(UBP_CookingSlot_C) == 0x000008, "Wrong alignment on UBP_CookingSlot_C");
static_assert(sizeof(UBP_CookingSlot_C) == 0x0003B0, "Wrong size on UBP_CookingSlot_C");
static_assert(offsetof(UBP_CookingSlot_C, UberGraphFrame) == 0x000278, "Member 'UBP_CookingSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, AmountText) == 0x000280, "Member 'UBP_CookingSlot_C::AmountText' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, ItemBackround) == 0x000288, "Member 'UBP_CookingSlot_C::ItemBackround' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, ItemIcon) == 0x000290, "Member 'UBP_CookingSlot_C::ItemIcon' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, ItemNameText) == 0x000298, "Member 'UBP_CookingSlot_C::ItemNameText' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, ProgressText) == 0x0002A0, "Member 'UBP_CookingSlot_C::ProgressText' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, SlotIconBorder) == 0x0002A8, "Member 'UBP_CookingSlot_C::SlotIconBorder' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, SlotIconSizeBox) == 0x0002B0, "Member 'UBP_CookingSlot_C::SlotIconSizeBox' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, Tint) == 0x0002B8, "Member 'UBP_CookingSlot_C::Tint' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, SlotImage) == 0x0002C0, "Member 'UBP_CookingSlot_C::SlotImage' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, SlotImageOpacity) == 0x0002C8, "Member 'UBP_CookingSlot_C::SlotImageOpacity' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, SlotName) == 0x0002D0, "Member 'UBP_CookingSlot_C::SlotName' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, EquipmentSlotType) == 0x0002E8, "Member 'UBP_CookingSlot_C::EquipmentSlotType' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, SlotOccupiedImage) == 0x0002F0, "Member 'UBP_CookingSlot_C::SlotOccupiedImage' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, UseItemBackroundColor) == 0x0002F8, "Member 'UBP_CookingSlot_C::UseItemBackroundColor' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, ShortNameCutOff) == 0x0002FC, "Member 'UBP_CookingSlot_C::ShortNameCutOff' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, SlotIconSize) == 0x000300, "Member 'UBP_CookingSlot_C::SlotIconSize' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, Tooltip) == 0x000310, "Member 'UBP_CookingSlot_C::Tooltip' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, CurrentTime) == 0x000318, "Member 'UBP_CookingSlot_C::CurrentTime' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, MouseOver) == 0x000320, "Member 'UBP_CookingSlot_C::MouseOver' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, Timer_Handle) == 0x000328, "Member 'UBP_CookingSlot_C::Timer_Handle' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, ResumeTimerLength) == 0x000330, "Member 'UBP_CookingSlot_C::ResumeTimerLength' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, OptionsSave) == 0x000338, "Member 'UBP_CookingSlot_C::OptionsSave' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, TimerLength) == 0x000340, "Member 'UBP_CookingSlot_C::TimerLength' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, CookingSlotIndex) == 0x000348, "Member 'UBP_CookingSlot_C::CookingSlotIndex' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, CookingSlot) == 0x000350, "Member 'UBP_CookingSlot_C::CookingSlot' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, PlayerInventory) == 0x0003A0, "Member 'UBP_CookingSlot_C::PlayerInventory' has a wrong offset!");
static_assert(offsetof(UBP_CookingSlot_C, CookingInventory) == 0x0003A8, "Member 'UBP_CookingSlot_C::CookingInventory' has a wrong offset!");

}

