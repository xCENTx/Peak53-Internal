#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: bp_weapon_table

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass bp_weapon_table.bp_weapon_table_C
// 0x0030 (0x02C0 - 0x0290)
class Abp_weapon_table_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCineCameraComponent*                   CineCamera;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Weapon;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_MasterHoldable_C*                   CurrentWeapon;                                     // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateWeapon(const class FString& WeaponID, class FName RowName);
	void ExecuteUbergraph_bp_weapon_table(int32 EntryPoint);
	void ChangeWeapon(class FName RowName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"bp_weapon_table_C">();
	}
	static class Abp_weapon_table_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<Abp_weapon_table_C>();
	}
};
static_assert(alignof(Abp_weapon_table_C) == 0x000008, "Wrong alignment on Abp_weapon_table_C");
static_assert(sizeof(Abp_weapon_table_C) == 0x0002C0, "Wrong size on Abp_weapon_table_C");
static_assert(offsetof(Abp_weapon_table_C, UberGraphFrame) == 0x000290, "Member 'Abp_weapon_table_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(Abp_weapon_table_C, CineCamera) == 0x000298, "Member 'Abp_weapon_table_C::CineCamera' has a wrong offset!");
static_assert(offsetof(Abp_weapon_table_C, Weapon) == 0x0002A0, "Member 'Abp_weapon_table_C::Weapon' has a wrong offset!");
static_assert(offsetof(Abp_weapon_table_C, Cube) == 0x0002A8, "Member 'Abp_weapon_table_C::Cube' has a wrong offset!");
static_assert(offsetof(Abp_weapon_table_C, DefaultSceneRoot) == 0x0002B0, "Member 'Abp_weapon_table_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(Abp_weapon_table_C, CurrentWeapon) == 0x0002B8, "Member 'Abp_weapon_table_C::CurrentWeapon' has a wrong offset!");

}

