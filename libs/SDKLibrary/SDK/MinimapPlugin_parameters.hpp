#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinimapPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MinimapPlugin_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function MinimapPlugin.MapRevealerComponent.SetRevealDropOffDistance
// 0x0004 (0x0004 - 0x0000)
struct MapRevealerComponent_SetRevealDropOffDistance final
{
public:
	float                                         NewRevealDropOffDistance;                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRevealerComponent_SetRevealDropOffDistance) == 0x000004, "Wrong alignment on MapRevealerComponent_SetRevealDropOffDistance");
static_assert(sizeof(MapRevealerComponent_SetRevealDropOffDistance) == 0x000004, "Wrong size on MapRevealerComponent_SetRevealDropOffDistance");
static_assert(offsetof(MapRevealerComponent_SetRevealDropOffDistance, NewRevealDropOffDistance) == 0x000000, "Member 'MapRevealerComponent_SetRevealDropOffDistance::NewRevealDropOffDistance' has a wrong offset!");

// Function MinimapPlugin.MapRevealerComponent.SetRevealExtent
// 0x0008 (0x0008 - 0x0000)
struct MapRevealerComponent_SetRevealExtent final
{
public:
	float                                         NewRevealExtentX;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewRevealExtentY;                                  // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRevealerComponent_SetRevealExtent) == 0x000004, "Wrong alignment on MapRevealerComponent_SetRevealExtent");
static_assert(sizeof(MapRevealerComponent_SetRevealExtent) == 0x000008, "Wrong size on MapRevealerComponent_SetRevealExtent");
static_assert(offsetof(MapRevealerComponent_SetRevealExtent, NewRevealExtentX) == 0x000000, "Member 'MapRevealerComponent_SetRevealExtent::NewRevealExtentX' has a wrong offset!");
static_assert(offsetof(MapRevealerComponent_SetRevealExtent, NewRevealExtentY) == 0x000004, "Member 'MapRevealerComponent_SetRevealExtent::NewRevealExtentY' has a wrong offset!");

// Function MinimapPlugin.MapRevealerComponent.SetRevealMode
// 0x0001 (0x0001 - 0x0000)
struct MapRevealerComponent_SetRevealMode final
{
public:
	EMapFogRevealMode                             NewRevealMode;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRevealerComponent_SetRevealMode) == 0x000001, "Wrong alignment on MapRevealerComponent_SetRevealMode");
static_assert(sizeof(MapRevealerComponent_SetRevealMode) == 0x000001, "Wrong size on MapRevealerComponent_SetRevealMode");
static_assert(offsetof(MapRevealerComponent_SetRevealMode, NewRevealMode) == 0x000000, "Member 'MapRevealerComponent_SetRevealMode::NewRevealMode' has a wrong offset!");

// Function MinimapPlugin.MapRevealerComponent.GetRevealDropOffDistance
// 0x0004 (0x0004 - 0x0000)
struct MapRevealerComponent_GetRevealDropOffDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRevealerComponent_GetRevealDropOffDistance) == 0x000004, "Wrong alignment on MapRevealerComponent_GetRevealDropOffDistance");
static_assert(sizeof(MapRevealerComponent_GetRevealDropOffDistance) == 0x000004, "Wrong size on MapRevealerComponent_GetRevealDropOffDistance");
static_assert(offsetof(MapRevealerComponent_GetRevealDropOffDistance, ReturnValue) == 0x000000, "Member 'MapRevealerComponent_GetRevealDropOffDistance::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapRevealerComponent.GetRevealExtent
// 0x0008 (0x0008 - 0x0000)
struct MapRevealerComponent_GetRevealExtent final
{
public:
	float                                         RevealExtentX;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevealExtentY;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRevealerComponent_GetRevealExtent) == 0x000004, "Wrong alignment on MapRevealerComponent_GetRevealExtent");
static_assert(sizeof(MapRevealerComponent_GetRevealExtent) == 0x000008, "Wrong size on MapRevealerComponent_GetRevealExtent");
static_assert(offsetof(MapRevealerComponent_GetRevealExtent, RevealExtentX) == 0x000000, "Member 'MapRevealerComponent_GetRevealExtent::RevealExtentX' has a wrong offset!");
static_assert(offsetof(MapRevealerComponent_GetRevealExtent, RevealExtentY) == 0x000004, "Member 'MapRevealerComponent_GetRevealExtent::RevealExtentY' has a wrong offset!");

// Function MinimapPlugin.MapRevealerComponent.GetRevealMode
// 0x0001 (0x0001 - 0x0000)
struct MapRevealerComponent_GetRevealMode final
{
public:
	EMapFogRevealMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRevealerComponent_GetRevealMode) == 0x000001, "Wrong alignment on MapRevealerComponent_GetRevealMode");
static_assert(sizeof(MapRevealerComponent_GetRevealMode) == 0x000001, "Wrong size on MapRevealerComponent_GetRevealMode");
static_assert(offsetof(MapRevealerComponent_GetRevealMode, ReturnValue) == 0x000000, "Member 'MapRevealerComponent_GetRevealMode::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapAreaBase.GetMapViewCornerUVs
// 0x0020 (0x0020 - 0x0000)
struct MapAreaBase_GetMapViewCornerUVs final
{
public:
	class UMapViewComponent*                      MapView;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      CornerUVs;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2501[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapAreaBase_GetMapViewCornerUVs) == 0x000008, "Wrong alignment on MapAreaBase_GetMapViewCornerUVs");
static_assert(sizeof(MapAreaBase_GetMapViewCornerUVs) == 0x000020, "Wrong size on MapAreaBase_GetMapViewCornerUVs");
static_assert(offsetof(MapAreaBase_GetMapViewCornerUVs, MapView) == 0x000000, "Member 'MapAreaBase_GetMapViewCornerUVs::MapView' has a wrong offset!");
static_assert(offsetof(MapAreaBase_GetMapViewCornerUVs, CornerUVs) == 0x000008, "Member 'MapAreaBase_GetMapViewCornerUVs::CornerUVs' has a wrong offset!");
static_assert(offsetof(MapAreaBase_GetMapViewCornerUVs, ReturnValue) == 0x000018, "Member 'MapAreaBase_GetMapViewCornerUVs::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapAreaBase.GetAreaBounds
// 0x0008 (0x0008 - 0x0000)
struct MapAreaBase_GetAreaBounds final
{
public:
	class UBoxComponent*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapAreaBase_GetAreaBounds) == 0x000008, "Wrong alignment on MapAreaBase_GetAreaBounds");
static_assert(sizeof(MapAreaBase_GetAreaBounds) == 0x000008, "Wrong size on MapAreaBase_GetAreaBounds");
static_assert(offsetof(MapAreaBase_GetAreaBounds, ReturnValue) == 0x000000, "Member 'MapAreaBase_GetAreaBounds::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapAreaBase.GetLevelAtHeight
// 0x0008 (0x0008 - 0x0000)
struct MapAreaBase_GetLevelAtHeight final
{
public:
	float                                         WorldZ;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapAreaBase_GetLevelAtHeight) == 0x000004, "Wrong alignment on MapAreaBase_GetLevelAtHeight");
static_assert(sizeof(MapAreaBase_GetLevelAtHeight) == 0x000008, "Wrong size on MapAreaBase_GetLevelAtHeight");
static_assert(offsetof(MapAreaBase_GetLevelAtHeight, WorldZ) == 0x000000, "Member 'MapAreaBase_GetLevelAtHeight::WorldZ' has a wrong offset!");
static_assert(offsetof(MapAreaBase_GetLevelAtHeight, ReturnValue) == 0x000004, "Member 'MapAreaBase_GetLevelAtHeight::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapAreaBase.GetMapAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct MapAreaBase_GetMapAspectRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapAreaBase_GetMapAspectRatio) == 0x000004, "Wrong alignment on MapAreaBase_GetMapAspectRatio");
static_assert(sizeof(MapAreaBase_GetMapAspectRatio) == 0x000004, "Wrong size on MapAreaBase_GetMapAspectRatio");
static_assert(offsetof(MapAreaBase_GetMapAspectRatio, ReturnValue) == 0x000000, "Member 'MapAreaBase_GetMapAspectRatio::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapAreaBase.GetMapView
// 0x0008 (0x0008 - 0x0000)
struct MapAreaBase_GetMapView final
{
public:
	class UMapViewComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapAreaBase_GetMapView) == 0x000008, "Wrong alignment on MapAreaBase_GetMapView");
static_assert(sizeof(MapAreaBase_GetMapView) == 0x000008, "Wrong size on MapAreaBase_GetMapView");
static_assert(offsetof(MapAreaBase_GetMapView, ReturnValue) == 0x000000, "Member 'MapAreaBase_GetMapView::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapBackground.GetBackgroundMaterialInstanceForCanvas
// 0x0010 (0x0010 - 0x0000)
struct MapBackground_GetBackgroundMaterialInstanceForCanvas final
{
public:
	class UMapRendererComponent*                  Renderer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_GetBackgroundMaterialInstanceForCanvas) == 0x000008, "Wrong alignment on MapBackground_GetBackgroundMaterialInstanceForCanvas");
static_assert(sizeof(MapBackground_GetBackgroundMaterialInstanceForCanvas) == 0x000010, "Wrong size on MapBackground_GetBackgroundMaterialInstanceForCanvas");
static_assert(offsetof(MapBackground_GetBackgroundMaterialInstanceForCanvas, Renderer) == 0x000000, "Member 'MapBackground_GetBackgroundMaterialInstanceForCanvas::Renderer' has a wrong offset!");
static_assert(offsetof(MapBackground_GetBackgroundMaterialInstanceForCanvas, ReturnValue) == 0x000008, "Member 'MapBackground_GetBackgroundMaterialInstanceForCanvas::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapBackground.SetBackgroundMaterialForCanvas
// 0x0008 (0x0008 - 0x0000)
struct MapBackground_SetBackgroundMaterialForCanvas final
{
public:
	class UMaterialInterface*                     NewMaterial;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_SetBackgroundMaterialForCanvas) == 0x000008, "Wrong alignment on MapBackground_SetBackgroundMaterialForCanvas");
static_assert(sizeof(MapBackground_SetBackgroundMaterialForCanvas) == 0x000008, "Wrong size on MapBackground_SetBackgroundMaterialForCanvas");
static_assert(offsetof(MapBackground_SetBackgroundMaterialForCanvas, NewMaterial) == 0x000000, "Member 'MapBackground_SetBackgroundMaterialForCanvas::NewMaterial' has a wrong offset!");

// Function MinimapPlugin.MapBackground.SetBackgroundMaterialForUMG
// 0x0008 (0x0008 - 0x0000)
struct MapBackground_SetBackgroundMaterialForUMG final
{
public:
	class UMaterialInterface*                     NewMaterial;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_SetBackgroundMaterialForUMG) == 0x000008, "Wrong alignment on MapBackground_SetBackgroundMaterialForUMG");
static_assert(sizeof(MapBackground_SetBackgroundMaterialForUMG) == 0x000008, "Wrong size on MapBackground_SetBackgroundMaterialForUMG");
static_assert(offsetof(MapBackground_SetBackgroundMaterialForUMG, NewMaterial) == 0x000000, "Member 'MapBackground_SetBackgroundMaterialForUMG::NewMaterial' has a wrong offset!");

// Function MinimapPlugin.MapBackground.SetBackgroundOverlay
// 0x0010 (0x0010 - 0x0000)
struct MapBackground_SetBackgroundOverlay final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2505[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 NewBackgroundOverlay;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_SetBackgroundOverlay) == 0x000008, "Wrong alignment on MapBackground_SetBackgroundOverlay");
static_assert(sizeof(MapBackground_SetBackgroundOverlay) == 0x000010, "Wrong size on MapBackground_SetBackgroundOverlay");
static_assert(offsetof(MapBackground_SetBackgroundOverlay, Level) == 0x000000, "Member 'MapBackground_SetBackgroundOverlay::Level' has a wrong offset!");
static_assert(offsetof(MapBackground_SetBackgroundOverlay, NewBackgroundOverlay) == 0x000008, "Member 'MapBackground_SetBackgroundOverlay::NewBackgroundOverlay' has a wrong offset!");

// Function MinimapPlugin.MapBackground.SetBackgroundPriority
// 0x0004 (0x0004 - 0x0000)
struct MapBackground_SetBackgroundPriority final
{
public:
	int32                                         NewBackgroundPriority;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_SetBackgroundPriority) == 0x000004, "Wrong alignment on MapBackground_SetBackgroundPriority");
static_assert(sizeof(MapBackground_SetBackgroundPriority) == 0x000004, "Wrong size on MapBackground_SetBackgroundPriority");
static_assert(offsetof(MapBackground_SetBackgroundPriority, NewBackgroundPriority) == 0x000000, "Member 'MapBackground_SetBackgroundPriority::NewBackgroundPriority' has a wrong offset!");

// Function MinimapPlugin.MapBackground.SetBackgroundTexture
// 0x0010 (0x0010 - 0x0000)
struct MapBackground_SetBackgroundTexture final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2506[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             NewBackgroundTexture;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_SetBackgroundTexture) == 0x000008, "Wrong alignment on MapBackground_SetBackgroundTexture");
static_assert(sizeof(MapBackground_SetBackgroundTexture) == 0x000010, "Wrong size on MapBackground_SetBackgroundTexture");
static_assert(offsetof(MapBackground_SetBackgroundTexture, Level) == 0x000000, "Member 'MapBackground_SetBackgroundTexture::Level' has a wrong offset!");
static_assert(offsetof(MapBackground_SetBackgroundTexture, NewBackgroundTexture) == 0x000008, "Member 'MapBackground_SetBackgroundTexture::NewBackgroundTexture' has a wrong offset!");

// Function MinimapPlugin.MapBackground.SetBackgroundVisible
// 0x0001 (0x0001 - 0x0000)
struct MapBackground_SetBackgroundVisible final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_SetBackgroundVisible) == 0x000001, "Wrong alignment on MapBackground_SetBackgroundVisible");
static_assert(sizeof(MapBackground_SetBackgroundVisible) == 0x000001, "Wrong size on MapBackground_SetBackgroundVisible");
static_assert(offsetof(MapBackground_SetBackgroundVisible, bNewVisible) == 0x000000, "Member 'MapBackground_SetBackgroundVisible::bNewVisible' has a wrong offset!");

// Function MinimapPlugin.MapBackground.SetBackgroundZOrder
// 0x0004 (0x0004 - 0x0000)
struct MapBackground_SetBackgroundZOrder final
{
public:
	int32                                         NewBackgroundZOrder;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_SetBackgroundZOrder) == 0x000004, "Wrong alignment on MapBackground_SetBackgroundZOrder");
static_assert(sizeof(MapBackground_SetBackgroundZOrder) == 0x000004, "Wrong size on MapBackground_SetBackgroundZOrder");
static_assert(offsetof(MapBackground_SetBackgroundZOrder, NewBackgroundZOrder) == 0x000000, "Member 'MapBackground_SetBackgroundZOrder::NewBackgroundZOrder' has a wrong offset!");

// Function MinimapPlugin.MapBackground.GetBackgroundMaterialForUMG
// 0x0008 (0x0008 - 0x0000)
struct MapBackground_GetBackgroundMaterialForUMG final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_GetBackgroundMaterialForUMG) == 0x000008, "Wrong alignment on MapBackground_GetBackgroundMaterialForUMG");
static_assert(sizeof(MapBackground_GetBackgroundMaterialForUMG) == 0x000008, "Wrong size on MapBackground_GetBackgroundMaterialForUMG");
static_assert(offsetof(MapBackground_GetBackgroundMaterialForUMG, ReturnValue) == 0x000000, "Member 'MapBackground_GetBackgroundMaterialForUMG::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapBackground.GetBackgroundOverlay
// 0x0010 (0x0010 - 0x0000)
struct MapBackground_GetBackgroundOverlay final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2507[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_GetBackgroundOverlay) == 0x000008, "Wrong alignment on MapBackground_GetBackgroundOverlay");
static_assert(sizeof(MapBackground_GetBackgroundOverlay) == 0x000010, "Wrong size on MapBackground_GetBackgroundOverlay");
static_assert(offsetof(MapBackground_GetBackgroundOverlay, Level) == 0x000000, "Member 'MapBackground_GetBackgroundOverlay::Level' has a wrong offset!");
static_assert(offsetof(MapBackground_GetBackgroundOverlay, ReturnValue) == 0x000008, "Member 'MapBackground_GetBackgroundOverlay::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapBackground.GetBackgroundPriority
// 0x0004 (0x0004 - 0x0000)
struct MapBackground_GetBackgroundPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_GetBackgroundPriority) == 0x000004, "Wrong alignment on MapBackground_GetBackgroundPriority");
static_assert(sizeof(MapBackground_GetBackgroundPriority) == 0x000004, "Wrong size on MapBackground_GetBackgroundPriority");
static_assert(offsetof(MapBackground_GetBackgroundPriority, ReturnValue) == 0x000000, "Member 'MapBackground_GetBackgroundPriority::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapBackground.GetBackgroundTexture
// 0x0010 (0x0010 - 0x0000)
struct MapBackground_GetBackgroundTexture final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2508[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_GetBackgroundTexture) == 0x000008, "Wrong alignment on MapBackground_GetBackgroundTexture");
static_assert(sizeof(MapBackground_GetBackgroundTexture) == 0x000010, "Wrong size on MapBackground_GetBackgroundTexture");
static_assert(offsetof(MapBackground_GetBackgroundTexture, Level) == 0x000000, "Member 'MapBackground_GetBackgroundTexture::Level' has a wrong offset!");
static_assert(offsetof(MapBackground_GetBackgroundTexture, ReturnValue) == 0x000008, "Member 'MapBackground_GetBackgroundTexture::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapBackground.GetBackgroundTextureAtHeight
// 0x0010 (0x0010 - 0x0000)
struct MapBackground_GetBackgroundTextureAtHeight final
{
public:
	float                                         WorldZ;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2509[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_GetBackgroundTextureAtHeight) == 0x000008, "Wrong alignment on MapBackground_GetBackgroundTextureAtHeight");
static_assert(sizeof(MapBackground_GetBackgroundTextureAtHeight) == 0x000010, "Wrong size on MapBackground_GetBackgroundTextureAtHeight");
static_assert(offsetof(MapBackground_GetBackgroundTextureAtHeight, WorldZ) == 0x000000, "Member 'MapBackground_GetBackgroundTextureAtHeight::WorldZ' has a wrong offset!");
static_assert(offsetof(MapBackground_GetBackgroundTextureAtHeight, ReturnValue) == 0x000008, "Member 'MapBackground_GetBackgroundTextureAtHeight::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapBackground.GetBackgroundZOrder
// 0x0004 (0x0004 - 0x0000)
struct MapBackground_GetBackgroundZOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_GetBackgroundZOrder) == 0x000004, "Wrong alignment on MapBackground_GetBackgroundZOrder");
static_assert(sizeof(MapBackground_GetBackgroundZOrder) == 0x000004, "Wrong size on MapBackground_GetBackgroundZOrder");
static_assert(offsetof(MapBackground_GetBackgroundZOrder, ReturnValue) == 0x000000, "Member 'MapBackground_GetBackgroundZOrder::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapBackground.IsBackgroundVisible
// 0x0001 (0x0001 - 0x0000)
struct MapBackground_IsBackgroundVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_IsBackgroundVisible) == 0x000001, "Wrong alignment on MapBackground_IsBackgroundVisible");
static_assert(sizeof(MapBackground_IsBackgroundVisible) == 0x000001, "Wrong size on MapBackground_IsBackgroundVisible");
static_assert(offsetof(MapBackground_IsBackgroundVisible, ReturnValue) == 0x000000, "Member 'MapBackground_IsBackgroundVisible::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapBackground.IsMultiLevel
// 0x0001 (0x0001 - 0x0000)
struct MapBackground_IsMultiLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapBackground_IsMultiLevel) == 0x000001, "Wrong alignment on MapBackground_IsMultiLevel");
static_assert(sizeof(MapBackground_IsMultiLevel) == 0x000001, "Wrong size on MapBackground_IsMultiLevel");
static_assert(offsetof(MapBackground_IsMultiLevel, ReturnValue) == 0x000000, "Member 'MapBackground_IsMultiLevel::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapFog.GetFogAtLocation
// 0x0028 (0x0028 - 0x0000)
struct MapFog_GetFogAtLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireCurrentlyRevealing;                        // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2511[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RevealFactor;                                      // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2512[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapFog_GetFogAtLocation) == 0x000008, "Wrong alignment on MapFog_GetFogAtLocation");
static_assert(sizeof(MapFog_GetFogAtLocation) == 0x000028, "Wrong size on MapFog_GetFogAtLocation");
static_assert(offsetof(MapFog_GetFogAtLocation, WorldLocation) == 0x000000, "Member 'MapFog_GetFogAtLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(MapFog_GetFogAtLocation, bRequireCurrentlyRevealing) == 0x000018, "Member 'MapFog_GetFogAtLocation::bRequireCurrentlyRevealing' has a wrong offset!");
static_assert(offsetof(MapFog_GetFogAtLocation, RevealFactor) == 0x00001C, "Member 'MapFog_GetFogAtLocation::RevealFactor' has a wrong offset!");
static_assert(offsetof(MapFog_GetFogAtLocation, ReturnValue) == 0x000020, "Member 'MapFog_GetFogAtLocation::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapFog.GetFogMaterialForUMG
// 0x0008 (0x0008 - 0x0000)
struct MapFog_GetFogMaterialForUMG final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFog_GetFogMaterialForUMG) == 0x000008, "Wrong alignment on MapFog_GetFogMaterialForUMG");
static_assert(sizeof(MapFog_GetFogMaterialForUMG) == 0x000008, "Wrong size on MapFog_GetFogMaterialForUMG");
static_assert(offsetof(MapFog_GetFogMaterialForUMG, ReturnValue) == 0x000000, "Member 'MapFog_GetFogMaterialForUMG::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapFog.GetFogMaterialInstanceForCanvas
// 0x0010 (0x0010 - 0x0000)
struct MapFog_GetFogMaterialInstanceForCanvas final
{
public:
	class UMapRendererComponent*                  Renderer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFog_GetFogMaterialInstanceForCanvas) == 0x000008, "Wrong alignment on MapFog_GetFogMaterialInstanceForCanvas");
static_assert(sizeof(MapFog_GetFogMaterialInstanceForCanvas) == 0x000010, "Wrong size on MapFog_GetFogMaterialInstanceForCanvas");
static_assert(offsetof(MapFog_GetFogMaterialInstanceForCanvas, Renderer) == 0x000000, "Member 'MapFog_GetFogMaterialInstanceForCanvas::Renderer' has a wrong offset!");
static_assert(offsetof(MapFog_GetFogMaterialInstanceForCanvas, ReturnValue) == 0x000008, "Member 'MapFog_GetFogMaterialInstanceForCanvas::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapFog.OnMapRevealerRegistered
// 0x0008 (0x0008 - 0x0000)
struct MapFog_OnMapRevealerRegistered final
{
public:
	class UMapRevealerComponent*                  MapRevealer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFog_OnMapRevealerRegistered) == 0x000008, "Wrong alignment on MapFog_OnMapRevealerRegistered");
static_assert(sizeof(MapFog_OnMapRevealerRegistered) == 0x000008, "Wrong size on MapFog_OnMapRevealerRegistered");
static_assert(offsetof(MapFog_OnMapRevealerRegistered, MapRevealer) == 0x000000, "Member 'MapFog_OnMapRevealerRegistered::MapRevealer' has a wrong offset!");

// Function MinimapPlugin.MapFog.OnMapRevealerUnregistered
// 0x0008 (0x0008 - 0x0000)
struct MapFog_OnMapRevealerUnregistered final
{
public:
	class UMapRevealerComponent*                  MapRevealer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFog_OnMapRevealerUnregistered) == 0x000008, "Wrong alignment on MapFog_OnMapRevealerUnregistered");
static_assert(sizeof(MapFog_OnMapRevealerUnregistered) == 0x000008, "Wrong size on MapFog_OnMapRevealerUnregistered");
static_assert(offsetof(MapFog_OnMapRevealerUnregistered, MapRevealer) == 0x000000, "Member 'MapFog_OnMapRevealerUnregistered::MapRevealer' has a wrong offset!");

// Function MinimapPlugin.MapFog.SetFogMaterialForCanvas
// 0x0008 (0x0008 - 0x0000)
struct MapFog_SetFogMaterialForCanvas final
{
public:
	class UMaterialInterface*                     NewMaterial;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFog_SetFogMaterialForCanvas) == 0x000008, "Wrong alignment on MapFog_SetFogMaterialForCanvas");
static_assert(sizeof(MapFog_SetFogMaterialForCanvas) == 0x000008, "Wrong size on MapFog_SetFogMaterialForCanvas");
static_assert(offsetof(MapFog_SetFogMaterialForCanvas, NewMaterial) == 0x000000, "Member 'MapFog_SetFogMaterialForCanvas::NewMaterial' has a wrong offset!");

// Function MinimapPlugin.MapFog.SetFogMaterialForUMG
// 0x0008 (0x0008 - 0x0000)
struct MapFog_SetFogMaterialForUMG final
{
public:
	class UMaterialInterface*                     NewMaterial;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFog_SetFogMaterialForUMG) == 0x000008, "Wrong alignment on MapFog_SetFogMaterialForUMG");
static_assert(sizeof(MapFog_SetFogMaterialForUMG) == 0x000008, "Wrong size on MapFog_SetFogMaterialForUMG");
static_assert(offsetof(MapFog_SetFogMaterialForUMG, NewMaterial) == 0x000000, "Member 'MapFog_SetFogMaterialForUMG::NewMaterial' has a wrong offset!");

// Function MinimapPlugin.MapFog.GetDestinationFogRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct MapFog_GetDestinationFogRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFog_GetDestinationFogRenderTarget) == 0x000008, "Wrong alignment on MapFog_GetDestinationFogRenderTarget");
static_assert(sizeof(MapFog_GetDestinationFogRenderTarget) == 0x000008, "Wrong size on MapFog_GetDestinationFogRenderTarget");
static_assert(offsetof(MapFog_GetDestinationFogRenderTarget, ReturnValue) == 0x000000, "Member 'MapFog_GetDestinationFogRenderTarget::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapFog.GetSourceFogRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct MapFog_GetSourceFogRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFog_GetSourceFogRenderTarget) == 0x000008, "Wrong alignment on MapFog_GetSourceFogRenderTarget");
static_assert(sizeof(MapFog_GetSourceFogRenderTarget) == 0x000008, "Wrong size on MapFog_GetSourceFogRenderTarget");
static_assert(offsetof(MapFog_GetSourceFogRenderTarget, ReturnValue) == 0x000000, "Member 'MapFog_GetSourceFogRenderTarget::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapFog.GetWorldToPixelRatio
// 0x0004 (0x0004 - 0x0000)
struct MapFog_GetWorldToPixelRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFog_GetWorldToPixelRatio) == 0x000004, "Wrong alignment on MapFog_GetWorldToPixelRatio");
static_assert(sizeof(MapFog_GetWorldToPixelRatio) == 0x000004, "Wrong size on MapFog_GetWorldToPixelRatio");
static_assert(offsetof(MapFog_GetWorldToPixelRatio, ReturnValue) == 0x000000, "Member 'MapFog_GetWorldToPixelRatio::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapFunctionLibrary.BoxSelectInView
// 0x0040 (0x0040 - 0x0000)
struct MapFunctionLibrary_BoxSelectInView final
{
public:
	struct FVector2D                              StartUV;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndUV;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMapViewComponent*                      MapView;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCircular;                                       // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2513[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMapIconComponent*>              ReturnValue;                                       // 0x0030(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFunctionLibrary_BoxSelectInView) == 0x000008, "Wrong alignment on MapFunctionLibrary_BoxSelectInView");
static_assert(sizeof(MapFunctionLibrary_BoxSelectInView) == 0x000040, "Wrong size on MapFunctionLibrary_BoxSelectInView");
static_assert(offsetof(MapFunctionLibrary_BoxSelectInView, StartUV) == 0x000000, "Member 'MapFunctionLibrary_BoxSelectInView::StartUV' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_BoxSelectInView, EndUV) == 0x000010, "Member 'MapFunctionLibrary_BoxSelectInView::EndUV' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_BoxSelectInView, MapView) == 0x000020, "Member 'MapFunctionLibrary_BoxSelectInView::MapView' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_BoxSelectInView, bIsCircular) == 0x000028, "Member 'MapFunctionLibrary_BoxSelectInView::bIsCircular' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_BoxSelectInView, ReturnValue) == 0x000030, "Member 'MapFunctionLibrary_BoxSelectInView::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapFunctionLibrary.ClampIntoView
// 0x0028 (0x0028 - 0x0000)
struct MapFunctionLibrary_ClampIntoView final
{
public:
	struct FVector2D                              UV;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadiusUV;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCircular;                                       // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2514[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFunctionLibrary_ClampIntoView) == 0x000008, "Wrong alignment on MapFunctionLibrary_ClampIntoView");
static_assert(sizeof(MapFunctionLibrary_ClampIntoView) == 0x000028, "Wrong size on MapFunctionLibrary_ClampIntoView");
static_assert(offsetof(MapFunctionLibrary_ClampIntoView, UV) == 0x000000, "Member 'MapFunctionLibrary_ClampIntoView::UV' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_ClampIntoView, OuterRadiusUV) == 0x000010, "Member 'MapFunctionLibrary_ClampIntoView::OuterRadiusUV' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_ClampIntoView, bIsCircular) == 0x000014, "Member 'MapFunctionLibrary_ClampIntoView::bIsCircular' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_ClampIntoView, ReturnValue) == 0x000018, "Member 'MapFunctionLibrary_ClampIntoView::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapFunctionLibrary.ComputeViewFrustum
// 0x0030 (0x0030 - 0x0000)
struct MapFunctionLibrary_ComputeViewFrustum final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMapViewComponent*                      MapView;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCircular;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2515[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      CornerUVs;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FloorDistance;                                     // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2516[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapFunctionLibrary_ComputeViewFrustum) == 0x000008, "Wrong alignment on MapFunctionLibrary_ComputeViewFrustum");
static_assert(sizeof(MapFunctionLibrary_ComputeViewFrustum) == 0x000030, "Wrong size on MapFunctionLibrary_ComputeViewFrustum");
static_assert(offsetof(MapFunctionLibrary_ComputeViewFrustum, WorldContextObject) == 0x000000, "Member 'MapFunctionLibrary_ComputeViewFrustum::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_ComputeViewFrustum, MapView) == 0x000008, "Member 'MapFunctionLibrary_ComputeViewFrustum::MapView' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_ComputeViewFrustum, bIsCircular) == 0x000010, "Member 'MapFunctionLibrary_ComputeViewFrustum::bIsCircular' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_ComputeViewFrustum, CornerUVs) == 0x000018, "Member 'MapFunctionLibrary_ComputeViewFrustum::CornerUVs' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_ComputeViewFrustum, FloorDistance) == 0x000028, "Member 'MapFunctionLibrary_ComputeViewFrustum::FloorDistance' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_ComputeViewFrustum, ReturnValue) == 0x00002C, "Member 'MapFunctionLibrary_ComputeViewFrustum::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapFunctionLibrary.DetectIsInView
// 0x0028 (0x0028 - 0x0000)
struct MapFunctionLibrary_DetectIsInView final
{
public:
	struct FVector2D                              UV;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OuterRadiusUV;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCircular;                                       // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2517[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapFunctionLibrary_DetectIsInView) == 0x000008, "Wrong alignment on MapFunctionLibrary_DetectIsInView");
static_assert(sizeof(MapFunctionLibrary_DetectIsInView) == 0x000028, "Wrong size on MapFunctionLibrary_DetectIsInView");
static_assert(offsetof(MapFunctionLibrary_DetectIsInView, UV) == 0x000000, "Member 'MapFunctionLibrary_DetectIsInView::UV' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_DetectIsInView, OuterRadiusUV) == 0x000010, "Member 'MapFunctionLibrary_DetectIsInView::OuterRadiusUV' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_DetectIsInView, bIsCircular) == 0x000020, "Member 'MapFunctionLibrary_DetectIsInView::bIsCircular' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_DetectIsInView, ReturnValue) == 0x000021, "Member 'MapFunctionLibrary_DetectIsInView::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapFunctionLibrary.FindMapView
// 0x0018 (0x0018 - 0x0000)
struct MapFunctionLibrary_FindMapView final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapViewSearchOption                          MapViewSearchOption;                               // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2518[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapViewComponent*                      ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFunctionLibrary_FindMapView) == 0x000008, "Wrong alignment on MapFunctionLibrary_FindMapView");
static_assert(sizeof(MapFunctionLibrary_FindMapView) == 0x000018, "Wrong size on MapFunctionLibrary_FindMapView");
static_assert(offsetof(MapFunctionLibrary_FindMapView, WorldContextObject) == 0x000000, "Member 'MapFunctionLibrary_FindMapView::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_FindMapView, MapViewSearchOption) == 0x000008, "Member 'MapFunctionLibrary_FindMapView::MapViewSearchOption' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_FindMapView, ReturnValue) == 0x000010, "Member 'MapFunctionLibrary_FindMapView::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapFunctionLibrary.GetFirstMapBackground
// 0x0010 (0x0010 - 0x0000)
struct MapFunctionLibrary_GetFirstMapBackground final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMapBackground*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFunctionLibrary_GetFirstMapBackground) == 0x000008, "Wrong alignment on MapFunctionLibrary_GetFirstMapBackground");
static_assert(sizeof(MapFunctionLibrary_GetFirstMapBackground) == 0x000010, "Wrong size on MapFunctionLibrary_GetFirstMapBackground");
static_assert(offsetof(MapFunctionLibrary_GetFirstMapBackground, WorldContextObject) == 0x000000, "Member 'MapFunctionLibrary_GetFirstMapBackground::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_GetFirstMapBackground, ReturnValue) == 0x000008, "Member 'MapFunctionLibrary_GetFirstMapBackground::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapFunctionLibrary.GetMapTracker
// 0x0010 (0x0010 - 0x0000)
struct MapFunctionLibrary_GetMapTracker final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMapTrackerComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFunctionLibrary_GetMapTracker) == 0x000008, "Wrong alignment on MapFunctionLibrary_GetMapTracker");
static_assert(sizeof(MapFunctionLibrary_GetMapTracker) == 0x000010, "Wrong size on MapFunctionLibrary_GetMapTracker");
static_assert(offsetof(MapFunctionLibrary_GetMapTracker, WorldContextObject) == 0x000000, "Member 'MapFunctionLibrary_GetMapTracker::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MapFunctionLibrary_GetMapTracker, ReturnValue) == 0x000008, "Member 'MapFunctionLibrary_GetMapTracker::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetIconMaterialInstancesForCanvas
// 0x0010 (0x0010 - 0x0000)
struct MapIconComponent_GetIconMaterialInstancesForCanvas final
{
public:
	TArray<class UMaterialInstanceDynamic*>       MaterialInstances;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetIconMaterialInstancesForCanvas) == 0x000008, "Wrong alignment on MapIconComponent_GetIconMaterialInstancesForCanvas");
static_assert(sizeof(MapIconComponent_GetIconMaterialInstancesForCanvas) == 0x000010, "Wrong size on MapIconComponent_GetIconMaterialInstancesForCanvas");
static_assert(offsetof(MapIconComponent_GetIconMaterialInstancesForCanvas, MaterialInstances) == 0x000000, "Member 'MapIconComponent_GetIconMaterialInstancesForCanvas::MaterialInstances' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetIconMaterialInstancesForUMG
// 0x0010 (0x0010 - 0x0000)
struct MapIconComponent_GetIconMaterialInstancesForUMG final
{
public:
	TArray<class UMaterialInstanceDynamic*>       MaterialInstances;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetIconMaterialInstancesForUMG) == 0x000008, "Wrong alignment on MapIconComponent_GetIconMaterialInstancesForUMG");
static_assert(sizeof(MapIconComponent_GetIconMaterialInstancesForUMG) == 0x000010, "Wrong size on MapIconComponent_GetIconMaterialInstancesForUMG");
static_assert(offsetof(MapIconComponent_GetIconMaterialInstancesForUMG, MaterialInstances) == 0x000000, "Member 'MapIconComponent_GetIconMaterialInstancesForUMG::MaterialInstances' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.MarkRenderedInView
// 0x0010 (0x0010 - 0x0000)
struct MapIconComponent_MarkRenderedInView final
{
public:
	class UMapViewComponent*                      View;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewIsRendered;                                    // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2520[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapIconComponent_MarkRenderedInView) == 0x000008, "Wrong alignment on MapIconComponent_MarkRenderedInView");
static_assert(sizeof(MapIconComponent_MarkRenderedInView) == 0x000010, "Wrong size on MapIconComponent_MarkRenderedInView");
static_assert(offsetof(MapIconComponent_MarkRenderedInView, View) == 0x000000, "Member 'MapIconComponent_MarkRenderedInView::View' has a wrong offset!");
static_assert(offsetof(MapIconComponent_MarkRenderedInView, bNewIsRendered) == 0x000008, "Member 'MapIconComponent_MarkRenderedInView::bNewIsRendered' has a wrong offset!");
static_assert(offsetof(MapIconComponent_MarkRenderedInView, ReturnValue) == 0x000009, "Member 'MapIconComponent_MarkRenderedInView::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.ReceiveClicked
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_ReceiveClicked final
{
public:
	bool                                          bIsLeftMouseButton;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_ReceiveClicked) == 0x000001, "Wrong alignment on MapIconComponent_ReceiveClicked");
static_assert(sizeof(MapIconComponent_ReceiveClicked) == 0x000001, "Wrong size on MapIconComponent_ReceiveClicked");
static_assert(offsetof(MapIconComponent_ReceiveClicked, bIsLeftMouseButton) == 0x000000, "Member 'MapIconComponent_ReceiveClicked::bIsLeftMouseButton' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.RegisterMaterialInstanceFromUMG
// 0x0010 (0x0010 - 0x0000)
struct MapIconComponent_RegisterMaterialInstanceFromUMG final
{
public:
	class UUserWidget*                            IconWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MatInst;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_RegisterMaterialInstanceFromUMG) == 0x000008, "Wrong alignment on MapIconComponent_RegisterMaterialInstanceFromUMG");
static_assert(sizeof(MapIconComponent_RegisterMaterialInstanceFromUMG) == 0x000010, "Wrong size on MapIconComponent_RegisterMaterialInstanceFromUMG");
static_assert(offsetof(MapIconComponent_RegisterMaterialInstanceFromUMG, IconWidget) == 0x000000, "Member 'MapIconComponent_RegisterMaterialInstanceFromUMG::IconWidget' has a wrong offset!");
static_assert(offsetof(MapIconComponent_RegisterMaterialInstanceFromUMG, MatInst) == 0x000008, "Member 'MapIconComponent_RegisterMaterialInstanceFromUMG::MatInst' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetIconBackgroundInteraction
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_SetIconBackgroundInteraction final
{
public:
	EIconBackgroundInteraction                    NewBackgroundInteraction;                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetIconBackgroundInteraction) == 0x000001, "Wrong alignment on MapIconComponent_SetIconBackgroundInteraction");
static_assert(sizeof(MapIconComponent_SetIconBackgroundInteraction) == 0x000001, "Wrong size on MapIconComponent_SetIconBackgroundInteraction");
static_assert(offsetof(MapIconComponent_SetIconBackgroundInteraction, NewBackgroundInteraction) == 0x000000, "Member 'MapIconComponent_SetIconBackgroundInteraction::NewBackgroundInteraction' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetIconDrawColor
// 0x0010 (0x0010 - 0x0000)
struct MapIconComponent_SetIconDrawColor final
{
public:
	struct FLinearColor                           NewDrawColor;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetIconDrawColor) == 0x000004, "Wrong alignment on MapIconComponent_SetIconDrawColor");
static_assert(sizeof(MapIconComponent_SetIconDrawColor) == 0x000010, "Wrong size on MapIconComponent_SetIconDrawColor");
static_assert(offsetof(MapIconComponent_SetIconDrawColor, NewDrawColor) == 0x000000, "Member 'MapIconComponent_SetIconDrawColor::NewDrawColor' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetIconFogInteraction
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_SetIconFogInteraction final
{
public:
	EIconFogInteraction                           NewFogInteraction;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetIconFogInteraction) == 0x000001, "Wrong alignment on MapIconComponent_SetIconFogInteraction");
static_assert(sizeof(MapIconComponent_SetIconFogInteraction) == 0x000001, "Wrong size on MapIconComponent_SetIconFogInteraction");
static_assert(offsetof(MapIconComponent_SetIconFogInteraction, NewFogInteraction) == 0x000000, "Member 'MapIconComponent_SetIconFogInteraction::NewFogInteraction' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetIconFogRevealThreshold
// 0x0004 (0x0004 - 0x0000)
struct MapIconComponent_SetIconFogRevealThreshold final
{
public:
	float                                         NewFogRevealThreshold;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetIconFogRevealThreshold) == 0x000004, "Wrong alignment on MapIconComponent_SetIconFogRevealThreshold");
static_assert(sizeof(MapIconComponent_SetIconFogRevealThreshold) == 0x000004, "Wrong size on MapIconComponent_SetIconFogRevealThreshold");
static_assert(offsetof(MapIconComponent_SetIconFogRevealThreshold, NewFogRevealThreshold) == 0x000000, "Member 'MapIconComponent_SetIconFogRevealThreshold::NewFogRevealThreshold' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetIconInteractable
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_SetIconInteractable final
{
public:
	bool                                          bNewInteractable;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetIconInteractable) == 0x000001, "Wrong alignment on MapIconComponent_SetIconInteractable");
static_assert(sizeof(MapIconComponent_SetIconInteractable) == 0x000001, "Wrong size on MapIconComponent_SetIconInteractable");
static_assert(offsetof(MapIconComponent_SetIconInteractable, bNewInteractable) == 0x000000, "Member 'MapIconComponent_SetIconInteractable::bNewInteractable' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetIconMaterialForCanvas
// 0x0008 (0x0008 - 0x0000)
struct MapIconComponent_SetIconMaterialForCanvas final
{
public:
	class UMaterialInterface*                     NewMaterial;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetIconMaterialForCanvas) == 0x000008, "Wrong alignment on MapIconComponent_SetIconMaterialForCanvas");
static_assert(sizeof(MapIconComponent_SetIconMaterialForCanvas) == 0x000008, "Wrong size on MapIconComponent_SetIconMaterialForCanvas");
static_assert(offsetof(MapIconComponent_SetIconMaterialForCanvas, NewMaterial) == 0x000000, "Member 'MapIconComponent_SetIconMaterialForCanvas::NewMaterial' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetIconMaterialForUMG
// 0x0008 (0x0008 - 0x0000)
struct MapIconComponent_SetIconMaterialForUMG final
{
public:
	class UMaterialInterface*                     NewMaterial;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetIconMaterialForUMG) == 0x000008, "Wrong alignment on MapIconComponent_SetIconMaterialForUMG");
static_assert(sizeof(MapIconComponent_SetIconMaterialForUMG) == 0x000008, "Wrong size on MapIconComponent_SetIconMaterialForUMG");
static_assert(offsetof(MapIconComponent_SetIconMaterialForUMG, NewMaterial) == 0x000000, "Member 'MapIconComponent_SetIconMaterialForUMG::NewMaterial' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetIconRotates
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_SetIconRotates final
{
public:
	bool                                          bNewRotates;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetIconRotates) == 0x000001, "Wrong alignment on MapIconComponent_SetIconRotates");
static_assert(sizeof(MapIconComponent_SetIconRotates) == 0x000001, "Wrong size on MapIconComponent_SetIconRotates");
static_assert(offsetof(MapIconComponent_SetIconRotates, bNewRotates) == 0x000000, "Member 'MapIconComponent_SetIconRotates::bNewRotates' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetIconSize
// 0x0008 (0x0008 - 0x0000)
struct MapIconComponent_SetIconSize final
{
public:
	float                                         NewIconSize;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIconSizeUnit                                 NewIconSizeUnit;                                   // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2521[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapIconComponent_SetIconSize) == 0x000004, "Wrong alignment on MapIconComponent_SetIconSize");
static_assert(sizeof(MapIconComponent_SetIconSize) == 0x000008, "Wrong size on MapIconComponent_SetIconSize");
static_assert(offsetof(MapIconComponent_SetIconSize, NewIconSize) == 0x000000, "Member 'MapIconComponent_SetIconSize::NewIconSize' has a wrong offset!");
static_assert(offsetof(MapIconComponent_SetIconSize, NewIconSizeUnit) == 0x000004, "Member 'MapIconComponent_SetIconSize::NewIconSizeUnit' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetIconTexture
// 0x0008 (0x0008 - 0x0000)
struct MapIconComponent_SetIconTexture final
{
public:
	class UTexture2D*                             NewIcon;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetIconTexture) == 0x000008, "Wrong alignment on MapIconComponent_SetIconTexture");
static_assert(sizeof(MapIconComponent_SetIconTexture) == 0x000008, "Wrong size on MapIconComponent_SetIconTexture");
static_assert(offsetof(MapIconComponent_SetIconTexture, NewIcon) == 0x000000, "Member 'MapIconComponent_SetIconTexture::NewIcon' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetIconTooltipText
// 0x0008 (0x0008 - 0x0000)
struct MapIconComponent_SetIconTooltipText final
{
public:
	class FName                                   NewIconName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetIconTooltipText) == 0x000004, "Wrong alignment on MapIconComponent_SetIconTooltipText");
static_assert(sizeof(MapIconComponent_SetIconTooltipText) == 0x000008, "Wrong size on MapIconComponent_SetIconTooltipText");
static_assert(offsetof(MapIconComponent_SetIconTooltipText, NewIconName) == 0x000000, "Member 'MapIconComponent_SetIconTooltipText::NewIconName' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetIconVisible
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_SetIconVisible final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetIconVisible) == 0x000001, "Wrong alignment on MapIconComponent_SetIconVisible");
static_assert(sizeof(MapIconComponent_SetIconVisible) == 0x000001, "Wrong size on MapIconComponent_SetIconVisible");
static_assert(offsetof(MapIconComponent_SetIconVisible, bNewVisible) == 0x000000, "Member 'MapIconComponent_SetIconVisible::bNewVisible' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetIconZOrder
// 0x0004 (0x0004 - 0x0000)
struct MapIconComponent_SetIconZOrder final
{
public:
	int32                                         NewZOrder;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetIconZOrder) == 0x000004, "Wrong alignment on MapIconComponent_SetIconZOrder");
static_assert(sizeof(MapIconComponent_SetIconZOrder) == 0x000004, "Wrong size on MapIconComponent_SetIconZOrder");
static_assert(offsetof(MapIconComponent_SetIconZOrder, NewZOrder) == 0x000000, "Member 'MapIconComponent_SetIconZOrder::NewZOrder' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetObjectiveArrowEnabled
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_SetObjectiveArrowEnabled final
{
public:
	bool                                          bNewObjectiveArrowEnabled;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetObjectiveArrowEnabled) == 0x000001, "Wrong alignment on MapIconComponent_SetObjectiveArrowEnabled");
static_assert(sizeof(MapIconComponent_SetObjectiveArrowEnabled) == 0x000001, "Wrong size on MapIconComponent_SetObjectiveArrowEnabled");
static_assert(offsetof(MapIconComponent_SetObjectiveArrowEnabled, bNewObjectiveArrowEnabled) == 0x000000, "Member 'MapIconComponent_SetObjectiveArrowEnabled::bNewObjectiveArrowEnabled' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetObjectiveArrowRotates
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_SetObjectiveArrowRotates final
{
public:
	bool                                          bNewRotates;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetObjectiveArrowRotates) == 0x000001, "Wrong alignment on MapIconComponent_SetObjectiveArrowRotates");
static_assert(sizeof(MapIconComponent_SetObjectiveArrowRotates) == 0x000001, "Wrong size on MapIconComponent_SetObjectiveArrowRotates");
static_assert(offsetof(MapIconComponent_SetObjectiveArrowRotates, bNewRotates) == 0x000000, "Member 'MapIconComponent_SetObjectiveArrowRotates::bNewRotates' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetObjectiveArrowSize
// 0x0004 (0x0004 - 0x0000)
struct MapIconComponent_SetObjectiveArrowSize final
{
public:
	float                                         NewObjectiveArrowSize;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetObjectiveArrowSize) == 0x000004, "Wrong alignment on MapIconComponent_SetObjectiveArrowSize");
static_assert(sizeof(MapIconComponent_SetObjectiveArrowSize) == 0x000004, "Wrong size on MapIconComponent_SetObjectiveArrowSize");
static_assert(offsetof(MapIconComponent_SetObjectiveArrowSize, NewObjectiveArrowSize) == 0x000000, "Member 'MapIconComponent_SetObjectiveArrowSize::NewObjectiveArrowSize' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.SetObjectiveArrowTexture
// 0x0008 (0x0008 - 0x0000)
struct MapIconComponent_SetObjectiveArrowTexture final
{
public:
	class UTexture2D*                             NewTexture;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_SetObjectiveArrowTexture) == 0x000008, "Wrong alignment on MapIconComponent_SetObjectiveArrowTexture");
static_assert(sizeof(MapIconComponent_SetObjectiveArrowTexture) == 0x000008, "Wrong size on MapIconComponent_SetObjectiveArrowTexture");
static_assert(offsetof(MapIconComponent_SetObjectiveArrowTexture, NewTexture) == 0x000000, "Member 'MapIconComponent_SetObjectiveArrowTexture::NewTexture' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.DoesIconRotate
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_DoesIconRotate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_DoesIconRotate) == 0x000001, "Wrong alignment on MapIconComponent_DoesIconRotate");
static_assert(sizeof(MapIconComponent_DoesIconRotate) == 0x000001, "Wrong size on MapIconComponent_DoesIconRotate");
static_assert(offsetof(MapIconComponent_DoesIconRotate, ReturnValue) == 0x000000, "Member 'MapIconComponent_DoesIconRotate::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.DoesObjectiveArrowRotate
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_DoesObjectiveArrowRotate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_DoesObjectiveArrowRotate) == 0x000001, "Wrong alignment on MapIconComponent_DoesObjectiveArrowRotate");
static_assert(sizeof(MapIconComponent_DoesObjectiveArrowRotate) == 0x000001, "Wrong size on MapIconComponent_DoesObjectiveArrowRotate");
static_assert(offsetof(MapIconComponent_DoesObjectiveArrowRotate, ReturnValue) == 0x000000, "Member 'MapIconComponent_DoesObjectiveArrowRotate::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetIconBackgroundInteraction
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_GetIconBackgroundInteraction final
{
public:
	EIconBackgroundInteraction                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetIconBackgroundInteraction) == 0x000001, "Wrong alignment on MapIconComponent_GetIconBackgroundInteraction");
static_assert(sizeof(MapIconComponent_GetIconBackgroundInteraction) == 0x000001, "Wrong size on MapIconComponent_GetIconBackgroundInteraction");
static_assert(offsetof(MapIconComponent_GetIconBackgroundInteraction, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetIconBackgroundInteraction::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetIconDrawColor
// 0x0010 (0x0010 - 0x0000)
struct MapIconComponent_GetIconDrawColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetIconDrawColor) == 0x000004, "Wrong alignment on MapIconComponent_GetIconDrawColor");
static_assert(sizeof(MapIconComponent_GetIconDrawColor) == 0x000010, "Wrong size on MapIconComponent_GetIconDrawColor");
static_assert(offsetof(MapIconComponent_GetIconDrawColor, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetIconDrawColor::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetIconFogInteraction
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_GetIconFogInteraction final
{
public:
	EIconFogInteraction                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetIconFogInteraction) == 0x000001, "Wrong alignment on MapIconComponent_GetIconFogInteraction");
static_assert(sizeof(MapIconComponent_GetIconFogInteraction) == 0x000001, "Wrong size on MapIconComponent_GetIconFogInteraction");
static_assert(offsetof(MapIconComponent_GetIconFogInteraction, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetIconFogInteraction::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetIconFogRevealThreshold
// 0x0004 (0x0004 - 0x0000)
struct MapIconComponent_GetIconFogRevealThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetIconFogRevealThreshold) == 0x000004, "Wrong alignment on MapIconComponent_GetIconFogRevealThreshold");
static_assert(sizeof(MapIconComponent_GetIconFogRevealThreshold) == 0x000004, "Wrong size on MapIconComponent_GetIconFogRevealThreshold");
static_assert(offsetof(MapIconComponent_GetIconFogRevealThreshold, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetIconFogRevealThreshold::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetIconMaterialForCanvas
// 0x0008 (0x0008 - 0x0000)
struct MapIconComponent_GetIconMaterialForCanvas final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetIconMaterialForCanvas) == 0x000008, "Wrong alignment on MapIconComponent_GetIconMaterialForCanvas");
static_assert(sizeof(MapIconComponent_GetIconMaterialForCanvas) == 0x000008, "Wrong size on MapIconComponent_GetIconMaterialForCanvas");
static_assert(offsetof(MapIconComponent_GetIconMaterialForCanvas, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetIconMaterialForCanvas::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetIconMaterialForUMG
// 0x0008 (0x0008 - 0x0000)
struct MapIconComponent_GetIconMaterialForUMG final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetIconMaterialForUMG) == 0x000008, "Wrong alignment on MapIconComponent_GetIconMaterialForUMG");
static_assert(sizeof(MapIconComponent_GetIconMaterialForUMG) == 0x000008, "Wrong size on MapIconComponent_GetIconMaterialForUMG");
static_assert(offsetof(MapIconComponent_GetIconMaterialForUMG, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetIconMaterialForUMG::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetIconSize
// 0x0004 (0x0004 - 0x0000)
struct MapIconComponent_GetIconSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetIconSize) == 0x000004, "Wrong alignment on MapIconComponent_GetIconSize");
static_assert(sizeof(MapIconComponent_GetIconSize) == 0x000004, "Wrong size on MapIconComponent_GetIconSize");
static_assert(offsetof(MapIconComponent_GetIconSize, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetIconSize::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetIconSizeUnit
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_GetIconSizeUnit final
{
public:
	EIconSizeUnit                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetIconSizeUnit) == 0x000001, "Wrong alignment on MapIconComponent_GetIconSizeUnit");
static_assert(sizeof(MapIconComponent_GetIconSizeUnit) == 0x000001, "Wrong size on MapIconComponent_GetIconSizeUnit");
static_assert(offsetof(MapIconComponent_GetIconSizeUnit, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetIconSizeUnit::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetIconTexture
// 0x0008 (0x0008 - 0x0000)
struct MapIconComponent_GetIconTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetIconTexture) == 0x000008, "Wrong alignment on MapIconComponent_GetIconTexture");
static_assert(sizeof(MapIconComponent_GetIconTexture) == 0x000008, "Wrong size on MapIconComponent_GetIconTexture");
static_assert(offsetof(MapIconComponent_GetIconTexture, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetIconTexture::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetIconTooltipText
// 0x0008 (0x0008 - 0x0000)
struct MapIconComponent_GetIconTooltipText final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetIconTooltipText) == 0x000004, "Wrong alignment on MapIconComponent_GetIconTooltipText");
static_assert(sizeof(MapIconComponent_GetIconTooltipText) == 0x000008, "Wrong size on MapIconComponent_GetIconTooltipText");
static_assert(offsetof(MapIconComponent_GetIconTooltipText, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetIconTooltipText::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetIconZOrder
// 0x0004 (0x0004 - 0x0000)
struct MapIconComponent_GetIconZOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetIconZOrder) == 0x000004, "Wrong alignment on MapIconComponent_GetIconZOrder");
static_assert(sizeof(MapIconComponent_GetIconZOrder) == 0x000004, "Wrong size on MapIconComponent_GetIconZOrder");
static_assert(offsetof(MapIconComponent_GetIconZOrder, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetIconZOrder::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetObjectiveArrowMaterialForCanvas
// 0x0008 (0x0008 - 0x0000)
struct MapIconComponent_GetObjectiveArrowMaterialForCanvas final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetObjectiveArrowMaterialForCanvas) == 0x000008, "Wrong alignment on MapIconComponent_GetObjectiveArrowMaterialForCanvas");
static_assert(sizeof(MapIconComponent_GetObjectiveArrowMaterialForCanvas) == 0x000008, "Wrong size on MapIconComponent_GetObjectiveArrowMaterialForCanvas");
static_assert(offsetof(MapIconComponent_GetObjectiveArrowMaterialForCanvas, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetObjectiveArrowMaterialForCanvas::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetObjectiveArrowMaterialForUMG
// 0x0008 (0x0008 - 0x0000)
struct MapIconComponent_GetObjectiveArrowMaterialForUMG final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetObjectiveArrowMaterialForUMG) == 0x000008, "Wrong alignment on MapIconComponent_GetObjectiveArrowMaterialForUMG");
static_assert(sizeof(MapIconComponent_GetObjectiveArrowMaterialForUMG) == 0x000008, "Wrong size on MapIconComponent_GetObjectiveArrowMaterialForUMG");
static_assert(offsetof(MapIconComponent_GetObjectiveArrowMaterialForUMG, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetObjectiveArrowMaterialForUMG::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetObjectiveArrowSize
// 0x0004 (0x0004 - 0x0000)
struct MapIconComponent_GetObjectiveArrowSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetObjectiveArrowSize) == 0x000004, "Wrong alignment on MapIconComponent_GetObjectiveArrowSize");
static_assert(sizeof(MapIconComponent_GetObjectiveArrowSize) == 0x000004, "Wrong size on MapIconComponent_GetObjectiveArrowSize");
static_assert(offsetof(MapIconComponent_GetObjectiveArrowSize, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetObjectiveArrowSize::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.GetObjectiveArrowTexture
// 0x0008 (0x0008 - 0x0000)
struct MapIconComponent_GetObjectiveArrowTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_GetObjectiveArrowTexture) == 0x000008, "Wrong alignment on MapIconComponent_GetObjectiveArrowTexture");
static_assert(sizeof(MapIconComponent_GetObjectiveArrowTexture) == 0x000008, "Wrong size on MapIconComponent_GetObjectiveArrowTexture");
static_assert(offsetof(MapIconComponent_GetObjectiveArrowTexture, ReturnValue) == 0x000000, "Member 'MapIconComponent_GetObjectiveArrowTexture::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.IsIconInteractable
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_IsIconInteractable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_IsIconInteractable) == 0x000001, "Wrong alignment on MapIconComponent_IsIconInteractable");
static_assert(sizeof(MapIconComponent_IsIconInteractable) == 0x000001, "Wrong size on MapIconComponent_IsIconInteractable");
static_assert(offsetof(MapIconComponent_IsIconInteractable, ReturnValue) == 0x000000, "Member 'MapIconComponent_IsIconInteractable::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.IsIconVisible
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_IsIconVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_IsIconVisible) == 0x000001, "Wrong alignment on MapIconComponent_IsIconVisible");
static_assert(sizeof(MapIconComponent_IsIconVisible) == 0x000001, "Wrong size on MapIconComponent_IsIconVisible");
static_assert(offsetof(MapIconComponent_IsIconVisible, ReturnValue) == 0x000000, "Member 'MapIconComponent_IsIconVisible::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.IsObjectiveArrowEnabled
// 0x0001 (0x0001 - 0x0000)
struct MapIconComponent_IsObjectiveArrowEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconComponent_IsObjectiveArrowEnabled) == 0x000001, "Wrong alignment on MapIconComponent_IsObjectiveArrowEnabled");
static_assert(sizeof(MapIconComponent_IsObjectiveArrowEnabled) == 0x000001, "Wrong size on MapIconComponent_IsObjectiveArrowEnabled");
static_assert(offsetof(MapIconComponent_IsObjectiveArrowEnabled, ReturnValue) == 0x000000, "Member 'MapIconComponent_IsObjectiveArrowEnabled::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapIconComponent.IsRenderedInView
// 0x0010 (0x0010 - 0x0000)
struct MapIconComponent_IsRenderedInView final
{
public:
	class UMapViewComponent*                      View;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2522[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapIconComponent_IsRenderedInView) == 0x000008, "Wrong alignment on MapIconComponent_IsRenderedInView");
static_assert(sizeof(MapIconComponent_IsRenderedInView) == 0x000010, "Wrong size on MapIconComponent_IsRenderedInView");
static_assert(offsetof(MapIconComponent_IsRenderedInView, View) == 0x000000, "Member 'MapIconComponent_IsRenderedInView::View' has a wrong offset!");
static_assert(offsetof(MapIconComponent_IsRenderedInView, ReturnValue) == 0x000008, "Member 'MapIconComponent_IsRenderedInView::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.SetAutoLocateMapView
// 0x0001 (0x0001 - 0x0000)
struct MapRendererComponent_SetAutoLocateMapView final
{
public:
	EMapViewSearchOption                          InAutoLocateMapView;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_SetAutoLocateMapView) == 0x000001, "Wrong alignment on MapRendererComponent_SetAutoLocateMapView");
static_assert(sizeof(MapRendererComponent_SetAutoLocateMapView) == 0x000001, "Wrong size on MapRendererComponent_SetAutoLocateMapView");
static_assert(offsetof(MapRendererComponent_SetAutoLocateMapView, InAutoLocateMapView) == 0x000000, "Member 'MapRendererComponent_SetAutoLocateMapView::InAutoLocateMapView' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.SetBackgroundFillColor
// 0x0010 (0x0010 - 0x0000)
struct MapRendererComponent_SetBackgroundFillColor final
{
public:
	struct FLinearColor                           NewBackgroundFillColor;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_SetBackgroundFillColor) == 0x000004, "Wrong alignment on MapRendererComponent_SetBackgroundFillColor");
static_assert(sizeof(MapRendererComponent_SetBackgroundFillColor) == 0x000010, "Wrong size on MapRendererComponent_SetBackgroundFillColor");
static_assert(offsetof(MapRendererComponent_SetBackgroundFillColor, NewBackgroundFillColor) == 0x000000, "Member 'MapRendererComponent_SetBackgroundFillColor::NewBackgroundFillColor' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.SetDrawFrustum
// 0x0001 (0x0001 - 0x0000)
struct MapRendererComponent_SetDrawFrustum final
{
public:
	bool                                          bNewDrawFrustum;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_SetDrawFrustum) == 0x000001, "Wrong alignment on MapRendererComponent_SetDrawFrustum");
static_assert(sizeof(MapRendererComponent_SetDrawFrustum) == 0x000001, "Wrong size on MapRendererComponent_SetDrawFrustum");
static_assert(offsetof(MapRendererComponent_SetDrawFrustum, bNewDrawFrustum) == 0x000000, "Member 'MapRendererComponent_SetDrawFrustum::bNewDrawFrustum' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.SetFrustumFloorDistance
// 0x0004 (0x0004 - 0x0000)
struct MapRendererComponent_SetFrustumFloorDistance final
{
public:
	float                                         NewFrustumFloorDistance;                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_SetFrustumFloorDistance) == 0x000004, "Wrong alignment on MapRendererComponent_SetFrustumFloorDistance");
static_assert(sizeof(MapRendererComponent_SetFrustumFloorDistance) == 0x000004, "Wrong size on MapRendererComponent_SetFrustumFloorDistance");
static_assert(offsetof(MapRendererComponent_SetFrustumFloorDistance, NewFrustumFloorDistance) == 0x000000, "Member 'MapRendererComponent_SetFrustumFloorDistance::NewFrustumFloorDistance' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct MapRendererComponent_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_SetHorizontalAlignment) == 0x000001, "Wrong alignment on MapRendererComponent_SetHorizontalAlignment");
static_assert(sizeof(MapRendererComponent_SetHorizontalAlignment) == 0x000001, "Wrong size on MapRendererComponent_SetHorizontalAlignment");
static_assert(offsetof(MapRendererComponent_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'MapRendererComponent_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.SetIsCircular
// 0x0001 (0x0001 - 0x0000)
struct MapRendererComponent_SetIsCircular final
{
public:
	bool                                          bNewIsCircular;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_SetIsCircular) == 0x000001, "Wrong alignment on MapRendererComponent_SetIsCircular");
static_assert(sizeof(MapRendererComponent_SetIsCircular) == 0x000001, "Wrong size on MapRendererComponent_SetIsCircular");
static_assert(offsetof(MapRendererComponent_SetIsCircular, bNewIsCircular) == 0x000000, "Member 'MapRendererComponent_SetIsCircular::bNewIsCircular' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.SetIsRendered
// 0x0001 (0x0001 - 0x0000)
struct MapRendererComponent_SetIsRendered final
{
public:
	bool                                          bNewIsRendered;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_SetIsRendered) == 0x000001, "Wrong alignment on MapRendererComponent_SetIsRendered");
static_assert(sizeof(MapRendererComponent_SetIsRendered) == 0x000001, "Wrong size on MapRendererComponent_SetIsRendered");
static_assert(offsetof(MapRendererComponent_SetIsRendered, bNewIsRendered) == 0x000000, "Member 'MapRendererComponent_SetIsRendered::bNewIsRendered' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.SetMapView
// 0x0008 (0x0008 - 0x0000)
struct MapRendererComponent_SetMapView final
{
public:
	class UMapViewComponent*                      InMapView;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_SetMapView) == 0x000008, "Wrong alignment on MapRendererComponent_SetMapView");
static_assert(sizeof(MapRendererComponent_SetMapView) == 0x000008, "Wrong size on MapRendererComponent_SetMapView");
static_assert(offsetof(MapRendererComponent_SetMapView, InMapView) == 0x000000, "Member 'MapRendererComponent_SetMapView::InMapView' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.SetMargin
// 0x0010 (0x0010 - 0x0000)
struct MapRendererComponent_SetMargin final
{
public:
	int32                                         Left;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Top;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Right;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bottom;                                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_SetMargin) == 0x000004, "Wrong alignment on MapRendererComponent_SetMargin");
static_assert(sizeof(MapRendererComponent_SetMargin) == 0x000010, "Wrong size on MapRendererComponent_SetMargin");
static_assert(offsetof(MapRendererComponent_SetMargin, Left) == 0x000000, "Member 'MapRendererComponent_SetMargin::Left' has a wrong offset!");
static_assert(offsetof(MapRendererComponent_SetMargin, Top) == 0x000004, "Member 'MapRendererComponent_SetMargin::Top' has a wrong offset!");
static_assert(offsetof(MapRendererComponent_SetMargin, Right) == 0x000008, "Member 'MapRendererComponent_SetMargin::Right' has a wrong offset!");
static_assert(offsetof(MapRendererComponent_SetMargin, Bottom) == 0x00000C, "Member 'MapRendererComponent_SetMargin::Bottom' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.SetSize
// 0x0008 (0x0008 - 0x0000)
struct MapRendererComponent_SetSize final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_SetSize) == 0x000004, "Wrong alignment on MapRendererComponent_SetSize");
static_assert(sizeof(MapRendererComponent_SetSize) == 0x000008, "Wrong size on MapRendererComponent_SetSize");
static_assert(offsetof(MapRendererComponent_SetSize, Width) == 0x000000, "Member 'MapRendererComponent_SetSize::Width' has a wrong offset!");
static_assert(offsetof(MapRendererComponent_SetSize, Height) == 0x000004, "Member 'MapRendererComponent_SetSize::Height' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct MapRendererComponent_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_SetVerticalAlignment) == 0x000001, "Wrong alignment on MapRendererComponent_SetVerticalAlignment");
static_assert(sizeof(MapRendererComponent_SetVerticalAlignment) == 0x000001, "Wrong size on MapRendererComponent_SetVerticalAlignment");
static_assert(offsetof(MapRendererComponent_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'MapRendererComponent_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.GetBackgroundFillColor
// 0x0010 (0x0010 - 0x0000)
struct MapRendererComponent_GetBackgroundFillColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_GetBackgroundFillColor) == 0x000004, "Wrong alignment on MapRendererComponent_GetBackgroundFillColor");
static_assert(sizeof(MapRendererComponent_GetBackgroundFillColor) == 0x000010, "Wrong size on MapRendererComponent_GetBackgroundFillColor");
static_assert(offsetof(MapRendererComponent_GetBackgroundFillColor, ReturnValue) == 0x000000, "Member 'MapRendererComponent_GetBackgroundFillColor::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.GetDrawFrustum
// 0x0001 (0x0001 - 0x0000)
struct MapRendererComponent_GetDrawFrustum final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_GetDrawFrustum) == 0x000001, "Wrong alignment on MapRendererComponent_GetDrawFrustum");
static_assert(sizeof(MapRendererComponent_GetDrawFrustum) == 0x000001, "Wrong size on MapRendererComponent_GetDrawFrustum");
static_assert(offsetof(MapRendererComponent_GetDrawFrustum, ReturnValue) == 0x000000, "Member 'MapRendererComponent_GetDrawFrustum::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.GetFrustumFloorDistance
// 0x0004 (0x0004 - 0x0000)
struct MapRendererComponent_GetFrustumFloorDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_GetFrustumFloorDistance) == 0x000004, "Wrong alignment on MapRendererComponent_GetFrustumFloorDistance");
static_assert(sizeof(MapRendererComponent_GetFrustumFloorDistance) == 0x000004, "Wrong size on MapRendererComponent_GetFrustumFloorDistance");
static_assert(offsetof(MapRendererComponent_GetFrustumFloorDistance, ReturnValue) == 0x000000, "Member 'MapRendererComponent_GetFrustumFloorDistance::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.IsCircular
// 0x0001 (0x0001 - 0x0000)
struct MapRendererComponent_IsCircular final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_IsCircular) == 0x000001, "Wrong alignment on MapRendererComponent_IsCircular");
static_assert(sizeof(MapRendererComponent_IsCircular) == 0x000001, "Wrong size on MapRendererComponent_IsCircular");
static_assert(offsetof(MapRendererComponent_IsCircular, ReturnValue) == 0x000000, "Member 'MapRendererComponent_IsCircular::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapRendererComponent.IsRendered
// 0x0001 (0x0001 - 0x0000)
struct MapRendererComponent_IsRendered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapRendererComponent_IsRendered) == 0x000001, "Wrong alignment on MapRendererComponent_IsRendered");
static_assert(sizeof(MapRendererComponent_IsRendered) == 0x000001, "Wrong size on MapRendererComponent_IsRendered");
static_assert(offsetof(MapRendererComponent_IsRendered, ReturnValue) == 0x000000, "Member 'MapRendererComponent_IsRendered::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapTrackerComponent.GetFogRevealedFactor
// 0x0020 (0x0020 - 0x0000)
struct MapTrackerComponent_GetFogRevealedFactor final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireCurrentlyRevealing;                        // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInsideFogVolume;                                // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2525[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTrackerComponent_GetFogRevealedFactor) == 0x000008, "Wrong alignment on MapTrackerComponent_GetFogRevealedFactor");
static_assert(sizeof(MapTrackerComponent_GetFogRevealedFactor) == 0x000020, "Wrong size on MapTrackerComponent_GetFogRevealedFactor");
static_assert(offsetof(MapTrackerComponent_GetFogRevealedFactor, WorldLocation) == 0x000000, "Member 'MapTrackerComponent_GetFogRevealedFactor::WorldLocation' has a wrong offset!");
static_assert(offsetof(MapTrackerComponent_GetFogRevealedFactor, bRequireCurrentlyRevealing) == 0x000018, "Member 'MapTrackerComponent_GetFogRevealedFactor::bRequireCurrentlyRevealing' has a wrong offset!");
static_assert(offsetof(MapTrackerComponent_GetFogRevealedFactor, bIsInsideFogVolume) == 0x000019, "Member 'MapTrackerComponent_GetFogRevealedFactor::bIsInsideFogVolume' has a wrong offset!");
static_assert(offsetof(MapTrackerComponent_GetFogRevealedFactor, ReturnValue) == 0x00001C, "Member 'MapTrackerComponent_GetFogRevealedFactor::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapTrackerComponent.GetMapBackgrounds
// 0x0010 (0x0010 - 0x0000)
struct MapTrackerComponent_GetMapBackgrounds final
{
public:
	TArray<class AMapBackground*>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTrackerComponent_GetMapBackgrounds) == 0x000008, "Wrong alignment on MapTrackerComponent_GetMapBackgrounds");
static_assert(sizeof(MapTrackerComponent_GetMapBackgrounds) == 0x000010, "Wrong size on MapTrackerComponent_GetMapBackgrounds");
static_assert(offsetof(MapTrackerComponent_GetMapBackgrounds, ReturnValue) == 0x000000, "Member 'MapTrackerComponent_GetMapBackgrounds::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapTrackerComponent.GetMapFogs
// 0x0010 (0x0010 - 0x0000)
struct MapTrackerComponent_GetMapFogs final
{
public:
	TArray<class AMapFog*>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTrackerComponent_GetMapFogs) == 0x000008, "Wrong alignment on MapTrackerComponent_GetMapFogs");
static_assert(sizeof(MapTrackerComponent_GetMapFogs) == 0x000010, "Wrong size on MapTrackerComponent_GetMapFogs");
static_assert(offsetof(MapTrackerComponent_GetMapFogs, ReturnValue) == 0x000000, "Member 'MapTrackerComponent_GetMapFogs::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapTrackerComponent.GetMapIcons
// 0x0010 (0x0010 - 0x0000)
struct MapTrackerComponent_GetMapIcons final
{
public:
	TArray<class UMapIconComponent*>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTrackerComponent_GetMapIcons) == 0x000008, "Wrong alignment on MapTrackerComponent_GetMapIcons");
static_assert(sizeof(MapTrackerComponent_GetMapIcons) == 0x000010, "Wrong size on MapTrackerComponent_GetMapIcons");
static_assert(offsetof(MapTrackerComponent_GetMapIcons, ReturnValue) == 0x000000, "Member 'MapTrackerComponent_GetMapIcons::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapTrackerComponent.GetMapRevealers
// 0x0010 (0x0010 - 0x0000)
struct MapTrackerComponent_GetMapRevealers final
{
public:
	TArray<class UMapRevealerComponent*>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTrackerComponent_GetMapRevealers) == 0x000008, "Wrong alignment on MapTrackerComponent_GetMapRevealers");
static_assert(sizeof(MapTrackerComponent_GetMapRevealers) == 0x000010, "Wrong size on MapTrackerComponent_GetMapRevealers");
static_assert(offsetof(MapTrackerComponent_GetMapRevealers, ReturnValue) == 0x000000, "Member 'MapTrackerComponent_GetMapRevealers::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapTrackerComponent.HasMapFog
// 0x0001 (0x0001 - 0x0000)
struct MapTrackerComponent_HasMapFog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTrackerComponent_HasMapFog) == 0x000001, "Wrong alignment on MapTrackerComponent_HasMapFog");
static_assert(sizeof(MapTrackerComponent_HasMapFog) == 0x000001, "Wrong size on MapTrackerComponent_HasMapFog");
static_assert(offsetof(MapTrackerComponent_HasMapFog, ReturnValue) == 0x000000, "Member 'MapTrackerComponent_HasMapFog::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.DeprojectViewToWorld
// 0x0020 (0x0020 - 0x0000)
struct MapViewComponent_DeprojectViewToWorld final
{
public:
	float                                         U;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         V;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPos;                                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapViewComponent_DeprojectViewToWorld) == 0x000008, "Wrong alignment on MapViewComponent_DeprojectViewToWorld");
static_assert(sizeof(MapViewComponent_DeprojectViewToWorld) == 0x000020, "Wrong size on MapViewComponent_DeprojectViewToWorld");
static_assert(offsetof(MapViewComponent_DeprojectViewToWorld, U) == 0x000000, "Member 'MapViewComponent_DeprojectViewToWorld::U' has a wrong offset!");
static_assert(offsetof(MapViewComponent_DeprojectViewToWorld, V) == 0x000004, "Member 'MapViewComponent_DeprojectViewToWorld::V' has a wrong offset!");
static_assert(offsetof(MapViewComponent_DeprojectViewToWorld, WorldPos) == 0x000008, "Member 'MapViewComponent_DeprojectViewToWorld::WorldPos' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.GetActiveBackgroundLevel
// 0x0010 (0x0010 - 0x0000)
struct MapViewComponent_GetActiveBackgroundLevel final
{
public:
	const class AMapBackground*                   MapBackground;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252A[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapViewComponent_GetActiveBackgroundLevel) == 0x000008, "Wrong alignment on MapViewComponent_GetActiveBackgroundLevel");
static_assert(sizeof(MapViewComponent_GetActiveBackgroundLevel) == 0x000010, "Wrong size on MapViewComponent_GetActiveBackgroundLevel");
static_assert(offsetof(MapViewComponent_GetActiveBackgroundLevel, MapBackground) == 0x000000, "Member 'MapViewComponent_GetActiveBackgroundLevel::MapBackground' has a wrong offset!");
static_assert(offsetof(MapViewComponent_GetActiveBackgroundLevel, ReturnValue) == 0x000008, "Member 'MapViewComponent_GetActiveBackgroundLevel::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.GetActiveBackgroundPriority
// 0x0008 (0x0008 - 0x0000)
struct MapViewComponent_GetActiveBackgroundPriority final
{
public:
	bool                                          IsInsideAnyBackground;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapViewComponent_GetActiveBackgroundPriority) == 0x000004, "Wrong alignment on MapViewComponent_GetActiveBackgroundPriority");
static_assert(sizeof(MapViewComponent_GetActiveBackgroundPriority) == 0x000008, "Wrong size on MapViewComponent_GetActiveBackgroundPriority");
static_assert(offsetof(MapViewComponent_GetActiveBackgroundPriority, IsInsideAnyBackground) == 0x000000, "Member 'MapViewComponent_GetActiveBackgroundPriority::IsInsideAnyBackground' has a wrong offset!");
static_assert(offsetof(MapViewComponent_GetActiveBackgroundPriority, ReturnValue) == 0x000004, "Member 'MapViewComponent_GetActiveBackgroundPriority::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.GetViewCoordinates
// 0x0028 (0x0028 - 0x0000)
struct MapViewComponent_GetViewCoordinates final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRectangular;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252C[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         U;                                                 // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         V;                                                 // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252D[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapViewComponent_GetViewCoordinates) == 0x000008, "Wrong alignment on MapViewComponent_GetViewCoordinates");
static_assert(sizeof(MapViewComponent_GetViewCoordinates) == 0x000028, "Wrong size on MapViewComponent_GetViewCoordinates");
static_assert(offsetof(MapViewComponent_GetViewCoordinates, WorldPos) == 0x000000, "Member 'MapViewComponent_GetViewCoordinates::WorldPos' has a wrong offset!");
static_assert(offsetof(MapViewComponent_GetViewCoordinates, bForceRectangular) == 0x000018, "Member 'MapViewComponent_GetViewCoordinates::bForceRectangular' has a wrong offset!");
static_assert(offsetof(MapViewComponent_GetViewCoordinates, U) == 0x00001C, "Member 'MapViewComponent_GetViewCoordinates::U' has a wrong offset!");
static_assert(offsetof(MapViewComponent_GetViewCoordinates, V) == 0x000020, "Member 'MapViewComponent_GetViewCoordinates::V' has a wrong offset!");
static_assert(offsetof(MapViewComponent_GetViewCoordinates, ReturnValue) == 0x000024, "Member 'MapViewComponent_GetViewCoordinates::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.GetViewYaw
// 0x0008 (0x0008 - 0x0000)
struct MapViewComponent_GetViewYaw final
{
public:
	float                                         WorldYaw;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapViewComponent_GetViewYaw) == 0x000004, "Wrong alignment on MapViewComponent_GetViewYaw");
static_assert(sizeof(MapViewComponent_GetViewYaw) == 0x000008, "Wrong size on MapViewComponent_GetViewYaw");
static_assert(offsetof(MapViewComponent_GetViewYaw, WorldYaw) == 0x000000, "Member 'MapViewComponent_GetViewYaw::WorldYaw' has a wrong offset!");
static_assert(offsetof(MapViewComponent_GetViewYaw, Yaw) == 0x000004, "Member 'MapViewComponent_GetViewYaw::Yaw' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.GetWorldCorners
// 0x0010 (0x0010 - 0x0000)
struct MapViewComponent_GetWorldCorners final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapViewComponent_GetWorldCorners) == 0x000008, "Wrong alignment on MapViewComponent_GetWorldCorners");
static_assert(sizeof(MapViewComponent_GetWorldCorners) == 0x000010, "Wrong size on MapViewComponent_GetWorldCorners");
static_assert(offsetof(MapViewComponent_GetWorldCorners, ReturnValue) == 0x000000, "Member 'MapViewComponent_GetWorldCorners::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.IsSameBackgroundLevel
// 0x0010 (0x0010 - 0x0000)
struct MapViewComponent_IsSameBackgroundLevel final
{
public:
	const class UMapIconComponent*                MapIcon;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapViewComponent_IsSameBackgroundLevel) == 0x000008, "Wrong alignment on MapViewComponent_IsSameBackgroundLevel");
static_assert(sizeof(MapViewComponent_IsSameBackgroundLevel) == 0x000010, "Wrong size on MapViewComponent_IsSameBackgroundLevel");
static_assert(offsetof(MapViewComponent_IsSameBackgroundLevel, MapIcon) == 0x000000, "Member 'MapViewComponent_IsSameBackgroundLevel::MapIcon' has a wrong offset!");
static_assert(offsetof(MapViewComponent_IsSameBackgroundLevel, ReturnValue) == 0x000008, "Member 'MapViewComponent_IsSameBackgroundLevel::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.RegisterMultiLevelMapBackground
// 0x0008 (0x0008 - 0x0000)
struct MapViewComponent_RegisterMultiLevelMapBackground final
{
public:
	class AMapBackground*                         MapBackground;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapViewComponent_RegisterMultiLevelMapBackground) == 0x000008, "Wrong alignment on MapViewComponent_RegisterMultiLevelMapBackground");
static_assert(sizeof(MapViewComponent_RegisterMultiLevelMapBackground) == 0x000008, "Wrong size on MapViewComponent_RegisterMultiLevelMapBackground");
static_assert(offsetof(MapViewComponent_RegisterMultiLevelMapBackground, MapBackground) == 0x000000, "Member 'MapViewComponent_RegisterMultiLevelMapBackground::MapBackground' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.SetIconCategoryVisible
// 0x000C (0x000C - 0x0000)
struct MapViewComponent_SetIconCategoryVisible final
{
public:
	class FName                                   IconCategory;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewVisible;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252F[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapViewComponent_SetIconCategoryVisible) == 0x000004, "Wrong alignment on MapViewComponent_SetIconCategoryVisible");
static_assert(sizeof(MapViewComponent_SetIconCategoryVisible) == 0x00000C, "Wrong size on MapViewComponent_SetIconCategoryVisible");
static_assert(offsetof(MapViewComponent_SetIconCategoryVisible, IconCategory) == 0x000000, "Member 'MapViewComponent_SetIconCategoryVisible::IconCategory' has a wrong offset!");
static_assert(offsetof(MapViewComponent_SetIconCategoryVisible, bNewVisible) == 0x000008, "Member 'MapViewComponent_SetIconCategoryVisible::bNewVisible' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.SetViewExtent
// 0x0008 (0x0008 - 0x0000)
struct MapViewComponent_SetViewExtent final
{
public:
	float                                         NewViewExtentX;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewViewExtentY;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapViewComponent_SetViewExtent) == 0x000004, "Wrong alignment on MapViewComponent_SetViewExtent");
static_assert(sizeof(MapViewComponent_SetViewExtent) == 0x000008, "Wrong size on MapViewComponent_SetViewExtent");
static_assert(offsetof(MapViewComponent_SetViewExtent, NewViewExtentX) == 0x000000, "Member 'MapViewComponent_SetViewExtent::NewViewExtentX' has a wrong offset!");
static_assert(offsetof(MapViewComponent_SetViewExtent, NewViewExtentY) == 0x000004, "Member 'MapViewComponent_SetViewExtent::NewViewExtentY' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.SetZoomScale
// 0x0004 (0x0004 - 0x0000)
struct MapViewComponent_SetZoomScale final
{
public:
	float                                         NewZoomScale;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapViewComponent_SetZoomScale) == 0x000004, "Wrong alignment on MapViewComponent_SetZoomScale");
static_assert(sizeof(MapViewComponent_SetZoomScale) == 0x000004, "Wrong size on MapViewComponent_SetZoomScale");
static_assert(offsetof(MapViewComponent_SetZoomScale, NewZoomScale) == 0x000000, "Member 'MapViewComponent_SetZoomScale::NewZoomScale' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.UnregisterMultiLevelMapBackground
// 0x0008 (0x0008 - 0x0000)
struct MapViewComponent_UnregisterMultiLevelMapBackground final
{
public:
	class AMapBackground*                         MapBackground;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapViewComponent_UnregisterMultiLevelMapBackground) == 0x000008, "Wrong alignment on MapViewComponent_UnregisterMultiLevelMapBackground");
static_assert(sizeof(MapViewComponent_UnregisterMultiLevelMapBackground) == 0x000008, "Wrong size on MapViewComponent_UnregisterMultiLevelMapBackground");
static_assert(offsetof(MapViewComponent_UnregisterMultiLevelMapBackground, MapBackground) == 0x000000, "Member 'MapViewComponent_UnregisterMultiLevelMapBackground::MapBackground' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.GetViewAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct MapViewComponent_GetViewAspectRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapViewComponent_GetViewAspectRatio) == 0x000004, "Wrong alignment on MapViewComponent_GetViewAspectRatio");
static_assert(sizeof(MapViewComponent_GetViewAspectRatio) == 0x000004, "Wrong size on MapViewComponent_GetViewAspectRatio");
static_assert(offsetof(MapViewComponent_GetViewAspectRatio, ReturnValue) == 0x000000, "Member 'MapViewComponent_GetViewAspectRatio::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.GetViewExtent
// 0x0008 (0x0008 - 0x0000)
struct MapViewComponent_GetViewExtent final
{
public:
	float                                         ViewExtentX;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewExtentY;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapViewComponent_GetViewExtent) == 0x000004, "Wrong alignment on MapViewComponent_GetViewExtent");
static_assert(sizeof(MapViewComponent_GetViewExtent) == 0x000008, "Wrong size on MapViewComponent_GetViewExtent");
static_assert(offsetof(MapViewComponent_GetViewExtent, ViewExtentX) == 0x000000, "Member 'MapViewComponent_GetViewExtent::ViewExtentX' has a wrong offset!");
static_assert(offsetof(MapViewComponent_GetViewExtent, ViewExtentY) == 0x000004, "Member 'MapViewComponent_GetViewExtent::ViewExtentY' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.GetZoomScale
// 0x0004 (0x0004 - 0x0000)
struct MapViewComponent_GetZoomScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapViewComponent_GetZoomScale) == 0x000004, "Wrong alignment on MapViewComponent_GetZoomScale");
static_assert(sizeof(MapViewComponent_GetZoomScale) == 0x000004, "Wrong size on MapViewComponent_GetZoomScale");
static_assert(offsetof(MapViewComponent_GetZoomScale, ReturnValue) == 0x000000, "Member 'MapViewComponent_GetZoomScale::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.IsIconCategoryVisible
// 0x000C (0x000C - 0x0000)
struct MapViewComponent_IsIconCategoryVisible final
{
public:
	class FName                                   IconCategory;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2530[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapViewComponent_IsIconCategoryVisible) == 0x000004, "Wrong alignment on MapViewComponent_IsIconCategoryVisible");
static_assert(sizeof(MapViewComponent_IsIconCategoryVisible) == 0x00000C, "Wrong size on MapViewComponent_IsIconCategoryVisible");
static_assert(offsetof(MapViewComponent_IsIconCategoryVisible, IconCategory) == 0x000000, "Member 'MapViewComponent_IsIconCategoryVisible::IconCategory' has a wrong offset!");
static_assert(offsetof(MapViewComponent_IsIconCategoryVisible, ReturnValue) == 0x000008, "Member 'MapViewComponent_IsIconCategoryVisible::ReturnValue' has a wrong offset!");

// Function MinimapPlugin.MapViewComponent.ViewContains
// 0x0020 (0x0020 - 0x0000)
struct MapViewComponent_ViewContains final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldRadius;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2531[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapViewComponent_ViewContains) == 0x000008, "Wrong alignment on MapViewComponent_ViewContains");
static_assert(sizeof(MapViewComponent_ViewContains) == 0x000020, "Wrong size on MapViewComponent_ViewContains");
static_assert(offsetof(MapViewComponent_ViewContains, WorldPos) == 0x000000, "Member 'MapViewComponent_ViewContains::WorldPos' has a wrong offset!");
static_assert(offsetof(MapViewComponent_ViewContains, WorldRadius) == 0x000018, "Member 'MapViewComponent_ViewContains::WorldRadius' has a wrong offset!");
static_assert(offsetof(MapViewComponent_ViewContains, ReturnValue) == 0x00001C, "Member 'MapViewComponent_ViewContains::ReturnValue' has a wrong offset!");

}

