#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_Frame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "EFrameAlignment_structs.hpp"
#include "S_FrameLayer_structs.hpp"
#include "CommonUI_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_Frame.WB_Frame_C
// 0x0160 (0x0400 - 0x02A0)
class UWB_Frame_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USizeBox*                               B;                                                 // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                B_B;                                               // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                B_BL;                                              // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                B_BR;                                              // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                B_Color;                                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                B_L;                                               // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                B_R;                                               // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                B_T;                                               // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                B_TL;                                              // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                B_TR;                                              // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               bl;                                                // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               BR;                                                // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               L;                                                 // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               R;                                                 // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SB_Container;                                      // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               T;                                                 // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               TL;                                                // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               TR;                                                // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector2D                              FrameSize;                                         // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           FrameColor;                                        // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FrameThickness;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_FrameLayer                          FrameLayerInfo;                                    // 0x0360(0x0098)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EFrameAlignment                               Frame_Alignment;                                   // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BaseConstruct();
	void ExecuteUbergraph_WB_Frame(int32 EntryPoint);
	void SetAlignment(EHorizontalAlignment InHorizontalAlignment, EVerticalAlignment InVerticalAlignment);
	void SetBorderBrush(class UBorder* Border, class UObject* Brush);
	void SetContainerSize();
	void SetFrameBrushes();
	void SetFrameThickness();
	void SetSizeBoxSize(class USizeBox* SizeBox, const struct FVector2D& Size);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_Frame_C">();
	}
	static class UWB_Frame_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_Frame_C>();
	}
};
static_assert(alignof(UWB_Frame_C) == 0x000008, "Wrong alignment on UWB_Frame_C");
static_assert(sizeof(UWB_Frame_C) == 0x000400, "Wrong size on UWB_Frame_C");
static_assert(offsetof(UWB_Frame_C, UberGraphFrame) == 0x0002A0, "Member 'UWB_Frame_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, B) == 0x0002A8, "Member 'UWB_Frame_C::B' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, B_B) == 0x0002B0, "Member 'UWB_Frame_C::B_B' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, B_BL) == 0x0002B8, "Member 'UWB_Frame_C::B_BL' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, B_BR) == 0x0002C0, "Member 'UWB_Frame_C::B_BR' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, B_Color) == 0x0002C8, "Member 'UWB_Frame_C::B_Color' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, B_L) == 0x0002D0, "Member 'UWB_Frame_C::B_L' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, B_R) == 0x0002D8, "Member 'UWB_Frame_C::B_R' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, B_T) == 0x0002E0, "Member 'UWB_Frame_C::B_T' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, B_TL) == 0x0002E8, "Member 'UWB_Frame_C::B_TL' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, B_TR) == 0x0002F0, "Member 'UWB_Frame_C::B_TR' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, bl) == 0x0002F8, "Member 'UWB_Frame_C::bl' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, BR) == 0x000300, "Member 'UWB_Frame_C::BR' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, L) == 0x000308, "Member 'UWB_Frame_C::L' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, R) == 0x000310, "Member 'UWB_Frame_C::R' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, SB_Container) == 0x000318, "Member 'UWB_Frame_C::SB_Container' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, T) == 0x000320, "Member 'UWB_Frame_C::T' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, TL) == 0x000328, "Member 'UWB_Frame_C::TL' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, TR) == 0x000330, "Member 'UWB_Frame_C::TR' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, FrameSize) == 0x000338, "Member 'UWB_Frame_C::FrameSize' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, FrameColor) == 0x000348, "Member 'UWB_Frame_C::FrameColor' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, FrameThickness) == 0x000358, "Member 'UWB_Frame_C::FrameThickness' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, FrameLayerInfo) == 0x000360, "Member 'UWB_Frame_C::FrameLayerInfo' has a wrong offset!");
static_assert(offsetof(UWB_Frame_C, Frame_Alignment) == 0x0003F8, "Member 'UWB_Frame_C::Frame_Alignment' has a wrong offset!");

}

