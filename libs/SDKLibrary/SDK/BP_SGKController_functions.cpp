#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SGKController

#include "Basic.hpp"

#include "BP_SGKController_classes.hpp"
#include "BP_SGKController_parameters.hpp"


namespace SDK
{

// Function BP_SGKController.BP_SGKController_C.123
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::One23()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "123");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.2312
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::Two312()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "2312");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.AddDefuseWidget
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::AddDefuseWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "AddDefuseWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.AddEquipmentComponent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::AddEquipmentComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "AddEquipmentComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.AddGrenadesToQuickSlots
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::AddGrenadesToQuickSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "AddGrenadesToQuickSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.AddHitIndicatorwidget
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::AddHitIndicatorwidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "AddHitIndicatorwidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.AddHitmarkerWidget
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::AddHitmarkerWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "AddHitmarkerWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.AddOnScreenMarker
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::AddOnScreenMarker(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "AddOnScreenMarker");

	Params::BP_SGKController_C_AddOnScreenMarker Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.AddSpectatorScreenForNewcomers
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::AddSpectatorScreenForNewcomers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "AddSpectatorScreenForNewcomers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.BannedPlayerQuit
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::BannedPlayerQuit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "BannedPlayerQuit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.BeginPlayController
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::BeginPlayController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "BeginPlayController");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.Bomb Defused INS Sound
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::Bomb_Defused_INS_Sound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "Bomb Defused INS Sound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.Bomb Defused SEALS Sound
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::Bomb_Defused_SEALS_Sound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "Bomb Defused SEALS Sound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.Bomb Dropped Sound
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::Bomb_Dropped_Sound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "Bomb Dropped Sound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.Bomb Pickup Sound
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::Bomb_Pickup_Sound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "Bomb Pickup Sound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.Bomb Planted Sound
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::Bomb_Planted_Sound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "Bomb Planted Sound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.BombsiteInteractionWidgetEvent
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::BombsiteInteractionWidgetEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "BombsiteInteractionWidgetEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.BombsiteRemoveWidget
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::BombsiteRemoveWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "BombsiteRemoveWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.BreachMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bCanBreach_                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::BreachMulticast(bool Param_bCanBreach_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "BreachMulticast");

	Params::BP_SGKController_C_BreachMulticast Parms{};

	Parms.Param_bCanBreach_ = Param_bCanBreach_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.BreachServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bCanBreach_                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::BreachServer(bool Param_bCanBreach_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "BreachServer");

	Params::BP_SGKController_C_BreachServer Parms{};

	Parms.Param_bCanBreach_ = Param_bCanBreach_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.CameraFollowTeammateBackwards
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::CameraFollowTeammateBackwards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CameraFollowTeammateBackwards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.CameraFollowTeammateForward
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::CameraFollowTeammateForward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CameraFollowTeammateForward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ChangeTeamMulticast
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPeak53Teams                            Param_PlayerTeam                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::ChangeTeamMulticast(EPeak53Teams Param_PlayerTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ChangeTeamMulticast");

	Params::BP_SGKController_C_ChangeTeamMulticast Parms{};

	Parms.Param_PlayerTeam = Param_PlayerTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.ChangeTeamServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPeak53Teams                            Param_PlayerTeam                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::ChangeTeamServer(EPeak53Teams Param_PlayerTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ChangeTeamServer");

	Params::BP_SGKController_C_ChangeTeamServer Parms{};

	Parms.Param_PlayerTeam = Param_PlayerTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.CheckFFA
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    FFA_                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::CheckFFA(bool* FFA_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CheckFFA");

	Params::BP_SGKController_C_CheckFFA Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FFA_ != nullptr)
		*FFA_ = Parms.FFA_;
}


// Function BP_SGKController.BP_SGKController_C.CheckIfActorHasOnScreenMarker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::CheckIfActorHasOnScreenMarker(class UObject* TargetActor, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CheckIfActorHasOnScreenMarker");

	Params::BP_SGKController_C_CheckIfActorHasOnScreenMarker Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_SGKController.BP_SGKController_C.ClientEnableInput
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::ClientEnableInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ClientEnableInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ClientInGameLoad
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::ClientInGameLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ClientInGameLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ClientInitialize
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::ClientInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ClientInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ClientPlaySound2d
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundBase*                       Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::ClientPlaySound2d(class USoundBase* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ClientPlaySound2d");

	Params::BP_SGKController_C_ClientPlaySound2d Parms{};

	Parms.Sound = Sound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.ClientPossess
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::ClientPossess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ClientPossess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ClientRespawn
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::ClientRespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ClientRespawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ClientSpectatePlayer
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewViewTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::ClientSpectatePlayer(class AActor* NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ClientSpectatePlayer");

	Params::BP_SGKController_C_ClientSpectatePlayer Parms{};

	Parms.NewViewTarget = NewViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.CloseRequested
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::CloseRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CloseRequested");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.CMDAddOnScreenMarker
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::CMDAddOnScreenMarker(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CMDAddOnScreenMarker");

	Params::BP_SGKController_C_CMDAddOnScreenMarker Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.CMDAddTeamKill
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::CMDAddTeamKill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CMDAddTeamKill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.CMDCallAddToPlayerReadyList
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::CMDCallAddToPlayerReadyList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CMDCallAddToPlayerReadyList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.CMDCallVoteForKick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPeak53Teams                            Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APeak53PlayerState_C*             CurrentPlayerPlayerstate                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::CMDCallVoteForKick(EPeak53Teams Team, class APeak53PlayerState_C* CurrentPlayerPlayerstate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CMDCallVoteForKick");

	Params::BP_SGKController_C_CMDCallVoteForKick Parms{};

	Parms.Team = Team;
	Parms.CurrentPlayerPlayerstate = CurrentPlayerPlayerstate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.CMDRemoveOnScreenMarker
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::CMDRemoveOnScreenMarker(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CMDRemoveOnScreenMarker");

	Params::BP_SGKController_C_CMDRemoveOnScreenMarker Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.CMDServerAuth
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<uint8>                           Param_SessionAuthTicket                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_SGKController_C::CMDServerAuth(TArray<uint8>& Param_SessionAuthTicket, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CMDServerAuth");

	Params::BP_SGKController_C_CMDServerAuth Parms{};

	Parms.Param_SessionAuthTicket = std::move(Param_SessionAuthTicket);
	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);

	Param_SessionAuthTicket = std::move(Parms.Param_SessionAuthTicket);
}


// Function BP_SGKController.BP_SGKController_C.CMDStartAutoKickTimer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::CMDStartAutoKickTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CMDStartAutoKickTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.CMDVoteForVoteableMap
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LevelIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::CMDVoteForVoteableMap(int32 LevelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CMDVoteForVoteableMap");

	Params::BP_SGKController_C_CMDVoteForVoteableMap Parms{};

	Parms.LevelIndex = LevelIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.CMDVoteYesOrNo
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Yes                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::CMDVoteYesOrNo(bool Yes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CMDVoteYesOrNo");

	Params::BP_SGKController_C_CMDVoteYesOrNo Parms{};

	Parms.Yes = Yes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.ControllerRefreshScoreboard
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPeak53Teams                            Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::ControllerRefreshScoreboard(EPeak53Teams Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ControllerRefreshScoreboard");

	Params::BP_SGKController_C_ControllerRefreshScoreboard Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.ControllerSendMessage
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             MessageFeedVar                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// ETextJustify                            Justification                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      In_Color_and_Opacity                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   In_Font_Info_Size                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::ControllerSendMessage(const class FText& MessageFeedVar, ETextJustify Justification, const struct FSlateColor& In_Color_and_Opacity, int32 In_Font_Info_Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ControllerSendMessage");

	Params::BP_SGKController_C_ControllerSendMessage Parms{};

	Parms.MessageFeedVar = std::move(MessageFeedVar);
	Parms.Justification = Justification;
	Parms.In_Color_and_Opacity = std::move(In_Color_and_Opacity);
	Parms.In_Font_Info_Size = In_Font_Info_Size;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.ControllerSpectateRotationTimer
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::ControllerSpectateRotationTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ControllerSpectateRotationTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.CrosshairHop
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CounterBounce                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::CrosshairHop(double CounterBounce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CrosshairHop");

	Params::BP_SGKController_C_CrosshairHop Parms{};

	Parms.CounterBounce = CounterBounce;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.CrosshairReset
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::CrosshairReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "CrosshairReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.DisableInputClient
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::DisableInputClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "DisableInputClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.DoPlantDefuseBomb
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::DoPlantDefuseBomb()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "DoPlantDefuseBomb");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.EnableInputClient
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::EnableInputClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "EnableInputClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ExecuteUbergraph_BP_SGKController
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::ExecuteUbergraph_BP_SGKController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ExecuteUbergraph_BP_SGKController");

	Params::BP_SGKController_C_ExecuteUbergraph_BP_SGKController Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.FFA Players Alive Timer Event
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::FFA_Players_Alive_Timer_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "FFA Players Alive Timer Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.FinishDefusingBombMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::FinishDefusingBombMulticast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "FinishDefusingBombMulticast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.FinishDefusingBombServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::FinishDefusingBombServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "FinishDefusingBombServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.GetBanlist
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::GetBanlist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "GetBanlist");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.GetPlayerName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_PlayerName                                       (Parm, OutParm)

void ABP_SGKController_C::GetPlayerName(class FText* Param_PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "GetPlayerName");

	Params::BP_SGKController_C_GetPlayerName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_PlayerName != nullptr)
		*Param_PlayerName = std::move(Parms.Param_PlayerName);
}


// Function BP_SGKController.BP_SGKController_C.HideKnife
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::HideKnife()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "HideKnife");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.HideMeshes
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewHidden                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::HideMeshes(bool NewHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "HideMeshes");

	Params::BP_SGKController_C_HideMeshes Parms{};

	Parms.NewHidden = NewHidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.HQ Voice Start INS
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::HQ_Voice_Start_INS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "HQ Voice Start INS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.HQ Voice Start SEALS
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::HQ_Voice_Start_SEALS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "HQ Voice Start SEALS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_AnyKey_K2Node_InputKeyEvent_8
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_AnyKey_K2Node_InputKeyEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_AnyKey_K2Node_InputKeyEvent_8");

	Params::BP_SGKController_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_B_K2Node_InputKeyEvent_11
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_B_K2Node_InputKeyEvent_11(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_B_K2Node_InputKeyEvent_11");

	Params::BP_SGKController_C_InpActEvt_B_K2Node_InputKeyEvent_11 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_DropBomb_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_DropBomb_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_DropBomb_K2Node_InputActionEvent_0");

	Params::BP_SGKController_C_InpActEvt_DropBomb_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_Escape_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_Escape_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_Escape_K2Node_InputKeyEvent_1");

	Params::BP_SGKController_C_InpActEvt_Escape_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_F1_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_F1_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_F1_K2Node_InputKeyEvent_2");

	Params::BP_SGKController_C_InpActEvt_F1_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_F2_K2Node_InputKeyEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_F2_K2Node_InputKeyEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_F2_K2Node_InputKeyEvent_3");

	Params::BP_SGKController_C_InpActEvt_F2_K2Node_InputKeyEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_F3_K2Node_InputKeyEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_F3_K2Node_InputKeyEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_F3_K2Node_InputKeyEvent_5");

	Params::BP_SGKController_C_InpActEvt_F3_K2Node_InputKeyEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_GlobalChat_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_GlobalChat_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_GlobalChat_K2Node_InputActionEvent_6");

	Params::BP_SGKController_C_InpActEvt_GlobalChat_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_H_K2Node_InputKeyEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_H_K2Node_InputKeyEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_H_K2Node_InputKeyEvent_4");

	Params::BP_SGKController_C_InpActEvt_H_K2Node_InputKeyEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_M_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_M_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_M_K2Node_InputKeyEvent_0");

	Params::BP_SGKController_C_InpActEvt_M_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_N_K2Node_InputKeyEvent_7
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_N_K2Node_InputKeyEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_N_K2Node_InputKeyEvent_7");

	Params::BP_SGKController_C_InpActEvt_N_K2Node_InputKeyEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_NumPadFive_K2Node_InputKeyEvent_12
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_NumPadFive_K2Node_InputKeyEvent_12(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_NumPadFive_K2Node_InputKeyEvent_12");

	Params::BP_SGKController_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_12 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_OpenSettings_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_OpenSettings_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_OpenSettings_K2Node_InputActionEvent_1");

	Params::BP_SGKController_C_InpActEvt_OpenSettings_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_PlantBomb_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_PlantBomb_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_PlantBomb_K2Node_InputActionEvent_2");

	Params::BP_SGKController_C_InpActEvt_PlantBomb_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_Scoreboard_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_Scoreboard_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_Scoreboard_K2Node_InputActionEvent_3");

	Params::BP_SGKController_C_InpActEvt_Scoreboard_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_Scoreboard_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_Scoreboard_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_Scoreboard_K2Node_InputActionEvent_4");

	Params::BP_SGKController_C_InpActEvt_Scoreboard_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_Shift_Eight_K2Node_InputKeyEvent_9
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_Shift_Eight_K2Node_InputKeyEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_Shift_Eight_K2Node_InputKeyEvent_9");

	Params::BP_SGKController_C_InpActEvt_Shift_Eight_K2Node_InputKeyEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_Shift_Nine_K2Node_InputKeyEvent_10
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_Shift_Nine_K2Node_InputKeyEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_Shift_Nine_K2Node_InputKeyEvent_10");

	Params::BP_SGKController_C_InpActEvt_Shift_Nine_K2Node_InputKeyEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_TeamChat_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_TeamChat_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_TeamChat_K2Node_InputActionEvent_5");

	Params::BP_SGKController_C_InpActEvt_TeamChat_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.InpActEvt_Y_K2Node_InputKeyEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_SGKController_C::InpActEvt_Y_K2Node_InputKeyEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "InpActEvt_Y_K2Node_InputKeyEvent_6");

	Params::BP_SGKController_C_InpActEvt_Y_K2Node_InputKeyEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.JumpFromCamerasBackwards
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::JumpFromCamerasBackwards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "JumpFromCamerasBackwards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.JumpFromCamerasForward
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::JumpFromCamerasForward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "JumpFromCamerasForward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.MulticastApplyClan
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Clan                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_SGKController_C::MulticastApplyClan(const class FString& Clan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "MulticastApplyClan");

	Params::BP_SGKController_C_MulticastApplyClan Parms{};

	Parms.Clan = std::move(Clan);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.MulticastSetBannedIDs
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   Param_BannedIDs                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_SGKController_C::MulticastSetBannedIDs(TArray<class FString>& Param_BannedIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "MulticastSetBannedIDs");

	Params::BP_SGKController_C_MulticastSetBannedIDs Parms{};

	Parms.Param_BannedIDs = std::move(Param_BannedIDs);

	UObject::ProcessEvent(Func, &Parms);

	Param_BannedIDs = std::move(Parms.Param_BannedIDs);
}


// Function BP_SGKController.BP_SGKController_C.OnRep_bCanSpectate?
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::OnRep_bCanSpectate_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OnRep_bCanSpectate?");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.OnRep_bHasBomb?
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::OnRep_bHasBomb_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OnRep_bHasBomb?");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.OnRep_bHasFlag?
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::OnRep_bHasFlag_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OnRep_bHasFlag?");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.OnToggleChat__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsTeamChat                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::OnToggleChat__DelegateSignature(bool bIsTeamChat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OnToggleChat__DelegateSignature");

	Params::BP_SGKController_C_OnToggleChat__DelegateSignature Parms{};

	Parms.bIsTeamChat = bIsTeamChat;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.OpenEmoteMenu
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::OpenEmoteMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OpenEmoteMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.OWNAddPlayerControllerQueue
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::OWNAddPlayerControllerQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OWNAddPlayerControllerQueue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.OWNAddScoreInfo
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_ScoreValues                   ScoreInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_SGKController_C::OWNAddScoreInfo(const struct FS_ScoreValues& ScoreInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OWNAddScoreInfo");

	Params::BP_SGKController_C_OWNAddScoreInfo Parms{};

	Parms.ScoreInfo = std::move(ScoreInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.OWNCallDisconnect
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::OWNCallDisconnect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OWNCallDisconnect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.OWNCallSetLodoutServer
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::OWNCallSetLodoutServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OWNCallSetLodoutServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.OWNCallVoteForKick
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPeak53Teams                            Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APeak53PlayerState_C*             CurrentPlayerPlayerstate                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::OWNCallVoteForKick(EPeak53Teams Team, class APeak53PlayerState_C* CurrentPlayerPlayerstate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OWNCallVoteForKick");

	Params::BP_SGKController_C_OWNCallVoteForKick Parms{};

	Parms.Team = Team;
	Parms.CurrentPlayerPlayerstate = CurrentPlayerPlayerstate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.OWNDisableShowJoinUi
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::OWNDisableShowJoinUi()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OWNDisableShowJoinUi");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.OWNShowJoinUi
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CalledFromGameMode                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::OWNShowJoinUi(bool CalledFromGameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OWNShowJoinUi");

	Params::BP_SGKController_C_OWNShowJoinUi Parms{};

	Parms.CalledFromGameMode = CalledFromGameMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.OWNStartAuth
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSteamID                         Param_SteamID                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::OWNStartAuth(const struct FSteamID& Param_SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OWNStartAuth");

	Params::BP_SGKController_C_OWNStartAuth Parms{};

	Parms.Param_SteamID = std::move(Param_SteamID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.OWNToggleShowJoinUi
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CalledFromGameMode                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::OWNToggleShowJoinUi(bool CalledFromGameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OWNToggleShowJoinUi");

	Params::BP_SGKController_C_OWNToggleShowJoinUi Parms{};

	Parms.CalledFromGameMode = CalledFromGameMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.OWNToggleShowKickMenu
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ForceClose                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::OWNToggleShowKickMenu(bool ForceClose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OWNToggleShowKickMenu");

	Params::BP_SGKController_C_OWNToggleShowKickMenu Parms{};

	Parms.ForceClose = ForceClose;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.OWNToggleVoteForKick
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APeak53PlayerState_C*             CurrentPlayerPlayerstate                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::OWNToggleVoteForKick(class APeak53PlayerState_C* CurrentPlayerPlayerstate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OWNToggleVoteForKick");

	Params::BP_SGKController_C_OWNToggleVoteForKick Parms{};

	Parms.CurrentPlayerPlayerstate = CurrentPlayerPlayerstate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.OWNVoteForVoteableMap
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LevelIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::OWNVoteForVoteableMap(int32 LevelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OWNVoteForVoteableMap");

	Params::BP_SGKController_C_OWNVoteForVoteableMap Parms{};

	Parms.LevelIndex = LevelIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.OWNVoteYesOrNo
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Yes                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::OWNVoteYesOrNo(bool Yes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "OWNVoteYesOrNo");

	Params::BP_SGKController_C_OWNVoteYesOrNo Parms{};

	Parms.Yes = Yes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.DefuseBomb
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::DefuseBomb()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "DefuseBomb");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.DefuseFollowUp
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::DefuseFollowUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "DefuseFollowUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.PlayersAlive
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PlayersLeftAlive                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::PlayersAlive(int32* PlayersLeftAlive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "PlayersAlive");

	Params::BP_SGKController_C_PlayersAlive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayersLeftAlive != nullptr)
		*PlayersLeftAlive = Parms.PlayersLeftAlive;
}


// Function BP_SGKController.BP_SGKController_C.PlayersAliveClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InInt                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::PlayersAliveClient(int32 InInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "PlayersAliveClient");

	Params::BP_SGKController_C_PlayersAliveClient Parms{};

	Parms.InInt = InInt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.PlayersAliveServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::PlayersAliveServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "PlayersAliveServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.PlayerSelectedLoadoutServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::PlayerSelectedLoadoutServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "PlayerSelectedLoadoutServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.QuitGameClient
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::QuitGameClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "QuitGameClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SGKController_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_SGKController_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ReceiveEndPlay");

	Params::BP_SGKController_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.ReceivePossess
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            PossessedPawn                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::ReceivePossess(class APawn* PossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ReceivePossess");

	Params::BP_SGKController_C_ReceivePossess Parms{};

	Parms.PossessedPawn = PossessedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.ReloadControllerCharacter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SGKSaveGame_C*                Save                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::ReloadControllerCharacter(class UBP_SGKSaveGame_C* Save)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ReloadControllerCharacter");

	Params::BP_SGKController_C_ReloadControllerCharacter Parms{};

	Parms.Save = Save;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.RemoveBreachWidget
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::RemoveBreachWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "RemoveBreachWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.RemoveDefuseWidget
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::RemoveDefuseWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "RemoveDefuseWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.RemoveOnScreenMarker
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::RemoveOnScreenMarker(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "RemoveOnScreenMarker");

	Params::BP_SGKController_C_RemoveOnScreenMarker Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.RemoveVaultWidget
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::RemoveVaultWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "RemoveVaultWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ResetHighlights
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::ResetHighlights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ResetHighlights");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ScopeWidget
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bActivate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::ScopeWidget(bool bActivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ScopeWidget");

	Params::BP_SGKController_C_ScopeWidget Parms{};

	Parms.bActivate = bActivate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SendMessageFeedMulticast
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_MessageToBeSendFeedController                    (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_SGKController_C::SendMessageFeedMulticast(const class FText& Param_MessageToBeSendFeedController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SendMessageFeedMulticast");

	Params::BP_SGKController_C_SendMessageFeedMulticast Parms{};

	Parms.Param_MessageToBeSendFeedController = std::move(Param_MessageToBeSendFeedController);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SendMessageFeedServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_MessageToBeSendFeedController                    (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_SGKController_C::SendMessageFeedServer(const class FText& Param_MessageToBeSendFeedController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SendMessageFeedServer");

	Params::BP_SGKController_C_SendMessageFeedServer Parms{};

	Parms.Param_MessageToBeSendFeedController = std::move(Param_MessageToBeSendFeedController);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SensitivityChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::SensitivityChanged(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SensitivityChanged");

	Params::BP_SGKController_C_SensitivityChanged Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.ServerInitPlayerInventory
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::ServerInitPlayerInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ServerInitPlayerInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ServerRespawn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::ServerRespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ServerRespawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ServerUpdateCharacterYaw
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Pawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::ServerUpdateCharacterYaw(class APawn* Param_Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ServerUpdateCharacterYaw");

	Params::BP_SGKController_C_ServerUpdateCharacterYaw Parms{};

	Parms.Param_Pawn = Param_Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SetBombServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bHasBomb_                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::SetBombServer(bool Param_bHasBomb_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetBombServer");

	Params::BP_SGKController_C_SetBombServer Parms{};

	Parms.Param_bHasBomb_ = Param_bHasBomb_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SetClanLocallyClient
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::SetClanLocallyClient(const int64& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetClanLocallyClient");

	Params::BP_SGKController_C_SetClanLocallyClient Parms{};

	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SetClanLocallyServer
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::SetClanLocallyServer(const int64& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetClanLocallyServer");

	Params::BP_SGKController_C_SetClanLocallyServer Parms{};

	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SetFlagScoreAdd
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::SetFlagScoreAdd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetFlagScoreAdd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.SetFlagServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bHasFlag_                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::SetFlagServer(bool Param_bHasFlag_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetFlagServer");

	Params::BP_SGKController_C_SetFlagServer Parms{};

	Parms.Param_bHasFlag_ = Param_bHasFlag_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SetLoadoutServer
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Loadout                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_StartingWeaponItem>    WeaponsPrimary                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FS_StartingWeaponItem>    WeaponsSecondary                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FS_CraftingCost>          WeaponsTool1                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FS_CraftingCost>          WeaponsTool2                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_SGKController_C::SetLoadoutServer(class UClass* Param_Loadout, TArray<struct FS_StartingWeaponItem>& WeaponsPrimary, TArray<struct FS_StartingWeaponItem>& WeaponsSecondary, TArray<struct FS_CraftingCost>& WeaponsTool1, TArray<struct FS_CraftingCost>& WeaponsTool2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetLoadoutServer");

	Params::BP_SGKController_C_SetLoadoutServer Parms{};

	Parms.Param_Loadout = Param_Loadout;
	Parms.WeaponsPrimary = std::move(WeaponsPrimary);
	Parms.WeaponsSecondary = std::move(WeaponsSecondary);
	Parms.WeaponsTool1 = std::move(WeaponsTool1);
	Parms.WeaponsTool2 = std::move(WeaponsTool2);

	UObject::ProcessEvent(Func, &Parms);

	WeaponsPrimary = std::move(Parms.WeaponsPrimary);
	WeaponsSecondary = std::move(Parms.WeaponsSecondary);
	WeaponsTool1 = std::move(Parms.WeaponsTool1);
	WeaponsTool2 = std::move(Parms.WeaponsTool2);
}


// Function BP_SGKController.BP_SGKController_C.SetPlayerDeathsMulticast
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_PlayerDeaths                                     (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_SGKController_C::SetPlayerDeathsMulticast(const class FText& Param_PlayerDeaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetPlayerDeathsMulticast");

	Params::BP_SGKController_C_SetPlayerDeathsMulticast Parms{};

	Parms.Param_PlayerDeaths = std::move(Param_PlayerDeaths);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SetPlayerDeathsServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_PlayerDeaths                                     (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_SGKController_C::SetPlayerDeathsServer(const class FText& Param_PlayerDeaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetPlayerDeathsServer");

	Params::BP_SGKController_C_SetPlayerDeathsServer Parms{};

	Parms.Param_PlayerDeaths = std::move(Param_PlayerDeaths);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SetPlayerKillsMulticast
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_PlayerKills                                      (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_SGKController_C::SetPlayerKillsMulticast(const class FText& Param_PlayerKills)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetPlayerKillsMulticast");

	Params::BP_SGKController_C_SetPlayerKillsMulticast Parms{};

	Parms.Param_PlayerKills = std::move(Param_PlayerKills);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SetPlayerKillsServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_PlayerKills                                      (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_SGKController_C::SetPlayerKillsServer(const class FText& Param_PlayerKills)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetPlayerKillsServer");

	Params::BP_SGKController_C_SetPlayerKillsServer Parms{};

	Parms.Param_PlayerKills = std::move(Param_PlayerKills);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SetPlayerNameMulticast
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_PlayerName                                       (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_SGKController_C::SetPlayerNameMulticast(const class FText& Param_PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetPlayerNameMulticast");

	Params::BP_SGKController_C_SetPlayerNameMulticast Parms{};

	Parms.Param_PlayerName = std::move(Param_PlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SetPlayerNameServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_PlayerName                                       (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_SGKController_C::SetPlayerNameServer(const class FText& Param_PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetPlayerNameServer");

	Params::BP_SGKController_C_SetPlayerNameServer Parms{};

	Parms.Param_PlayerName = std::move(Param_PlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SetPlayerScoreMulticast
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_SGKController_C::SetPlayerScoreMulticast(const class FText& Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetPlayerScoreMulticast");

	Params::BP_SGKController_C_SetPlayerScoreMulticast Parms{};

	Parms.Score = std::move(Score);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SetPlayerScoreServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_SGKController_C::SetPlayerScoreServer(const class FText& Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SetPlayerScoreServer");

	Params::BP_SGKController_C_SetPlayerScoreServer Parms{};

	Parms.Score = std::move(Score);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SGK AllowStartingItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AllowStartingItems                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::SGK_AllowStartingItems(bool* AllowStartingItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK AllowStartingItems");

	Params::BP_SGKController_C_SGK_AllowStartingItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllowStartingItems != nullptr)
		*AllowStartingItems = Parms.AllowStartingItems;
}


// Function BP_SGKController.BP_SGKController_C.SGK DestroyWeaponAttachments
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::SGK_DestroyWeaponAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK DestroyWeaponAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.SGK ItemMovedInInventory
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::SGK_ItemMovedInInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK ItemMovedInInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.SGK ItemSound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Sounds                                SoundType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::SGK_ItemSound(class FName ItemId, E_Sounds SoundType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK ItemSound");

	Params::BP_SGKController_C_SGK_ItemSound Parms{};

	Parms.ItemId = ItemId;
	Parms.SoundType = SoundType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SGK LoadWeaponAttachments
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::SGK_LoadWeaponAttachments(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK LoadWeaponAttachments");

	Params::BP_SGKController_C_SGK_LoadWeaponAttachments Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SGK RemoveAdditionalChecks
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_SGKController_C::SGK_RemoveAdditionalChecks(const struct FS_InvSlot& InvSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK RemoveAdditionalChecks");

	Params::BP_SGKController_C_SGK_RemoveAdditionalChecks Parms{};

	Parms.InvSlot = std::move(InvSlot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SGK RemoveAttachment
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AttachmentType                        Attachment                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::SGK_RemoveAttachment(E_AttachmentType Attachment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK RemoveAttachment");

	Params::BP_SGKController_C_SGK_RemoveAttachment Parms{};

	Parms.Attachment = Attachment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SGK SelfItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       SelfItem                                               (Parm, OutParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_SGKController_C::SGK_SelfItem(struct FS_InvItem* SelfItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK SelfItem");

	Params::BP_SGKController_C_SGK_SelfItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SelfItem != nullptr)
		*SelfItem = std::move(Parms.SelfItem);
}


// Function BP_SGKController.BP_SGKController_C.SGK ShowAttachments
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::SGK_ShowAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK ShowAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.SGK SpawnOverflowItems
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvItem                       InvItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_SGKController_C::SGK_SpawnOverflowItems(const struct FS_InvItem& InvItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK SpawnOverflowItems");

	Params::BP_SGKController_C_SGK_SpawnOverflowItems Parms{};

	Parms.InvItem = std::move(InvItem);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SGK ToggleComponent
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::SGK_ToggleComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK ToggleComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.SGK UpdateAllAttachments
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::SGK_UpdateAllAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK UpdateAllAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.SGK UpdateCharacterYaw
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Pawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::SGK_UpdateCharacterYaw(class APawn* Param_Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK UpdateCharacterYaw");

	Params::BP_SGKController_C_SGK_UpdateCharacterYaw Parms{};

	Parms.Param_Pawn = Param_Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SGK UpdateSpecialSlot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_InvSlot                       InvSlot                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_SGKController_C::SGK_UpdateSpecialSlot(const struct FS_InvSlot& InvSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SGK UpdateSpecialSlot");

	Params::BP_SGKController_C_SGK_UpdateSpecialSlot Parms{};

	Parms.InvSlot = std::move(InvSlot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.ShowKnife
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::ShowKnife()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ShowKnife");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.SpawnBreachWidget
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::SpawnBreachWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SpawnBreachWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.SpawnPlantedBombActor
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPeak53Teams                            Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::SpawnPlantedBombActor(const struct FTransform& SpawnTransform, EPeak53Teams Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SpawnPlantedBombActor");

	Params::BP_SGKController_C_SpawnPlantedBombActor Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.SpawnVaultWidget
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::SpawnVaultWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SpawnVaultWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.SpectatorRotation
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::SpectatorRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "SpectatorRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.StartBanTracker
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::StartBanTracker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "StartBanTracker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ToggleDebugWindow
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::ToggleDebugWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ToggleDebugWindow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ToggleInGameMenu
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::ToggleInGameMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ToggleInGameMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ToggleTooltip
// (BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::ToggleTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ToggleTooltip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ui_remove_game_end_screen
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_SGKController_C::Ui_remove_game_end_screen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ui_remove_game_end_screen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SGKController.BP_SGKController_C.ui_toggle_game_end_screen
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_MyGameManager                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_PlayerScore                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_PlayerKills                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerDeath                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MVPScore                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MVPKills                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MVPDeaths                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           MVPName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SealsScoreGlobal                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SealsKillsGlobal                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SealsDeathsGlobal                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InsurgentsScoreGlobal                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InsurgentsKillsGlobal                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InsurgentsDeathsGlobal                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPeak53Teams                            WinnerTeam                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   UnlockedItem                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SGKController_C::Ui_toggle_game_end_screen(class AActor* Param_MyGameManager, int32 Param_PlayerScore, int32 Param_PlayerKills, int32 PlayerDeath, int32 MVPScore, int32 MVPKills, int32 MVPDeaths, const class FString& MVPName, int32 SealsScoreGlobal, int32 SealsKillsGlobal, int32 SealsDeathsGlobal, int32 InsurgentsScoreGlobal, int32 InsurgentsKillsGlobal, int32 InsurgentsDeathsGlobal, EPeak53Teams WinnerTeam, int32 UnlockedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "ui_toggle_game_end_screen");

	Params::BP_SGKController_C_Ui_toggle_game_end_screen Parms{};

	Parms.Param_MyGameManager = Param_MyGameManager;
	Parms.Param_PlayerScore = Param_PlayerScore;
	Parms.Param_PlayerKills = Param_PlayerKills;
	Parms.PlayerDeath = PlayerDeath;
	Parms.MVPScore = MVPScore;
	Parms.MVPKills = MVPKills;
	Parms.MVPDeaths = MVPDeaths;
	Parms.MVPName = std::move(MVPName);
	Parms.SealsScoreGlobal = SealsScoreGlobal;
	Parms.SealsKillsGlobal = SealsKillsGlobal;
	Parms.SealsDeathsGlobal = SealsDeathsGlobal;
	Parms.InsurgentsScoreGlobal = InsurgentsScoreGlobal;
	Parms.InsurgentsKillsGlobal = InsurgentsKillsGlobal;
	Parms.InsurgentsDeathsGlobal = InsurgentsDeathsGlobal;
	Parms.WinnerTeam = WinnerTeam;
	Parms.UnlockedItem = UnlockedItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SGKController.BP_SGKController_C.UnequipWeapon
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_WeaponSlot                    S_WeaponSlot                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_SGKController_C::UnequipWeapon(const struct FS_WeaponSlot& S_WeaponSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SGKController_C", "UnequipWeapon");

	Params::BP_SGKController_C_UnequipWeapon Parms{};

	Parms.S_WeaponSlot = std::move(S_WeaponSlot);

	UObject::ProcessEvent(Func, &Parms);
}

}

