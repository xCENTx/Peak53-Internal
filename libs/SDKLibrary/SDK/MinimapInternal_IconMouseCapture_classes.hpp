#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinimapInternal_IconMouseCapture

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass MinimapInternal_IconMouseCapture.MinimapInternal_IconMouseCapture_C
// 0x00B0 (0x0328 - 0x0278)
class UMinimapInternal_IconMouseCapture_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	FMulticastInlineDelegateProperty_             OnMouseClick;                                      // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          MouseDownStarted;                                  // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MouseDragStarted;                                  // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36D3[0x6];                                     // 0x0292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MouseDownPos;                                      // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MouseDownTime;                                     // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MouseMoveThreshold;                                // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              MapGeo;                                            // 0x02B8(0x0040)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	FMulticastInlineDelegateProperty_             OnBoxSelect;                                       // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCanvasPanelSlot*                       ParentCanvasSlot;                                  // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          MouseDown_IsLeft;                                  // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MouseDown_IsShift;                                 // 0x0311(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MouseDown_IsCtrl;                                  // 0x0312(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableBoxSelect;                                  // 0x0313(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BoxSelectColor;                                    // 0x0314(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_MinimapInternal_IconMouseCapture(int32 EntryPoint);
	void OnBoxSelect__DelegateSignature(const struct FVector2D& StartUV, const struct FVector2D& EndUV, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect);
	void OnBoxSelect_Event_0(const struct FVector2D& StartUV, const struct FVector2D& EndUV, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect);
	struct FEventReply OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseClick__DelegateSignature(bool IsLeftMouseButton);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void Start_Drag(const struct FGeometry& Param_MapGeo, const struct FVector2D& StartPos, const struct FVector2D& StartOffset, bool IsLeftMouseButton, bool IsShiftSelect, bool IsCtrlSelect);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MinimapInternal_IconMouseCapture_C">();
	}
	static class UMinimapInternal_IconMouseCapture_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMinimapInternal_IconMouseCapture_C>();
	}
};
static_assert(alignof(UMinimapInternal_IconMouseCapture_C) == 0x000008, "Wrong alignment on UMinimapInternal_IconMouseCapture_C");
static_assert(sizeof(UMinimapInternal_IconMouseCapture_C) == 0x000328, "Wrong size on UMinimapInternal_IconMouseCapture_C");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, UberGraphFrame) == 0x000278, "Member 'UMinimapInternal_IconMouseCapture_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, OnMouseClick) == 0x000280, "Member 'UMinimapInternal_IconMouseCapture_C::OnMouseClick' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, MouseDownStarted) == 0x000290, "Member 'UMinimapInternal_IconMouseCapture_C::MouseDownStarted' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, MouseDragStarted) == 0x000291, "Member 'UMinimapInternal_IconMouseCapture_C::MouseDragStarted' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, MouseDownPos) == 0x000298, "Member 'UMinimapInternal_IconMouseCapture_C::MouseDownPos' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, MouseDownTime) == 0x0002A8, "Member 'UMinimapInternal_IconMouseCapture_C::MouseDownTime' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, MouseMoveThreshold) == 0x0002B0, "Member 'UMinimapInternal_IconMouseCapture_C::MouseMoveThreshold' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, MapGeo) == 0x0002B8, "Member 'UMinimapInternal_IconMouseCapture_C::MapGeo' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, OnBoxSelect) == 0x0002F8, "Member 'UMinimapInternal_IconMouseCapture_C::OnBoxSelect' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, ParentCanvasSlot) == 0x000308, "Member 'UMinimapInternal_IconMouseCapture_C::ParentCanvasSlot' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, MouseDown_IsLeft) == 0x000310, "Member 'UMinimapInternal_IconMouseCapture_C::MouseDown_IsLeft' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, MouseDown_IsShift) == 0x000311, "Member 'UMinimapInternal_IconMouseCapture_C::MouseDown_IsShift' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, MouseDown_IsCtrl) == 0x000312, "Member 'UMinimapInternal_IconMouseCapture_C::MouseDown_IsCtrl' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, bEnableBoxSelect) == 0x000313, "Member 'UMinimapInternal_IconMouseCapture_C::bEnableBoxSelect' has a wrong offset!");
static_assert(offsetof(UMinimapInternal_IconMouseCapture_C, BoxSelectColor) == 0x000314, "Member 'UMinimapInternal_IconMouseCapture_C::BoxSelectColor' has a wrong offset!");

}

