#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InventoryItemIcon

#include "Basic.hpp"

#include "BP_InventoryItemIcon_classes.hpp"
#include "BP_InventoryItemIcon_parameters.hpp"


namespace SDK
{

// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_InventoryItemIcon_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.CreateDone__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_InventoryItemIcon_C::CreateDone__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "CreateDone__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.Deactive
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InventoryItemIcon_C::Deactive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "Deactive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.ExecuteUbergraph_BP_InventoryItemIcon
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InventoryItemIcon_C::ExecuteUbergraph_BP_InventoryItemIcon(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "ExecuteUbergraph_BP_InventoryItemIcon");

	Params::BP_InventoryItemIcon_C_ExecuteUbergraph_BP_InventoryItemIcon Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.GetCurrentItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS_InvItem                       InvItem                                                (Parm, OutParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_InventoryItemIcon_C::GetCurrentItem(struct FS_InvItem* InvItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "GetCurrentItem");

	Params::BP_InventoryItemIcon_C_GetCurrentItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InvItem != nullptr)
		*InvItem = std::move(Parms.InvItem);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.GetInventory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FS_InvSlot>               Inventory                                              (Parm, OutParm, ContainsInstancedReference)

void UBP_InventoryItemIcon_C::GetInventory(TArray<struct FS_InvSlot>* Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "GetInventory");

	Params::BP_InventoryItemIcon_C_GetInventory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Inventory != nullptr)
		*Inventory = std::move(Parms.Inventory);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.IsItemValid
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsItemValid                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InventoryItemIcon_C::IsItemValid(bool* Param_IsItemValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "IsItemValid");

	Params::BP_InventoryItemIcon_C_IsItemValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsItemValid != nullptr)
		*Param_IsItemValid = Parms.Param_IsItemValid;
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.LoadGameSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InventoryItemIcon_C::LoadGameSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "LoadGameSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.OnDragDetected
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    PointerEvent                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UDragDropOperation*               Operation                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InventoryItemIcon_C::OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "OnDragDetected");

	Params::BP_InventoryItemIcon_C_OnDragDetected Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);

	UObject::ProcessEvent(Func, &Parms);

	if (Operation != nullptr)
		*Operation = Parms.Operation;
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.OnDragEnter
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UDragDropOperation*               Operation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InventoryItemIcon_C::OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "OnDragEnter");

	Params::BP_InventoryItemIcon_C_OnDragEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBP_InventoryItemIcon_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "OnMouseButtonDown");

	Params::BP_InventoryItemIcon_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.OnMouseDoubleClick
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBP_InventoryItemIcon_C::OnMouseDoubleClick(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "OnMouseDoubleClick");

	Params::BP_InventoryItemIcon_C_OnMouseDoubleClick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.OnMouseEnter
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_InventoryItemIcon_C::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "OnMouseEnter");

	Params::BP_InventoryItemIcon_C_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_InventoryItemIcon_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "OnMouseLeave");

	Params::BP_InventoryItemIcon_C_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.SetIconSize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Width                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_Rotated                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InventoryItemIcon_C::SetIconSize(int32 Height, int32 Width, bool Param_Rotated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "SetIconSize");

	Params::BP_InventoryItemIcon_C_SetIconSize Parms{};

	Parms.Height = Height;
	Parms.Width = Width;
	Parms.Param_Rotated = Param_Rotated;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.StartAnim
// (BlueprintCallable, BlueprintEvent)

void UBP_InventoryItemIcon_C::StartAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "StartAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.StopAnim
// (BlueprintCallable, BlueprintEvent)

void UBP_InventoryItemIcon_C::StopAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "StopAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InventoryItemIcon_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "Tick");

	Params::BP_InventoryItemIcon_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.UpdateCount
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ItemValid                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvItem                       InvItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_InventoryItemIcon_C::UpdateCount(bool ItemValid, const struct FS_InvItem& InvItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "UpdateCount");

	Params::BP_InventoryItemIcon_C_UpdateCount Parms{};

	Parms.ItemValid = ItemValid;
	Parms.InvItem = std::move(InvItem);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.UpdateCurrentItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_InventoryItemIcon_C::UpdateCurrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "UpdateCurrentItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.UpdateIcon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ItemValid                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvItem                       InvItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    Param_Rotated                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InventoryItemIcon_C::UpdateIcon(bool ItemValid, const struct FS_InvItem& InvItem, bool Param_Rotated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "UpdateIcon");

	Params::BP_InventoryItemIcon_C_UpdateIcon Parms{};

	Parms.ItemValid = ItemValid;
	Parms.InvItem = std::move(InvItem);
	Parms.Param_Rotated = Param_Rotated;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.UpdateItemCount
// (BlueprintCallable, BlueprintEvent)

void UBP_InventoryItemIcon_C::UpdateItemCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "UpdateItemCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InventoryItemIcon.BP_InventoryItemIcon_C.UpdateNameText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Item_Valid                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InvItem                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_InventoryItemIcon_C::UpdateNameText(bool Item_Valid, const struct FS_InvItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InventoryItemIcon_C", "UpdateNameText");

	Params::BP_InventoryItemIcon_C_UpdateNameText Parms{};

	Parms.Item_Valid = Item_Valid;
	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);
}

}

