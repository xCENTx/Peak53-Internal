#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AdvancedSightsAndScopes

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum AdvancedSightsAndScopes.ESKGScopeAdjustment
// NumValues: 0x0003
enum class ESKGScopeAdjustment : uint8
{
	MRAD                                     = 0,
	MOA                                      = 1,
	ESKGScopeAdjustment_MAX                  = 2,
};

// ScriptStruct AdvancedSightsAndScopes.SKGSightZoomSettings
// 0x0014 (0x0014 - 0x0000)
struct FSKGSightZoomSettings final
{
public:
	bool                                          bSmoothZoom;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothZoomSmoothness;                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothZoomSpeed;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFreeZoom;                                         // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104E[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZoomIncrementAmount;                               // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSKGSightZoomSettings) == 0x000004, "Wrong alignment on FSKGSightZoomSettings");
static_assert(sizeof(FSKGSightZoomSettings) == 0x000014, "Wrong size on FSKGSightZoomSettings");
static_assert(offsetof(FSKGSightZoomSettings, bSmoothZoom) == 0x000000, "Member 'FSKGSightZoomSettings::bSmoothZoom' has a wrong offset!");
static_assert(offsetof(FSKGSightZoomSettings, SmoothZoomSmoothness) == 0x000004, "Member 'FSKGSightZoomSettings::SmoothZoomSmoothness' has a wrong offset!");
static_assert(offsetof(FSKGSightZoomSettings, SmoothZoomSpeed) == 0x000008, "Member 'FSKGSightZoomSettings::SmoothZoomSpeed' has a wrong offset!");
static_assert(offsetof(FSKGSightZoomSettings, bFreeZoom) == 0x00000C, "Member 'FSKGSightZoomSettings::bFreeZoom' has a wrong offset!");
static_assert(offsetof(FSKGSightZoomSettings, ZoomIncrementAmount) == 0x000010, "Member 'FSKGSightZoomSettings::ZoomIncrementAmount' has a wrong offset!");

// ScriptStruct AdvancedSightsAndScopes.SKGSightMagnification
// 0x0038 (0x0038 - 0x0000)
struct FSKGSightMagnification final
{
public:
	TArray<float>                                 Magnifications;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsFirstFocalPlane;                                // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104F[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EyeboxShrinkOnZoomAmount;                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreaseReticleScaleAmount;                        // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSKGSightZoomSettings                  ZoomSettings;                                      // 0x001C(0x0014)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1050[0x8];                                     // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSKGSightMagnification) == 0x000008, "Wrong alignment on FSKGSightMagnification");
static_assert(sizeof(FSKGSightMagnification) == 0x000038, "Wrong size on FSKGSightMagnification");
static_assert(offsetof(FSKGSightMagnification, Magnifications) == 0x000000, "Member 'FSKGSightMagnification::Magnifications' has a wrong offset!");
static_assert(offsetof(FSKGSightMagnification, bIsFirstFocalPlane) == 0x000010, "Member 'FSKGSightMagnification::bIsFirstFocalPlane' has a wrong offset!");
static_assert(offsetof(FSKGSightMagnification, EyeboxShrinkOnZoomAmount) == 0x000014, "Member 'FSKGSightMagnification::EyeboxShrinkOnZoomAmount' has a wrong offset!");
static_assert(offsetof(FSKGSightMagnification, DecreaseReticleScaleAmount) == 0x000018, "Member 'FSKGSightMagnification::DecreaseReticleScaleAmount' has a wrong offset!");
static_assert(offsetof(FSKGSightMagnification, ZoomSettings) == 0x00001C, "Member 'FSKGSightMagnification::ZoomSettings' has a wrong offset!");

// ScriptStruct AdvancedSightsAndScopes.SKGSightOptimization
// 0x0038 (0x0038 - 0x0000)
struct FSKGSightOptimization final
{
public:
	bool                                          bOverrideCaptureEveryFrame;                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1051[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RefreshRate;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableWhenNotAiming;                             // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1052[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NotAimingRefreshRate;                              // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearScopeWithColor;                              // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1053[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ClearedColor;                                      // 0x0014(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearScopeWithMaterial;                           // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1054[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ClearedScopeMaterial;                              // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1055[0x8];                                     // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSKGSightOptimization) == 0x000008, "Wrong alignment on FSKGSightOptimization");
static_assert(sizeof(FSKGSightOptimization) == 0x000038, "Wrong size on FSKGSightOptimization");
static_assert(offsetof(FSKGSightOptimization, bOverrideCaptureEveryFrame) == 0x000000, "Member 'FSKGSightOptimization::bOverrideCaptureEveryFrame' has a wrong offset!");
static_assert(offsetof(FSKGSightOptimization, RefreshRate) == 0x000004, "Member 'FSKGSightOptimization::RefreshRate' has a wrong offset!");
static_assert(offsetof(FSKGSightOptimization, bDisableWhenNotAiming) == 0x000008, "Member 'FSKGSightOptimization::bDisableWhenNotAiming' has a wrong offset!");
static_assert(offsetof(FSKGSightOptimization, NotAimingRefreshRate) == 0x00000C, "Member 'FSKGSightOptimization::NotAimingRefreshRate' has a wrong offset!");
static_assert(offsetof(FSKGSightOptimization, bClearScopeWithColor) == 0x000010, "Member 'FSKGSightOptimization::bClearScopeWithColor' has a wrong offset!");
static_assert(offsetof(FSKGSightOptimization, ClearedColor) == 0x000014, "Member 'FSKGSightOptimization::ClearedColor' has a wrong offset!");
static_assert(offsetof(FSKGSightOptimization, bClearScopeWithMaterial) == 0x000024, "Member 'FSKGSightOptimization::bClearScopeWithMaterial' has a wrong offset!");
static_assert(offsetof(FSKGSightOptimization, ClearedScopeMaterial) == 0x000028, "Member 'FSKGSightOptimization::ClearedScopeMaterial' has a wrong offset!");

// ScriptStruct AdvancedSightsAndScopes.SKGReticleMaterial
// 0x0018 (0x0018 - 0x0000)
struct FSKGReticleMaterial final
{
public:
	class UMaterialInstance*                      ReticleMaterial;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicReticleMaterial;                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReticleSize;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingEyeboxRange;                               // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSKGReticleMaterial) == 0x000008, "Wrong alignment on FSKGReticleMaterial");
static_assert(sizeof(FSKGReticleMaterial) == 0x000018, "Wrong size on FSKGReticleMaterial");
static_assert(offsetof(FSKGReticleMaterial, ReticleMaterial) == 0x000000, "Member 'FSKGReticleMaterial::ReticleMaterial' has a wrong offset!");
static_assert(offsetof(FSKGReticleMaterial, DynamicReticleMaterial) == 0x000008, "Member 'FSKGReticleMaterial::DynamicReticleMaterial' has a wrong offset!");
static_assert(offsetof(FSKGReticleMaterial, ReticleSize) == 0x000010, "Member 'FSKGReticleMaterial::ReticleSize' has a wrong offset!");
static_assert(offsetof(FSKGReticleMaterial, StartingEyeboxRange) == 0x000014, "Member 'FSKGReticleMaterial::StartingEyeboxRange' has a wrong offset!");

// ScriptStruct AdvancedSightsAndScopes.SKGReticleBrightness
// 0x0018 (0x0018 - 0x0000)
struct FSKGReticleBrightness final
{
public:
	TArray<float>                                 ReticleBrightnessSettings;                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         ReticleDefaultBrightnessIndex;                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1056[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSKGReticleBrightness) == 0x000008, "Wrong alignment on FSKGReticleBrightness");
static_assert(sizeof(FSKGReticleBrightness) == 0x000018, "Wrong size on FSKGReticleBrightness");
static_assert(offsetof(FSKGReticleBrightness, ReticleBrightnessSettings) == 0x000000, "Member 'FSKGReticleBrightness::ReticleBrightnessSettings' has a wrong offset!");
static_assert(offsetof(FSKGReticleBrightness, ReticleDefaultBrightnessIndex) == 0x000010, "Member 'FSKGReticleBrightness::ReticleDefaultBrightnessIndex' has a wrong offset!");

// ScriptStruct AdvancedSightsAndScopes.SKGReticleSettings
// 0x0018 (0x0018 - 0x0000)
struct FSKGReticleSettings final
{
public:
	int32                                         ReticleMaterialIndex;                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1057[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSKGReticleMaterial>            ReticleMaterials;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSKGReticleSettings) == 0x000008, "Wrong alignment on FSKGReticleSettings");
static_assert(sizeof(FSKGReticleSettings) == 0x000018, "Wrong size on FSKGReticleSettings");
static_assert(offsetof(FSKGReticleSettings, ReticleMaterialIndex) == 0x000000, "Member 'FSKGReticleSettings::ReticleMaterialIndex' has a wrong offset!");
static_assert(offsetof(FSKGReticleSettings, ReticleMaterials) == 0x000008, "Member 'FSKGReticleSettings::ReticleMaterials' has a wrong offset!");

// ScriptStruct AdvancedSightsAndScopes.SKGSightZero
// 0x0008 (0x0008 - 0x0000)
struct FSKGSightZero final
{
public:
	float                                         Elevation;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Windage;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSKGSightZero) == 0x000004, "Wrong alignment on FSKGSightZero");
static_assert(sizeof(FSKGSightZero) == 0x000008, "Wrong size on FSKGSightZero");
static_assert(offsetof(FSKGSightZero, Elevation) == 0x000000, "Member 'FSKGSightZero::Elevation' has a wrong offset!");
static_assert(offsetof(FSKGSightZero, Windage) == 0x000004, "Member 'FSKGSightZero::Windage' has a wrong offset!");

// ScriptStruct AdvancedSightsAndScopes.RenderTargetSize
// 0x0008 (0x0008 - 0x0000)
struct FRenderTargetSize final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRenderTargetSize) == 0x000004, "Wrong alignment on FRenderTargetSize");
static_assert(sizeof(FRenderTargetSize) == 0x000008, "Wrong size on FRenderTargetSize");
static_assert(offsetof(FRenderTargetSize, Width) == 0x000000, "Member 'FRenderTargetSize::Width' has a wrong offset!");
static_assert(offsetof(FRenderTargetSize, Height) == 0x000004, "Member 'FRenderTargetSize::Height' has a wrong offset!");

}

