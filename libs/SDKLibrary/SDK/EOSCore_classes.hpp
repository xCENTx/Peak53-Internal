#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EOSCore

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "EOSCore_structs.hpp"


namespace SDK
{

// Class EOSCore.EOSCoreSubsystem
// 0x0000 (0x0030 - 0x0030)
class UEOSCoreSubsystem : public UGameInstanceSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreSubsystem">();
	}
	static class UEOSCoreSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreSubsystem>();
	}
};
static_assert(alignof(UEOSCoreSubsystem) == 0x000008, "Wrong alignment on UEOSCoreSubsystem");
static_assert(sizeof(UEOSCoreSubsystem) == 0x000030, "Wrong size on UEOSCoreSubsystem");

// Class EOSCore.CoreAchievements
// 0x0050 (0x0080 - 0x0030)
class UCoreAchievements final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_2881[0x50];                                    // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FEOSNotificationId EOSAchievementsAddNotifyAchievementsUnlockedV2(class UObject* WorldContextObject, const TDelegate<void(struct FEOSAchievementsOnAchievementsUnlockedCallbackV2Info& Data)>& Callback);
	static EOSResult EOSAchievementsCopyAchievementDefinitionV2ByAchievementId(class UObject* WorldContextObject, const struct FEOSAchievementsCopyAchievementDefinitionV2ByAchievementIdOptions& Options, struct FEOSAchievementsDefinitionV2* OutDefinition);
	static EOSResult EOSAchievementsCopyAchievementDefinitionV2ByIndex(class UObject* WorldContextObject, const struct FEOSAchievementsCopyAchievementDefinitionV2ByIndexOptions& Options, struct FEOSAchievementsDefinitionV2* OutDefinition);
	static EOSResult EOSAchievementsCopyPlayerAchievementByIndex(class UObject* WorldContextObject, const struct FEOSAchievementsCopyPlayerAchievementByIndexOptions& Options, struct FEOSAchievementsPlayerAchievement* OutAchievement);
	static int32 EOSAchievementsGetAchievementDefinitionCount(class UObject* WorldContextObject, const struct FEOSAchievementsGetAchievementDefinitionCountOptions& Options);
	static int32 EOSAchievementsGetPlayerAchievementCount(class UObject* WorldContextObject, const struct FEOSAchievementsGetPlayerAchievementCountOptions& Options);
	static void EOSAchievementsRemoveNotifyAchievementsUnlocked(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static class UCoreAchievements* GetAchievements(class UObject* WorldContextObject);

	void EOSAchievementsQueryDefinitions(class UObject* WorldContextObject, const struct FEOSAchievementsQueryDefinitionsOptions& Options, const TDelegate<void(struct FEOSAchievementsOnQueryDefinitionsCompleteCallbackInfo& Data)>& Callback);
	void EOSAchievementsQueryPlayerAchievements(class UObject* WorldContextObject, const struct FEOSAchievementsQueryPlayerAchievementsOptions& Options, const TDelegate<void(struct FEOSAchievementsOnQueryPlayerAchievementsCompleteCallbackInfo& Data)>& Callback);
	void EOSAchievementsUnlockAchievements(class UObject* WorldContextObject, const struct FEOSAchievementsUnlockAchievementsOptions& Options, const TDelegate<void(struct FEOSAchievementsOnUnlockAchievementsCompleteCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreAchievements">();
	}
	static class UCoreAchievements* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreAchievements>();
	}
};
static_assert(alignof(UCoreAchievements) == 0x000008, "Wrong alignment on UCoreAchievements");
static_assert(sizeof(UCoreAchievements) == 0x000080, "Wrong size on UCoreAchievements");

// Class EOSCore.EOSCoreAsyncAction
// 0x0008 (0x0038 - 0x0030)
class UEOSCoreAsyncAction : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_2889[0x8];                                     // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreAsyncAction">();
	}
	static class UEOSCoreAsyncAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreAsyncAction>();
	}
};
static_assert(alignof(UEOSCoreAsyncAction) == 0x000008, "Wrong alignment on UEOSCoreAsyncAction");
static_assert(sizeof(UEOSCoreAsyncAction) == 0x000038, "Wrong size on UEOSCoreAsyncAction");

// Class EOSCore.EOSCoreAchievementsQueryDefinitions
// 0x0048 (0x0080 - 0x0038)
class UEOSCoreAchievementsQueryDefinitions final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_288A[0x38];                                    // 0x0048(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreAchievementsQueryDefinitions* EOSAchievementsQueryDefinitionsAsync(class UObject* WorldContextObject, const struct FEOSAchievementsQueryDefinitionsOptions& Options);

	void HandleCallback(const struct FEOSAchievementsOnQueryDefinitionsCompleteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreAchievementsQueryDefinitions">();
	}
	static class UEOSCoreAchievementsQueryDefinitions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreAchievementsQueryDefinitions>();
	}
};
static_assert(alignof(UEOSCoreAchievementsQueryDefinitions) == 0x000008, "Wrong alignment on UEOSCoreAchievementsQueryDefinitions");
static_assert(sizeof(UEOSCoreAchievementsQueryDefinitions) == 0x000080, "Wrong size on UEOSCoreAchievementsQueryDefinitions");
static_assert(offsetof(UEOSCoreAchievementsQueryDefinitions, OnCallback) == 0x000038, "Member 'UEOSCoreAchievementsQueryDefinitions::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreAchievementsQueryPlayerAchievements
// 0x0068 (0x00A0 - 0x0038)
class UEOSCoreAchievementsQueryPlayerAchievements final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_288D[0x58];                                    // 0x0048(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreAchievementsQueryPlayerAchievements* EOSAchievementsQueryPlayerAchievementsAsync(class UObject* WorldContextObject, const struct FEOSAchievementsQueryPlayerAchievementsOptions& Options);

	void HandleCallback(const struct FEOSAchievementsOnQueryPlayerAchievementsCompleteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreAchievementsQueryPlayerAchievements">();
	}
	static class UEOSCoreAchievementsQueryPlayerAchievements* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreAchievementsQueryPlayerAchievements>();
	}
};
static_assert(alignof(UEOSCoreAchievementsQueryPlayerAchievements) == 0x000008, "Wrong alignment on UEOSCoreAchievementsQueryPlayerAchievements");
static_assert(sizeof(UEOSCoreAchievementsQueryPlayerAchievements) == 0x0000A0, "Wrong size on UEOSCoreAchievementsQueryPlayerAchievements");
static_assert(offsetof(UEOSCoreAchievementsQueryPlayerAchievements, OnCallback) == 0x000038, "Member 'UEOSCoreAchievementsQueryPlayerAchievements::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreAchievementsUnlockAchievements
// 0x0058 (0x0090 - 0x0038)
class UEOSCoreAchievementsUnlockAchievements final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_288F[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreAchievementsUnlockAchievements* EOSAchievementsUnlockAchievements(class UObject* WorldContextObject, const struct FEOSAchievementsUnlockAchievementsOptions& Options);

	void HandleCallback(const struct FEOSAchievementsOnUnlockAchievementsCompleteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreAchievementsUnlockAchievements">();
	}
	static class UEOSCoreAchievementsUnlockAchievements* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreAchievementsUnlockAchievements>();
	}
};
static_assert(alignof(UEOSCoreAchievementsUnlockAchievements) == 0x000008, "Wrong alignment on UEOSCoreAchievementsUnlockAchievements");
static_assert(sizeof(UEOSCoreAchievementsUnlockAchievements) == 0x000090, "Wrong size on UEOSCoreAchievementsUnlockAchievements");
static_assert(offsetof(UEOSCoreAchievementsUnlockAchievements, OnCallback) == 0x000038, "Member 'UEOSCoreAchievementsUnlockAchievements::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLobbyQueryInvites
// 0x0048 (0x0080 - 0x0038)
class UEOSCoreLobbyQueryInvites final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2891[0x38];                                    // 0x0048(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLobbyQueryInvites* EOSLobbyQueryInvitesAsync(class UObject* WorldContextObject, const struct FEOSLobbyQueryInvitesOptions& Options);

	void HandleCallback(const struct FEOSLobbyQueryInvitesCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLobbyQueryInvites">();
	}
	static class UEOSCoreLobbyQueryInvites* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLobbyQueryInvites>();
	}
};
static_assert(alignof(UEOSCoreLobbyQueryInvites) == 0x000008, "Wrong alignment on UEOSCoreLobbyQueryInvites");
static_assert(sizeof(UEOSCoreLobbyQueryInvites) == 0x000080, "Wrong size on UEOSCoreLobbyQueryInvites");
static_assert(offsetof(UEOSCoreLobbyQueryInvites, OnCallback) == 0x000038, "Member 'UEOSCoreLobbyQueryInvites::OnCallback' has a wrong offset!");

// Class EOSCore.CoreAntiCheatClient
// 0x0190 (0x01C0 - 0x0030)
class UCoreAntiCheatClient final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_2893[0x190];                                   // 0x0030(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static EOSResult EOSAntiCheatClientAddExternalIntegrityCatalog(class UObject* WorldContextObject, const struct FEOSAntiCheatClientAddExternalIntegrityCatalogOptions& Options);
	static struct FEOSNotificationId EOSAntiCheatClientAddNotifyMessageToPeer(class UObject* WorldContextObject, const struct FEOSAntiCheatClientAddNotifyMessageToPeerOptions& Options, const TDelegate<void(struct FEOSAntiCheatCommonOnMessageToClientCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSAntiCheatClientAddNotifyMessageToServer(class UObject* WorldContextObject, const struct FEOSAntiCheatClientAddNotifyMessageToServerOptions& Options, const TDelegate<void(struct FEOSAntiCheatClientOnMessageToServerCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSAntiCheatClientAddNotifyPeerActionRequired(class UObject* WorldContextObject, const struct FEOSAntiCheatClientAddNotifyPeerActionRequiredOptions& Options, const TDelegate<void(struct FEOSAntiCheatCommonOnClientActionRequiredCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSAntiCheatClientAddNotifyPeerAuthStatusChanged(class UObject* WorldContextObject, const struct FEOSAntiCheatClientAddNotifyPeerAuthStatusChangedOptions& Options, const TDelegate<void(struct FEOSAntiCheatCommonOnClientAuthStatusChangedCallbackInfo& Data)>& Callback);
	static EOSResult EOSAntiCheatClientBeginSession(class UObject* WorldContextObject, const struct FEOSAntiCheatClientBeginSessionOptions& Options);
	static EOSResult EOSAntiCheatClientEndSession(class UObject* WorldContextObject, const struct FEOSAntiCheatClientEndSessionOptions& Options);
	static EOSResult EOSAntiCheatClientGetProtectMessageOutputLength(class UObject* WorldContextObject, const struct FEOSAntiCheatClientGetProtectMessageOutputLengthOptions& Options, int32* OutBufferLengthBytes);
	static EOSResult EOSAntiCheatClientPollStatus(class UObject* WorldContextObject, const struct FEOSAntiCheatClientPollStatusOptions& Options, EEOSEAntiCheatClientViolationType* ViolationType, class FString* OutMessage);
	static EOSResult EOSAntiCheatClientProtectMessage(class UObject* WorldContextObject, const struct FEOSAntiCheatClientProtectMessageOptions& Options, TArray<uint8>* OutBuffer);
	static EOSResult EOSAntiCheatClientReceiveMessageFromPeer(class UObject* WorldContextObject, const struct FEOSAntiCheatClientReceiveMessageFromPeerOptions& Options);
	static EOSResult EOSAntiCheatClientReceiveMessageFromServer(class UObject* WorldContextObject, const struct FEOSAntiCheatClientReceiveMessageFromServerOptions& Options);
	static EOSResult EOSAntiCheatClientRegisterPeer(class UObject* WorldContextObject, const struct FEOSAntiCheatClientRegisterPeerOptions& Options);
	static void EOSAntiCheatClientRemoveNotifyMessageToPeer(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static void EOSAntiCheatClientRemoveNotifyMessageToServer(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static void EOSAntiCheatClientRemoveNotifyPeerActionRequired(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static void EOSAntiCheatClientRemoveNotifyPeerAuthStatusChanged(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static EOSResult EOSAntiCheatClientUnprotectMessage(class UObject* WorldContextObject, const struct FEOSAntiCheatClientUnprotectMessageOptions& Options, const TArray<uint8>& OutBuffer);
	static EOSResult EOSAntiCheatClientUnregisterPeer(class UObject* WorldContextObject, const struct FEOSAntiCheatClientUnregisterPeerOptions& Options);
	static class UCoreAntiCheatClient* GetAntiCheatClient(class UObject* WorldContextObject);

	struct FEOSNotificationId EOSAntiCheatClientAddNotifyClientIntegrityViolated(class UObject* WorldContextObject, const struct FEOSAntiCheatClientAddNotifyClientIntegrityViolatedOptions& Options, const TDelegate<void(struct FEOSAntiCheatClientOnClientIntegrityViolatedCallbackInfo& Data)>& Callback);
	void EOSAntiCheatClientRemoveNotifyClientIntegrityViolated(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreAntiCheatClient">();
	}
	static class UCoreAntiCheatClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreAntiCheatClient>();
	}
};
static_assert(alignof(UCoreAntiCheatClient) == 0x000008, "Wrong alignment on UCoreAntiCheatClient");
static_assert(sizeof(UCoreAntiCheatClient) == 0x0001C0, "Wrong size on UCoreAntiCheatClient");

// Class EOSCore.EOSCorePlayerDataStorageQueryFileList
// 0x0048 (0x0080 - 0x0038)
class UEOSCorePlayerDataStorageQueryFileList final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_28AA[0x38];                                    // 0x0048(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCorePlayerDataStorageQueryFileList* EOSPlayerDataStorageQueryFileListAsync(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageQueryFileListOptions& QueryFileListOptions);

	void HandleCallback(const struct FEOSPlayerDataStorageQueryFileListCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCorePlayerDataStorageQueryFileList">();
	}
	static class UEOSCorePlayerDataStorageQueryFileList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCorePlayerDataStorageQueryFileList>();
	}
};
static_assert(alignof(UEOSCorePlayerDataStorageQueryFileList) == 0x000008, "Wrong alignment on UEOSCorePlayerDataStorageQueryFileList");
static_assert(sizeof(UEOSCorePlayerDataStorageQueryFileList) == 0x000080, "Wrong size on UEOSCorePlayerDataStorageQueryFileList");
static_assert(offsetof(UEOSCorePlayerDataStorageQueryFileList, OnCallback) == 0x000038, "Member 'UEOSCorePlayerDataStorageQueryFileList::OnCallback' has a wrong offset!");

// Class EOSCore.CoreAntiCheatServer
// 0x00F0 (0x0120 - 0x0030)
class UCoreAntiCheatServer final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_28AC[0xF0];                                    // 0x0030(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FEOSNotificationId EOSAntiCheatServerAddNotifyClientActionRequired(class UObject* WorldContextObject, const struct FEOSAntiCheatServerAddNotifyClientActionRequiredOptions& Options, const TDelegate<void(struct FEOSAntiCheatCommonOnClientActionRequiredCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSAntiCheatServerAddNotifyClientAuthStatusChanged(class UObject* WorldContextObject, const struct FEOSAntiCheatServerAddNotifyClientAuthStatusChangedOptions& Options, const TDelegate<void(struct FEOSAntiCheatCommonOnClientAuthStatusChangedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSAntiCheatServerAddNotifyMessageToClient(class UObject* WorldContextObject, const struct FEOSAntiCheatServerAddNotifyMessageToClientOptions& Options, const TDelegate<void(struct FEOSAntiCheatCommonOnMessageToClientCallbackInfo& Data)>& Callback);
	static EOSResult EOSAntiCheatServerBeginSession(class UObject* WorldContextObject, const struct FEOSAntiCheatServerBeginSessionOptions& Options);
	static EOSResult EOSAntiCheatServerEndSession(class UObject* WorldContextObject, const struct FEOSAntiCheatServerEndSessionOptions& Options);
	static EOSResult EOSAntiCheatServerGetProtectMessageOutputLength(class UObject* WorldContextObject, const struct FEOSAntiCheatServerGetProtectMessageOutputLengthOptions& Options, int32* OutBufferLengthBytes);
	static EOSResult EOSAntiCheatServerLogEvent(class UObject* WorldContextObject, const struct FEOSAntiCheatCommonLogEventOptions& Options);
	static EOSResult EOSAntiCheatServerLogGameRoundEnd(class UObject* WorldContextObject, const struct FEOSAntiCheatCommonLogGameRoundEndOptions& Options);
	static EOSResult EOSAntiCheatServerLogGameRoundStart(class UObject* WorldContextObject, const struct FEOSAntiCheatCommonLogGameRoundStartOptions& Options);
	static EOSResult EOSAntiCheatServerLogPlayerDespawn(class UObject* WorldContextObject, const struct FEOSAntiCheatCommonLogPlayerDespawnOptions& Options);
	static EOSResult EOSAntiCheatServerLogPlayerRevive(class UObject* WorldContextObject, const struct FEOSAntiCheatCommonLogPlayerReviveOptions& Options);
	static EOSResult EOSAntiCheatServerLogPlayerSpawn(class UObject* WorldContextObject, const struct FEOSAntiCheatCommonLogPlayerSpawnOptions& Options);
	static EOSResult EOSAntiCheatServerLogPlayerTakeDamage(class UObject* WorldContextObject, const struct FEOSAntiCheatCommonLogPlayerTakeDamageOptions& Options);
	static EOSResult EOSAntiCheatServerLogPlayerTick(class UObject* WorldContextObject, const struct FEOSAntiCheatCommonLogPlayerTickOptions& Options);
	static EOSResult EOSAntiCheatServerLogPlayerUseAbility(class UObject* WorldContextObject, const struct FEOSAntiCheatCommonLogPlayerUseAbilityOptions& Options);
	static EOSResult EOSAntiCheatServerLogPlayerUseWeapon(class UObject* WorldContextObject, const struct FEOSAntiCheatCommonLogPlayerUseWeaponOptions& Options);
	static EOSResult EOSAntiCheatServerProtectMessage(class UObject* WorldContextObject, const struct FEOSAntiCheatServerProtectMessageOptions& Options, TArray<uint8>* OutBuffer, int32* OutBufferLengthBytes);
	static EOSResult EOSAntiCheatServerReceiveMessageFromClient(class UObject* WorldContextObject, const struct FEOSAntiCheatServerReceiveMessageFromClientOptions& Options);
	static EOSResult EOSAntiCheatServerRegisterClient(class UObject* WorldContextObject, const struct FEOSAntiCheatServerRegisterClientOptions& Options);
	static EOSResult EOSAntiCheatServerRegisterEvent(class UObject* WorldContextObject, const struct FEOSAntiCheatCommonRegisterEventOptions& Options);
	static void EOSAntiCheatServerRemoveNotifyClientActionRequired(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static void EOSAntiCheatServerRemoveNotifyClientAuthStatusChanged(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static void EOSAntiCheatServerRemoveNotifyMessageToClient(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static EOSResult EOSAntiCheatServerSetClientDetails(class UObject* WorldContextObject, const struct FEOSAntiCheatCommonSetClientDetailsOptions& Options);
	static EOSResult EOSAntiCheatServerSetClientNetworkState(class UObject* WorldContextObject, const struct FEOSAntiCheatServerSetClientNetworkStateOptions& Options);
	static EOSResult EOSAntiCheatServerSetGameSessionId(class UObject* WorldContextObject, const struct FEOSAntiCheatCommonSetGameSessionIdOptions& Options);
	static EOSResult EOSAntiCheatServerUnprotectMessage(class UObject* WorldContextObject, const struct FEOSAntiCheatServerUnprotectMessageOptions& Options, TArray<uint8>* OutBuffer, int32* OutBufferLengthBytes);
	static EOSResult EOSAntiCheatServerUnregisterClient(class UObject* WorldContextObject, const struct FEOSAntiCheatServerUnregisterClientOptions& Options);
	static class UCoreAntiCheatServer* GetAntiCheatServer(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreAntiCheatServer">();
	}
	static class UCoreAntiCheatServer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreAntiCheatServer>();
	}
};
static_assert(alignof(UCoreAntiCheatServer) == 0x000008, "Wrong alignment on UCoreAntiCheatServer");
static_assert(sizeof(UCoreAntiCheatServer) == 0x000120, "Wrong size on UCoreAntiCheatServer");

// Class EOSCore.EOSCoreAuthLogin
// 0x0060 (0x0098 - 0x0038)
class UEOSCoreAuthLogin final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C9[0x50];                                    // 0x0048(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreAuthLogin* EOSAuthLoginAsync(class UObject* WorldContextObject, const struct FEOSAuthLoginOptions& Options);

	void HandleCallback(const struct FEOSAuthLoginCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreAuthLogin">();
	}
	static class UEOSCoreAuthLogin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreAuthLogin>();
	}
};
static_assert(alignof(UEOSCoreAuthLogin) == 0x000008, "Wrong alignment on UEOSCoreAuthLogin");
static_assert(sizeof(UEOSCoreAuthLogin) == 0x000098, "Wrong size on UEOSCoreAuthLogin");
static_assert(offsetof(UEOSCoreAuthLogin, OnCallback) == 0x000038, "Member 'UEOSCoreAuthLogin::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreAuthLogout
// 0x0048 (0x0080 - 0x0038)
class UEOSCoreAuthLogout final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_28CB[0x38];                                    // 0x0048(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreAuthLogout* EOSAuthLogoutAsync(class UObject* WorldContextObject, const struct FEOSAuthLogoutOptions& Options);

	void HandleCallback(const struct FEOSAuthLogoutCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreAuthLogout">();
	}
	static class UEOSCoreAuthLogout* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreAuthLogout>();
	}
};
static_assert(alignof(UEOSCoreAuthLogout) == 0x000008, "Wrong alignment on UEOSCoreAuthLogout");
static_assert(sizeof(UEOSCoreAuthLogout) == 0x000080, "Wrong size on UEOSCoreAuthLogout");
static_assert(offsetof(UEOSCoreAuthLogout, OnCallback) == 0x000038, "Member 'UEOSCoreAuthLogout::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreAuthLinkAccount
// 0x0058 (0x0090 - 0x0038)
class UEOSCoreAuthLinkAccount final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_28CD[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreAuthLinkAccount* EOSAuthLinkAccount(class UObject* WorldContextObject, const struct FEOSAuthLinkAccountOptions& Options);

	void HandleCallback(const struct FEOSAuthLinkAccountCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreAuthLinkAccount">();
	}
	static class UEOSCoreAuthLinkAccount* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreAuthLinkAccount>();
	}
};
static_assert(alignof(UEOSCoreAuthLinkAccount) == 0x000008, "Wrong alignment on UEOSCoreAuthLinkAccount");
static_assert(sizeof(UEOSCoreAuthLinkAccount) == 0x000090, "Wrong size on UEOSCoreAuthLinkAccount");
static_assert(offsetof(UEOSCoreAuthLinkAccount, OnCallback) == 0x000038, "Member 'UEOSCoreAuthLinkAccount::OnCallback' has a wrong offset!");

// Class EOSCore.CoreMods
// 0x0000 (0x0030 - 0x0030)
class UCoreMods final : public UEOSCoreSubsystem
{
public:
	static class UCoreMods* GetMods(class UObject* WorldContextObject);

	EOSResult EOSModsCopyModInfo(class UObject* WorldContextObject, const struct FEOSModsCopyModInfoOptions& Options, struct FEOSModsModInfo* OutEnumeratedMods);
	void EOSModsEnumerateMods(class UObject* WorldContextObject, const struct FEOSModsEnumerateModsOptions& Options, const TDelegate<void(struct FEOSModsEnumerateModsCallbackInfo& Data)>& Callback);
	void EOSModsInstallMod(class UObject* WorldContextObject, const struct FEOSModsInstallModOptions& Options, const TDelegate<void(struct FEOSModsInstallModCallbackInfo& Data)>& Callback);
	void EOSModsUninstallMod(class UObject* WorldContextObject, const struct FEOSModsUninstallModOptions& Options, const TDelegate<void(struct FEOSModsUninstallModCallbackInfo& Data)>& Callback);
	void EOSModsUpdateMod(class UObject* WorldContextObject, const struct FEOSModsUpdateModOptions& Options, const TDelegate<void(struct FEOSModsUpdateModCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMods">();
	}
	static class UCoreMods* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMods>();
	}
};
static_assert(alignof(UCoreMods) == 0x000008, "Wrong alignment on UCoreMods");
static_assert(sizeof(UCoreMods) == 0x000030, "Wrong size on UCoreMods");

// Class EOSCore.EOSCoreAuthDeletePersistentAuth
// 0x0030 (0x0068 - 0x0038)
class UEOSCoreAuthDeletePersistentAuth final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_28D0[0x20];                                    // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreAuthDeletePersistentAuth* EOSAuthDeletePersistentAuthAsync(class UObject* WorldContextObject, const struct FEOSAuthDeletePersistentAuthOptions& Options);

	void HandleCallback(const struct FEOSAuthDeletePersistentAuthCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreAuthDeletePersistentAuth">();
	}
	static class UEOSCoreAuthDeletePersistentAuth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreAuthDeletePersistentAuth>();
	}
};
static_assert(alignof(UEOSCoreAuthDeletePersistentAuth) == 0x000008, "Wrong alignment on UEOSCoreAuthDeletePersistentAuth");
static_assert(sizeof(UEOSCoreAuthDeletePersistentAuth) == 0x000068, "Wrong size on UEOSCoreAuthDeletePersistentAuth");
static_assert(offsetof(UEOSCoreAuthDeletePersistentAuth, OnCallback) == 0x000038, "Member 'UEOSCoreAuthDeletePersistentAuth::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreAuthVerifyUserAuth
// 0x00D0 (0x0108 - 0x0038)
class UEOSCoreAuthVerifyUserAuth final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_28D2[0xC0];                                    // 0x0048(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreAuthVerifyUserAuth* EOSAuthVerifyUserAuthAsync(class UObject* WorldContextObject, const struct FEOSAuthVerifyUserAuthOptions& Options);

	void HandleCallback(const struct FEOSAuthVerifyUserAuthCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreAuthVerifyUserAuth">();
	}
	static class UEOSCoreAuthVerifyUserAuth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreAuthVerifyUserAuth>();
	}
};
static_assert(alignof(UEOSCoreAuthVerifyUserAuth) == 0x000008, "Wrong alignment on UEOSCoreAuthVerifyUserAuth");
static_assert(sizeof(UEOSCoreAuthVerifyUserAuth) == 0x000108, "Wrong size on UEOSCoreAuthVerifyUserAuth");
static_assert(offsetof(UEOSCoreAuthVerifyUserAuth, OnCallback) == 0x000038, "Member 'UEOSCoreAuthVerifyUserAuth::OnCallback' has a wrong offset!");

// Class EOSCore.CoreAuthentication
// 0x0050 (0x0080 - 0x0030)
class UCoreAuthentication final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_28D4[0x50];                                    // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FEOSNotificationId EOSAuthAddNotifyLoginStatusChanged(class UObject* WorldContextObject, const TDelegate<void(struct FEOSAuthLoginStatusChangedCallbackInfo& Data)>& Callback);
	static EOSResult EOSAuthCopyIdToken(class UObject* WorldContextObject, const struct FEOSAuthCopyIdTokenOptions& Options, struct FEOSAuthIdToken* OutIdToken);
	static EOSResult EOSAuthCopyUserAuthToken(class UObject* WorldContextObject, const struct FEOSAuthCopyUserAuthTokenOptions& Options, const struct FEOSEpicAccountId& LocalUserId, struct FEOSAuthToken* OutUserAuthToken);
	static struct FEOSEpicAccountId EOSAuthGetLoggedInAccountByIndex(class UObject* WorldContextObject, int32 Param_Index);
	static int32 EOSAuthGetLoggedInAccountsCount(class UObject* WorldContextObject);
	static EOSELoginStatus EOSAuthGetLoginStatus(class UObject* WorldContextObject, const struct FEOSEpicAccountId& LocalUserId);
	static EOSELoginStatus EOSAuthGetLoginStatusPure(class UObject* WorldContextObject, const struct FEOSEpicAccountId& LocalUserId);
	static struct FEOSEpicAccountId EOSAuthGetMergedAccountByIndex(class UObject* WorldContextObject, const struct FEOSEpicAccountId& LocalUserId, int32 Param_Index);
	static int32 EOSAuthGetMergedAccountsCount(class UObject* WorldContextObject, const struct FEOSEpicAccountId& LocalUserId);
	static EOSResult EOSAuthGetSelectedAccountId(class UObject* WorldContextObject, const struct FEOSEpicAccountId& LocalUserId, struct FEOSEpicAccountId* OutSelectedAccountId);
	static void EOSAuthQueryIdToken(class UObject* WorldContextObject, const struct FEOSAuthQueryIdTokenOptions& Options, const TDelegate<void(struct FEOSAuthQueryIdTokenCallbackInfo& Data)>& Callback);
	static void EOSAuthRemoveNotifyLoginStatusChanged(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSAuthVerifyIdToken(class UObject* WorldContextObject, const struct FEOSAuthVerifyIdTokenOptions& Options, const TDelegate<void(struct FEOSAuthVerifyIdTokenCallbackInfo& Data)>& Callback);
	static class UCoreAuthentication* GetAuthentication(class UObject* WorldContextObject);

	void EOSAuthDeletePersistentAuth(class UObject* WorldContextObject, const struct FEOSAuthDeletePersistentAuthOptions& Options, const TDelegate<void(struct FEOSAuthDeletePersistentAuthCallbackInfo& Data)>& Callback);
	void EOSAuthLinkAccount(class UObject* WorldContextObject, const struct FEOSAuthLinkAccountOptions& Options, const TDelegate<void(struct FEOSAuthLinkAccountCallbackInfo& Data)>& Callback);
	void EOSAuthLogin(class UObject* WorldContextObject, const struct FEOSAuthLoginOptions& Options, const TDelegate<void(struct FEOSAuthLoginCallbackInfo& Data)>& Callback);
	void EOSAuthLogout(class UObject* WorldContextObject, const struct FEOSAuthLogoutOptions& Options, const TDelegate<void(struct FEOSAuthLogoutCallbackInfo& Data)>& Callback);
	void EOSAuthVerifyUserAuth(class UObject* WorldContextObject, const struct FEOSAuthVerifyUserAuthOptions& Options, const TDelegate<void(struct FEOSAuthVerifyUserAuthCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreAuthentication">();
	}
	static class UCoreAuthentication* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreAuthentication>();
	}
};
static_assert(alignof(UCoreAuthentication) == 0x000008, "Wrong alignment on UCoreAuthentication");
static_assert(sizeof(UCoreAuthentication) == 0x000080, "Wrong size on UCoreAuthentication");

// Class EOSCore.EOSCorePlayerDataStorageDuplicateFile
// 0x0068 (0x00A0 - 0x0038)
class UEOSCorePlayerDataStorageDuplicateFile final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_28E3[0x58];                                    // 0x0048(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCorePlayerDataStorageDuplicateFile* EOSPlayerDataStorageDuplicateFileAsync(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageDuplicateFileOptions& DuplicateOptions);

	void HandleCallback(const struct FEOSPlayerDataStorageDuplicateFileCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCorePlayerDataStorageDuplicateFile">();
	}
	static class UEOSCorePlayerDataStorageDuplicateFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCorePlayerDataStorageDuplicateFile>();
	}
};
static_assert(alignof(UEOSCorePlayerDataStorageDuplicateFile) == 0x000008, "Wrong alignment on UEOSCorePlayerDataStorageDuplicateFile");
static_assert(sizeof(UEOSCorePlayerDataStorageDuplicateFile) == 0x0000A0, "Wrong size on UEOSCorePlayerDataStorageDuplicateFile");
static_assert(offsetof(UEOSCorePlayerDataStorageDuplicateFile, OnCallback) == 0x000038, "Member 'UEOSCorePlayerDataStorageDuplicateFile::OnCallback' has a wrong offset!");

// Class EOSCore.CoreChat
// 0x0020 (0x0050 - 0x0030)
class UCoreChat final : public UEOSCoreSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnChatMessageReceived;                             // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_28E5[0x10];                                    // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void ClearAllChatListeners();
	static class UCoreChat* GetChat();
	static void ListenForChatMessages(class UObject* WorldContextObject, const struct FEOSProductUserId& LocalUserId, const TDelegate<void(struct FEOSProductUserId& Sender, struct FEOSProductUserId& Receiver, const class FString& Message)>& Callback);
	static void SendChatMessage(class UObject* WorldContextObject, const struct FEOSProductUserId& LocalUserId, const struct FEOSProductUserId& Target, const class FString& Message, EEOSEPacketReliability Reliability);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChat">();
	}
	static class UCoreChat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChat>();
	}
};
static_assert(alignof(UCoreChat) == 0x000008, "Wrong alignment on UCoreChat");
static_assert(sizeof(UCoreChat) == 0x000050, "Wrong size on UCoreChat");
static_assert(offsetof(UCoreChat, OnChatMessageReceived) == 0x000030, "Member 'UCoreChat::OnChatMessageReceived' has a wrong offset!");

// Class EOSCore.CoreConnect
// 0x00A0 (0x00D0 - 0x0030)
class UCoreConnect final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_28EA[0xA0];                                    // 0x0030(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FEOSNotificationId EOSConnectAddNotifyAuthExpiration(class UObject* WorldContextObject, const TDelegate<void(struct FEOSConnectAuthExpirationCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSConnectAddNotifyLoginStatusChanged(class UObject* WorldContextObject, const TDelegate<void(struct FEOSConnectLoginStatusChangedCallbackInfo& Data)>& Callback);
	static EOSResult EOSConnectCopyIdToken(class UObject* WorldContextObject, const struct FEOSConnectCopyIdTokenOptions& Options, struct FEOSConnectIdToken* OutIdToken);
	static EOSResult EOSConnectCopyProductUserExternalAccountByAccountId(class UObject* WorldContextObject, const struct FEOSConnectCopyProductUserExternalAccountByAccountIdOptions& Options, struct FEOSConnectExternalAccountInfo* OutExternalAccountInfo);
	static EOSResult EOSConnectCopyProductUserExternalAccountByAccountType(class UObject* WorldContextObject, const struct FEOSConnectCopyProductUserExternalAccountByAccountTypeOptions& Options, struct FEOSConnectExternalAccountInfo* OutExternalAccountInfo);
	static EOSResult EOSConnectCopyProductUserExternalAccountByIndex(class UObject* WorldContextObject, const struct FEOSConnectCopyProductUserExternalAccountByIndexOptions& Options, struct FEOSConnectExternalAccountInfo* OutExternalAccountInfo);
	static EOSResult EOSConnectCopyProductUserInfo(class UObject* WorldContextObject, const struct FEOSConnectCopyProductUserInfoOptions& Options, struct FEOSConnectExternalAccountInfo* OutExternalAccountInfo);
	static struct FEOSProductUserId EOSConnectGetExternalAccountMapping(class UObject* WorldContextObject, const struct FEOSConnectGetExternalAccountMappingsOptions& Options);
	static struct FEOSProductUserId EOSConnectGetLoggedInUserByIndex(class UObject* WorldContextObject, int32 Param_Index);
	static int32 EOSConnectGetLoggedInUsersCount(class UObject* WorldContextObject);
	static EEOSELoginStatus EOSConnectGetLoginStatus(class UObject* WorldContextObject, const struct FEOSProductUserId& LocalUserId);
	static EEOSELoginStatus EOSConnectGetLoginStatusPure(class UObject* WorldContextObject, const struct FEOSProductUserId& LocalUserId);
	static int32 EOSConnectGetProductUserExternalAccountCount(class UObject* WorldContextObject, const struct FEOSConnectGetProductUserExternalAccountCountOptions& Options);
	static EOSResult EOSConnectGetProductUserIdMapping(class UObject* WorldContextObject, const struct FEOSConnectGetProductUserIdMappingOptions& Options, class FString* OutString);
	static void EOSConnectRemoveNotifyAuthExpiration(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSConnectRemoveNotifyLoginStatusChanged(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSConnectVerifyIdToken(class UObject* WorldContextObject, const struct FEOSConnectVerifyIdTokenOptions& Options, const TDelegate<void(struct FEOSConnectOnVerifyIdTokenCallback& Data)>& Callback);
	static class UCoreConnect* GetConnect(class UObject* WorldContextObject);

	void EOSConnectCreateDeviceId(class UObject* WorldContextObject, const struct FEOSConnectCreateDeviceIdOptions& Options, const TDelegate<void(struct FEOSConnectCreateDeviceIdCallbackInfo& Data)>& Callback);
	void EOSConnectCreateUser(class UObject* WorldContextObject, const struct FEOSConnectCreateUserOptions& Options, const TDelegate<void(struct FEOSConnectCreateUserCallbackInfo& Data)>& Callback);
	void EOSConnectDeleteDeviceId(class UObject* WorldContextObject, const struct FEOSConnectDeleteDeviceIdOptions& Options, const TDelegate<void(struct FEOSConnectDeleteDeviceIdCallbackInfo& Data)>& Callback);
	void EOSConnectLinkAccount(class UObject* WorldContextObject, const struct FEOSConnectLinkAccountOptions& Options, const TDelegate<void(struct FEOSConnectLinkAccountCallbackInfo& Data)>& Callback);
	void EOSConnectLogin(class UObject* WorldContextObject, const struct FEOSConnectLoginOptions& Options, const TDelegate<void(struct FEOSConnectLoginCallbackInfo& Data)>& Callback);
	void EOSConnectQueryExternalAccountMappings(class UObject* WorldContextObject, const struct FEOSConnectQueryExternalAccountMappingsOptions& Options, const TDelegate<void(struct FEOSConnectQueryExternalAccountMappingsCallbackInfo& Data)>& Callback);
	void EOSConnectQueryProductUserIdMappings(class UObject* WorldContextObject, const struct FEOSConnectQueryProductUserIdMappingsOptions& Options, const TDelegate<void(struct FEOSConnectQueryProductUserIdMappingsCallbackInfo& Data)>& Callback);
	void EOSConnectTransferDeviceIdAccount(class UObject* WorldContextObject, const struct FEOSConnectTransferDeviceIdAccountOptions& Options, const TDelegate<void(struct FEOSConnectTransferDeviceIdAccountCallbackInfo& Data)>& Callback);
	void EOSConnectUnlinkAccount(class UObject* WorldContextObject, const struct FEOSConnectUnlinkAccountOptions& Options, const TDelegate<void(struct FEOSConnectUnlinkAccountCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreConnect">();
	}
	static class UCoreConnect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreConnect>();
	}
};
static_assert(alignof(UCoreConnect) == 0x000008, "Wrong alignment on UCoreConnect");
static_assert(sizeof(UCoreConnect) == 0x0000D0, "Wrong size on UCoreConnect");

// Class EOSCore.EOSCoreConnectLogin
// 0x0050 (0x0088 - 0x0038)
class UEOSCoreConnectLogin final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_28FC[0x40];                                    // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreConnectLogin* EOSConnectLoginAsync(class UObject* WorldContextObject, const struct FEOSConnectLoginOptions& Options);

	void HandleCallback(const struct FEOSConnectLoginCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreConnectLogin">();
	}
	static class UEOSCoreConnectLogin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreConnectLogin>();
	}
};
static_assert(alignof(UEOSCoreConnectLogin) == 0x000008, "Wrong alignment on UEOSCoreConnectLogin");
static_assert(sizeof(UEOSCoreConnectLogin) == 0x000088, "Wrong size on UEOSCoreConnectLogin");
static_assert(offsetof(UEOSCoreConnectLogin, OnCallback) == 0x000038, "Member 'UEOSCoreConnectLogin::OnCallback' has a wrong offset!");

// Class EOSCore.CorePlayerDataStorage
// 0x0000 (0x0030 - 0x0030)
class UCorePlayerDataStorage final : public UEOSCoreSubsystem
{
public:
	static EOSResult EOSPlayerDataStorageCopyFileMetadataAtIndex(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageCopyFileMetadataAtIndexOptions& CopyFileMetadataOptions, struct FEOSPlayerDataStorageFileMetadata* OutMetadata);
	static EOSResult EOSPlayerDataStorageCopyFileMetadataByFilename(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageCopyFileMetadataByFilenameOptions& CopyFileMetadataOptions, struct FEOSPlayerDataStorageFileMetadata* OutMetadata);
	static EOSResult EOSPlayerDataStorageFileTransferRequestCancelRequest(class UObject* WorldContextObject, const struct FEOSHPlayerDataStorageFileTransferRequest& Handle);
	static EOSResult EOSPlayerDataStorageFileTransferRequestGetFilename(class UObject* WorldContextObject, const struct FEOSHPlayerDataStorageFileTransferRequest& Handle, int32 FilenameStringBufferSizeBytes, class FString* OutStringBuffer);
	static EOSResult EOSPlayerDataStorageFileTransferRequestGetFileRequestState(class UObject* WorldContextObject, const struct FEOSHPlayerDataStorageFileTransferRequest& Handle);
	static void EOSPlayerDataStorageFileTransferRequestRelease(class UObject* WorldContextObject, const struct FEOSHPlayerDataStorageFileTransferRequest& Handle);
	static EOSResult EOSPlayerDataStorageGetFileMetadataCount(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageGetFileMetadataCountOptions& GetFileMetadataCountOptions, int32* OutFileMetadataCount);
	static class UCorePlayerDataStorage* GetPlayerDataStorage(class UObject* WorldContextObject);

	EOSResult EOSPlayerDataStorageDeleteCache(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageDeleteCacheOptions& Options, const TDelegate<void(struct FEOSPlayerDataStorageDeleteCacheCallbackInfo& Data)>& Callback);
	void EOSPlayerDataStorageDeleteFile(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageDeleteFileOptions& DeleteOptions, const TDelegate<void(struct FEOSPlayerDataStorageDeleteFileCallbackInfo& Data)>& Callback);
	void EOSPlayerDataStorageDuplicateFile(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageDuplicateFileOptions& DuplicateOptions, const TDelegate<void(struct FEOSPlayerDataStorageDuplicateFileCallbackInfo& Data)>& Callback);
	void EOSPlayerDataStorageQueryFile(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageQueryFileOptions& QueryFileOptions, const TDelegate<void(struct FEOSPlayerDataStorageQueryFileCallbackInfo& Data)>& Callback);
	void EOSPlayerDataStorageQueryFileList(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageQueryFileListOptions& QueryFileListOptions, const TDelegate<void(struct FEOSPlayerDataStorageQueryFileListCallbackInfo& Data)>& Callback);
	void EOSPlayerDataStorageReadFile(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageReadFileOptions& ReadOptions, const TDelegate<void(struct FEOSPlayerDataStorageReadFileCallbackInfo& Data)>& Callback);
	void EOSPlayerDataStorageWriteFile(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageWriteFileOptions& WriteOptions, const TDelegate<void(struct FEOSPlayerDataStorageWriteFileCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerDataStorage">();
	}
	static class UCorePlayerDataStorage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerDataStorage>();
	}
};
static_assert(alignof(UCorePlayerDataStorage) == 0x000008, "Wrong alignment on UCorePlayerDataStorage");
static_assert(sizeof(UCorePlayerDataStorage) == 0x000030, "Wrong size on UCorePlayerDataStorage");

// Class EOSCore.EOSCoreConnectCreateUser
// 0x0028 (0x0060 - 0x0038)
class UEOSCoreConnectCreateUser final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2907[0x18];                                    // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreConnectCreateUser* EOSConnectCreateUserAsync(class UObject* WorldContextObject, const struct FEOSConnectCreateUserOptions& Options);

	void HandleCallback(const struct FEOSConnectCreateUserCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreConnectCreateUser">();
	}
	static class UEOSCoreConnectCreateUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreConnectCreateUser>();
	}
};
static_assert(alignof(UEOSCoreConnectCreateUser) == 0x000008, "Wrong alignment on UEOSCoreConnectCreateUser");
static_assert(sizeof(UEOSCoreConnectCreateUser) == 0x000060, "Wrong size on UEOSCoreConnectCreateUser");
static_assert(offsetof(UEOSCoreConnectCreateUser, OnCallback) == 0x000038, "Member 'UEOSCoreConnectCreateUser::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreConnectLinkAccount
// 0x0050 (0x0088 - 0x0038)
class UEOSCoreConnectLinkAccount final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2909[0x40];                                    // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreConnectLinkAccount* EOSConnectLinkAccountAsync(class UObject* WorldContextObject, const struct FEOSConnectLinkAccountOptions& Options);

	void HandleCallback(const struct FEOSConnectLinkAccountCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreConnectLinkAccount">();
	}
	static class UEOSCoreConnectLinkAccount* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreConnectLinkAccount>();
	}
};
static_assert(alignof(UEOSCoreConnectLinkAccount) == 0x000008, "Wrong alignment on UEOSCoreConnectLinkAccount");
static_assert(sizeof(UEOSCoreConnectLinkAccount) == 0x000088, "Wrong size on UEOSCoreConnectLinkAccount");
static_assert(offsetof(UEOSCoreConnectLinkAccount, OnCallback) == 0x000038, "Member 'UEOSCoreConnectLinkAccount::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreConnectUnlinkAccount
// 0x0048 (0x0080 - 0x0038)
class UEOSCoreConnectUnlinkAccount final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_290B[0x38];                                    // 0x0048(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreConnectUnlinkAccount* EOSConnectUnlinkAccountAsync(class UObject* WorldContextObject, const struct FEOSConnectUnlinkAccountOptions& Options);

	void HandleCallback(const struct FEOSConnectUnlinkAccountCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreConnectUnlinkAccount">();
	}
	static class UEOSCoreConnectUnlinkAccount* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreConnectUnlinkAccount>();
	}
};
static_assert(alignof(UEOSCoreConnectUnlinkAccount) == 0x000008, "Wrong alignment on UEOSCoreConnectUnlinkAccount");
static_assert(sizeof(UEOSCoreConnectUnlinkAccount) == 0x000080, "Wrong size on UEOSCoreConnectUnlinkAccount");
static_assert(offsetof(UEOSCoreConnectUnlinkAccount, OnCallback) == 0x000038, "Member 'UEOSCoreConnectUnlinkAccount::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreConnectCreateDeviceId
// 0x0030 (0x0068 - 0x0038)
class UEOSCoreConnectCreateDeviceId final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_290D[0x20];                                    // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreConnectCreateDeviceId* EOSConnectCreateDeviceIdAsync(class UObject* WorldContextObject, const struct FEOSConnectCreateDeviceIdOptions& Options);

	void HandleCallback(const struct FEOSConnectCreateDeviceIdCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreConnectCreateDeviceId">();
	}
	static class UEOSCoreConnectCreateDeviceId* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreConnectCreateDeviceId>();
	}
};
static_assert(alignof(UEOSCoreConnectCreateDeviceId) == 0x000008, "Wrong alignment on UEOSCoreConnectCreateDeviceId");
static_assert(sizeof(UEOSCoreConnectCreateDeviceId) == 0x000068, "Wrong size on UEOSCoreConnectCreateDeviceId");
static_assert(offsetof(UEOSCoreConnectCreateDeviceId, OnCallback) == 0x000038, "Member 'UEOSCoreConnectCreateDeviceId::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreConnectDeleteDeviceId
// 0x0028 (0x0060 - 0x0038)
class UEOSCoreConnectDeleteDeviceId final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_290F[0x18];                                    // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreConnectDeleteDeviceId* EOSConnectDeleteDeviceIdAsync(class UObject* WorldContextObject, const struct FEOSConnectDeleteDeviceIdOptions& Options);

	void HandleCallback(const struct FEOSConnectDeleteDeviceIdCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreConnectDeleteDeviceId">();
	}
	static class UEOSCoreConnectDeleteDeviceId* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreConnectDeleteDeviceId>();
	}
};
static_assert(alignof(UEOSCoreConnectDeleteDeviceId) == 0x000008, "Wrong alignment on UEOSCoreConnectDeleteDeviceId");
static_assert(sizeof(UEOSCoreConnectDeleteDeviceId) == 0x000060, "Wrong size on UEOSCoreConnectDeleteDeviceId");
static_assert(offsetof(UEOSCoreConnectDeleteDeviceId, OnCallback) == 0x000038, "Member 'UEOSCoreConnectDeleteDeviceId::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreConnectTransferDeviceIdAccount
// 0x0088 (0x00C0 - 0x0038)
class UEOSCoreConnectTransferDeviceIdAccount final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2912[0x78];                                    // 0x0048(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreConnectTransferDeviceIdAccount* EOSConnectTransferDeviceIdAccountAsync(class UObject* WorldContextObject, const struct FEOSConnectTransferDeviceIdAccountOptions& Options);

	void HandleCallback(const struct FEOSConnectTransferDeviceIdAccountCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreConnectTransferDeviceIdAccount">();
	}
	static class UEOSCoreConnectTransferDeviceIdAccount* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreConnectTransferDeviceIdAccount>();
	}
};
static_assert(alignof(UEOSCoreConnectTransferDeviceIdAccount) == 0x000008, "Wrong alignment on UEOSCoreConnectTransferDeviceIdAccount");
static_assert(sizeof(UEOSCoreConnectTransferDeviceIdAccount) == 0x0000C0, "Wrong size on UEOSCoreConnectTransferDeviceIdAccount");
static_assert(offsetof(UEOSCoreConnectTransferDeviceIdAccount, OnCallback) == 0x000038, "Member 'UEOSCoreConnectTransferDeviceIdAccount::OnCallback' has a wrong offset!");

// Class EOSCore.CoreSessions
// 0x00F0 (0x0120 - 0x0030)
class UCoreSessions final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_2915[0xF0];                                    // 0x0030(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static EOSResult EOSActiveSessionCopyInfo(class UObject* WorldContextObject, const struct FEOSHActiveSession& Handle, const struct FEOSActiveSessionCopyInfoOptions& Options, struct FEOSActiveSessionInfo* OutActiveSessionInfo);
	static struct FEOSProductUserId EOSActiveSessionGetRegisteredPlayerByIndex(class UObject* WorldContextObject, const struct FEOSHActiveSession& Handle, const struct FEOSActiveSessionGetRegisteredPlayerByIndexOptions& Options);
	static int32 EOSActiveSessionGetRegisteredPlayerCount(class UObject* WorldContextObject, const struct FEOSHActiveSession& Handle, const struct FEOSActiveSessionGetRegisteredPlayerCountOptions& Options);
	static void EOSActiveSessionRelease(class UObject* WorldContextObject, const struct FEOSHActiveSession& ActiveSessionHandle);
	static EOSResult EOSSessionDetailsCopyInfo(class UObject* WorldContextObject, const struct FEOSHSessionDetails& Handle, const struct FEOSSessionDetailsCopyInfoOptions& Options, struct FEOSSessionDetailsInfo* OutSessionInfo);
	static EOSResult EOSSessionDetailsCopySessionAttributeByIndex(class UObject* WorldContextObject, const struct FEOSHSessionDetails& Handle, const struct FEOSSessionDetailsCopySessionAttributeByIndexOptions& Options, struct FEOSSessionDetailsAttribute* OutSessionAttribute);
	static EOSResult EOSSessionDetailsCopySessionAttributeByKey(class UObject* WorldContextObject, const struct FEOSHSessionDetails& Handle, const struct FEOSSessionDetailsCopySessionAttributeByKeyOptions& Options, struct FEOSSessionDetailsAttribute* OutSessionAttribute);
	static int32 EOSSessionDetailsGetSessionAttributeCount(class UObject* WorldContextObject, const struct FEOSHSessionDetails& Handle, const struct FEOSSessionDetailsGetSessionAttributeCountOptions& Options);
	static void EOSSessionDetailsRelease(class UObject* WorldContextObject, const struct FEOSHSessionDetails& SessionHandle);
	static EOSResult EOSSessionModificationAddAttributeBool(class UObject* WorldContextObject, const struct FEOSHSessionModification& Handle, EEOSESessionAttributeAdvertisementType AdvertisementType, const class FString& Key, bool bValue);
	static EOSResult EOSSessionModificationAddAttributeDouble(class UObject* WorldContextObject, const struct FEOSHSessionModification& Handle, EEOSESessionAttributeAdvertisementType AdvertisementType, const class FString& Key, const class FString& Value);
	static EOSResult EOSSessionModificationAddAttributeInt64(class UObject* WorldContextObject, const struct FEOSHSessionModification& Handle, EEOSESessionAttributeAdvertisementType AdvertisementType, const class FString& Key, const class FString& Value);
	static EOSResult EOSSessionModificationAddAttributeString(class UObject* WorldContextObject, const struct FEOSHSessionModification& Handle, EEOSESessionAttributeAdvertisementType AdvertisementType, const class FString& Key, const class FString& Value);
	static void EOSSessionModificationRelease(class UObject* WorldContextObject, const struct FEOSHSessionModification& SessionModificationHandle);
	static EOSResult EOSSessionModificationRemoveAttribute(class UObject* WorldContextObject, const struct FEOSHSessionModification& Handle, const struct FEOSSessionModificationRemoveAttributeOptions& Options);
	static EOSResult EOSSessionModificationSetBucketId(class UObject* WorldContextObject, const struct FEOSHSessionModification& Handle, const struct FEOSSessionModificationSetBucketIdOptions& Options);
	static EOSResult EOSSessionModificationSetHostAddress(class UObject* WorldContextObject, const struct FEOSHSessionModification& Handle, const struct FEOSSessionModificationSetHostAddressOptions& Options);
	static EOSResult EOSSessionModificationSetInvitesAllowed(class UObject* WorldContextObject, const struct FEOSHSessionModification& Handle, const struct FEOSSessionModificationSetInvitesAllowedOptions& Options);
	static EOSResult EOSSessionModificationSetJoinInProgressAllowed(class UObject* WorldContextObject, const struct FEOSHSessionModification& Handle, const struct FEOSSessionModificationSetJoinInProgressAllowedOptions& Options);
	static EOSResult EOSSessionModificationSetMaxPlayers(class UObject* WorldContextObject, const struct FEOSHSessionModification& Handle, const struct FEOSSessionModificationSetMaxPlayersOptions& Options);
	static EOSResult EOSSessionModificationSetPermissionLevel(class UObject* WorldContextObject, const struct FEOSHSessionModification& Handle, const struct FEOSSessionModificationSetPermissionLevelOptions& Options);
	static struct FEOSNotificationId EOSSessionsAddNotifyJoinSessionAccepted(class UObject* WorldContextObject, const TDelegate<void(struct FEOSSessionsJoinSessionAcceptedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSSessionsAddNotifySessionInviteAccepted(class UObject* WorldContextObject, const TDelegate<void(struct FEOSSessionsSessionInviteAcceptedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSSessionsAddNotifySessionInviteReceived(class UObject* WorldContextObject, const TDelegate<void(struct FEOSSessionsSessionInviteReceivedCallbackInfo& Data)>& Callback);
	static EOSResult EOSSessionsCopyActiveSessionHandle(class UObject* WorldContextObject, const struct FEOSSessionsCopyActiveSessionHandleOptions& Options, struct FEOSHActiveSession* OutSessionHandle);
	static EOSResult EOSSessionsCopySessionHandleByInviteId(class UObject* WorldContextObject, const struct FEOSSessionsCopySessionHandleByInviteIdOptions& Options, struct FEOSHSessionDetails* OutSessionHandle);
	static EOSResult EOSSessionsCopySessionHandleByUiEventId(class UObject* WorldContextObject, const struct FEOSSessionsCopySessionHandleByUiEventIdOptions& Options, struct FEOSHSessionDetails* OutSessionHandle);
	static EOSResult EOSSessionsCopySessionHandleForPresence(class UObject* WorldContextObject, const struct FEOSSessionsCopySessionHandleForPresenceOptions& Options, struct FEOSHSessionDetails* OutSessionHandle);
	static EOSResult EOSSessionsCreateSessionModification(class UObject* WorldContextObject, const struct FEOSSessionsCreateSessionModificationOptions& Options, struct FEOSHSessionModification* OutSessionModificationHandle);
	static EOSResult EOSSessionsCreateSessionSearch(class UObject* WorldContextObject, const struct FEOSSessionsCreateSessionSearchOptions& Options, struct FEOSHSessionSearch* OutSessionSearchHandle);
	static EOSResult EOSSessionsDumpSessionState(class UObject* WorldContextObject, const struct FEOSSessionsDumpSessionStateOptions& Options);
	static EOSResult EOSSessionSearchCopySearchResultByIndex(class UObject* WorldContextObject, const struct FEOSHSessionSearch& Handle, const struct FEOSSessionSearchCopySearchResultByIndexOptions& Options, struct FEOSHSessionDetails* OutSessionHandle);
	static int32 EOSSessionSearchGetSearchResultCount(class UObject* WorldContextObject, const struct FEOSHSessionSearch& Handle, const struct FEOSSessionSearchGetSearchResultCountOptions& Options);
	static void EOSSessionSearchRelease(class UObject* WorldContextObject, const struct FEOSHSessionSearch& SessionSearchHandle);
	static EOSResult EOSSessionSearchRemoveParameter(class UObject* WorldContextObject, const struct FEOSHSessionSearch& Handle, const struct FEOSSessionSearchRemoveParameterOptions& Options);
	static EOSResult EOSSessionSearchSetMaxResults(class UObject* WorldContextObject, const struct FEOSHSessionSearch& Handle, const struct FEOSSessionSearchSetMaxResultsOptions& Options);
	static EOSResult EOSSessionSearchSetParameterBool(class UObject* WorldContextObject, const struct FEOSHSessionSearch& Handle, const class FString& Key, bool bValue, EEOSEComparisonOp ComparisonOp);
	static EOSResult EOSSessionSearchSetParameterDouble(class UObject* WorldContextObject, const struct FEOSHSessionSearch& Handle, const class FString& Key, const class FString& Value, EEOSEComparisonOp ComparisonOp);
	static EOSResult EOSSessionSearchSetParameterInt64(class UObject* WorldContextObject, const struct FEOSHSessionSearch& Handle, const class FString& Key, const class FString& Value, EEOSEComparisonOp ComparisonOp);
	static EOSResult EOSSessionSearchSetParameterString(class UObject* WorldContextObject, const struct FEOSHSessionSearch& Handle, const class FString& Key, const class FString& Value, EEOSEComparisonOp ComparisonOp);
	static EOSResult EOSSessionSearchSetSessionId(class UObject* WorldContextObject, const struct FEOSHSessionSearch& Handle, const struct FEOSSessionSearchSetSessionIdOptions& Options);
	static EOSResult EOSSessionSearchSetTargetUserId(class UObject* WorldContextObject, const struct FEOSHSessionSearch& Handle, const struct FEOSSessionSearchSetTargetUserIdOptions& Options);
	static int32 EOSSessionsGetInviteCount(class UObject* WorldContextObject, const struct FEOSSessionsGetInviteCountOptions& Options);
	static EOSResult EOSSessionsGetInviteIdByIndex(class UObject* WorldContextObject, const struct FEOSSessionsGetInviteIdByIndexOptions& Options, class FString* OutBuffer);
	static EOSResult EOSSessionsIsUserInSession(class UObject* WorldContextObject, const struct FEOSSessionsIsUserInSessionOptions& Options);
	static void EOSSessionsRemoveNotifyJoinSessionAccepted(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSSessionsRemoveNotifySessionInviteAccepted(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static EOSResult EOSSessionsUpdateSessionModification(class UObject* WorldContextObject, const struct FEOSSessionsUpdateSessionModificationOptions& Options, struct FEOSHSessionModification* OutSessionModificationHandle);
	static class UCoreSessions* GetSessions(class UObject* WorldContextObject);

	void EOSSessionsDestroySession(class UObject* WorldContextObject, const struct FEOSSessionsDestroySessionOptions& Options, const TDelegate<void(struct FEOSSessionsDestroySessionCallbackInfo& Data)>& Callback);
	void EOSSessionSearchFind(class UObject* WorldContextObject, const struct FEOSHSessionSearch& Handle, const struct FEOSSessionSearchFindOptions& Options, const TDelegate<void(struct FEOSSessionSearchFindCallbackInfo& Data)>& Callback);
	void EOSSessionsEndSession(class UObject* WorldContextObject, const struct FEOSSessionsEndSessionOptions& Options, const TDelegate<void(struct FEOSSessionsEndSessionCallbackInfo& Data)>& Callback);
	void EOSSessionsJoinSession(class UObject* WorldContextObject, const struct FEOSSessionsJoinSessionOptions& Options, const TDelegate<void(struct FEOSSessionsJoinSessionCallbackInfo& Data)>& Callback);
	void EOSSessionsQueryInvites(class UObject* WorldContextObject, const struct FEOSSessionsQueryInvitesOptions& Options, const TDelegate<void(struct FEOSSessionsQueryInvitesCallbackInfo& Data)>& Callback);
	void EOSSessionsRegisterPlayers(class UObject* WorldContextObject, const struct FEOSSessionsRegisterPlayersOptions& Options, const TDelegate<void(struct FEOSSessionsRegisterPlayersCallbackInfo& Data)>& Callback);
	void EOSSessionsRejectInvite(class UObject* WorldContextObject, const struct FEOSSessionsRejectInviteOptions& Options, const TDelegate<void(struct FEOSSessionsRejectInviteCallbackInfo& Data)>& Callback);
	void EOSSessionsRemoveNotifySessionInviteReceived(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	void EOSSessionsSendInvite(class UObject* WorldContextObject, const struct FEOSSessionsSendInviteOptions& Options, const TDelegate<void(struct FEOSSessionsSendInviteCallbackInfo& Data)>& Callback);
	void EOSSessionsStartSession(class UObject* WorldContextObject, const struct FEOSSessionsStartSessionOptions& Options, const TDelegate<void(struct FEOSSessionsStartSessionCallbackInfo& Data)>& Callback);
	void EOSSessionsUnregisterPlayers(class UObject* WorldContextObject, const struct FEOSSessionsUnregisterPlayersOptions& Options, const TDelegate<void(struct FEOSSessionsUnregisterPlayersCallbackInfo& Data)>& Callback);
	void EOSSessionsUpdateSession(class UObject* WorldContextObject, const struct FEOSSessionsUpdateSessionOptions& Options, const TDelegate<void(struct FEOSSessionsUpdateSessionCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSessions">();
	}
	static class UCoreSessions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSessions>();
	}
};
static_assert(alignof(UCoreSessions) == 0x000008, "Wrong alignment on UCoreSessions");
static_assert(sizeof(UCoreSessions) == 0x000120, "Wrong size on UCoreSessions");

// Class EOSCore.EOSCoreConnectQueryExternalAccountMappings
// 0x0058 (0x0090 - 0x0038)
class UEOSCoreConnectQueryExternalAccountMappings final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_294B[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreConnectQueryExternalAccountMappings* EOSConnectQueryExternalAccountMappingsAsync(class UObject* WorldContextObject, const struct FEOSConnectQueryExternalAccountMappingsOptions& Options);

	void HandleCallback(const struct FEOSConnectQueryExternalAccountMappingsCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreConnectQueryExternalAccountMappings">();
	}
	static class UEOSCoreConnectQueryExternalAccountMappings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreConnectQueryExternalAccountMappings>();
	}
};
static_assert(alignof(UEOSCoreConnectQueryExternalAccountMappings) == 0x000008, "Wrong alignment on UEOSCoreConnectQueryExternalAccountMappings");
static_assert(sizeof(UEOSCoreConnectQueryExternalAccountMappings) == 0x000090, "Wrong size on UEOSCoreConnectQueryExternalAccountMappings");
static_assert(offsetof(UEOSCoreConnectQueryExternalAccountMappings, OnCallback) == 0x000038, "Member 'UEOSCoreConnectQueryExternalAccountMappings::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreConnectQueryProductUserIdMappings
// 0x0058 (0x0090 - 0x0038)
class UEOSCoreConnectQueryProductUserIdMappings final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_294D[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreConnectQueryProductUserIdMappings* EOSConnectQueryProductUserIdMappingsAsync(class UObject* WorldContextObject, const struct FEOSConnectQueryProductUserIdMappingsOptions& Options);

	void HandleCallback(const struct FEOSConnectQueryProductUserIdMappingsCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreConnectQueryProductUserIdMappings">();
	}
	static class UEOSCoreConnectQueryProductUserIdMappings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreConnectQueryProductUserIdMappings>();
	}
};
static_assert(alignof(UEOSCoreConnectQueryProductUserIdMappings) == 0x000008, "Wrong alignment on UEOSCoreConnectQueryProductUserIdMappings");
static_assert(sizeof(UEOSCoreConnectQueryProductUserIdMappings) == 0x000090, "Wrong size on UEOSCoreConnectQueryProductUserIdMappings");
static_assert(offsetof(UEOSCoreConnectQueryProductUserIdMappings, OnCallback) == 0x000038, "Member 'UEOSCoreConnectQueryProductUserIdMappings::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCorePresenceQueryPresence
// 0x0068 (0x00A0 - 0x0038)
class UEOSCorePresenceQueryPresence final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_294F[0x58];                                    // 0x0048(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCorePresenceQueryPresence* EOSPresenceQueryPresenceAsync(class UObject* WorldContextObject, const struct FEOSPresenceQueryPresenceOptions& Options);

	void HandleCallback(const struct FEOSPresenceQueryPresenceCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCorePresenceQueryPresence">();
	}
	static class UEOSCorePresenceQueryPresence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCorePresenceQueryPresence>();
	}
};
static_assert(alignof(UEOSCorePresenceQueryPresence) == 0x000008, "Wrong alignment on UEOSCorePresenceQueryPresence");
static_assert(sizeof(UEOSCorePresenceQueryPresence) == 0x0000A0, "Wrong size on UEOSCorePresenceQueryPresence");
static_assert(offsetof(UEOSCorePresenceQueryPresence, OnCallback) == 0x000038, "Member 'UEOSCorePresenceQueryPresence::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLibrary
// 0x0000 (0x0028 - 0x0028)
class UEOSCoreLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BreakUIEventIdStruct(const struct FEOSUIEventId& EventId, class FString* OutEventId);
	static class FString CoreBytesToString(const TArray<uint8>& Data);
	static TArray<uint8> CoreStringToByte(const class FString& String);
	static bool EOS_Initialized(class UObject* WorldContextObject);
	static void EOS_Success(EOSResult Status, ESuccessFail* Result);
	static EOSResult EOSByteArrayToString(const TArray<uint8>& Array, int32 Length, class FString* String);
	static EOSResult EOSContinuanceTokenToString(const struct FContinuanceToken& ID, class FString* String);
	static struct FEOSEpicAccountId EOSEpicAccountIdFromString(const class FString& String);
	static bool EOSEpicAccountIdIsValid(const struct FEOSEpicAccountId& ID);
	static bool EOSEpicAccountIdIsValidPure(const struct FEOSEpicAccountId& ID);
	static EOSResult EOSEpicAccountIdToString(const struct FEOSEpicAccountId& ID, class FString* String);
	static bool EOSEResultIsOperationComplete(EOSResult Result);
	static class FString EOSEResultToString(EOSResult Result);
	static struct FEOSProductUserId EOSProductUserIdFromString(const class FString& String);
	static bool EOSProductUserIdIsValid(const struct FEOSProductUserId& ID);
	static bool EOSProductUserIdIsValidPure(const struct FEOSProductUserId& ID);
	static EOSResult EOSProductUserIdToString(const struct FEOSProductUserId& ID, class FString* String);
	static struct FDateTime FromUnixTimestamp(const class FString& Timestamp);
	static bool GetBool(const struct FEOSSessionSetting& Settings, class FString* Key);
	static struct FEOSEpicAccountId GetCurrentAccountId(class UObject* WorldContextObject, int32 UserIndex);
	static struct FEOSProductUserId GetCurrentProductId(class UObject* WorldContextObject, int32 UserIndex);
	static int32 GetInteger(const struct FEOSSessionSetting& Settings, class FString* Key);
	static bool GetLobbyAttributeBool(const struct FEOSLobbyAttributeData& Data);
	static class FString GetLobbyAttributeDouble(const struct FEOSLobbyAttributeData& Data);
	static class FString GetLobbyAttributeInt64(const struct FEOSLobbyAttributeData& Data);
	static class FString GetLobbyAttributeString(const struct FEOSLobbyAttributeData& Data);
	static bool GetSessionAttributeBool(const struct FEOSSessionsAttributeData& Data);
	static class FString GetSessionAttributeDouble(const struct FEOSSessionsAttributeData& Data);
	static class FString GetSessionAttributeInt64(const struct FEOSSessionsAttributeData& Data);
	static class FString GetSessionAttributeString(const struct FEOSSessionsAttributeData& Data);
	static class FString GetString(const struct FEOSSessionSetting& Settings, class FString* Key);
	static bool IsEpicAccountIdIdenticalWith(const struct FEOSEpicAccountId& A, const struct FEOSEpicAccountId& B);
	static bool IsProductUserIdIdenticalWith(const struct FEOSProductUserId& A, const struct FEOSProductUserId& B);
	static void ListenForEOSMessages(class UObject* WorldContextObject, const TDelegate<void(const class FString& Category, const class FString& Message, EEOSLogLevel EOSLogLevel)>& Callback);
	static void Login(class UObject* WorldContextObject, class APlayerController* PlayerController, const class FString& LoginId, const class FString& Password, EEOSLoginCredentialType AuthType, EEOSEExternalCredentialType CredentialsType, const class FString& AdditionalData, const TDelegate<void(bool bWasSuccessful, const class FString& ErrorStr)>& Callback);
	static struct FEOSSessionSetting MakeBool(bool Value);
	static struct FEOSSessionSetting MakeInteger(int32 Value);
	static struct FEOSAntiCheatCommonLogEventParamPair MakeParamInt32(int32 Value);
	static struct FEOSAntiCheatCommonLogEventParamPair MakeParamInt64(int64 Value);
	static struct FEOSAntiCheatCommonLogEventParamPair MakeParamString(const class FString& String);
	static struct FEOSSessionSearchSetting MakeSearchBool(bool Value);
	static struct FEOSSessionSearchSetting MakeSearchInteger(int32 Value);
	static struct FEOSSessionSearchSetting MakeSearchString(const class FString& Value);
	static struct FEOSSessionSetting MakeString(const class FString& Value);
	static void RemoveListenForEOSMessages(class UObject* WorldContextObject);
	static bool UpdateUniqueNetIdFromOSS(class APlayerController* PlayerController);

	EOSEApplicationStatus EOSPlatformGetApplicationStatus(class UObject* WorldContextObject);
	EOSResult EOSPlatformGetDesktopCrossplayStatus(class UObject* WorldContextObject, const struct FEOSPlatformGetDesktopCrossplayStatusOptions& Options, struct FEOSPlatformGetDesktopCrossplayStatusInfo* OutDesktopCrossplayStatusInfo);
	EOSENetworkStatus EOSPlatformGetNetworkStatus(class UObject* WorldContextObject);
	EOSResult EOSPlatformSetApplicationStatus(class UObject* WorldContextObject, const EOSEApplicationStatus NewStatus);
	EOSResult EOSPlatformSetNetworkStatus(class UObject* WorldContextObject, EOSENetworkStatus NewStatus);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLibrary">();
	}
	static class UEOSCoreLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLibrary>();
	}
};
static_assert(alignof(UEOSCoreLibrary) == 0x000008, "Wrong alignment on UEOSCoreLibrary");
static_assert(sizeof(UEOSCoreLibrary) == 0x000028, "Wrong size on UEOSCoreLibrary");

// Class EOSCore.CoreCustomInvites
// 0x00F0 (0x0120 - 0x0030)
class UCoreCustomInvites final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_296F[0xF0];                                    // 0x0030(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FEOSNotificationId EOSCustomInvitesAddNotifyCustomInviteAccepted(class UObject* WorldContextObject, const TDelegate<void(struct FEOSCustomInvitesOnCustomInviteAcceptedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSCustomInvitesAddNotifyCustomInviteReceived(class UObject* WorldContextObject, const struct FEOSCustomInvitesAddNotifyCustomInviteReceivedOptions& Options, const TDelegate<void(struct FEOSCustomInvitesOnCustomInviteReceivedCallbackInfo& Data)>& Callback);
	static EOSResult EOSCustomInvitesFinalizeInvite(class UObject* WorldContextObject, const struct FEOSCustomInvitesFinalizeInviteOptions& Options);
	static void EOSCustomInvitesRemoveNotifyCustomInviteAccepted(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSCustomInvitesRemoveNotifyCustomInviteReceived(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSCustomInvitesSendCustomInvite(class UObject* WorldContextObject, const struct FEOSCustomInvitesSendCustomInviteOptions& Options, const TDelegate<void(struct FEOSCustomInvitesOnSendCustomInviteCallbackInfo& Data)>& Callback);
	static EOSResult EOSCustomInvitesSetCustomInvite(class UObject* WorldContextObject, const struct FEOSCustomInvitesSetCustomInviteOptions& Options);
	static class UCoreCustomInvites* GetCustomInvites(class UObject* WorldContextObject);

	struct FEOSNotificationId EOSCustomInvitesAddNotifyCustomInviteRejected(class UObject* WorldContextObject, const struct FEOSCustomInvitesAddNotifyCustomInviteRejectedOptions& Options, const TDelegate<void(struct FEOSCustomInvitesCustomInviteRejectedCallbackInfo& Data)>& Callback);
	void EOSCustomInvitesRemoveNotifyCustomInviteRejected(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCustomInvites">();
	}
	static class UCoreCustomInvites* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCustomInvites>();
	}
};
static_assert(alignof(UCoreCustomInvites) == 0x000008, "Wrong alignment on UCoreCustomInvites");
static_assert(sizeof(UCoreCustomInvites) == 0x000120, "Wrong size on UCoreCustomInvites");

// Class EOSCore.CoreEcom
// 0x0000 (0x0030 - 0x0030)
class UCoreEcom final : public UEOSCoreSubsystem
{
public:
	static EOSResult EOSEcomCopyEntitlementById(class UObject* WorldContextObject, const struct FEOSEcomCopyEntitlementByIdOptions& Options, struct FEOSEcomEntitlement* OutEntitlement);
	static EOSResult EOSEcomCopyEntitlementByIndex(class UObject* WorldContextObject, const struct FEOSEcomCopyEntitlementByIndexOptions& Options, struct FEOSEcomEntitlement* OutEntitlement);
	static EOSResult EOSEcomCopyEntitlementByNameAndIndex(class UObject* WorldContextObject, const struct FEOSEcomCopyEntitlementByNameAndIndexOptions& Options, struct FEOSEcomEntitlement* OutEntitlement);
	static EOSResult EOSEcomCopyItemById(class UObject* WorldContextObject, const struct FEOSEcomCopyItemByIdOptions& Options, struct FEOSEcomCatalogItem* OutItem);
	static EOSResult EOSEcomCopyItemImageInfoByIndex(class UObject* WorldContextObject, const struct FEOSEcomCopyItemImageInfoByIndexOptions& Options, struct FEOSEcomKeyImageInfo* OutImageInfo);
	static EOSResult EOSEcomCopyItemReleaseByIndex(class UObject* WorldContextObject, const struct FEOSEcomCopyItemReleaseByIndexOptions& Options, struct FEOSEcomCatalogRelease* OutRelease);
	static EOSResult EOSEcomCopyOfferById(class UObject* WorldContextObject, const struct FEOSEcomCopyOfferByIdOptions& Options, struct FEOSEcomCatalogOffer* OutOffer);
	static EOSResult EOSEcomCopyOfferByIndex(class UObject* WorldContextObject, const struct FEOSEcomCopyOfferByIndexOptions& Options, struct FEOSEcomCatalogOffer* OutOffer);
	static EOSResult EOSEcomCopyOfferImageInfoByIndex(class UObject* WorldContextObject, const struct FEOSEcomCopyOfferImageInfoByIndexOptions& Options, struct FEOSEcomKeyImageInfo* OutImageInfo);
	static EOSResult EOSEcomCopyOfferItemByIndex(class UObject* WorldContextObject, const struct FEOSEcomCopyOfferItemByIndexOptions& Options, struct FEOSEcomCatalogItem* OutItem);
	static EOSResult EOSEcomCopyTransactionById(class UObject* WorldContextObject, const struct FEOSEcomCopyTransactionByIdOptions& Options, struct FEOSEcomHTransaction* OutTransaction);
	static EOSResult EOSEcomCopyTransactionByIndex(class UObject* WorldContextObject, const struct FEOSEcomCopyTransactionByIndexOptions& Options, struct FEOSEcomHTransaction* OutTransaction);
	static int32 EOSEcomGetEntitlementsByNameCount(class UObject* WorldContextObject, const struct FEOSEcomGetEntitlementsByNameCountOptions& Options);
	static int32 EOSEcomGetEntitlementsCount(class UObject* WorldContextObject, const struct FEOSEcomGetEntitlementsCountOptions& Options);
	static int32 EOSEcomGetItemImageInfoCount(class UObject* WorldContextObject, const struct FEOSEcomGetItemImageInfoCountOptions& Options);
	static int32 EOSEcomGetItemReleaseCount(class UObject* WorldContextObject, const struct FEOSEcomGetItemReleaseCountOptions& Options);
	static int32 EOSEcomGetOfferCount(class UObject* WorldContextObject, const struct FEOSEcomGetOfferCountOptions& Options);
	static int32 EOSEcomGetOfferImageInfoCount(class UObject* WorldContextObject, const struct FEOSEcomGetOfferImageInfoCountOptions& Options);
	static int32 EOSEcomGetOfferItemCount(class UObject* WorldContextObject, const struct FEOSEcomGetOfferItemCountOptions& Options);
	static int32 EOSEcomGetTransactionCount(class UObject* WorldContextObject, const struct FEOSEcomGetTransactionCountOptions& Options);
	static EOSResult EOSEcomTransaction_CopyEntitlementByIndex(class UObject* WorldContextObject, const struct FEOSEcomHTransaction& Handle, const struct FEOSEcomTransactionCopyEntitlementByIndexOptions& Options, struct FEOSEcomEntitlement* OutEntitlement);
	static int32 EOSEcomTransaction_GetEntitlementsCount(class UObject* WorldContextObject, const struct FEOSEcomHTransaction& Handle, const struct FEOSEcomTransactionGetEntitlementsCountOptions& Options);
	static EOSResult EOSEcomTransaction_GetTransactionId(class UObject* WorldContextObject, const struct FEOSEcomHTransaction& Handle, class FString* OutTransactionId);
	static class UCoreEcom* GetEcom(class UObject* WorldContextObject);

	void EOSEcomCheckout(class UObject* WorldContextObject, const struct FEOSEcomCheckoutOptions& Options, const TDelegate<void(struct FEOSEcomCheckoutCallbackInfo& Data)>& Callback);
	EOSResult EOSEcomCopyLastRedeemedEntitlementByIndex(class UObject* WorldContextObject, const struct FEOSEcomCopyLastRedeemedEntitlementByIndexOptions& Options, class FString* OutRedeemedEntitlementId);
	int32 EOSEcomGetLastRedeemedEntitlementsCount(class UObject* WorldContextObject, const struct FEOSEcomGetLastRedeemedEntitlementsCountOptions& Options);
	void EOSEcomQueryEntitlements(class UObject* WorldContextObject, const struct FEOSEcomQueryEntitlementsOptions& Options, const TDelegate<void(struct FEOSEcomQueryEntitlementsCallbackInfo& Data)>& Callback);
	void EOSEcomQueryEntitlementToken(class UObject* WorldContextObject, const struct FEOSEcomQueryEntitlementTokenOptions& Options, const TDelegate<void(struct FEOSEcomQueryEntitlementTokenCallbackInfo& Data)>& Callback);
	void EOSEcomQueryOffers(class UObject* WorldContextObject, const struct FEOSEcomQueryOffersOptions& Options, const TDelegate<void(struct FEOSEcomQueryOffersCallbackInfo& Data)>& Callback);
	void EOSEcomQueryOwnership(class UObject* WorldContextObject, const struct FEOSEcomQueryOwnershipOptions& Options, const TDelegate<void(struct FEOSEcomQueryOwnershipCallbackInfo& Data)>& Callback);
	void EOSEcomQueryOwnershipToken(class UObject* WorldContextObject, const struct FEOSEcomQueryOwnershipTokenOptions& Options, const TDelegate<void(struct FEOSEcomQueryOwnershipTokenCallbackInfo& Data)>& Callback);
	void EOSEcomRedeemEntitlements(class UObject* WorldContextObject, const struct FEOSEcomRedeemEntitlementsOptions& Options, const TDelegate<void(struct FEOSEcomRedeemEntitlementsCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreEcom">();
	}
	static class UCoreEcom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreEcom>();
	}
};
static_assert(alignof(UCoreEcom) == 0x000008, "Wrong alignment on UCoreEcom");
static_assert(sizeof(UCoreEcom) == 0x000030, "Wrong size on UCoreEcom");

// Class EOSCore.EOSCoreEcomQueryOwnership
// 0x0068 (0x00A0 - 0x0038)
class UEOSCoreEcomQueryOwnership final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2992[0x58];                                    // 0x0048(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreEcomQueryOwnership* EOSEcomQueryOwnershipAsync(class UObject* WorldContextObject, const struct FEOSEcomQueryOwnershipOptions& Options);

	void HandleCallback(const struct FEOSEcomQueryOwnershipCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreEcomQueryOwnership">();
	}
	static class UEOSCoreEcomQueryOwnership* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreEcomQueryOwnership>();
	}
};
static_assert(alignof(UEOSCoreEcomQueryOwnership) == 0x000008, "Wrong alignment on UEOSCoreEcomQueryOwnership");
static_assert(sizeof(UEOSCoreEcomQueryOwnership) == 0x0000A0, "Wrong size on UEOSCoreEcomQueryOwnership");
static_assert(offsetof(UEOSCoreEcomQueryOwnership, OnCallback) == 0x000038, "Member 'UEOSCoreEcomQueryOwnership::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreEcomQueryOwnershipToken
// 0x0070 (0x00A8 - 0x0038)
class UEOSCoreEcomQueryOwnershipToken final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2994[0x60];                                    // 0x0048(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreEcomQueryOwnershipToken* EOSEcomQueryOwnershipTokenAsync(class UObject* WorldContextObject, const struct FEOSEcomQueryOwnershipTokenOptions& Options);

	void HandleCallback(const struct FEOSEcomQueryOwnershipTokenCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreEcomQueryOwnershipToken">();
	}
	static class UEOSCoreEcomQueryOwnershipToken* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreEcomQueryOwnershipToken>();
	}
};
static_assert(alignof(UEOSCoreEcomQueryOwnershipToken) == 0x000008, "Wrong alignment on UEOSCoreEcomQueryOwnershipToken");
static_assert(sizeof(UEOSCoreEcomQueryOwnershipToken) == 0x0000A8, "Wrong size on UEOSCoreEcomQueryOwnershipToken");
static_assert(offsetof(UEOSCoreEcomQueryOwnershipToken, OnCallback) == 0x000038, "Member 'UEOSCoreEcomQueryOwnershipToken::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreEcomQueryEntitlements
// 0x0060 (0x0098 - 0x0038)
class UEOSCoreEcomQueryEntitlements final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2996[0x50];                                    // 0x0048(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreEcomQueryEntitlements* EOSEcomQueryEntitlementsAsync(class UObject* WorldContextObject, const struct FEOSEcomQueryEntitlementsOptions& Options);

	void HandleCallback(const struct FEOSEcomQueryEntitlementsCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreEcomQueryEntitlements">();
	}
	static class UEOSCoreEcomQueryEntitlements* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreEcomQueryEntitlements>();
	}
};
static_assert(alignof(UEOSCoreEcomQueryEntitlements) == 0x000008, "Wrong alignment on UEOSCoreEcomQueryEntitlements");
static_assert(sizeof(UEOSCoreEcomQueryEntitlements) == 0x000098, "Wrong size on UEOSCoreEcomQueryEntitlements");
static_assert(offsetof(UEOSCoreEcomQueryEntitlements, OnCallback) == 0x000038, "Member 'UEOSCoreEcomQueryEntitlements::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreEcomQueryOffers
// 0x0058 (0x0090 - 0x0038)
class UEOSCoreEcomQueryOffers final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2998[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreEcomQueryOffers* EOSEcomQueryOffersAsync(class UObject* WorldContextObject, const struct FEOSEcomQueryOffersOptions& Options);

	void HandleCallback(const struct FEOSEcomQueryOffersCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreEcomQueryOffers">();
	}
	static class UEOSCoreEcomQueryOffers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreEcomQueryOffers>();
	}
};
static_assert(alignof(UEOSCoreEcomQueryOffers) == 0x000008, "Wrong alignment on UEOSCoreEcomQueryOffers");
static_assert(sizeof(UEOSCoreEcomQueryOffers) == 0x000090, "Wrong size on UEOSCoreEcomQueryOffers");
static_assert(offsetof(UEOSCoreEcomQueryOffers, OnCallback) == 0x000038, "Member 'UEOSCoreEcomQueryOffers::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLobbySendInvite
// 0x0078 (0x00B0 - 0x0038)
class UEOSCoreLobbySendInvite final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_299A[0x68];                                    // 0x0048(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLobbySendInvite* EOSLobbySendInviteAsync(class UObject* WorldContextObject, const struct FEOSLobbySendInviteOptions& Options);

	void HandleCallback(const struct FEOSLobbySendInviteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLobbySendInvite">();
	}
	static class UEOSCoreLobbySendInvite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLobbySendInvite>();
	}
};
static_assert(alignof(UEOSCoreLobbySendInvite) == 0x000008, "Wrong alignment on UEOSCoreLobbySendInvite");
static_assert(sizeof(UEOSCoreLobbySendInvite) == 0x0000B0, "Wrong size on UEOSCoreLobbySendInvite");
static_assert(offsetof(UEOSCoreLobbySendInvite, OnCallback) == 0x000038, "Member 'UEOSCoreLobbySendInvite::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreEcomCheckout
// 0x0068 (0x00A0 - 0x0038)
class UEOSCoreEcomCheckout final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_299C[0x58];                                    // 0x0048(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreEcomCheckout* EOSEcomCheckoutAsync(class UObject* WorldContextObject, const struct FEOSEcomCheckoutOptions& Options);

	void HandleCallback(const struct FEOSEcomCheckoutCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreEcomCheckout">();
	}
	static class UEOSCoreEcomCheckout* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreEcomCheckout>();
	}
};
static_assert(alignof(UEOSCoreEcomCheckout) == 0x000008, "Wrong alignment on UEOSCoreEcomCheckout");
static_assert(sizeof(UEOSCoreEcomCheckout) == 0x0000A0, "Wrong size on UEOSCoreEcomCheckout");
static_assert(offsetof(UEOSCoreEcomCheckout, OnCallback) == 0x000038, "Member 'UEOSCoreEcomCheckout::OnCallback' has a wrong offset!");

// Class EOSCore.CoreSanctions
// 0x0000 (0x0030 - 0x0030)
class UCoreSanctions final : public UEOSCoreSubsystem
{
public:
	static EOSResult EOSSanctionsCopyPlayerSanctionByIndex(class UObject* WorldContextObject, const struct FEOSSanctionsCopyPlayerSanctionByIndexOptions& Options, struct FEOSSanctionsPlayerSanction* OutSanction);
	static int32 EOSSanctionsGetPlayerSanctionCount(class UObject* WorldContextObject, const struct FEOSSanctionsGetPlayerSanctionCountOptions& Options);
	static class UCoreSanctions* GetSanctions(class UObject* WorldContextObject);

	void EOSSanctionsQueryActivePlayerSanctions(class UObject* WorldContextObject, const struct FEOSSanctionsQueryActivePlayerSanctionsOptions& Options, const TDelegate<void(struct FEOSSanctionsQueryActivePlayerSanctionsCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSanctions">();
	}
	static class UCoreSanctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSanctions>();
	}
};
static_assert(alignof(UCoreSanctions) == 0x000008, "Wrong alignment on UCoreSanctions");
static_assert(sizeof(UCoreSanctions) == 0x000030, "Wrong size on UCoreSanctions");

// Class EOSCore.EOSCoreEcomRedeemEntitlements
// 0x0058 (0x0090 - 0x0038)
class UEOSCoreEcomRedeemEntitlements final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A1[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreEcomRedeemEntitlements* EOSEcomRedeemEntitlementsAsync(class UObject* WorldContextObject, const struct FEOSEcomRedeemEntitlementsOptions& Options);

	void HandleCallback(const struct FEOSEcomRedeemEntitlementsCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreEcomRedeemEntitlements">();
	}
	static class UEOSCoreEcomRedeemEntitlements* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreEcomRedeemEntitlements>();
	}
};
static_assert(alignof(UEOSCoreEcomRedeemEntitlements) == 0x000008, "Wrong alignment on UEOSCoreEcomRedeemEntitlements");
static_assert(sizeof(UEOSCoreEcomRedeemEntitlements) == 0x000090, "Wrong size on UEOSCoreEcomRedeemEntitlements");
static_assert(offsetof(UEOSCoreEcomRedeemEntitlements, OnCallback) == 0x000038, "Member 'UEOSCoreEcomRedeemEntitlements::OnCallback' has a wrong offset!");

// Class EOSCore.CoreP2P
// 0x00F0 (0x0120 - 0x0030)
class UCoreP2P final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_29A3[0xF0];                                    // 0x0030(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static EOSResult EOSP2PAcceptConnection(class UObject* WorldContextObject, const struct FEOSP2PAcceptConnectionOptions& Options);
	static struct FEOSNotificationId EOSP2PAddNotifyIncomingPacketQueueFull(class UObject* WorldContextObject, const struct FEOSP2PAddNotifyIncomingPacketQueueFullOptions& Options, const TDelegate<void(struct FEOSP2POnIncomingPacketQueueFullInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSP2PAddNotifyPeerConnectionEstablished(class UObject* WorldContextObject, const struct FEOSP2PAddNotifyPeerConnectionEstablishedOptions& Options, const TDelegate<void(struct FEOSP2POnPeerConnectionEstablishedInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSP2PAddNotifyPeerConnectionInterrupted(class UObject* WorldContextObject, const struct FEOSP2PAddNotifyPeerConnectionInterruptedOptions& Options, const TDelegate<void(struct FEOSP2POnPeerConnectionInterruptedInfo& Data)>& Callback);
	static EOSResult EOSP2PCloseConnection(class UObject* WorldContextObject, const struct FEOSP2PCloseConnectionOptions& Options);
	static EOSResult EOSP2PCloseConnections(class UObject* WorldContextObject, const struct FEOSP2PCloseConnectionsOptions& Options);
	static EOSResult EOSP2PGetNATType(class UObject* WorldContextObject, const struct FEOSP2PGetNATTypeOptions& Options, EEOSENATType* OutNatType);
	static EOSResult EOSP2PGetNextReceivedPacketSize(class UObject* WorldContextObject, const struct FEOSP2PGetNextReceivedPacketSizeOptions& Options, int32* OutPacketSizeBytes);
	static EOSResult EOSP2PGetPacketQueueInfo(class UObject* WorldContextObject, const struct FEOSP2PGetPacketQueueInfoOptions& Options, struct FEOSP2PPacketQueueInfo* OutPacketQueueInfo);
	static EOSResult EOSP2PGetPortRange(class UObject* WorldContextObject, const struct FEOSP2PGetPortRangeOptions& Options, int32* OutPort, int32 OutNumAdditionalPortsToTry);
	static EOSResult EOSP2PGetRelayControl(class UObject* WorldContextObject, const struct FEOSP2PGetRelayControlOptions& Options, EEOSERelayControl* OutRelayControl);
	static EOSResult EOSP2PReceivePacket(class UObject* WorldContextObject, const struct FEOSP2PReceivePacketOptions& Options, struct FEOSProductUserId* OutPeerId, struct FEOSP2PSocketId* OutSocketId, int32* OutChannel, TArray<uint8>* OutData, int32* OutBytesWritten);
	static void EOSP2PRemoveNotifyIncomingPacketQueueFull(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static void EOSP2PRemoveNotifyPeerConnectionClosed(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static void EOSP2PRemoveNotifyPeerConnectionEstablished(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static void EOSP2PRemoveNotifyPeerConnectionInterrupted(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static void EOSP2PRemoveNotifyPeerConnectionRequest(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static EOSResult EOSP2PSendPacket(class UObject* WorldContextObject, const struct FEOSP2PSendPacketOptions& Options);
	static EOSResult EOSP2PSetPacketQueueSize(class UObject* WorldContextObject, const struct FEOSP2PSetPacketQueueSizeOptions& Options);
	static EOSResult EOSP2PSetPortRange(class UObject* WorldContextObject, const struct FEOSP2PSetPortRangeOptions& Options);
	static EOSResult EOSP2PSetRelayControl(class UObject* WorldContextObject, const struct FEOSP2PSetRelayControlOptions& Options);
	static class UCoreP2P* GetP2P(class UObject* WorldContextObject);

	struct FEOSNotificationId EOSP2PAddNotifyPeerConnectionClosed(class UObject* WorldContextObject, const struct FEOSP2PAddNotifyPeerConnectionClosedOptions& Options);
	struct FEOSNotificationId EOSP2PAddNotifyPeerConnectionRequest(class UObject* WorldContextObject, const struct FEOSP2PAddNotifyPeerConnectionRequestOptions& Options, const TDelegate<void(struct FEOSP2POnIncomingConnectionRequestInfo& Data, bool bWasSuccessful)>& Callback);
	void EOSP2PQueryNATType(class UObject* WorldContextObject, const TDelegate<void(struct FEOSP2POnQueryNATTypeCompleteInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreP2P">();
	}
	static class UCoreP2P* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreP2P>();
	}
};
static_assert(alignof(UCoreP2P) == 0x000008, "Wrong alignment on UCoreP2P");
static_assert(sizeof(UCoreP2P) == 0x000120, "Wrong size on UCoreP2P");

// Class EOSCore.CoreFriends
// 0x0050 (0x0080 - 0x0030)
class UCoreFriends final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_29B5[0x50];                                    // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FEOSEpicAccountId EOSFriendsGetFriendAtIndex(class UObject* WorldContextObject, const struct FEOSFriendsGetFriendAtIndexOptions& Options);
	static int32 EOSFriendsGetFriendsCount(class UObject* WorldContextObject, const struct FEOSFriendsGetFriendsCountOptions& Options);
	static EEOSEFriendsStatus EOSFriendsGetStatus(class UObject* WorldContextObject, const struct FEOSFriendsGetStatusOptions& Options);
	static void EOSFriendsRemoveNotifyFriendsUpdate(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static class UCoreFriends* GetFriends(class UObject* WorldContextObject);

	void EOSFriendsAcceptInvite(class UObject* WorldContextObject, const struct FEOSFriendsAcceptInviteOptions& Options, const TDelegate<void(struct FEOSFriendsAcceptInviteCallbackInfo& Data)>& Callback);
	struct FEOSNotificationId EOSFriendsAddNotifyFriendsUpdate(class UObject* WorldContextObject, const TDelegate<void(struct FEOSFriendsOnFriendsUpdateInfo& Data)>& Callback);
	void EOSFriendsQueryFriends(class UObject* WorldContextObject, const struct FEOSFriendsQueryFriendsOptions& Options, const TDelegate<void(struct FEOSFriendsQueryFriendsCallbackInfo& Data)>& Callback);
	void EOSFriendsRejectInvite(class UObject* WorldContextObject, const struct FEOSFriendsRejectInviteOptions& Options, const TDelegate<void(struct FEOSFriendsRejectInviteCallbackInfo& Data)>& Callback);
	void EOSFriendsSendInvite(class UObject* WorldContextObject, const struct FEOSFriendsSendInviteOptions& Options, const TDelegate<void(struct FEOSFriendsSendInviteCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreFriends">();
	}
	static class UCoreFriends* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreFriends>();
	}
};
static_assert(alignof(UCoreFriends) == 0x000008, "Wrong alignment on UCoreFriends");
static_assert(sizeof(UCoreFriends) == 0x000080, "Wrong size on UCoreFriends");

// Class EOSCore.EOSCoreFriendsQueryFriends
// 0x0048 (0x0080 - 0x0038)
class UEOSCoreFriendsQueryFriends final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B9[0x38];                                    // 0x0048(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreFriendsQueryFriends* EOSFriendsQueryFriendsAsync(class UObject* WorldContextObject, const struct FEOSFriendsQueryFriendsOptions& Options);

	void HandleCallback(const struct FEOSFriendsQueryFriendsCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreFriendsQueryFriends">();
	}
	static class UEOSCoreFriendsQueryFriends* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreFriendsQueryFriends>();
	}
};
static_assert(alignof(UEOSCoreFriendsQueryFriends) == 0x000008, "Wrong alignment on UEOSCoreFriendsQueryFriends");
static_assert(sizeof(UEOSCoreFriendsQueryFriends) == 0x000080, "Wrong size on UEOSCoreFriendsQueryFriends");
static_assert(offsetof(UEOSCoreFriendsQueryFriends, OnCallback) == 0x000038, "Member 'UEOSCoreFriendsQueryFriends::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreFriendsSendInvite
// 0x0068 (0x00A0 - 0x0038)
class UEOSCoreFriendsSendInvite final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_29BB[0x58];                                    // 0x0048(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreFriendsSendInvite* EOSFriendsSendInviteAsync(class UObject* WorldContextObject, const struct FEOSFriendsSendInviteOptions& Options);

	void HandleCallback(const struct FEOSFriendsSendInviteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreFriendsSendInvite">();
	}
	static class UEOSCoreFriendsSendInvite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreFriendsSendInvite>();
	}
};
static_assert(alignof(UEOSCoreFriendsSendInvite) == 0x000008, "Wrong alignment on UEOSCoreFriendsSendInvite");
static_assert(sizeof(UEOSCoreFriendsSendInvite) == 0x0000A0, "Wrong size on UEOSCoreFriendsSendInvite");
static_assert(offsetof(UEOSCoreFriendsSendInvite, OnCallback) == 0x000038, "Member 'UEOSCoreFriendsSendInvite::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLobbySearchFind
// 0x0050 (0x0088 - 0x0038)
class UEOSCoreLobbySearchFind final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_29BD[0x40];                                    // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLobbySearchFind* EOSLobbySearchFindAsync(class UObject* WorldContextObject, const struct FEOSHLobbySearch& Handle, const struct FEOSLobbySearchFindOptions& Options);

	void HandleCallback(const struct FEOSLobbySearchFindCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLobbySearchFind">();
	}
	static class UEOSCoreLobbySearchFind* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLobbySearchFind>();
	}
};
static_assert(alignof(UEOSCoreLobbySearchFind) == 0x000008, "Wrong alignment on UEOSCoreLobbySearchFind");
static_assert(sizeof(UEOSCoreLobbySearchFind) == 0x000088, "Wrong size on UEOSCoreLobbySearchFind");
static_assert(offsetof(UEOSCoreLobbySearchFind, OnCallback) == 0x000038, "Member 'UEOSCoreLobbySearchFind::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreFriendsAcceptInvite
// 0x0068 (0x00A0 - 0x0038)
class UEOSCoreFriendsAcceptInvite final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_29BF[0x58];                                    // 0x0048(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreFriendsAcceptInvite* EOSFriendsAcceptInviteAsync(class UObject* WorldContextObject, const struct FEOSFriendsAcceptInviteOptions& Options);

	void HandleCallback(const struct FEOSFriendsAcceptInviteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreFriendsAcceptInvite">();
	}
	static class UEOSCoreFriendsAcceptInvite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreFriendsAcceptInvite>();
	}
};
static_assert(alignof(UEOSCoreFriendsAcceptInvite) == 0x000008, "Wrong alignment on UEOSCoreFriendsAcceptInvite");
static_assert(sizeof(UEOSCoreFriendsAcceptInvite) == 0x0000A0, "Wrong size on UEOSCoreFriendsAcceptInvite");
static_assert(offsetof(UEOSCoreFriendsAcceptInvite, OnCallback) == 0x000038, "Member 'UEOSCoreFriendsAcceptInvite::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreFriendsRejectInvite
// 0x0068 (0x00A0 - 0x0038)
class UEOSCoreFriendsRejectInvite final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C1[0x58];                                    // 0x0048(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreFriendsRejectInvite* EOSFriendsRejectInviteAsync(class UObject* WorldContextObject, const struct FEOSFriendsRejectInviteOptions& Options);

	void HandleCallback(const struct FEOSFriendsRejectInviteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreFriendsRejectInvite">();
	}
	static class UEOSCoreFriendsRejectInvite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreFriendsRejectInvite>();
	}
};
static_assert(alignof(UEOSCoreFriendsRejectInvite) == 0x000008, "Wrong alignment on UEOSCoreFriendsRejectInvite");
static_assert(sizeof(UEOSCoreFriendsRejectInvite) == 0x0000A0, "Wrong size on UEOSCoreFriendsRejectInvite");
static_assert(offsetof(UEOSCoreFriendsRejectInvite, OnCallback) == 0x000038, "Member 'UEOSCoreFriendsRejectInvite::OnCallback' has a wrong offset!");

// Class EOSCore.CoreLeaderboards
// 0x0000 (0x0030 - 0x0030)
class UCoreLeaderboards final : public UEOSCoreSubsystem
{
public:
	static EOSResult EOSLeaderboardsCopyLeaderboardDefinitionByIndex(class UObject* WorldContextObject, const struct FEOSLeaderboardsCopyLeaderboardDefinitionByIndexOptions& Options, struct FEOSLeaderboardsDefinition* OutLeaderboardDefinition);
	static EOSResult EOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardId(class UObject* WorldContextObject, const struct FEOSLeaderboardsCopyLeaderboardDefinitionByLeaderboardIdOptions& Options, struct FEOSLeaderboardsDefinition* OutLeaderboardDefinition);
	static EOSResult EOSLeaderboardsCopyLeaderboardRecordByIndex(class UObject* WorldContextObject, const struct FEOSLeaderboardsCopyLeaderboardRecordByIndexOptions& Options, struct FEOSLeaderboardsLeaderboardRecord* OutLeaderboardRecord);
	static EOSResult EOSLeaderboardsCopyLeaderboardRecordByUserId(class UObject* WorldContextObject, const struct FEOSLeaderboardsCopyLeaderboardRecordByUserIdOptions& Options, struct FEOSLeaderboardsLeaderboardRecord* OutLeaderboardRecord);
	static EOSResult EOSLeaderboardsCopyLeaderboardUserScoreByIndex(class UObject* WorldContextObject, const struct FEOSLeaderboardsCopyLeaderboardUserScoreByIndexOptions& Options, struct FEOSLeaderboardsLeaderboardUserScore* OutLeaderboardUserScore);
	static EOSResult EOSLeaderboardsCopyLeaderboardUserScoreByUserId(class UObject* WorldContextObject, const struct FEOSLeaderboardsCopyLeaderboardUserScoreByUserIdOptions& Options, struct FEOSLeaderboardsLeaderboardUserScore* OutLeaderboardUserScore);
	static int32 EOSLeaderboardsGetLeaderboardDefinitionCount(class UObject* WorldContextObject, const struct FEOSLeaderboardsGetLeaderboardDefinitionCountOptions& Options);
	static int32 EOSLeaderboardsGetLeaderboardRecordCount(class UObject* WorldContextObject, const struct FEOSLeaderboardsGetLeaderboardRecordCountOptions& Options);
	static int32 EOSLeaderboardsGetLeaderboardUserScoreCount(class UObject* WorldContextObject, const struct FEOSLeaderboardsGetLeaderboardUserScoreCountOptions& Options);
	static class UCoreLeaderboards* GetLeaderboards(class UObject* WorldContextObject);

	void EOSLeaderboardsQueryLeaderboardDefinitions(class UObject* WorldContextObject, const struct FEOSLeaderboardsQueryLeaderboardDefinitionsOptions& Options, const TDelegate<void(struct FEOSLeaderboardsOnQueryLeaderboardDefinitionsCompleteCallbackInfo& Data)>& Callback);
	void EOSLeaderboardsQueryLeaderboardRanks(class UObject* WorldContextObject, const struct FEOSLeaderboardsQueryLeaderboardRanksOptions& Options, const TDelegate<void(struct FEOSLeaderboardsOnQueryLeaderboardRanksCompleteCallbackInfo& Data)>& Callback);
	void EOSLeaderboardsQueryLeaderboardUserScores(class UObject* WorldContextObject, const struct FEOSLeaderboardsQueryLeaderboardUserScoresOptions& Options, const TDelegate<void(struct FEOSLeaderboardsOnQueryLeaderboardUserScoresCompleteCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLeaderboards">();
	}
	static class UCoreLeaderboards* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLeaderboards>();
	}
};
static_assert(alignof(UCoreLeaderboards) == 0x000008, "Wrong alignment on UCoreLeaderboards");
static_assert(sizeof(UCoreLeaderboards) == 0x000030, "Wrong size on UCoreLeaderboards");

// Class EOSCore.EOSCorePlayerDataStorageQueryFile
// 0x0058 (0x0090 - 0x0038)
class UEOSCorePlayerDataStorageQueryFile final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_29CA[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCorePlayerDataStorageQueryFile* EOSPlayerDataStorageQueryFileAsync(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageQueryFileOptions& QueryFileOptions);

	void HandleCallback(const struct FEOSPlayerDataStorageQueryFileCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCorePlayerDataStorageQueryFile">();
	}
	static class UEOSCorePlayerDataStorageQueryFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCorePlayerDataStorageQueryFile>();
	}
};
static_assert(alignof(UEOSCorePlayerDataStorageQueryFile) == 0x000008, "Wrong alignment on UEOSCorePlayerDataStorageQueryFile");
static_assert(sizeof(UEOSCorePlayerDataStorageQueryFile) == 0x000090, "Wrong size on UEOSCorePlayerDataStorageQueryFile");
static_assert(offsetof(UEOSCorePlayerDataStorageQueryFile, OnCallback) == 0x000038, "Member 'UEOSCorePlayerDataStorageQueryFile::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLeaderboardsQueryLeaderboardDefinitions
// 0x0070 (0x00A8 - 0x0038)
class UEOSCoreLeaderboardsQueryLeaderboardDefinitions final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_29CC[0x60];                                    // 0x0048(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLeaderboardsQueryLeaderboardDefinitions* EOSLeaderboardsQueryLeaderboardDefinitionsAsync(class UObject* WorldContextObject, const struct FEOSLeaderboardsQueryLeaderboardDefinitionsOptions& Options);

	void HandleCallback(const struct FEOSLeaderboardsOnQueryLeaderboardDefinitionsCompleteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLeaderboardsQueryLeaderboardDefinitions">();
	}
	static class UEOSCoreLeaderboardsQueryLeaderboardDefinitions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLeaderboardsQueryLeaderboardDefinitions>();
	}
};
static_assert(alignof(UEOSCoreLeaderboardsQueryLeaderboardDefinitions) == 0x000008, "Wrong alignment on UEOSCoreLeaderboardsQueryLeaderboardDefinitions");
static_assert(sizeof(UEOSCoreLeaderboardsQueryLeaderboardDefinitions) == 0x0000A8, "Wrong size on UEOSCoreLeaderboardsQueryLeaderboardDefinitions");
static_assert(offsetof(UEOSCoreLeaderboardsQueryLeaderboardDefinitions, OnCallback) == 0x000038, "Member 'UEOSCoreLeaderboardsQueryLeaderboardDefinitions::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreSessionsRegisterPlayers
// 0x0040 (0x0078 - 0x0038)
class UEOSCoreSessionsRegisterPlayers final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_29CE[0x30];                                    // 0x0048(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreSessionsRegisterPlayers* EOSSessionsRegisterPlayersAsync(class UObject* WorldContextObject, const struct FEOSSessionsRegisterPlayersOptions& Options);

	void HandleCallback(const struct FEOSSessionsRegisterPlayersCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreSessionsRegisterPlayers">();
	}
	static class UEOSCoreSessionsRegisterPlayers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreSessionsRegisterPlayers>();
	}
};
static_assert(alignof(UEOSCoreSessionsRegisterPlayers) == 0x000008, "Wrong alignment on UEOSCoreSessionsRegisterPlayers");
static_assert(sizeof(UEOSCoreSessionsRegisterPlayers) == 0x000078, "Wrong size on UEOSCoreSessionsRegisterPlayers");
static_assert(offsetof(UEOSCoreSessionsRegisterPlayers, OnCallback) == 0x000038, "Member 'UEOSCoreSessionsRegisterPlayers::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLeaderboardsQueryLeaderboardRanks
// 0x0060 (0x0098 - 0x0038)
class UEOSCoreLeaderboardsQueryLeaderboardRanks final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D0[0x50];                                    // 0x0048(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLeaderboardsQueryLeaderboardRanks* EOSLeaderboardsQueryLeaderboardRanksAsync(class UObject* WorldContextObject, const struct FEOSLeaderboardsQueryLeaderboardRanksOptions& Options);

	void HandleCallback(const struct FEOSLeaderboardsOnQueryLeaderboardRanksCompleteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLeaderboardsQueryLeaderboardRanks">();
	}
	static class UEOSCoreLeaderboardsQueryLeaderboardRanks* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLeaderboardsQueryLeaderboardRanks>();
	}
};
static_assert(alignof(UEOSCoreLeaderboardsQueryLeaderboardRanks) == 0x000008, "Wrong alignment on UEOSCoreLeaderboardsQueryLeaderboardRanks");
static_assert(sizeof(UEOSCoreLeaderboardsQueryLeaderboardRanks) == 0x000098, "Wrong size on UEOSCoreLeaderboardsQueryLeaderboardRanks");
static_assert(offsetof(UEOSCoreLeaderboardsQueryLeaderboardRanks, OnCallback) == 0x000038, "Member 'UEOSCoreLeaderboardsQueryLeaderboardRanks::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLeaderboardsQueryLeaderboardUserScores
// 0x0090 (0x00C8 - 0x0038)
class UEOSCoreLeaderboardsQueryLeaderboardUserScores final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D2[0x80];                                    // 0x0048(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLeaderboardsQueryLeaderboardUserScores* EOSLeaderboardsQueryLeaderboardUserScoresAsync(class UObject* WorldContextObject, const struct FEOSLeaderboardsQueryLeaderboardUserScoresOptions& Options);

	void HandleCallback(const struct FEOSLeaderboardsOnQueryLeaderboardUserScoresCompleteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLeaderboardsQueryLeaderboardUserScores">();
	}
	static class UEOSCoreLeaderboardsQueryLeaderboardUserScores* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLeaderboardsQueryLeaderboardUserScores>();
	}
};
static_assert(alignof(UEOSCoreLeaderboardsQueryLeaderboardUserScores) == 0x000008, "Wrong alignment on UEOSCoreLeaderboardsQueryLeaderboardUserScores");
static_assert(sizeof(UEOSCoreLeaderboardsQueryLeaderboardUserScores) == 0x0000C8, "Wrong size on UEOSCoreLeaderboardsQueryLeaderboardUserScores");
static_assert(offsetof(UEOSCoreLeaderboardsQueryLeaderboardUserScores, OnCallback) == 0x000038, "Member 'UEOSCoreLeaderboardsQueryLeaderboardUserScores::OnCallback' has a wrong offset!");

// Class EOSCore.CoreLobby
// 0x02D0 (0x0300 - 0x0030)
class UCoreLobby final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_29D4[0x2D0];                                   // 0x0030(0x02D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FEOSNotificationId EOSLobbyAddNotifyJoinLobbyAccepted(class UObject* WorldContextObject, const struct FEOSLobbyAddNotifyJoinLobbyAcceptedOptions& Options, const TDelegate<void(struct FEOSLobbyJoinLobbyAcceptedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSLobbyAddNotifyLobbyInviteAccepted(class UObject* WorldContextObject, const struct FEOSLobbyAddNotifyLobbyInviteAcceptedOptions& Options, const TDelegate<void(struct FEOSLobbyInviteAcceptedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSLobbyAddNotifyLobbyInviteReceived(class UObject* WorldContextObject, const TDelegate<void(struct FEOSLobbyInviteReceivedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSLobbyAddNotifyLobbyInviteRejected(class UObject* WorldContextObject, const struct FEOSLobbyAddNotifyLobbyInviteRejectedOptions& Options, const TDelegate<void(struct FEOSLobbyLobbyInviteRejectedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSLobbyAddNotifyLobbyMemberStatusReceived(class UObject* WorldContextObject, const TDelegate<void(struct FEOSLobbyMemberStatusReceivedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSLobbyAddNotifyLobbyMemberUpdateReceived(class UObject* WorldContextObject, const TDelegate<void(struct FEOSLobbyMemberUpdateReceivedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSLobbyAddNotifyLobbyUpdateReceived(class UObject* WorldContextObject, const TDelegate<void(struct FEOSLobbyUpdateReceivedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSLobbyAddNotifyRTCRoomConnectionChanged(class UObject* WorldContextObject, const struct FEOSLobbyAddNotifyRTCRoomConnectionChangedOptions& Options, const TDelegate<void(struct FEOSLobbyRTCRoomConnectionChangedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSLobbyAddNotifySendLobbyNativeInviteRequested(class UObject* WorldContextObject, const struct FEOSLobbyAddNotifySendLobbyNativeInviteRequestedOptions& Options, const TDelegate<void(struct FEOSLobbySendLobbyNativeInviteRequestedCallbackInfo& Data)>& Callback);
	static EOSResult EOSLobbyCopyLobbyDetailsHandle(class UObject* WorldContextObject, const struct FEOSLobbyCopyLobbyDetailsHandleOptions& Options, struct FEOSHLobbyDetails* OutLobbyDetailsHandle);
	static EOSResult EOSLobbyCopyLobbyDetailsHandleByInviteId(class UObject* WorldContextObject, const struct FEOSLobbyCopyLobbyDetailsHandleByInviteIdOptions& Options, struct FEOSHLobbyDetails* OutLobbyDetailsHandle);
	static EOSResult EOSLobbyCopyLobbyDetailsHandleByUiEventId(class UObject* WorldContextObject, const struct FEOSLobbyCopyLobbyDetailsHandleByUiEventIdOptions& Options, struct FEOSHLobbyDetails* OutLobbyDetailsHandle);
	static EOSResult EOSLobbyCreateLobbySearch(class UObject* WorldContextObject, const struct FEOSLobbyCreateLobbySearchOptions& Options, struct FEOSHLobbySearch* OutLobbySearchHandle);
	static EOSResult EOSLobbyDetailsCopyAttributeByIndex(class UObject* WorldContextObject, const struct FEOSHLobbyDetails& Handle, const struct FEOSLobbyDetailsCopyAttributeByIndexOptions& Options, struct FEOSLobbyAttribute* OutAttribute);
	static EOSResult EOSLobbyDetailsCopyAttributeByKey(class UObject* WorldContextObject, const struct FEOSHLobbyDetails& Handle, const struct FEOSLobbyDetailsCopyAttributeByKeyOptions& Options, struct FEOSLobbyAttribute* OutAttribute);
	static EOSResult EOSLobbyDetailsCopyInfo(class UObject* WorldContextObject, const struct FEOSHLobbyDetails& Handle, const struct FEOSLobbyDetailsCopyInfoOptions& Options, struct FEOSLobbyDetailsInfo* OutLobbyDetailsInfo);
	static EOSResult EOSLobbyDetailsCopyMemberAttributeByIndex(class UObject* WorldContextObject, const struct FEOSHLobbyDetails& Handle, const struct FEOSLobbyDetailsCopyMemberAttributeByIndexOptions& Options, struct FEOSLobbyAttribute* OutAttribute);
	static EOSResult EOSLobbyDetailsCopyMemberAttributeByKey(class UObject* WorldContextObject, const struct FEOSHLobbyDetails& Handle, const struct FEOSLobbyDetailsCopyMemberAttributeByKeyOptions& Options, struct FEOSLobbyAttribute* OutAttribute);
	static int32 EOSLobbyDetailsGetAttributeCount(class UObject* WorldContextObject, const struct FEOSHLobbyDetails& Handle, const struct FEOSLobbyDetailsGetAttributeCountOptions& Options);
	static struct FEOSProductUserId EOSLobbyDetailsGetLobbyOwner(class UObject* WorldContextObject, const struct FEOSHLobbyDetails& Handle, const struct FEOSLobbyDetailsGetLobbyOwnerOptions& Options);
	static int32 EOSLobbyDetailsGetMemberAttributeCount(class UObject* WorldContextObject, const struct FEOSHLobbyDetails& Handle, const struct FEOSLobbyDetailsGetMemberAttributeCountOptions& Options);
	static struct FEOSProductUserId EOSLobbyDetailsGetMemberByIndex(class UObject* WorldContextObject, const struct FEOSHLobbyDetails& Handle, const struct FEOSLobbyDetailsGetMemberByIndexOptions& Options);
	static int32 EOSLobbyDetailsGetMemberCount(class UObject* WorldContextObject, const struct FEOSHLobbyDetails& Handle, const struct FEOSLobbyDetailsGetMemberCountOptions& Options);
	static void EOSLobbyDetailsRelease(const struct FEOSHLobbyDetails& LobbyHandle);
	static int32 EOSLobbyGetInviteCount(class UObject* WorldContextObject, const struct FEOSLobbyGetInviteCountOptions& Options);
	static EOSResult EOSLobbyGetInviteIdByIndex(class UObject* WorldContextObject, const struct FEOSLobbyGetInviteIdByIndexOptions& Options, class FString* OutInviteId);
	static EOSResult EOSLobbyGetRTCRoomName(class UObject* WorldContextObject, const struct FEOSLobbyGetRTCRoomNameOptions& Options, class FString* OutBuffer, int32 InOutBufferLength);
	static EOSResult EOSLobbyIsRTCRoomConnected(class UObject* WorldContextObject, const struct FEOSLobbyIsRTCRoomConnectedOptions& Options, bool* bOutIsConnected);
	static EOSResult EOSLobbyModificationAddAttribute(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const struct FEOSLobbyModificationAddAttributeOptions& Options);
	static EOSResult EOSLobbyModificationAddAttributeBool(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const class FString& Key, bool bValue, EEOSELobbyAttributeVisibility Visibility);
	static EOSResult EOSLobbyModificationAddAttributeDouble(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const class FString& Key, const class FString& Value, EEOSELobbyAttributeVisibility Visibility);
	static EOSResult EOSLobbyModificationAddAttributeInt64(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const class FString& Key, const class FString& Value, EEOSELobbyAttributeVisibility Visibility);
	static EOSResult EOSLobbyModificationAddAttributeString(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const class FString& Key, const class FString& Value, EEOSELobbyAttributeVisibility Visibility);
	static EOSResult EOSLobbyModificationAddMemberAttributeBool(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const class FString& Key, bool bValue, EEOSELobbyAttributeVisibility Visibility);
	static EOSResult EOSLobbyModificationAddMemberAttributeDouble(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const class FString& Key, const class FString& Value, EEOSELobbyAttributeVisibility Visibility);
	static EOSResult EOSLobbyModificationAddMemberAttributeInt64(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const class FString& Key, const class FString& Value, EEOSELobbyAttributeVisibility Visibility);
	static EOSResult EOSLobbyModificationAddMemberAttributeString(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const class FString& Key, const class FString& Value, EEOSELobbyAttributeVisibility Visibility);
	static void EOSLobbyModificationRelease(const struct FEOSHLobbyModification& LobbyModificationHandle);
	static EOSResult EOSLobbyModificationRemoveAttribute(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const struct FEOSLobbyModificationRemoveAttributeOptions& Options);
	static EOSResult EOSLobbyModificationRemoveMemberAttribute(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const struct FEOSLobbyModificationRemoveMemberAttributeOptions& Options);
	static EOSResult EOSLobbyModificationSetBucketId(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const struct FEOSLobbyModificationSetBucketIdOptions& Options);
	static EOSResult EOSLobbyModificationSetInvitesAllowed(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const struct FEOSLobbyModificationSetInvitesAllowedOptions& Options);
	static EOSResult EOSLobbyModificationSetMaxMembers(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const struct FEOSLobbyModificationSetMaxMembersOptions& Options);
	static EOSResult EOSLobbyModificationSetPermissionLevel(class UObject* WorldContextObject, const struct FEOSHLobbyModification& Handle, const struct FEOSLobbyModificationSetPermissionLevelOptions& Options);
	static void EOSLobbyRemoveNotifyJoinLobbyAccepted(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSLobbyRemoveNotifyLobbyInviteAccepted(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSLobbyRemoveNotifyLobbyInviteReceived(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSLobbyRemoveNotifyLobbyInviteRejected(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSLobbyRemoveNotifyLobbyMemberStatusReceived(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSLobbyRemoveNotifyLobbyMemberUpdateReceived(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSLobbyRemoveNotifyLobbyUpdateReceived(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSLobbyRemoveNotifyRTCRoomConnectionChanged(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSLobbyRemoveNotifySendLobbyNativeInviteRequested(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static EOSResult EOSLobbySearchCopySearchResultByIndex(class UObject* WorldContextObject, const struct FEOSHLobbySearch& Handle, const struct FEOSLobbySearchCopySearchResultByIndexOptions& Options, struct FEOSHLobbyDetails* OutLobbyDetailsHandle);
	static int32 EOSLobbySearchGetSearchResultCount(class UObject* WorldContextObject, const struct FEOSHLobbySearch& Handle, const struct FEOSLobbySearchGetSearchResultCountOptions& Options);
	static void EOSLobbySearchRelease(const struct FEOSHLobbySearch& LobbySearchHandle);
	static EOSResult EOSLobbySearchRemoveParameter(class UObject* WorldContextObject, const struct FEOSHLobbySearch& Handle, const struct FEOSLobbySearchRemoveParameterOptions& Options);
	static EOSResult EOSLobbySearchSetLobbyId(class UObject* WorldContextObject, const struct FEOSHLobbySearch& Handle, const struct FEOSLobbySearchSetLobbyIdOptions& Options);
	static EOSResult EOSLobbySearchSetMaxResults(class UObject* WorldContextObject, const struct FEOSHLobbySearch& Handle, const struct FEOSLobbySearchSetMaxResultsOptions& Options);
	static EOSResult EOSLobbySearchSetParameterBool(class UObject* WorldContextObject, const struct FEOSHLobbySearch& Handle, const class FString& Key, bool bValue, EEOSEComparisonOp ComparisonOp);
	static EOSResult EOSLobbySearchSetParameterDouble(class UObject* WorldContextObject, const struct FEOSHLobbySearch& Handle, const class FString& Key, const class FString& Value, EEOSEComparisonOp ComparisonOp);
	static EOSResult EOSLobbySearchSetParameterInt64(class UObject* WorldContextObject, const struct FEOSHLobbySearch& Handle, const class FString& Key, const class FString& Value, EEOSEComparisonOp ComparisonOp);
	static EOSResult EOSLobbySearchSetParameterString(class UObject* WorldContextObject, const struct FEOSHLobbySearch& Handle, const class FString& Key, const class FString& Value, EEOSEComparisonOp ComparisonOp);
	static EOSResult EOSLobbySearchSetTargetUserId(class UObject* WorldContextObject, const struct FEOSHLobbySearch& Handle, const struct FEOSLobbySearchSetTargetUserIdOptions& Options);
	static EOSResult EOSLobbyUpdateLobbyModification(class UObject* WorldContextObject, const struct FEOSLobbyUpdateLobbyModificationOptions& Options, struct FEOSHLobbyModification* OutLobbyModificationHandle);
	static class UCoreLobby* GetLobby(class UObject* WorldContextObject);

	void EOSLobbyCreateLobby(class UObject* WorldContextObject, const struct FEOSLobbyCreateLobbyOptions& Options, const TDelegate<void(struct FEOSLobbyCreateLobbyCallbackInfo& Data)>& Callback);
	void EOSLobbyDestroyLobby(class UObject* WorldContextObject, const struct FEOSLobbyDestroyLobbyOptions& Options, const TDelegate<void(struct FEOSLobbyDestroyLobbyCallbackInfo& Data)>& Callback);
	void EOSLobbyHardMuteMember(class UObject* WorldContextObject, const struct FEOSLobbyHardMuteMemberOptions& Options, const TDelegate<void(struct FEOSLobbyHardMuteMemberCallbackInfo& Data)>& Callback);
	void EOSLobbyJoinLobby(class UObject* WorldContextObject, const struct FEOSLobbyJoinLobbyOptions& Options, const TDelegate<void(struct FEOSLobbyJoinLobbyCallbackInfo& Data)>& Callback);
	void EOSLobbyJoinLobbyById(class UObject* WorldContextObject, const struct FEOSLobbyJoinLobbyByIdOptions& Options, const TDelegate<void(struct FEOSLobbyJoinLobbyByIdCallbackInfo& Data)>& Callback);
	void EOSLobbyKickMember(class UObject* WorldContextObject, const struct FEOSLobbyKickMemberOptions& Options, const TDelegate<void(struct FEOSLobbyKickMemberCallbackInfo& Data)>& Callback);
	void EOSLobbyLeaveLobby(class UObject* WorldContextObject, const struct FEOSLobbyLeaveLobbyOptions& Options, const TDelegate<void(struct FEOSLobbyLeaveLobbyCallbackInfo& Data)>& Callback);
	void EOSLobbyPromoteMember(class UObject* WorldContextObject, const struct FEOSLobbyPromoteMemberOptions& Options, const TDelegate<void(struct FEOSLobbyPromoteMemberCallbackInfo& Data)>& Callback);
	void EOSLobbyQueryInvites(class UObject* WorldContextObject, const struct FEOSLobbyQueryInvitesOptions& Options, const TDelegate<void(struct FEOSLobbyQueryInvitesCallbackInfo& Data)>& Callback);
	void EOSLobbyRejectInvite(class UObject* WorldContextObject, const struct FEOSLobbyRejectInviteOptions& Options, const TDelegate<void(struct FEOSLobbyRejectInviteCallbackInfo& Data)>& Callback);
	void EOSLobbySearchFind(class UObject* WorldContextObject, const struct FEOSHLobbySearch& Handle, const struct FEOSLobbySearchFindOptions& Options, const TDelegate<void(struct FEOSLobbySearchFindCallbackInfo& Data)>& Callback);
	void EOSLobbySendInvite(class UObject* WorldContextObject, const struct FEOSLobbySendInviteOptions& Options, const TDelegate<void(struct FEOSLobbySendInviteCallbackInfo& Data)>& Callback);
	void EOSLobbyUpdateLobby(class UObject* WorldContextObject, const struct FEOSLobbyUpdateLobbyOptions& Options, const TDelegate<void(struct FEOSLobbyUpdateLobbyCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLobby">();
	}
	static class UCoreLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLobby>();
	}
};
static_assert(alignof(UCoreLobby) == 0x000008, "Wrong alignment on UCoreLobby");
static_assert(sizeof(UCoreLobby) == 0x000300, "Wrong size on UCoreLobby");

// Class EOSCore.CoreMetrics
// 0x0000 (0x0030 - 0x0030)
class UCoreMetrics final : public UEOSCoreSubsystem
{
public:
	static class UCoreMetrics* GetMetrics(class UObject* WorldContextObject);

	EOSResult EOSMetricsBeginPlayerSession(class UObject* WorldContextObject, const struct FEOSMetricsBeginPlayerSessionOptions& Options);
	EOSResult EOSMetricsEndPlayerSession(class UObject* WorldContextObject, const struct FEOSMetricsEndPlayerSessionOptions& Options);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMetrics">();
	}
	static class UCoreMetrics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMetrics>();
	}
};
static_assert(alignof(UCoreMetrics) == 0x000008, "Wrong alignment on UCoreMetrics");
static_assert(sizeof(UCoreMetrics) == 0x000030, "Wrong size on UCoreMetrics");

// Class EOSCore.EOSCoreLobbyCreateLobby
// 0x0088 (0x00C0 - 0x0038)
class UEOSCoreLobbyCreateLobby final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0A[0x78];                                    // 0x0048(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLobbyCreateLobby* EOSLobbyCreateLobbyAsync(class UObject* WorldContextObject, const struct FEOSLobbyCreateLobbyOptions& Options);

	void HandleCallback(const struct FEOSLobbyCreateLobbyCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLobbyCreateLobby">();
	}
	static class UEOSCoreLobbyCreateLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLobbyCreateLobby>();
	}
};
static_assert(alignof(UEOSCoreLobbyCreateLobby) == 0x000008, "Wrong alignment on UEOSCoreLobbyCreateLobby");
static_assert(sizeof(UEOSCoreLobbyCreateLobby) == 0x0000C0, "Wrong size on UEOSCoreLobbyCreateLobby");
static_assert(offsetof(UEOSCoreLobbyCreateLobby, OnCallback) == 0x000038, "Member 'UEOSCoreLobbyCreateLobby::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCorePlayerDataStorageDeleteFile
// 0x0058 (0x0090 - 0x0038)
class UEOSCorePlayerDataStorageDeleteFile final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0C[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCorePlayerDataStorageDeleteFile* EOSPlayerDataStorageDeleteFileAsync(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageDeleteFileOptions& DeleteOptions);

	void HandleCallback(const struct FEOSPlayerDataStorageDeleteFileCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCorePlayerDataStorageDeleteFile">();
	}
	static class UEOSCorePlayerDataStorageDeleteFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCorePlayerDataStorageDeleteFile>();
	}
};
static_assert(alignof(UEOSCorePlayerDataStorageDeleteFile) == 0x000008, "Wrong alignment on UEOSCorePlayerDataStorageDeleteFile");
static_assert(sizeof(UEOSCorePlayerDataStorageDeleteFile) == 0x000090, "Wrong size on UEOSCorePlayerDataStorageDeleteFile");
static_assert(offsetof(UEOSCorePlayerDataStorageDeleteFile, OnCallback) == 0x000038, "Member 'UEOSCorePlayerDataStorageDeleteFile::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLobbyDestroyLobby
// 0x0058 (0x0090 - 0x0038)
class UEOSCoreLobbyDestroyLobby final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0E[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLobbyDestroyLobby* EOSLobbyDestroyLobbyAsync(class UObject* WorldContextObject, const struct FEOSLobbyDestroyLobbyOptions& Options);

	void HandleCallback(const struct FEOSLobbyDestroyLobbyCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLobbyDestroyLobby">();
	}
	static class UEOSCoreLobbyDestroyLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLobbyDestroyLobby>();
	}
};
static_assert(alignof(UEOSCoreLobbyDestroyLobby) == 0x000008, "Wrong alignment on UEOSCoreLobbyDestroyLobby");
static_assert(sizeof(UEOSCoreLobbyDestroyLobby) == 0x000090, "Wrong size on UEOSCoreLobbyDestroyLobby");
static_assert(offsetof(UEOSCoreLobbyDestroyLobby, OnCallback) == 0x000038, "Member 'UEOSCoreLobbyDestroyLobby::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLobbyJoinLobby
// 0x0058 (0x0090 - 0x0038)
class UEOSCoreLobbyJoinLobby final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A10[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLobbyJoinLobby* EOSLobbyJoinLobbyAsync(class UObject* WorldContextObject, const struct FEOSLobbyJoinLobbyOptions& Options);

	void HandleCallback(const struct FEOSLobbyJoinLobbyCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLobbyJoinLobby">();
	}
	static class UEOSCoreLobbyJoinLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLobbyJoinLobby>();
	}
};
static_assert(alignof(UEOSCoreLobbyJoinLobby) == 0x000008, "Wrong alignment on UEOSCoreLobbyJoinLobby");
static_assert(sizeof(UEOSCoreLobbyJoinLobby) == 0x000090, "Wrong size on UEOSCoreLobbyJoinLobby");
static_assert(offsetof(UEOSCoreLobbyJoinLobby, OnCallback) == 0x000038, "Member 'UEOSCoreLobbyJoinLobby::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLobbyLeaveLobby
// 0x0058 (0x0090 - 0x0038)
class UEOSCoreLobbyLeaveLobby final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A12[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLobbyLeaveLobby* EOSLobbyLeaveLobbyAsync(class UObject* WorldContextObject, const struct FEOSLobbyLeaveLobbyOptions& Options);

	void HandleCallback(const struct FEOSLobbyLeaveLobbyCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLobbyLeaveLobby">();
	}
	static class UEOSCoreLobbyLeaveLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLobbyLeaveLobby>();
	}
};
static_assert(alignof(UEOSCoreLobbyLeaveLobby) == 0x000008, "Wrong alignment on UEOSCoreLobbyLeaveLobby");
static_assert(sizeof(UEOSCoreLobbyLeaveLobby) == 0x000090, "Wrong size on UEOSCoreLobbyLeaveLobby");
static_assert(offsetof(UEOSCoreLobbyLeaveLobby, OnCallback) == 0x000038, "Member 'UEOSCoreLobbyLeaveLobby::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLobbyUpdateLobby
// 0x0030 (0x0068 - 0x0038)
class UEOSCoreLobbyUpdateLobby final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A14[0x20];                                    // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLobbyUpdateLobby* EOSLobbyUpdateLobbyAsync(class UObject* WorldContextObject, const struct FEOSLobbyUpdateLobbyOptions& Options);

	void HandleCallback(const struct FEOSLobbyUpdateLobbyCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLobbyUpdateLobby">();
	}
	static class UEOSCoreLobbyUpdateLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLobbyUpdateLobby>();
	}
};
static_assert(alignof(UEOSCoreLobbyUpdateLobby) == 0x000008, "Wrong alignment on UEOSCoreLobbyUpdateLobby");
static_assert(sizeof(UEOSCoreLobbyUpdateLobby) == 0x000068, "Wrong size on UEOSCoreLobbyUpdateLobby");
static_assert(offsetof(UEOSCoreLobbyUpdateLobby, OnCallback) == 0x000038, "Member 'UEOSCoreLobbyUpdateLobby::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLobbyPromoteMember
// 0x0078 (0x00B0 - 0x0038)
class UEOSCoreLobbyPromoteMember final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A16[0x68];                                    // 0x0048(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLobbyPromoteMember* EOSLobbyPromoteMemberAsync(class UObject* WorldContextObject, const struct FEOSLobbyPromoteMemberOptions& Options);

	void HandleCallback(const struct FEOSLobbyPromoteMemberCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLobbyPromoteMember">();
	}
	static class UEOSCoreLobbyPromoteMember* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLobbyPromoteMember>();
	}
};
static_assert(alignof(UEOSCoreLobbyPromoteMember) == 0x000008, "Wrong alignment on UEOSCoreLobbyPromoteMember");
static_assert(sizeof(UEOSCoreLobbyPromoteMember) == 0x0000B0, "Wrong size on UEOSCoreLobbyPromoteMember");
static_assert(offsetof(UEOSCoreLobbyPromoteMember, OnCallback) == 0x000038, "Member 'UEOSCoreLobbyPromoteMember::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLobbyKickMember
// 0x0078 (0x00B0 - 0x0038)
class UEOSCoreLobbyKickMember final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A18[0x68];                                    // 0x0048(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLobbyKickMember* EOSLobbyKickMemberAsync(class UObject* WorldContextObject, const struct FEOSLobbyKickMemberOptions& Options);

	void HandleCallback(const struct FEOSLobbyKickMemberCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLobbyKickMember">();
	}
	static class UEOSCoreLobbyKickMember* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLobbyKickMember>();
	}
};
static_assert(alignof(UEOSCoreLobbyKickMember) == 0x000008, "Wrong alignment on UEOSCoreLobbyKickMember");
static_assert(sizeof(UEOSCoreLobbyKickMember) == 0x0000B0, "Wrong size on UEOSCoreLobbyKickMember");
static_assert(offsetof(UEOSCoreLobbyKickMember, OnCallback) == 0x000038, "Member 'UEOSCoreLobbyKickMember::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreLobbyRejectInvite
// 0x0060 (0x0098 - 0x0038)
class UEOSCoreLobbyRejectInvite final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1A[0x50];                                    // 0x0048(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreLobbyRejectInvite* EOSLobbyRejectInviteAsync(class UObject* WorldContextObject, const struct FEOSLobbyRejectInviteOptions& Options);

	void HandleCallback(const struct FEOSLobbyRejectInviteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreLobbyRejectInvite">();
	}
	static class UEOSCoreLobbyRejectInvite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreLobbyRejectInvite>();
	}
};
static_assert(alignof(UEOSCoreLobbyRejectInvite) == 0x000008, "Wrong alignment on UEOSCoreLobbyRejectInvite");
static_assert(sizeof(UEOSCoreLobbyRejectInvite) == 0x000098, "Wrong size on UEOSCoreLobbyRejectInvite");
static_assert(offsetof(UEOSCoreLobbyRejectInvite, OnCallback) == 0x000038, "Member 'UEOSCoreLobbyRejectInvite::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCorePlayerDataStorageReadFile
// 0x0090 (0x00C8 - 0x0038)
class UEOSCorePlayerDataStorageReadFile final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1C[0x80];                                    // 0x0048(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCorePlayerDataStorageReadFile* EOSPlayerDataStorageReadFileAsync(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageReadFileOptions& ReadOptions);

	void HandleCallback(const struct FEOSPlayerDataStorageReadFileCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCorePlayerDataStorageReadFile">();
	}
	static class UEOSCorePlayerDataStorageReadFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCorePlayerDataStorageReadFile>();
	}
};
static_assert(alignof(UEOSCorePlayerDataStorageReadFile) == 0x000008, "Wrong alignment on UEOSCorePlayerDataStorageReadFile");
static_assert(sizeof(UEOSCorePlayerDataStorageReadFile) == 0x0000C8, "Wrong size on UEOSCorePlayerDataStorageReadFile");
static_assert(offsetof(UEOSCorePlayerDataStorageReadFile, OnCallback) == 0x000038, "Member 'UEOSCorePlayerDataStorageReadFile::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCorePlayerDataStorageWriteFile
// 0x0090 (0x00C8 - 0x0038)
class UEOSCorePlayerDataStorageWriteFile final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1E[0x80];                                    // 0x0048(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCorePlayerDataStorageWriteFile* EOSPlayerDataStorageWriteFileAsync(class UObject* WorldContextObject, const struct FEOSPlayerDataStorageWriteFileOptions& WriteOptions);

	void HandleCallback(const struct FEOSPlayerDataStorageWriteFileCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCorePlayerDataStorageWriteFile">();
	}
	static class UEOSCorePlayerDataStorageWriteFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCorePlayerDataStorageWriteFile>();
	}
};
static_assert(alignof(UEOSCorePlayerDataStorageWriteFile) == 0x000008, "Wrong alignment on UEOSCorePlayerDataStorageWriteFile");
static_assert(sizeof(UEOSCorePlayerDataStorageWriteFile) == 0x0000C8, "Wrong size on UEOSCorePlayerDataStorageWriteFile");
static_assert(offsetof(UEOSCorePlayerDataStorageWriteFile, OnCallback) == 0x000038, "Member 'UEOSCorePlayerDataStorageWriteFile::OnCallback' has a wrong offset!");

// Class EOSCore.CorePresence
// 0x00A0 (0x00D0 - 0x0030)
class UCorePresence final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_2A20[0xA0];                                    // 0x0030(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FEOSNotificationId EOSPresenceAddNotifyJoinGameAccepted(class UObject* WorldContextObject, const TDelegate<void(struct FEOSPresenceJoinGameAcceptedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSPresenceAddNotifyOnPresenceChanged(class UObject* WorldContextObject, const TDelegate<void(struct FEOSPresencePresenceChangedCallbackInfo& Data)>& Callback);
	static EOSResult EOSPresenceCopyPresence(class UObject* WorldContextObject, const struct FEOSPresenceCopyPresenceOptions& Options, struct FEOSPresenceInfo* OutPresence);
	static EOSResult EOSPresenceCreatePresenceModification(class UObject* WorldContextObject, const struct FEOSPresenceCreatePresenceModificationOptions& Options, struct FEOSHPresenceModification* OutPresenceModificationHandle);
	static EOSResult EOSPresenceGetJoinInfo(class UObject* WorldContextObject, const struct FEOSPresenceGetJoinInfoOptions& Options, class FString* OutInfo);
	static bool EOSPresenceHasPresence(class UObject* WorldContextObject, const struct FEOSPresenceHasPresenceOptions& Options);
	static EOSResult EOSPresenceModificationDeleteData(class UObject* WorldContextObject, const struct FEOSHPresenceModification& Handle, const struct FEOSPresenceModificationDeleteDataOptions& Options);
	static void EOSPresenceModificationRelease(class UObject* WorldContextObject, const struct FEOSHPresenceModification& PresenceModificationHandle);
	static EOSResult EOSPresenceModificationSetData(class UObject* WorldContextObject, const struct FEOSHPresenceModification& Handle, const struct FEOSPresenceModificationSetDataOptions& Options);
	static EOSResult EOSPresenceModificationSetJoinInfo(class UObject* WorldContextObject, const struct FEOSHPresenceModification& Handle, const struct FEOSPresenceModificationSetJoinInfoOptions& Options);
	static EOSResult EOSPresenceModificationSetRawRichText(class UObject* WorldContextObject, const struct FEOSHPresenceModification& Handle, const struct FEOSPresenceModificationSetRawRichTextOptions& Options);
	static EOSResult EOSPresenceModificationSetStatus(class UObject* WorldContextObject, const struct FEOSHPresenceModification& Handle, const struct FEOSPresenceModificationSetStatusOptions& Options);
	static void EOSPresenceRemoveNotifyJoinGameAccepted(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static void EOSPresenceRemoveNotifyOnPresenceChanged(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static class UCorePresence* GetPresence(class UObject* WorldContextObject);

	void EOSPresenceQueryPresence(class UObject* WorldContextObject, const struct FEOSPresenceQueryPresenceOptions& Options, const TDelegate<void(struct FEOSPresenceQueryPresenceCallbackInfo& Data)>& Callback);
	void EOSPresenceSetPresence(class UObject* WorldContextObject, const struct FEOSPresenceSetPresenceOptions& Options, const TDelegate<void(struct FEOSPresenceSetPresenceCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePresence">();
	}
	static class UCorePresence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePresence>();
	}
};
static_assert(alignof(UCorePresence) == 0x000008, "Wrong alignment on UCorePresence");
static_assert(sizeof(UCorePresence) == 0x0000D0, "Wrong size on UCorePresence");

// Class EOSCore.EOSCorePresenceSetPresence
// 0x0050 (0x0088 - 0x0038)
class UEOSCorePresenceSetPresence final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2A[0x40];                                    // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCorePresenceSetPresence* EOSPresenceSetPresenceAsync(class UObject* WorldContextObject, const struct FEOSPresenceSetPresenceOptions& Options);

	void HandleCallback(const struct FEOSPresenceSetPresenceCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCorePresenceSetPresence">();
	}
	static class UEOSCorePresenceSetPresence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCorePresenceSetPresence>();
	}
};
static_assert(alignof(UEOSCorePresenceSetPresence) == 0x000008, "Wrong alignment on UEOSCorePresenceSetPresence");
static_assert(sizeof(UEOSCorePresenceSetPresence) == 0x000088, "Wrong size on UEOSCorePresenceSetPresence");
static_assert(offsetof(UEOSCorePresenceSetPresence, OnCallback) == 0x000038, "Member 'UEOSCorePresenceSetPresence::OnCallback' has a wrong offset!");

// Class EOSCore.CoreProgressionSnapshot
// 0x0000 (0x0030 - 0x0030)
class UCoreProgressionSnapshot final : public UEOSCoreSubsystem
{
public:
	static EOSResult EOSProgressionSnapshotAddProgression(class UObject* WorldContextObject, const struct FEOSProgressionSnapshotAddProgressionOptions& Options);
	static EOSResult EOSProgressionSnapshotBeginSnapshot(class UObject* WorldContextObject, const struct FEOSProgressionSnapshotBeginSnapshotOptions& Options, int32* OutSnapshotId);
	static void EOSProgressionSnapshotDeleteSnapshot(class UObject* WorldContextObject, const struct FEOSProgressionSnapshotDeleteSnapshotOptions& Options, const TDelegate<void(struct FEOSProgressionSnapshotDeleteSnapshotCallbackInfo& Data)>& Callback);
	static EOSResult EOSProgressionSnapshotEndSnapshot(class UObject* WorldContextObject, const struct FEOSProgressionSnapshotEndSnapshotOptions& Options);
	static void EOSProgressionSnapshotSubmitSnapshot(class UObject* WorldContextObject, const struct FEOSProgressionSnapshotSubmitSnapshotOptions& Options, const TDelegate<void(struct FEOSProgressionSnapshotSubmitSnapshotCallbackInfo& Data)>& Callback);
	static class UCoreProgressionSnapshot* GetProgressionSnapshot(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreProgressionSnapshot">();
	}
	static class UCoreProgressionSnapshot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreProgressionSnapshot>();
	}
};
static_assert(alignof(UCoreProgressionSnapshot) == 0x000008, "Wrong alignment on UCoreProgressionSnapshot");
static_assert(sizeof(UCoreProgressionSnapshot) == 0x000030, "Wrong size on UCoreProgressionSnapshot");

// Class EOSCore.CoreReports
// 0x0000 (0x0030 - 0x0030)
class UCoreReports final : public UEOSCoreSubsystem
{
public:
	static class UCoreReports* GetReports(class UObject* WorldContextObject);

	void EOSReportsSendPlayerBehaviorReport(class UObject* WorldContextObject, const struct FEOSReportsSendPlayerBehaviorReportOptions& Options, const TDelegate<void(struct FEOSReportsSendPlayerBehaviorReportCompleteCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreReports">();
	}
	static class UCoreReports* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreReports>();
	}
};
static_assert(alignof(UCoreReports) == 0x000008, "Wrong alignment on UCoreReports");
static_assert(sizeof(UCoreReports) == 0x000030, "Wrong size on UCoreReports");

// Class EOSCore.EOSReportsSendPlayerBehaviorReport
// 0x0088 (0x00C0 - 0x0038)
class UEOSReportsSendPlayerBehaviorReport final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A33[0x78];                                    // 0x0048(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSReportsSendPlayerBehaviorReport* EOSReportsSendPlayerBehaviorReportAsync(class UObject* WorldContextObject, const struct FEOSReportsSendPlayerBehaviorReportOptions& Options);

	void HandleCallback(const struct FEOSReportsSendPlayerBehaviorReportCompleteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSReportsSendPlayerBehaviorReport">();
	}
	static class UEOSReportsSendPlayerBehaviorReport* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSReportsSendPlayerBehaviorReport>();
	}
};
static_assert(alignof(UEOSReportsSendPlayerBehaviorReport) == 0x000008, "Wrong alignment on UEOSReportsSendPlayerBehaviorReport");
static_assert(sizeof(UEOSReportsSendPlayerBehaviorReport) == 0x0000C0, "Wrong size on UEOSReportsSendPlayerBehaviorReport");
static_assert(offsetof(UEOSReportsSendPlayerBehaviorReport, OnCallback) == 0x000038, "Member 'UEOSReportsSendPlayerBehaviorReport::OnCallback' has a wrong offset!");

// Class EOSCore.CoreRTC
// 0x00A0 (0x00D0 - 0x0030)
class UCoreRTC final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_2A35[0xA0];                                    // 0x0030(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FEOSNotificationId EOSRTCAddNotifyDisconnected(class UObject* WorldContextObject, const struct FAddNotifyDisconnectedOptions& Options, const TDelegate<void(struct FEOSRTCDisconnectedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSRTCAddNotifyParticipantStatusChanged(class UObject* WorldContextObject, const struct FAddNotifyParticipantStatusChangedOptions& Options, const TDelegate<void(struct FEOSRTCParticipantStatusChangedCallbackInfo& Data)>& Callback);
	static struct FEOSHRTCAudio EOSRTCGetAudioInterface(class UObject* WorldContextObject);
	static void EOSRTCRemoveNotifyDisconnected(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static void EOSRTCRemoveNotifyParticipantStatusChanged(class UObject* WorldContextObject, const struct FEOSNotificationId& NotificationID);
	static class UCoreRTC* GetRTC(class UObject* WorldContextObject);

	void EOSRTCBlockParticipant(class UObject* WorldContextObject, const struct FBlockParticipantOptions& Options, const TDelegate<void(struct FEOSRTCBlockParticipantCallbackInfo& Data)>& Callback);
	void EOSRTCJoinRoom(class UObject* WorldContextObject, const struct FJoinRoomOptions& Options, const TDelegate<void(struct FEOSRTCJoinRoomCallbackInfo& Data)>& Callback);
	void EOSRTCLeaveRoom(class UObject* WorldContextObject, const struct FLeaveRoomOptions& Options, const TDelegate<void(struct FEOSRTCLeaveRoomCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreRTC">();
	}
	static class UCoreRTC* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreRTC>();
	}
};
static_assert(alignof(UCoreRTC) == 0x000008, "Wrong alignment on UCoreRTC");
static_assert(sizeof(UCoreRTC) == 0x0000D0, "Wrong size on UCoreRTC");

// Class EOSCore.CoreRTCAdmin
// 0x0000 (0x0030 - 0x0030)
class UCoreRTCAdmin final : public UEOSCoreSubsystem
{
public:
	static class UCoreRTCAdmin* GetRTCAdmin(class UObject* WorldContextObject);

	EOSResult EOSRTCAdminCopyUserTokenByIndex(class UObject* WorldContextObject, const struct FEOSCopyUserTokenByIndexOptions& Options, struct FEOSUserToken* OutUserToken);
	EOSResult EOSRTCAdminCopyUserTokenByUserId(class UObject* WorldContextObject, const struct FEOSCopyUserTokenByUserIdOptions& Options, struct FEOSUserToken* OutUserToken);
	void EOSRTCAdminKick(class UObject* WorldContextObject, const struct FEOSKickOptions& Options, const TDelegate<void(struct FEOSKickCompleteCallbackInfo& Data)>& Callback);
	void EOSRTCAdminQueryJoinRoomToken(class UObject* WorldContextObject, const struct FEOSQueryJoinRoomTokenOptions& Options, const TDelegate<void(struct FEOSQueryJoinRoomTokenCompleteCallbackInfo& Data)>& Callback);
	void EOSRTCAdminSetParticipantHardMute(class UObject* WorldContextObject, const struct FEOSSetParticipantHardMuteOptions& Options, const TDelegate<void(struct FEOSSetParticipantHardMuteCompleteCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreRTCAdmin">();
	}
	static class UCoreRTCAdmin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreRTCAdmin>();
	}
};
static_assert(alignof(UCoreRTCAdmin) == 0x000008, "Wrong alignment on UCoreRTCAdmin");
static_assert(sizeof(UCoreRTCAdmin) == 0x000030, "Wrong size on UCoreRTCAdmin");

// Class EOSCore.CoreRTCAudio
// 0x01E0 (0x0210 - 0x0030)
class UCoreRTCAudio final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_2A38[0x1E0];                                   // 0x0030(0x01E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FEOSNotificationId EOSRTCAudioAddNotifyAudioBeforeRender(class UObject* WorldContextObject, const struct FEOSHRTCAudio& Handle, const struct FEOSAddNotifyAudioBeforeRenderOptions& Options, const TDelegate<void(struct FEOSBeforeRenderCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSRTCAudioAddNotifyAudioBeforeSend(class UObject* WorldContextObject, const struct FEOSHRTCAudio& Handle, const struct FEOSAddNotifyAudioBeforeSendOptions& Options, const TDelegate<void(struct FEOSBeforeSendCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSRTCAudioAddNotifyAudioDevicesChanged(class UObject* WorldContextObject, const struct FEOSHRTCAudio& Handle, const struct FEOSAddNotifyAudioDevicesChangedOptions& Options, const TDelegate<void(struct FEOSAudioDevicesChangedCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSRTCAudioAddNotifyAudioInputState(class UObject* WorldContextObject, const struct FEOSHRTCAudio& Handle, const struct FEOSAddNotifyAudioInputStateOptions& Options, const TDelegate<void(struct FEOSAudioInputStateCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSRTCAudioAddNotifyAudioOutputState(class UObject* WorldContextObject, const struct FEOSHRTCAudio& Handle, const struct FEOSAddNotifyAudioOutputStateOptions& Options, const TDelegate<void(struct FEOSOutputStateCallbackInfo& Data)>& Callback);
	static struct FEOSNotificationId EOSRTCAudioAddNotifyParticipantUpdated(class UObject* WorldContextObject, const struct FEOSHRTCAudio& Handle, const struct FEOSAddNotifyParticipantUpdatedOptions& Options, const TDelegate<void(struct FEOSJoinRoomCallbackInfo& Data)>& Callback);
	static struct FEOSAudioInputDeviceInfo EOSRTCAudioGetAudioInputDeviceByIndex(const struct FEOSHRTCAudio& Handle, const struct FEOSGetAudioOutputDeviceByIndexOptions& Options);
	static int32 EOSRTCAudioGetAudioInputDevicesCount(const struct FEOSHRTCAudio& Handle, const struct FEOSGetAudioInputDevicesCountOptions& Options);
	static struct FEOSAudioOutputDeviceInfo EOSRTCAudioGetAudioOutputDeviceByIndex(const struct FEOSHRTCAudio& Handle, const struct FEOSGetAudioOutputDeviceByIndexOptions& Options);
	static int32 EOSRTCAudioGetAudioOutputDevicesCount(const struct FEOSHRTCAudio& Handle, const struct FEOSGetAudioOutputDevicesCountOptions& Options);
	static EOSResult EOSRTCAudioRegisterPlatformAudioUser(const struct FEOSHRTCAudio& Handle, const struct FEOSRegisterPlatformAudioUserOptions& Options);
	static void EOSRTCAudioRemoveNotifyAudioBeforeRender(class UObject* WorldContextObject, const struct FEOSHRTCAudio& Handle, const struct FEOSNotificationId& NotificationID);
	static void EOSRTCAudioRemoveNotifyAudioBeforeSend(class UObject* WorldContextObject, const struct FEOSHRTCAudio& Handle, const struct FEOSNotificationId& NotificationID);
	static void EOSRTCAudioRemoveNotifyAudioDevicesChanged(class UObject* WorldContextObject, const struct FEOSHRTCAudio& Handle, const struct FEOSNotificationId& NotificationID);
	static void EOSRTCAudioRemoveNotifyAudioInputState(class UObject* WorldContextObject, const struct FEOSHRTCAudio& Handle, const struct FEOSNotificationId& NotificationID);
	static void EOSRTCAudioRemoveNotifyAudioOutputState(class UObject* WorldContextObject, const struct FEOSHRTCAudio& Handle, const struct FEOSNotificationId& NotificationID);
	static void EOSRTCAudioRemoveNotifyParticipantUpdated(class UObject* WorldContextObject, const struct FEOSHRTCAudio& Handle, const struct FEOSNotificationId& NotificationID);
	static EOSResult EOSRTCAudioSendAudio(const struct FEOSHRTCAudio& Handle, const struct FEOSSendAudioOptions& Options);
	static EOSResult EOSRTCAudioSetAudioInputSettings(const struct FEOSHRTCAudio& Handle, const struct FEOSSetAudioInputSettingsOptions& Options);
	static EOSResult EOSRTCAudioSetAudioOutputSettings(const struct FEOSHRTCAudio& Handle, const struct FEOSSetAudioOutputSettingsOptions& Options);
	static EOSResult EOSRTCAudioUnregisterPlatformAudioUser(const struct FEOSHRTCAudio& Handle, const struct FEOSUnregisterPlatformAudioUserOptions& Options);
	static void EOSRTCAudioUpdateParticipantVolume(const struct FEOSHRTCAudio& Handle, const struct FEOSRTCAudioUpdateParticipantVolumeOptions& Options, const TDelegate<void(struct FEOSRTCAudioUpdateParticipantVolumeCallbackInfo& Data)>& Callback);
	static void EOSRTCAudioUpdateReceiving(const struct FEOSHRTCAudio& Handle, const struct FEOSUpdateReceivingOptions& Options, const TDelegate<void(struct FEOSUpdateReceivingCallbackInfo& Data)>& Callback);
	static void EOSRTCAudioUpdateReceivingVolume(const struct FEOSHRTCAudio& Handle, const struct FEOSRTCAudioUpdateReceivingVolumeOptions& Options, const TDelegate<void(struct FEOSRTCAudioUpdateReceivingVolumeCallbackInfo& Data)>& Callback);
	static void EOSRTCAudioUpdateSending(const struct FEOSHRTCAudio& Handle, const struct FEOSUpdateSendingOptions& Options, const TDelegate<void(struct FEOSUpdateSendingCallbackInfo& Data)>& Callback);
	static void EOSRTCAudioUpdateSendingVolume(const struct FEOSHRTCAudio& Handle, const struct FEOSRTCAudioUpdateSendingVolumeOptions& Options, const TDelegate<void(struct FEOSRTCAudioUpdateSendingVolumeCallbackInfo& Data)>& Callback);
	static class UCoreRTCAudio* GetRTCAudio(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreRTCAudio">();
	}
	static class UCoreRTCAudio* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreRTCAudio>();
	}
};
static_assert(alignof(UCoreRTCAudio) == 0x000008, "Wrong alignment on UCoreRTCAudio");
static_assert(sizeof(UCoreRTCAudio) == 0x000210, "Wrong size on UCoreRTCAudio");

// Class EOSCore.EOSSanctionsQueryActivePlayerSanctions
// 0x0068 (0x00A0 - 0x0038)
class UEOSSanctionsQueryActivePlayerSanctions final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A44[0x58];                                    // 0x0048(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSSanctionsQueryActivePlayerSanctions* EOSSanctionsQueryActivePlayerSanctionsAsync(class UObject* WorldContextObject, const struct FEOSSanctionsQueryActivePlayerSanctionsOptions& Options);

	void HandleCallback(const struct FEOSSanctionsQueryActivePlayerSanctionsCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSSanctionsQueryActivePlayerSanctions">();
	}
	static class UEOSSanctionsQueryActivePlayerSanctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSSanctionsQueryActivePlayerSanctions>();
	}
};
static_assert(alignof(UEOSSanctionsQueryActivePlayerSanctions) == 0x000008, "Wrong alignment on UEOSSanctionsQueryActivePlayerSanctions");
static_assert(sizeof(UEOSSanctionsQueryActivePlayerSanctions) == 0x0000A0, "Wrong size on UEOSSanctionsQueryActivePlayerSanctions");
static_assert(offsetof(UEOSSanctionsQueryActivePlayerSanctions, OnCallback) == 0x000038, "Member 'UEOSSanctionsQueryActivePlayerSanctions::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreSessionsUpdateSession
// 0x0028 (0x0060 - 0x0038)
class UEOSCoreSessionsUpdateSession final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A46[0x18];                                    // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreSessionsUpdateSession* EOSSessionsUpdateSessionAsync(class UObject* WorldContextObject, const struct FEOSSessionsUpdateSessionOptions& Options);

	void HandleCallback(const struct FEOSSessionsUpdateSessionCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreSessionsUpdateSession">();
	}
	static class UEOSCoreSessionsUpdateSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreSessionsUpdateSession>();
	}
};
static_assert(alignof(UEOSCoreSessionsUpdateSession) == 0x000008, "Wrong alignment on UEOSCoreSessionsUpdateSession");
static_assert(sizeof(UEOSCoreSessionsUpdateSession) == 0x000060, "Wrong size on UEOSCoreSessionsUpdateSession");
static_assert(offsetof(UEOSCoreSessionsUpdateSession, OnCallback) == 0x000038, "Member 'UEOSCoreSessionsUpdateSession::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreSessionsDestroySession
// 0x0030 (0x0068 - 0x0038)
class UEOSCoreSessionsDestroySession final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A48[0x20];                                    // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreSessionsDestroySession* EOSSessionsDestroySessionAsync(class UObject* WorldContextObject, const struct FEOSSessionsDestroySessionOptions& Options);

	void HandleCallback(const struct FEOSSessionsDestroySessionCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreSessionsDestroySession">();
	}
	static class UEOSCoreSessionsDestroySession* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreSessionsDestroySession>();
	}
};
static_assert(alignof(UEOSCoreSessionsDestroySession) == 0x000008, "Wrong alignment on UEOSCoreSessionsDestroySession");
static_assert(sizeof(UEOSCoreSessionsDestroySession) == 0x000068, "Wrong size on UEOSCoreSessionsDestroySession");
static_assert(offsetof(UEOSCoreSessionsDestroySession, OnCallback) == 0x000038, "Member 'UEOSCoreSessionsDestroySession::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreSessionsJoinSession
// 0x0060 (0x0098 - 0x0038)
class UEOSCoreSessionsJoinSession final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4A[0x50];                                    // 0x0048(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreSessionsJoinSession* EOSSessionsJoinSessionAsync(class UObject* WorldContextObject, const struct FEOSSessionsJoinSessionOptions& Options);

	void HandleCallback(const struct FEOSSessionsJoinSessionCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreSessionsJoinSession">();
	}
	static class UEOSCoreSessionsJoinSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreSessionsJoinSession>();
	}
};
static_assert(alignof(UEOSCoreSessionsJoinSession) == 0x000008, "Wrong alignment on UEOSCoreSessionsJoinSession");
static_assert(sizeof(UEOSCoreSessionsJoinSession) == 0x000098, "Wrong size on UEOSCoreSessionsJoinSession");
static_assert(offsetof(UEOSCoreSessionsJoinSession, OnCallback) == 0x000038, "Member 'UEOSCoreSessionsJoinSession::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreSessionsStartSession
// 0x0030 (0x0068 - 0x0038)
class UEOSCoreSessionsStartSession final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4C[0x20];                                    // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreSessionsStartSession* EOSSessionsStartSessionAsync(class UObject* WorldContextObject, const struct FEOSSessionsStartSessionOptions& Options);

	void HandleCallback(const struct FEOSSessionsStartSessionCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreSessionsStartSession">();
	}
	static class UEOSCoreSessionsStartSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreSessionsStartSession>();
	}
};
static_assert(alignof(UEOSCoreSessionsStartSession) == 0x000008, "Wrong alignment on UEOSCoreSessionsStartSession");
static_assert(sizeof(UEOSCoreSessionsStartSession) == 0x000068, "Wrong size on UEOSCoreSessionsStartSession");
static_assert(offsetof(UEOSCoreSessionsStartSession, OnCallback) == 0x000038, "Member 'UEOSCoreSessionsStartSession::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreSessionsEndSession
// 0x0030 (0x0068 - 0x0038)
class UEOSCoreSessionsEndSession final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4E[0x20];                                    // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreSessionsEndSession* EOSSessionsEndSessionAsync(class UObject* WorldContextObject, const struct FEOSSessionsEndSessionOptions& Options);

	void HandleCallback(const struct FEOSSessionsEndSessionCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreSessionsEndSession">();
	}
	static class UEOSCoreSessionsEndSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreSessionsEndSession>();
	}
};
static_assert(alignof(UEOSCoreSessionsEndSession) == 0x000008, "Wrong alignment on UEOSCoreSessionsEndSession");
static_assert(sizeof(UEOSCoreSessionsEndSession) == 0x000068, "Wrong size on UEOSCoreSessionsEndSession");
static_assert(offsetof(UEOSCoreSessionsEndSession, OnCallback) == 0x000038, "Member 'UEOSCoreSessionsEndSession::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreSessionsUnregisterPlayers
// 0x0040 (0x0078 - 0x0038)
class UEOSCoreSessionsUnregisterPlayers final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A50[0x30];                                    // 0x0048(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreSessionsUnregisterPlayers* EOSSessionsUnregisterPlayersAsync(class UObject* WorldContextObject, const struct FEOSSessionsUnregisterPlayersOptions& Options);

	void HandleCallback(const struct FEOSSessionsUnregisterPlayersCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreSessionsUnregisterPlayers">();
	}
	static class UEOSCoreSessionsUnregisterPlayers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreSessionsUnregisterPlayers>();
	}
};
static_assert(alignof(UEOSCoreSessionsUnregisterPlayers) == 0x000008, "Wrong alignment on UEOSCoreSessionsUnregisterPlayers");
static_assert(sizeof(UEOSCoreSessionsUnregisterPlayers) == 0x000078, "Wrong size on UEOSCoreSessionsUnregisterPlayers");
static_assert(offsetof(UEOSCoreSessionsUnregisterPlayers, OnCallback) == 0x000038, "Member 'UEOSCoreSessionsUnregisterPlayers::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreSessionsSendInvite
// 0x0078 (0x00B0 - 0x0038)
class UEOSCoreSessionsSendInvite final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A52[0x68];                                    // 0x0048(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreSessionsSendInvite* EOSSessionsSendInviteAsync(class UObject* WorldContextObject, const struct FEOSSessionsSendInviteOptions& Options);

	void HandleCallback(const struct FEOSSessionsSendInviteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreSessionsSendInvite">();
	}
	static class UEOSCoreSessionsSendInvite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreSessionsSendInvite>();
	}
};
static_assert(alignof(UEOSCoreSessionsSendInvite) == 0x000008, "Wrong alignment on UEOSCoreSessionsSendInvite");
static_assert(sizeof(UEOSCoreSessionsSendInvite) == 0x0000B0, "Wrong size on UEOSCoreSessionsSendInvite");
static_assert(offsetof(UEOSCoreSessionsSendInvite, OnCallback) == 0x000038, "Member 'UEOSCoreSessionsSendInvite::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreSessionsRejectInvite
// 0x0058 (0x0090 - 0x0038)
class UEOSCoreSessionsRejectInvite final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A54[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreSessionsRejectInvite* EOSSessionsRejectInviteAsync(class UObject* WorldContextObject, const struct FEOSSessionsRejectInviteOptions& Options);

	void HandleCallback(const struct FEOSSessionsRejectInviteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreSessionsRejectInvite">();
	}
	static class UEOSCoreSessionsRejectInvite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreSessionsRejectInvite>();
	}
};
static_assert(alignof(UEOSCoreSessionsRejectInvite) == 0x000008, "Wrong alignment on UEOSCoreSessionsRejectInvite");
static_assert(sizeof(UEOSCoreSessionsRejectInvite) == 0x000090, "Wrong size on UEOSCoreSessionsRejectInvite");
static_assert(offsetof(UEOSCoreSessionsRejectInvite, OnCallback) == 0x000038, "Member 'UEOSCoreSessionsRejectInvite::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreSessionsQueryInvites
// 0x0048 (0x0080 - 0x0038)
class UEOSCoreSessionsQueryInvites final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A56[0x38];                                    // 0x0048(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreSessionsQueryInvites* EOSSessionsQueryInvitesAsync(class UObject* WorldContextObject, const struct FEOSSessionsQueryInvitesOptions& Options);

	void HandleCallback(const struct FEOSSessionsQueryInvitesCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreSessionsQueryInvites">();
	}
	static class UEOSCoreSessionsQueryInvites* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreSessionsQueryInvites>();
	}
};
static_assert(alignof(UEOSCoreSessionsQueryInvites) == 0x000008, "Wrong alignment on UEOSCoreSessionsQueryInvites");
static_assert(sizeof(UEOSCoreSessionsQueryInvites) == 0x000080, "Wrong size on UEOSCoreSessionsQueryInvites");
static_assert(offsetof(UEOSCoreSessionsQueryInvites, OnCallback) == 0x000038, "Member 'UEOSCoreSessionsQueryInvites::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreSessionsSearchFind
// 0x0050 (0x0088 - 0x0038)
class UEOSCoreSessionsSearchFind final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A59[0x40];                                    // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreSessionsSearchFind* EOSSessionSearchFindAsync(class UObject* WorldContextObject, const struct FEOSHSessionSearch& SearchHandle, const struct FEOSSessionSearchFindOptions& Options);

	void HandleCallback(const struct FEOSSessionSearchFindCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreSessionsSearchFind">();
	}
	static class UEOSCoreSessionsSearchFind* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreSessionsSearchFind>();
	}
};
static_assert(alignof(UEOSCoreSessionsSearchFind) == 0x000008, "Wrong alignment on UEOSCoreSessionsSearchFind");
static_assert(sizeof(UEOSCoreSessionsSearchFind) == 0x000088, "Wrong size on UEOSCoreSessionsSearchFind");
static_assert(offsetof(UEOSCoreSessionsSearchFind, OnCallback) == 0x000038, "Member 'UEOSCoreSessionsSearchFind::OnCallback' has a wrong offset!");

// Class EOSCore.CoreStats
// 0x0000 (0x0030 - 0x0030)
class UCoreStats final : public UEOSCoreSubsystem
{
public:
	static EOSResult EOSStatsCopyStatByIndex(class UObject* WorldContextObject, const struct FEOSStatsCopyStatByIndexOptions& Options, struct FEOSStatsStat* OutStat);
	static EOSResult EOSStatsCopyStatByName(class UObject* WorldContextObject, const struct FEOSStatsCopyStatByNameOptions& Options, struct FEOSStatsStat* OutStat);
	static int32 EOSStatsGetStatsCount(class UObject* WorldContextObject, const struct FEOSStatsGetStatCountOptions& Options);
	static class UCoreStats* GetStats(class UObject* WorldContextObject);

	void EOSStatsIngestStat(class UObject* WorldContextObject, const struct FEOSStatsIngestStatOptions& Options, const TDelegate<void(struct FEOSStatsIngestStatCompleteCallbackInfo& Data)>& Callback);
	void EOSStatsQueryStats(class UObject* WorldContextObject, const struct FEOSStatsQueryStatsOptions& Options, const TDelegate<void(struct FEOSStatsOnQueryStatsCompleteCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStats">();
	}
	static class UCoreStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStats>();
	}
};
static_assert(alignof(UCoreStats) == 0x000008, "Wrong alignment on UCoreStats");
static_assert(sizeof(UCoreStats) == 0x000030, "Wrong size on UCoreStats");

// Class EOSCore.EOSCoreStatsIngestStat
// 0x0080 (0x00B8 - 0x0038)
class UEOSCoreStatsIngestStat final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A60[0x70];                                    // 0x0048(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreStatsIngestStat* EOSStatsIngestStatAsync(class UObject* WorldContextObject, const struct FEOSStatsIngestStatOptions& Options);

	void HandleCallback(const struct FEOSStatsIngestStatCompleteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreStatsIngestStat">();
	}
	static class UEOSCoreStatsIngestStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreStatsIngestStat>();
	}
};
static_assert(alignof(UEOSCoreStatsIngestStat) == 0x000008, "Wrong alignment on UEOSCoreStatsIngestStat");
static_assert(sizeof(UEOSCoreStatsIngestStat) == 0x0000B8, "Wrong size on UEOSCoreStatsIngestStat");
static_assert(offsetof(UEOSCoreStatsIngestStat, OnCallback) == 0x000038, "Member 'UEOSCoreStatsIngestStat::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreStatsQueryStats
// 0x00A0 (0x00D8 - 0x0038)
class UEOSCoreStatsQueryStats final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A62[0x90];                                    // 0x0048(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreStatsQueryStats* EOSStatsQueryStatsAsync(class UObject* WorldContextObject, const struct FEOSStatsQueryStatsOptions& Options);

	void HandleCallback(const struct FEOSStatsOnQueryStatsCompleteCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreStatsQueryStats">();
	}
	static class UEOSCoreStatsQueryStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreStatsQueryStats>();
	}
};
static_assert(alignof(UEOSCoreStatsQueryStats) == 0x000008, "Wrong alignment on UEOSCoreStatsQueryStats");
static_assert(sizeof(UEOSCoreStatsQueryStats) == 0x0000D8, "Wrong size on UEOSCoreStatsQueryStats");
static_assert(offsetof(UEOSCoreStatsQueryStats, OnCallback) == 0x000038, "Member 'UEOSCoreStatsQueryStats::OnCallback' has a wrong offset!");

// Class EOSCore.CoreTitleStorage
// 0x0000 (0x0030 - 0x0030)
class UCoreTitleStorage final : public UEOSCoreSubsystem
{
public:
	static EOSResult EOSTitleStorageCopyFileMetadataAtIndex(class UObject* WorldContextObject, const struct FEOSTitleStorageCopyFileMetadataAtIndexOptions& Options, struct FEOSTitleStorageFileMetadata* OutMetadata);
	static EOSResult EOSTitleStorageCopyFileMetadataByFilename(class UObject* WorldContextObject, const struct FEOSTitleStorageCopyFileMetadataByFilenameOptions& Options, struct FEOSTitleStorageFileMetadata* OutMetadata);
	static EOSResult EOSTitleStorageFileTransferRequestCancelRequest(class UObject* WorldContextObject, const struct FEOSTitleStorageFileTransferRequestHandle& Handle);
	static EOSResult EOSTitleStorageFileTransferRequestGetFilename(class UObject* WorldContextObject, const struct FEOSTitleStorageFileTransferRequestHandle& Handle, int32 FilenameStringBufferSizeBytes, class FString* OutStringBuffer);
	static EOSResult EOSTitleStorageFileTransferRequestGetFileRequestState(class UObject* WorldContextObject, const struct FEOSTitleStorageFileTransferRequestHandle& Handle);
	static int32 EOSTitleStorageGetFileMetadataCount(class UObject* WorldContextObject, const struct FEOSTitleStorageGetFileMetadataCountOptions& Options);
	static class UCoreTitleStorage* GetTitleStorage(class UObject* WorldContextObject);

	EOSResult EOSTitleStorageDeleteCache(class UObject* WorldContextObject, const struct FEOSTitleStorageDeleteCacheOptions& Options, const TDelegate<void(struct FEOSTitleStorageDeleteCacheCallbackInfo& Data)>& Callback);
	void EOSTitleStorageQueryFile(class UObject* WorldContextObject, const struct FEOSTitleStorageQueryFileOptions& Options, const TDelegate<void(struct FEOSTitleStorageQueryFileCallbackInfo& Data)>& Callback);
	void EOSTitleStorageQueryFileList(class UObject* WorldContextObject, const struct FEOSTitleStorageQueryFileListOptions& Options, const TDelegate<void(struct FEOSTitleStorageQueryFileListCallbackInfo& Data)>& Callback);
	struct FEOSTitleStorageFileTransferRequestHandle EOSTitleStorageReadFile(class UObject* WorldContextObject, const struct FEOSTitleStorageReadFileOptions& Options, const TDelegate<void(struct FEOSTitleStorageReadFileCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTitleStorage">();
	}
	static class UCoreTitleStorage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTitleStorage>();
	}
};
static_assert(alignof(UCoreTitleStorage) == 0x000008, "Wrong alignment on UCoreTitleStorage");
static_assert(sizeof(UCoreTitleStorage) == 0x000030, "Wrong size on UCoreTitleStorage");

// Class EOSCore.EOSCoreTitleStorageQueryFile
// 0x0058 (0x0090 - 0x0038)
class UEOSCoreTitleStorageQueryFile final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A6D[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreTitleStorageQueryFile* EOSTitleStorageQueryFileAsync(class UObject* WorldContextObject, const struct FEOSTitleStorageQueryFileOptions& Options);

	void HandleCallback(const struct FEOSTitleStorageQueryFileCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreTitleStorageQueryFile">();
	}
	static class UEOSCoreTitleStorageQueryFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreTitleStorageQueryFile>();
	}
};
static_assert(alignof(UEOSCoreTitleStorageQueryFile) == 0x000008, "Wrong alignment on UEOSCoreTitleStorageQueryFile");
static_assert(sizeof(UEOSCoreTitleStorageQueryFile) == 0x000090, "Wrong size on UEOSCoreTitleStorageQueryFile");
static_assert(offsetof(UEOSCoreTitleStorageQueryFile, OnCallback) == 0x000038, "Member 'UEOSCoreTitleStorageQueryFile::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreTitleStorageQueryFileList
// 0x0058 (0x0090 - 0x0038)
class UEOSCoreTitleStorageQueryFileList final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A6F[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreTitleStorageQueryFileList* EOSTitleStorageQueryFileListAsync(class UObject* WorldContextObject, const struct FEOSTitleStorageQueryFileListOptions& Options);

	void HandleCallback(const struct FEOSTitleStorageQueryFileListCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreTitleStorageQueryFileList">();
	}
	static class UEOSCoreTitleStorageQueryFileList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreTitleStorageQueryFileList>();
	}
};
static_assert(alignof(UEOSCoreTitleStorageQueryFileList) == 0x000008, "Wrong alignment on UEOSCoreTitleStorageQueryFileList");
static_assert(sizeof(UEOSCoreTitleStorageQueryFileList) == 0x000090, "Wrong size on UEOSCoreTitleStorageQueryFileList");
static_assert(offsetof(UEOSCoreTitleStorageQueryFileList, OnCallback) == 0x000038, "Member 'UEOSCoreTitleStorageQueryFileList::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreTitleStorageReadFile
// 0x0078 (0x00B0 - 0x0038)
class UEOSCoreTitleStorageReadFile final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A71[0x68];                                    // 0x0048(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreTitleStorageReadFile* EOSTitleStorageReadFileAsync(class UObject* WorldContextObject, const struct FEOSTitleStorageReadFileOptions& Options);

	void HandleCallback(const struct FEOSTitleStorageReadFileCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreTitleStorageReadFile">();
	}
	static class UEOSCoreTitleStorageReadFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreTitleStorageReadFile>();
	}
};
static_assert(alignof(UEOSCoreTitleStorageReadFile) == 0x000008, "Wrong alignment on UEOSCoreTitleStorageReadFile");
static_assert(sizeof(UEOSCoreTitleStorageReadFile) == 0x0000B0, "Wrong size on UEOSCoreTitleStorageReadFile");
static_assert(offsetof(UEOSCoreTitleStorageReadFile, OnCallback) == 0x000038, "Member 'UEOSCoreTitleStorageReadFile::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreTitleStorageDeleteCache
// 0x0048 (0x0080 - 0x0038)
class UEOSCoreTitleStorageDeleteCache final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A73[0x38];                                    // 0x0048(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreTitleStorageDeleteCache* EOSTitleStorageDeleteCacheAsync(class UObject* WorldContextObject, const struct FEOSTitleStorageDeleteCacheOptions& Options);

	void HandleCallback(const struct FEOSTitleStorageDeleteCacheCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreTitleStorageDeleteCache">();
	}
	static class UEOSCoreTitleStorageDeleteCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreTitleStorageDeleteCache>();
	}
};
static_assert(alignof(UEOSCoreTitleStorageDeleteCache) == 0x000008, "Wrong alignment on UEOSCoreTitleStorageDeleteCache");
static_assert(sizeof(UEOSCoreTitleStorageDeleteCache) == 0x000080, "Wrong size on UEOSCoreTitleStorageDeleteCache");
static_assert(offsetof(UEOSCoreTitleStorageDeleteCache, OnCallback) == 0x000038, "Member 'UEOSCoreTitleStorageDeleteCache::OnCallback' has a wrong offset!");

// Class EOSCore.CoreUI
// 0x0050 (0x0080 - 0x0030)
class UCoreUI final : public UEOSCoreSubsystem
{
public:
	uint8                                         Pad_2A75[0x50];                                    // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static EOSResult EOSUIAcknowledgeEventId(class UObject* WorldContextObject, const struct FEOSUIAcknowledgeEventIdOptions& Options);
	static struct FEOSNotificationId EOSUIAddNotifyDisplaySettingsUpdated(class UObject* WorldContextObject, const struct FEOSUIAddNotifyDisplaySettingsUpdatedOptions& Options, const TDelegate<void(struct FEOSUIOnDisplaySettingsUpdatedCallbackInfo& Data)>& Callback);
	static bool EOSUIGetFriendsExclusiveInput(class UObject* WorldContextObject, const struct FEOSUIGetFriendsExclusiveInputOptions& Options);
	static bool EOSUIGetFriendsVisible(class UObject* WorldContextObject, const struct FEOSUIGetFriendsVisibleOptions& Options);
	static EEOSUIENotificationLocation EOSUIGetNotificationLocationPreference(class UObject* WorldContextObject);
	static int32 EOSUIGetToggleFriendsKey(class UObject* WorldContextObject, const struct FEOSUIGetToggleFriendsKeyOptions& Options);
	static bool EOSUIIsValidKeyCombination(class UObject* WorldContextObject, int32 KeyCombination);
	static void EOSUIRemoveNotifyDisplaySettingsUpdated(class UObject* WorldContextObject, const struct FEOSNotificationId& ID);
	static EOSResult EOSUISetDisplayPreference(class UObject* WorldContextObject, const struct FEOSUISetDisplayPreferenceOptions& Options);
	static EOSResult EOSUISetToggleFriendsKey(class UObject* WorldContextObject, const struct FEOSUISetToggleFriendsKeyOptions& Options);
	static class UCoreUI* GetUI(class UObject* WorldContextObject);

	void EOSUIHideFriends(class UObject* WorldContextObject, const struct FEOSUIHideFriendsOptions& Options, const TDelegate<void(struct FEOSUIHideFriendsCallbackInfo& Data)>& Callback);
	bool EOSUIIsSocialOverlayPaused(class UObject* WorldContextObject, const struct FEOSUIIsSocialOverlayPausedOptions& Options);
	EOSResult EOSUIPauseSocialOverlay(class UObject* WorldContextObject, const struct FEOSUIPauseSocialOverlayOptions& Options);
	void EOSUIShowBlockPlayer(class UObject* WorldContextObject, const struct FEOSUIShowBlockPlayerOptions& Options, const TDelegate<void(struct FEOSUIOnShowBlockPlayerCallbackInfo& Data)>& Callback);
	void EOSUIShowFriends(class UObject* WorldContextObject, const struct FEOSUIShowFriendsOptions& Options, const TDelegate<void(struct FEOSUIShowFriendsCallbackInfo& Data)>& Callback);
	void EOSUIShowReportPlayer(class UObject* WorldContextObject, const struct FEOSUIShowReportPlayerOptions& Options, const TDelegate<void(struct FEOSUIOnShowReportPlayerCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreUI">();
	}
	static class UCoreUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreUI>();
	}
};
static_assert(alignof(UCoreUI) == 0x000008, "Wrong alignment on UCoreUI");
static_assert(sizeof(UCoreUI) == 0x000080, "Wrong size on UCoreUI");

// Class EOSCore.EOSCoreUIShowFriends
// 0x0048 (0x0080 - 0x0038)
class UEOSCoreUIShowFriends final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A86[0x38];                                    // 0x0048(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreUIShowFriends* EOSUIShowFriendsAsync(class UObject* WorldContextObject, const struct FEOSUIShowFriendsOptions& Options);

	void HandleCallback(const struct FEOSUIShowFriendsCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreUIShowFriends">();
	}
	static class UEOSCoreUIShowFriends* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreUIShowFriends>();
	}
};
static_assert(alignof(UEOSCoreUIShowFriends) == 0x000008, "Wrong alignment on UEOSCoreUIShowFriends");
static_assert(sizeof(UEOSCoreUIShowFriends) == 0x000080, "Wrong size on UEOSCoreUIShowFriends");
static_assert(offsetof(UEOSCoreUIShowFriends, OnCallback) == 0x000038, "Member 'UEOSCoreUIShowFriends::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreUIHideFriends
// 0x0048 (0x0080 - 0x0038)
class UEOSCoreUIHideFriends final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A89[0x38];                                    // 0x0048(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreUIHideFriends* EOSUIHideFriendsAsync(class UObject* WorldContextObject, const struct FEOSUIHideFriendsOptions& Options);

	void HandleCallback(const struct FEOSUIHideFriendsCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreUIHideFriends">();
	}
	static class UEOSCoreUIHideFriends* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreUIHideFriends>();
	}
};
static_assert(alignof(UEOSCoreUIHideFriends) == 0x000008, "Wrong alignment on UEOSCoreUIHideFriends");
static_assert(sizeof(UEOSCoreUIHideFriends) == 0x000080, "Wrong size on UEOSCoreUIHideFriends");
static_assert(offsetof(UEOSCoreUIHideFriends, OnCallback) == 0x000038, "Member 'UEOSCoreUIHideFriends::OnCallback' has a wrong offset!");

// Class EOSCore.CoreUserInfo
// 0x0000 (0x0030 - 0x0030)
class UCoreUserInfo final : public UEOSCoreSubsystem
{
public:
	static EOSResult EOSUserInfoCopyExternalUserInfoByAccountId(class UObject* WorldContextObject, const struct FEOSUserInfoCopyExternalUserInfoByAccountIdOptions& Options, struct FEOSUserInfoExternalUserInfo* OutExternalUserInfo);
	static EOSResult EOSUserInfoCopyExternalUserInfoByAccountType(class UObject* WorldContextObject, const struct FEOSUserInfoCopyExternalUserInfoByAccountTypeOptions& Options, struct FEOSUserInfoExternalUserInfo* OutExternalUserInfo);
	static EOSResult EOSUserInfoCopyExternalUserInfoByIndex(class UObject* WorldContextObject, const struct FEOSUserInfoCopyExternalUserInfoByIndexOptions& Options, struct FEOSUserInfoExternalUserInfo* OutExternalUserInfo);
	static EOSResult EOSUserInfoCopyUserInfo(class UObject* WorldContextObject, const struct FEOSUserInfoCopyUserInfoOptions& Options, struct FEOSUserInfo* OutUserInfo);
	static int32 EOSUserInfoGetExternalUserInfoCount(class UObject* WorldContextObject, const struct FEOSUserInfoGetExternalUserInfoCountOptions& Options);
	static class UCoreUserInfo* GetUserInfo(class UObject* WorldContextObject);

	void EOSUserInfoQueryUserInfo(class UObject* WorldContextObject, const struct FEOSUserInfoQueryUserInfoOptions& Options, const TDelegate<void(struct FEOSUserInfoQueryUserInfoCallbackInfo& Data)>& Callback);
	void EOSUserInfoQueryUserInfoByDisplayName(class UObject* WorldContextObject, const struct FEOSUserInfoQueryUserInfoByDisplayNameOptions& Options, const TDelegate<void(struct FEOSUserInfoQueryUserInfoByDisplayNameCallbackInfo& Data)>& Callback);
	void EOSUserInfoQueryUserInfoByExternalAccount(class UObject* WorldContextObject, const struct FEOSUserInfoQueryUserInfoByExternalAccountOptions& Options, const TDelegate<void(struct FEOSUserInfoQueryUserInfoByExternalAccountCallbackInfo& Data)>& Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreUserInfo">();
	}
	static class UCoreUserInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreUserInfo>();
	}
};
static_assert(alignof(UCoreUserInfo) == 0x000008, "Wrong alignment on UCoreUserInfo");
static_assert(sizeof(UCoreUserInfo) == 0x000030, "Wrong size on UCoreUserInfo");

// Class EOSCore.EOSCoreUserInfoQueryUserInfo
// 0x0068 (0x00A0 - 0x0038)
class UEOSCoreUserInfoQueryUserInfo final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A91[0x58];                                    // 0x0048(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreUserInfoQueryUserInfo* EOSUserInfoQueryUserInfoAsync(class UObject* WorldContextObject, const struct FEOSUserInfoQueryUserInfoOptions& Options);

	void HandleCallback(const struct FEOSUserInfoQueryUserInfoCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreUserInfoQueryUserInfo">();
	}
	static class UEOSCoreUserInfoQueryUserInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreUserInfoQueryUserInfo>();
	}
};
static_assert(alignof(UEOSCoreUserInfoQueryUserInfo) == 0x000008, "Wrong alignment on UEOSCoreUserInfoQueryUserInfo");
static_assert(sizeof(UEOSCoreUserInfoQueryUserInfo) == 0x0000A0, "Wrong size on UEOSCoreUserInfoQueryUserInfo");
static_assert(offsetof(UEOSCoreUserInfoQueryUserInfo, OnCallback) == 0x000038, "Member 'UEOSCoreUserInfoQueryUserInfo::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreUserInfoQueryUserInfoByDisplayName
// 0x0058 (0x0090 - 0x0038)
class UEOSCoreUserInfoQueryUserInfoByDisplayName final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A93[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreUserInfoQueryUserInfoByDisplayName* EOSUserInfoQueryUserInfoByDisplayNameAsync(class UObject* WorldContextObject, const struct FEOSUserInfoQueryUserInfoByDisplayNameOptions& Options);

	void HandleCallback(const struct FEOSUserInfoQueryUserInfoByDisplayNameCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreUserInfoQueryUserInfoByDisplayName">();
	}
	static class UEOSCoreUserInfoQueryUserInfoByDisplayName* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreUserInfoQueryUserInfoByDisplayName>();
	}
};
static_assert(alignof(UEOSCoreUserInfoQueryUserInfoByDisplayName) == 0x000008, "Wrong alignment on UEOSCoreUserInfoQueryUserInfoByDisplayName");
static_assert(sizeof(UEOSCoreUserInfoQueryUserInfoByDisplayName) == 0x000090, "Wrong size on UEOSCoreUserInfoQueryUserInfoByDisplayName");
static_assert(offsetof(UEOSCoreUserInfoQueryUserInfoByDisplayName, OnCallback) == 0x000038, "Member 'UEOSCoreUserInfoQueryUserInfoByDisplayName::OnCallback' has a wrong offset!");

// Class EOSCore.EOSCoreUserInfoByExternalAccount
// 0x0060 (0x0098 - 0x0038)
class UEOSCoreUserInfoByExternalAccount final : public UEOSCoreAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A95[0x50];                                    // 0x0048(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEOSCoreUserInfoByExternalAccount* EOSUserInfoQueryUserInfoByExternalAccountAsync(class UObject* WorldContextObject, const struct FEOSUserInfoQueryUserInfoByExternalAccountOptions& Options);

	void HandleCallback(const struct FEOSUserInfoQueryUserInfoByExternalAccountCallbackInfo& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EOSCoreUserInfoByExternalAccount">();
	}
	static class UEOSCoreUserInfoByExternalAccount* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEOSCoreUserInfoByExternalAccount>();
	}
};
static_assert(alignof(UEOSCoreUserInfoByExternalAccount) == 0x000008, "Wrong alignment on UEOSCoreUserInfoByExternalAccount");
static_assert(sizeof(UEOSCoreUserInfoByExternalAccount) == 0x000098, "Wrong size on UEOSCoreUserInfoByExternalAccount");
static_assert(offsetof(UEOSCoreUserInfoByExternalAccount, OnCallback) == 0x000038, "Member 'UEOSCoreUserInfoByExternalAccount::OnCallback' has a wrong offset!");

}

