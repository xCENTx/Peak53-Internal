#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HelperFunctions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EGlobalColors_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "EUMGRenderTransform_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HelperFunctions.BP_HelperFunctions_C
// 0x0000 (0x0028 - 0x0028)
class UBP_HelperFunctions_C final : public UBlueprintFunctionLibrary
{
public:
	static class UOverlaySlot* AddChildToOverlay(class UOverlay* Overlay, class UWidget* Child, EVerticalAlignment InVerticalAlignment, EHorizontalAlignment InHorizontalAlignment, class UObject* __WorldContext);
	static class UVerticalBoxSlot* AddChildToVerticalBox(class UVerticalBox* VerticalBox, class UWidget* Child, EVerticalAlignment InVerticalAlignment, EHorizontalAlignment InHorizontalAlignment, class UObject* __WorldContext);
	static class UHorizontalBoxSlot* AddToHorizontalBox(class UHorizontalBox* Target, class UWidget* Content, EHorizontalAlignment InHorizontalAlignment, EVerticalAlignment InVerticalAlignment, class UObject* __WorldContext);
	static struct FVector2D ClampVector2D(const struct FVector2D& Vector2D, double Min, double Max, class UObject* __WorldContext);
	static void CreateHighlightWidget(double Playback_Speed, bool UseGlobalColor, EGlobalColors GlobalColorType, const struct FLinearColor& Color, float Opacity, class UObject* __WorldContext);
	static class UWB_Request_C* CreateRequest(bool IsConfirmOnly, const class FText& Text_Head, const class FText& Text_Body, class UObject* __WorldContext);
	static class UWB_Request_Timer_C* CreateRequestWithTimer(bool IsConfirmOnly, const class FText& Text_Head, const class FText& Text_Body, class UObject* __WorldContext);
	static void Debug_PrintVideoMode(float Duration, bool bPrintToLog, class UObject* __WorldContext);
	static double Finterpolate(double Current, double Target, double InterpSpeed, bool InterpConstant, class UObject* __WorldContext);
	static void Get_PMM_Instance(class UObject* __WorldContext, class UPMM_Instance_C** AsPMM_Instance);
	static void GetDefaultInputMappings(class UObject* __WorldContext, TMap<class FName, class FText>* Default_Input_Mappings);
	static void GetFillImage(class UProgressBar* Target, class UObject* __WorldContext, class UObject** FillImage);
	static double GetGamepadSensitivity(class UObject* __WorldContext);
	static struct FLinearColor GetGlobalColorByType(EGlobalColors Type, class UObject* __WorldContext);
	static void GetGlobalColors(class UObject* __WorldContext, struct FLinearColor* Overall_Color_Tone_1, struct FLinearColor* Overall_Color_Tone_2, struct FLinearColor* Overall_Color_Contrast, struct FLinearColor* Overall_Color_Font, struct FLinearColor* Overall_Color_Font_Contrast, struct FLinearColor* OverallColor_White);
	static bool GetInvertGamepad(class UObject* __WorldContext);
	static bool GetInvertMouse(class UObject* __WorldContext);
	static double GetMouseSensitivity(class UObject* __WorldContext);
	static void GetSize(class USizeBox* SizeBox, class UObject* __WorldContext, double* Width, double* Height);
	static struct FVector2D GetTexture2DSize(class UTexture2D* Texture2D, class UObject* __WorldContext);
	static struct FVector2D GetTexture2DSizeClamped(class UTexture2D* Texture2D, const struct FVector2D& Clamp, class UObject* __WorldContext);
	static bool HasColorChanged(const struct FLinearColor& InColor, class UObject* __WorldContext);
	static bool HasRequest(class UObject* __WorldContext, class UWB_Request_C** Output);
	static bool HasRequestWithTimer(class UObject* __WorldContext, class UWB_Request_Timer_C** Output);
	static bool HasTransformChanged(const struct FWidgetTransform& InTransform, class UObject* __WorldContext);
	static void InterpRenderAngle(class UWidget* Target, double TargetValue, double InterpSpeed, bool InterpConstant, class UObject* __WorldContext);
	static void InterpRenderOpacity(class UWidget* Target, double TargetValue, double InterpSpeed, bool InterpConstant, class UObject* __WorldContext);
	static void InterpRenderTransform(class UWidget* Target, EUMGRenderTransform TransformType, const struct FVector2D& TargetValue, double InterpSpeed, bool InterpConstant, class UObject* __WorldContext);
	static bool IsUsingGamepad(class UObject* __WorldContext);
	static struct FVector2D LerpVector2D(const struct FVector2D& A, const struct FVector2D& B, double Alpha, class UObject* __WorldContext);
	static struct FVector2D MapRangeClampedVector2D(const struct FVector2D& Value, const struct FVector2D& InRangeA, const struct FVector2D& InRangeB, const struct FVector2D& OutRangeA, const struct FVector2D& OutRangeB, class UObject* __WorldContext);
	static void OpenPauseMenu(class UObject* __WorldContext);
	static double RandomizePositiveNegativeFloat(double Value, class UObject* __WorldContext);
	static void SetBackgroundTint(class UProgressBar* Target, const struct FSlateColor& Tint, class UObject* __WorldContext);
	static void SetBorderBrush(class UBorder* Target, class UObject* Brush, class UObject* __WorldContext);
	static void SetBorderBrushSize(class UBorder* Target, const struct FVector2D& Size, class UObject* __WorldContext);
	static void SetBorderBrushTiling(class UBorder* Target, ESlateBrushTileType Tiling, class UObject* __WorldContext);
	static void SetFillImage(class UProgressBar* Target, class UObject* FillImage, class UObject* __WorldContext);
	static void SetFillImageDrawAs(class UProgressBar* Target, ESlateBrushDrawType DrawAs, class UObject* __WorldContext);
	static void SetFillImageMargin(class UProgressBar* Target, double Margin, class UObject* __WorldContext);
	static void SetFillImageSize(class UProgressBar* Target, const struct FVector2D& FillImageSize, class UObject* __WorldContext);
	static void SetFillImageTiling(class UProgressBar* Target, ESlateBrushTileType Tiling, class UObject* __WorldContext, struct FProgressBarStyle* Output_Get);
	static void SetImageBrush(class UImage* Target, class UObject* Brush, class UObject* __WorldContext);
	static void SetImageBrushSize(class UImage* Target, const struct FVector2D& Size, class UObject* __WorldContext);
	static void SetImageBrushTiling(class UImage* Target, ESlateBrushTileType Tiling, class UObject* __WorldContext);
	static void SetMarqueeDrawAs(class UProgressBar* Target, ESlateBrushDrawType Draw_As, class UObject* __WorldContext);
	static void SetMarqueeImage(class UProgressBar* Target, class UObject* Image, class UObject* __WorldContext);
	static void SetMarqueeImageSize(class UProgressBar* Target, const struct FVector2D& Image_Size, class UObject* __WorldContext);
	static void SetMarqueeMargin(class UProgressBar* Target, const struct FMargin& Margin, class UObject* __WorldContext);
	static void SetMarqueeMirroring(class UProgressBar* Target, ESlateBrushMirrorType Mirroring, class UObject* __WorldContext);
	static void SetMarqueeTiling(class UProgressBar* Target, ESlateBrushTileType Tiling, class UObject* __WorldContext);
	static void SetMarqueeTint(class UProgressBar* Target, const struct FLinearColor& Tint, class UObject* __WorldContext);
	static void SetSize(class USizeBox* SizeBox, double Width, double Height, class UObject* __WorldContext);
	static struct FLinearColor SubtractBrightnessValue(const struct FLinearColor& InColor, double Value, class UObject* __WorldContext);
	static struct FLinearColor SubtractFromColor(const struct FLinearColor& InColor, double Value, class UObject* __WorldContext);
	static void TextInfo_HandleColorOverride(const struct FS_TextInfo_PMM& In, class UObject* __WorldContext, struct FS_TextInfo_PMM* Out);
	static bool ValidateDataTableRow(const struct FDataTableRowHandle& RowHandle, class UObject* __WorldContext);
	static bool ValidateImageObject(class UObject* InObject, class UObject* __WorldContext);
	static struct FVector2D Vector2DInterpolate(const struct FVector2D& Current, const struct FVector2D& Target, double InterpSpeed, bool InterpConstant, class UObject* __WorldContext);
	static double VectorGetDistanceTo(const struct FVector& Vector, const struct FVector& Other_Vector, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HelperFunctions_C">();
	}
	static class UBP_HelperFunctions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_HelperFunctions_C>();
	}
};
static_assert(alignof(UBP_HelperFunctions_C) == 0x000008, "Wrong alignment on UBP_HelperFunctions_C");
static_assert(sizeof(UBP_HelperFunctions_C) == 0x000028, "Wrong size on UBP_HelperFunctions_C");

}

