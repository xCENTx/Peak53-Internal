#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SGKBuildingInterface

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_BuildType_structs.hpp"


namespace SDK::Params
{

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK AddMultipleOwners
// 0x0018 (0x0018 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_AddMultipleOwners final
{
public:
	TArray<class FText>                           Owners;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_AddMultipleOwners) == 0x000008, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_AddMultipleOwners");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_AddMultipleOwners) == 0x000018, "Wrong size on BP_SGKBuildingInterface_C_SGK_AddMultipleOwners");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_AddMultipleOwners, Owners) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_AddMultipleOwners::Owners' has a wrong offset!");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_AddMultipleOwners, ReturnValue) == 0x000010, "Member 'BP_SGKBuildingInterface_C_SGK_AddMultipleOwners::ReturnValue' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK AddOwner
// 0x0020 (0x0020 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_AddOwner final
{
public:
	class FText                                   PlayerName;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_AddOwner) == 0x000008, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_AddOwner");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_AddOwner) == 0x000020, "Wrong size on BP_SGKBuildingInterface_C_SGK_AddOwner");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_AddOwner, PlayerName) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_AddOwner::PlayerName' has a wrong offset!");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_AddOwner, ReturnValue) == 0x000018, "Member 'BP_SGKBuildingInterface_C_SGK_AddOwner::ReturnValue' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK BPBuildCollision
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_BPBuildCollision final
{
public:
	TArray<class UPrimitiveComponent*>            Collision;                                         // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_BPBuildCollision) == 0x000008, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_BPBuildCollision");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_BPBuildCollision) == 0x000010, "Wrong size on BP_SGKBuildingInterface_C_SGK_BPBuildCollision");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_BPBuildCollision, Collision) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_BPBuildCollision::Collision' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK BPGrids
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_BPGrids final
{
public:
	TArray<class UBP_GridComponent_C*>            Grids;                                             // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_BPGrids) == 0x000008, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_BPGrids");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_BPGrids) == 0x000010, "Wrong size on BP_SGKBuildingInterface_C_SGK_BPGrids");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_BPGrids, Grids) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_BPGrids::Grids' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK BuildingOptions
// 0x0008 (0x0008 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_BuildingOptions final
{
public:
	class UBP_PlayerInventory_C*                  PlayerInventory;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_BuildingOptions) == 0x000008, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_BuildingOptions");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_BuildingOptions) == 0x000008, "Wrong size on BP_SGKBuildingInterface_C_SGK_BuildingOptions");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_BuildingOptions, PlayerInventory) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_BuildingOptions::PlayerInventory' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK BuildPart
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_BuildPart final
{
public:
	struct FDataTableRowHandle                    BuildPart;                                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_BuildPart) == 0x000008, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_BuildPart");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_BuildPart) == 0x000010, "Wrong size on BP_SGKBuildingInterface_C_SGK_BuildPart");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_BuildPart, BuildPart) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_BuildPart::BuildPart' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK BuildPartPlaced
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_BuildPartPlaced final
{
public:
	class UBP_PlayerInventory_C*                  PlayerInventory;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          FromSaveGame;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_BuildPartPlaced) == 0x000008, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_BuildPartPlaced");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_BuildPartPlaced) == 0x000010, "Wrong size on BP_SGKBuildingInterface_C_SGK_BuildPartPlaced");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_BuildPartPlaced, PlayerInventory) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_BuildPartPlaced::PlayerInventory' has a wrong offset!");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_BuildPartPlaced, FromSaveGame) == 0x000008, "Member 'BP_SGKBuildingInterface_C_SGK_BuildPartPlaced::FromSaveGame' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK BuildPartType
// 0x0001 (0x0001 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_BuildPartType final
{
public:
	E_BuildType                                   Type;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_BuildPartType) == 0x000001, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_BuildPartType");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_BuildPartType) == 0x000001, "Wrong size on BP_SGKBuildingInterface_C_SGK_BuildPartType");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_BuildPartType, Type) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_BuildPartType::Type' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK ClearOwners
// 0x0001 (0x0001 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_ClearOwners final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_ClearOwners) == 0x000001, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_ClearOwners");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_ClearOwners) == 0x000001, "Wrong size on BP_SGKBuildingInterface_C_SGK_ClearOwners");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_ClearOwners, ReturnValue) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_ClearOwners::ReturnValue' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK DeleteBuildPart
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_DeleteBuildPart final
{
public:
	class UBP_PlayerBuildingComponent_C*          PlayerBuildingComponent;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceDestroy;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_DeleteBuildPart) == 0x000008, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_DeleteBuildPart");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_DeleteBuildPart) == 0x000010, "Wrong size on BP_SGKBuildingInterface_C_SGK_DeleteBuildPart");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_DeleteBuildPart, PlayerBuildingComponent) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_DeleteBuildPart::PlayerBuildingComponent' has a wrong offset!");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_DeleteBuildPart, ForceDestroy) == 0x000008, "Member 'BP_SGKBuildingInterface_C_SGK_DeleteBuildPart::ForceDestroy' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK IsOwner
// 0x0020 (0x0020 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_IsOwner final
{
public:
	class FText                                   PlayerName;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          IsOwner;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_IsOwner) == 0x000008, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_IsOwner");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_IsOwner) == 0x000020, "Wrong size on BP_SGKBuildingInterface_C_SGK_IsOwner");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_IsOwner, PlayerName) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_IsOwner::PlayerName' has a wrong offset!");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_IsOwner, IsOwner) == 0x000018, "Member 'BP_SGKBuildingInterface_C_SGK_IsOwner::IsOwner' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK IsPendingDestroy
// 0x0001 (0x0001 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_IsPendingDestroy final
{
public:
	bool                                          IsPendingDestroy;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_IsPendingDestroy) == 0x000001, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_IsPendingDestroy");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_IsPendingDestroy) == 0x000001, "Wrong size on BP_SGKBuildingInterface_C_SGK_IsPendingDestroy");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_IsPendingDestroy, IsPendingDestroy) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_IsPendingDestroy::IsPendingDestroy' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK IsPlaced
// 0x0001 (0x0001 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_IsPlaced final
{
public:
	bool                                          IsPlaced;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_IsPlaced) == 0x000001, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_IsPlaced");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_IsPlaced) == 0x000001, "Wrong size on BP_SGKBuildingInterface_C_SGK_IsPlaced");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_IsPlaced, IsPlaced) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_IsPlaced::IsPlaced' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK LoadExtraData
// 0x0010 (0x0010 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_LoadExtraData final
{
public:
	class UBP_SGKSaveGame_C*                      SaveGame;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_LoadExtraData) == 0x000008, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_LoadExtraData");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_LoadExtraData) == 0x000010, "Wrong size on BP_SGKBuildingInterface_C_SGK_LoadExtraData");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_LoadExtraData, SaveGame) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_LoadExtraData::SaveGame' has a wrong offset!");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_LoadExtraData, Param_Index) == 0x000008, "Member 'BP_SGKBuildingInterface_C_SGK_LoadExtraData::Param_Index' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK Preview
// 0x0002 (0x0002 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_Preview final
{
public:
	bool                                          Preview;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_Preview) == 0x000001, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_Preview");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_Preview) == 0x000002, "Wrong size on BP_SGKBuildingInterface_C_SGK_Preview");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_Preview, Preview) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_Preview::Preview' has a wrong offset!");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_Preview, ReturnValue) == 0x000001, "Member 'BP_SGKBuildingInterface_C_SGK_Preview::ReturnValue' has a wrong offset!");

// Function BP_SGKBuildingInterface.BP_SGKBuildingInterface_C.SGK SupportCheck
// 0x0004 (0x0004 - 0x0000)
struct BP_SGKBuildingInterface_C_SGK_SupportCheck final
{
public:
	bool                                          DestroyOnFail;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DirectSupportOnly;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Supported;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IndirectSupportOnly;                               // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SGKBuildingInterface_C_SGK_SupportCheck) == 0x000001, "Wrong alignment on BP_SGKBuildingInterface_C_SGK_SupportCheck");
static_assert(sizeof(BP_SGKBuildingInterface_C_SGK_SupportCheck) == 0x000004, "Wrong size on BP_SGKBuildingInterface_C_SGK_SupportCheck");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_SupportCheck, DestroyOnFail) == 0x000000, "Member 'BP_SGKBuildingInterface_C_SGK_SupportCheck::DestroyOnFail' has a wrong offset!");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_SupportCheck, DirectSupportOnly) == 0x000001, "Member 'BP_SGKBuildingInterface_C_SGK_SupportCheck::DirectSupportOnly' has a wrong offset!");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_SupportCheck, Supported) == 0x000002, "Member 'BP_SGKBuildingInterface_C_SGK_SupportCheck::Supported' has a wrong offset!");
static_assert(offsetof(BP_SGKBuildingInterface_C_SGK_SupportCheck, IndirectSupportOnly) == 0x000003, "Member 'BP_SGKBuildingInterface_C_SGK_SupportCheck::IndirectSupportOnly' has a wrong offset!");

}

