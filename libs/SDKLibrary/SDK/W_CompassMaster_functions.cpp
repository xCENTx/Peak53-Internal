#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_CompassMaster

#include "Basic.hpp"

#include "W_CompassMaster_classes.hpp"
#include "W_CompassMaster_parameters.hpp"


namespace SDK
{

// Function W_CompassMaster.W_CompassMaster_C.AddIndicator
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CompassIndicatorComponent_C*  TargetComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_CompassMaster_C::AddIndicator(class UBP_CompassIndicatorComponent_C* TargetComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "AddIndicator");

	Params::W_CompassMaster_C_AddIndicator Parms{};

	Parms.TargetComponent = TargetComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_CompassMaster.W_CompassMaster_C.CalcIndicatorPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CI_PositionMode                       IndicatorPositionMode                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PositionX                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_CompassMaster_C::CalcIndicatorPosition(E_CI_PositionMode IndicatorPositionMode, const struct FVector& TargetLocation, double* PositionX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "CalcIndicatorPosition");

	Params::W_CompassMaster_C_CalcIndicatorPosition Parms{};

	Parms.IndicatorPositionMode = IndicatorPositionMode;
	Parms.TargetLocation = std::move(TargetLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (PositionX != nullptr)
		*PositionX = Parms.PositionX;
}


// Function W_CompassMaster.W_CompassMaster_C.ExecuteUbergraph_W_CompassMaster
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_CompassMaster_C::ExecuteUbergraph_W_CompassMaster(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "ExecuteUbergraph_W_CompassMaster");

	Params::W_CompassMaster_C_ExecuteUbergraph_W_CompassMaster Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_CompassMaster.W_CompassMaster_C.GetCompassAngle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_C_RotationMode                        IndicatorPositionMode                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Z__Yaw_                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_CompassMaster_C::GetCompassAngle(E_C_RotationMode IndicatorPositionMode, float* Z__Yaw_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "GetCompassAngle");

	Params::W_CompassMaster_C_GetCompassAngle Parms{};

	Parms.IndicatorPositionMode = IndicatorPositionMode;

	UObject::ProcessEvent(Func, &Parms);

	if (Z__Yaw_ != nullptr)
		*Z__Yaw_ = Parms.Z__Yaw_;
}


// Function W_CompassMaster.W_CompassMaster_C.GetPlayerLocationByDistanceMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_C_CalculateDistanceFrom               GetDistanceMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UW_CompassMaster_C::GetPlayerLocationByDistanceMode(E_C_CalculateDistanceFrom GetDistanceMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "GetPlayerLocationByDistanceMode");

	Params::W_CompassMaster_C_GetPlayerLocationByDistanceMode Parms{};

	Parms.GetDistanceMode = GetDistanceMode;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_CompassMaster.W_CompassMaster_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_CompassMaster_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "PreConstruct");

	Params::W_CompassMaster_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_CompassMaster.W_CompassMaster_C.RemoveIndicator
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CompassIndicatorComponent_C*  TargetComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_CompassMaster_C::RemoveIndicator(class UBP_CompassIndicatorComponent_C* TargetComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "RemoveIndicator");

	Params::W_CompassMaster_C_RemoveIndicator Parms{};

	Parms.TargetComponent = TargetComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_CompassMaster.W_CompassMaster_C.SetupCompassIndicators
// (BlueprintCallable, BlueprintEvent)

void UW_CompassMaster_C::SetupCompassIndicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "SetupCompassIndicators");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_CompassMaster.W_CompassMaster_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_CompassMaster_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "Tick");

	Params::W_CompassMaster_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_CompassMaster.W_CompassMaster_C.UpdateCompassSettings
// (BlueprintCallable, BlueprintEvent)

void UW_CompassMaster_C::UpdateCompassSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "UpdateCompassSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_CompassMaster.W_CompassMaster_C.UpdateIndicators
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_CompassMaster_C::UpdateIndicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "UpdateIndicators");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_CompassMaster.W_CompassMaster_C.UpdatePreviewIndicatorSettitngs
// (BlueprintCallable, BlueprintEvent)

void UW_CompassMaster_C::UpdatePreviewIndicatorSettitngs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "UpdatePreviewIndicatorSettitngs");

	UObject::ProcessEvent(Func, nullptr);
}

}

