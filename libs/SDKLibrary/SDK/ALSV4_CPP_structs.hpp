#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALSV4_CPP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// Enum ALSV4_CPP.EALSGait
// NumValues: 0x0004
enum class EALSGait : uint8
{
	Walking                                  = 0,
	Running                                  = 1,
	Sprinting                                = 2,
	EALSGait_MAX                             = 3,
};

// Enum ALSV4_CPP.EALSMovementAction
// NumValues: 0x0006
enum class EALSMovementAction : uint8
{
	None                                     = 0,
	LowMantle                                = 1,
	HighMantle                               = 2,
	Rolling                                  = 3,
	GettingUp                                = 4,
	EALSMovementAction_MAX                   = 5,
};

// Enum ALSV4_CPP.EALSMovementState
// NumValues: 0x0006
enum class EALSMovementState : uint8
{
	None                                     = 0,
	Grounded                                 = 1,
	InAir                                    = 2,
	Mantling                                 = 3,
	Ragdoll                                  = 4,
	EALSMovementState_MAX                    = 5,
};

// Enum ALSV4_CPP.EALSOverlayState
// NumValues: 0x000E
enum class EALSOverlayState : uint8
{
	Default                                  = 0,
	Masculine                                = 1,
	Feminine                                 = 2,
	Injured                                  = 3,
	HandsTied                                = 4,
	Rifle                                    = 5,
	PistolOneHanded                          = 6,
	PistolTwoHanded                          = 7,
	Bow                                      = 8,
	Torch                                    = 9,
	Binoculars                               = 10,
	Box                                      = 11,
	Barrel                                   = 12,
	EALSOverlayState_MAX                     = 13,
};

// Enum ALSV4_CPP.EALSRotationMode
// NumValues: 0x0004
enum class EALSRotationMode : uint8
{
	VelocityDirection                        = 0,
	LookingDirection                         = 1,
	Aiming                                   = 2,
	EALSRotationMode_MAX                     = 3,
};

// Enum ALSV4_CPP.EALSStance
// NumValues: 0x0003
enum class EALSStance : uint8
{
	Standing                                 = 0,
	Crouching                                = 1,
	EALSStance_MAX                           = 2,
};

// Enum ALSV4_CPP.EALSViewMode
// NumValues: 0x0003
enum class EALSViewMode : uint8
{
	ThirdPerson                              = 0,
	FirstPerson                              = 1,
	EALSViewMode_MAX                         = 2,
};

// Enum ALSV4_CPP.EALSAnimFeatureExample
// NumValues: 0x0004
enum class EALSAnimFeatureExample : uint8
{
	StrideBlending                           = 0,
	AdditiveBlending                         = 1,
	SprintImpulse                            = 2,
	EALSAnimFeatureExample_MAX               = 3,
};

// Enum ALSV4_CPP.EALSFootstepType
// NumValues: 0x0005
enum class EALSFootstepType : uint8
{
	Step                                     = 0,
	WalkRun                                  = 1,
	Jump                                     = 2,
	Land                                     = 3,
	EALSFootstepType_MAX                     = 4,
};

// Enum ALSV4_CPP.EALSGroundedEntryState
// NumValues: 0x0003
enum class EALSGroundedEntryState : uint8
{
	None                                     = 0,
	Roll                                     = 1,
	EALSGroundedEntryState_MAX               = 2,
};

// Enum ALSV4_CPP.EALSHipsDirection
// NumValues: 0x0007
enum class EALSHipsDirection : uint8
{
	F                                        = 0,
	B                                        = 1,
	RF                                       = 2,
	RB                                       = 3,
	LF                                       = 4,
	LB                                       = 5,
	EALSHipsDirection_MAX                    = 6,
};

// Enum ALSV4_CPP.EALSMantleType
// NumValues: 0x0004
enum class EALSMantleType : uint8
{
	HighMantle                               = 0,
	LowMantle                                = 1,
	FallingCatch                             = 2,
	EALSMantleType_MAX                       = 3,
};

// Enum ALSV4_CPP.EALSMovementDirection
// NumValues: 0x0005
enum class EALSMovementDirection : uint8
{
	Forward                                  = 0,
	Right                                    = 1,
	Left                                     = 2,
	Backward                                 = 3,
	EALSMovementDirection_MAX                = 4,
};

// Enum ALSV4_CPP.EALSSpawnType
// NumValues: 0x0003
enum class EALSSpawnType : uint8
{
	Location                                 = 0,
	Attached                                 = 1,
	EALSSpawnType_MAX                        = 2,
};

// ScriptStruct ALSV4_CPP.ALSDynamicMontageParams
// 0x0018 (0x0018 - 0x0000)
struct FALSDynamicMontageParams final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSDynamicMontageParams) == 0x000008, "Wrong alignment on FALSDynamicMontageParams");
static_assert(sizeof(FALSDynamicMontageParams) == 0x000018, "Wrong size on FALSDynamicMontageParams");
static_assert(offsetof(FALSDynamicMontageParams, Animation) == 0x000000, "Member 'FALSDynamicMontageParams::Animation' has a wrong offset!");
static_assert(offsetof(FALSDynamicMontageParams, BlendInTime) == 0x000008, "Member 'FALSDynamicMontageParams::BlendInTime' has a wrong offset!");
static_assert(offsetof(FALSDynamicMontageParams, BlendOutTime) == 0x00000C, "Member 'FALSDynamicMontageParams::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FALSDynamicMontageParams, PlayRate) == 0x000010, "Member 'FALSDynamicMontageParams::PlayRate' has a wrong offset!");
static_assert(offsetof(FALSDynamicMontageParams, StartTime) == 0x000014, "Member 'FALSDynamicMontageParams::StartTime' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSLeanAmount
// 0x0008 (0x0008 - 0x0000)
struct FALSLeanAmount final
{
public:
	float                                         LR;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FB;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSLeanAmount) == 0x000004, "Wrong alignment on FALSLeanAmount");
static_assert(sizeof(FALSLeanAmount) == 0x000008, "Wrong size on FALSLeanAmount");
static_assert(offsetof(FALSLeanAmount, LR) == 0x000000, "Member 'FALSLeanAmount::LR' has a wrong offset!");
static_assert(offsetof(FALSLeanAmount, FB) == 0x000004, "Member 'FALSLeanAmount::FB' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSVelocityBlend
// 0x0010 (0x0010 - 0x0000)
struct FALSVelocityBlend final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         L;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         R;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSVelocityBlend) == 0x000004, "Wrong alignment on FALSVelocityBlend");
static_assert(sizeof(FALSVelocityBlend) == 0x000010, "Wrong size on FALSVelocityBlend");
static_assert(offsetof(FALSVelocityBlend, F) == 0x000000, "Member 'FALSVelocityBlend::F' has a wrong offset!");
static_assert(offsetof(FALSVelocityBlend, B) == 0x000004, "Member 'FALSVelocityBlend::B' has a wrong offset!");
static_assert(offsetof(FALSVelocityBlend, L) == 0x000008, "Member 'FALSVelocityBlend::L' has a wrong offset!");
static_assert(offsetof(FALSVelocityBlend, R) == 0x00000C, "Member 'FALSVelocityBlend::R' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSTurnInPlaceAsset
// 0x0020 (0x0020 - 0x0000)
struct FALSTurnInPlaceAsset final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimatedAngle;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScaleTurnAngle;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B11[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FALSTurnInPlaceAsset) == 0x000008, "Wrong alignment on FALSTurnInPlaceAsset");
static_assert(sizeof(FALSTurnInPlaceAsset) == 0x000020, "Wrong size on FALSTurnInPlaceAsset");
static_assert(offsetof(FALSTurnInPlaceAsset, Animation) == 0x000000, "Member 'FALSTurnInPlaceAsset::Animation' has a wrong offset!");
static_assert(offsetof(FALSTurnInPlaceAsset, AnimatedAngle) == 0x000008, "Member 'FALSTurnInPlaceAsset::AnimatedAngle' has a wrong offset!");
static_assert(offsetof(FALSTurnInPlaceAsset, SlotName) == 0x00000C, "Member 'FALSTurnInPlaceAsset::SlotName' has a wrong offset!");
static_assert(offsetof(FALSTurnInPlaceAsset, PlayRate) == 0x000014, "Member 'FALSTurnInPlaceAsset::PlayRate' has a wrong offset!");
static_assert(offsetof(FALSTurnInPlaceAsset, ScaleTurnAngle) == 0x000018, "Member 'FALSTurnInPlaceAsset::ScaleTurnAngle' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSAnimCharacterInformation
// 0x00A8 (0x00A8 - 0x0000)
struct FALSAnimCharacterInformation final
{
public:
	struct FRotator                               AimingRotation;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               CharacterActorRotation;                            // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeVelocityDirection;                         // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Acceleration;                                      // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MovementInput;                                     // 0x0078(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMoving;                                         // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMovementInput;                                 // 0x0091(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B12[0x2];                                     // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementInputAmount;                               // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYawRate;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomAmount;                                        // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSMovementState                             PrevMovementState;                                 // 0x00A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSViewMode                                  ViewMode;                                          // 0x00A5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B13[0x2];                                     // 0x00A6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FALSAnimCharacterInformation) == 0x000008, "Wrong alignment on FALSAnimCharacterInformation");
static_assert(sizeof(FALSAnimCharacterInformation) == 0x0000A8, "Wrong size on FALSAnimCharacterInformation");
static_assert(offsetof(FALSAnimCharacterInformation, AimingRotation) == 0x000000, "Member 'FALSAnimCharacterInformation::AimingRotation' has a wrong offset!");
static_assert(offsetof(FALSAnimCharacterInformation, CharacterActorRotation) == 0x000018, "Member 'FALSAnimCharacterInformation::CharacterActorRotation' has a wrong offset!");
static_assert(offsetof(FALSAnimCharacterInformation, Velocity) == 0x000030, "Member 'FALSAnimCharacterInformation::Velocity' has a wrong offset!");
static_assert(offsetof(FALSAnimCharacterInformation, RelativeVelocityDirection) == 0x000048, "Member 'FALSAnimCharacterInformation::RelativeVelocityDirection' has a wrong offset!");
static_assert(offsetof(FALSAnimCharacterInformation, Acceleration) == 0x000060, "Member 'FALSAnimCharacterInformation::Acceleration' has a wrong offset!");
static_assert(offsetof(FALSAnimCharacterInformation, MovementInput) == 0x000078, "Member 'FALSAnimCharacterInformation::MovementInput' has a wrong offset!");
static_assert(offsetof(FALSAnimCharacterInformation, bIsMoving) == 0x000090, "Member 'FALSAnimCharacterInformation::bIsMoving' has a wrong offset!");
static_assert(offsetof(FALSAnimCharacterInformation, bHasMovementInput) == 0x000091, "Member 'FALSAnimCharacterInformation::bHasMovementInput' has a wrong offset!");
static_assert(offsetof(FALSAnimCharacterInformation, Speed) == 0x000094, "Member 'FALSAnimCharacterInformation::Speed' has a wrong offset!");
static_assert(offsetof(FALSAnimCharacterInformation, MovementInputAmount) == 0x000098, "Member 'FALSAnimCharacterInformation::MovementInputAmount' has a wrong offset!");
static_assert(offsetof(FALSAnimCharacterInformation, AimYawRate) == 0x00009C, "Member 'FALSAnimCharacterInformation::AimYawRate' has a wrong offset!");
static_assert(offsetof(FALSAnimCharacterInformation, ZoomAmount) == 0x0000A0, "Member 'FALSAnimCharacterInformation::ZoomAmount' has a wrong offset!");
static_assert(offsetof(FALSAnimCharacterInformation, PrevMovementState) == 0x0000A4, "Member 'FALSAnimCharacterInformation::PrevMovementState' has a wrong offset!");
static_assert(offsetof(FALSAnimCharacterInformation, ViewMode) == 0x0000A5, "Member 'FALSAnimCharacterInformation::ViewMode' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSAnimGraphGrounded
// 0x0034 (0x0034 - 0x0000)
struct FALSAnimGraphGrounded final
{
public:
	EALSHipsDirection                             TrackedHipsDirection;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldMove;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateL;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateR;                                          // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPivot;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B14[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotateRate;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationScale;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiagonalScaleAmount;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkRunBlend;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandingPlayRate;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchingPlayRate;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrideBlend;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FYaw;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BYaw;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LYaw;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RYaw;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSAnimGraphGrounded) == 0x000004, "Wrong alignment on FALSAnimGraphGrounded");
static_assert(sizeof(FALSAnimGraphGrounded) == 0x000034, "Wrong size on FALSAnimGraphGrounded");
static_assert(offsetof(FALSAnimGraphGrounded, TrackedHipsDirection) == 0x000000, "Member 'FALSAnimGraphGrounded::TrackedHipsDirection' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, bShouldMove) == 0x000001, "Member 'FALSAnimGraphGrounded::bShouldMove' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, bRotateL) == 0x000002, "Member 'FALSAnimGraphGrounded::bRotateL' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, bRotateR) == 0x000003, "Member 'FALSAnimGraphGrounded::bRotateR' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, bPivot) == 0x000004, "Member 'FALSAnimGraphGrounded::bPivot' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, RotateRate) == 0x000008, "Member 'FALSAnimGraphGrounded::RotateRate' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, RotationScale) == 0x00000C, "Member 'FALSAnimGraphGrounded::RotationScale' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, DiagonalScaleAmount) == 0x000010, "Member 'FALSAnimGraphGrounded::DiagonalScaleAmount' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, WalkRunBlend) == 0x000014, "Member 'FALSAnimGraphGrounded::WalkRunBlend' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, StandingPlayRate) == 0x000018, "Member 'FALSAnimGraphGrounded::StandingPlayRate' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, CrouchingPlayRate) == 0x00001C, "Member 'FALSAnimGraphGrounded::CrouchingPlayRate' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, StrideBlend) == 0x000020, "Member 'FALSAnimGraphGrounded::StrideBlend' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, FYaw) == 0x000024, "Member 'FALSAnimGraphGrounded::FYaw' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, BYaw) == 0x000028, "Member 'FALSAnimGraphGrounded::BYaw' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, LYaw) == 0x00002C, "Member 'FALSAnimGraphGrounded::LYaw' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphGrounded, RYaw) == 0x000030, "Member 'FALSAnimGraphGrounded::RYaw' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSAnimGraphInAir
// 0x0010 (0x0010 - 0x0000)
struct FALSAnimGraphInAir final
{
public:
	bool                                          bJumped;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B15[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpPlayRate;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallSpeed;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandPrediction;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSAnimGraphInAir) == 0x000004, "Wrong alignment on FALSAnimGraphInAir");
static_assert(sizeof(FALSAnimGraphInAir) == 0x000010, "Wrong size on FALSAnimGraphInAir");
static_assert(offsetof(FALSAnimGraphInAir, bJumped) == 0x000000, "Member 'FALSAnimGraphInAir::bJumped' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphInAir, JumpPlayRate) == 0x000004, "Member 'FALSAnimGraphInAir::JumpPlayRate' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphInAir, FallSpeed) == 0x000008, "Member 'FALSAnimGraphInAir::FallSpeed' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphInAir, LandPrediction) == 0x00000C, "Member 'FALSAnimGraphInAir::LandPrediction' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSAnimGraphAimingValues
// 0x0058 (0x0058 - 0x0000)
struct FALSAnimGraphAimingValues final
{
public:
	struct FRotator                               SmoothedAimingRotation;                            // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SpineRotation;                                     // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              AimingAngle;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimSweepTime;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputYawOffsetTime;                                // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardYawTime;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftYawTime;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightYawTime;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B16[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FALSAnimGraphAimingValues) == 0x000008, "Wrong alignment on FALSAnimGraphAimingValues");
static_assert(sizeof(FALSAnimGraphAimingValues) == 0x000058, "Wrong size on FALSAnimGraphAimingValues");
static_assert(offsetof(FALSAnimGraphAimingValues, SmoothedAimingRotation) == 0x000000, "Member 'FALSAnimGraphAimingValues::SmoothedAimingRotation' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphAimingValues, SpineRotation) == 0x000018, "Member 'FALSAnimGraphAimingValues::SpineRotation' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphAimingValues, AimingAngle) == 0x000030, "Member 'FALSAnimGraphAimingValues::AimingAngle' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphAimingValues, AimSweepTime) == 0x000040, "Member 'FALSAnimGraphAimingValues::AimSweepTime' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphAimingValues, InputYawOffsetTime) == 0x000044, "Member 'FALSAnimGraphAimingValues::InputYawOffsetTime' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphAimingValues, ForwardYawTime) == 0x000048, "Member 'FALSAnimGraphAimingValues::ForwardYawTime' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphAimingValues, LeftYawTime) == 0x00004C, "Member 'FALSAnimGraphAimingValues::LeftYawTime' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphAimingValues, RightYawTime) == 0x000050, "Member 'FALSAnimGraphAimingValues::RightYawTime' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSAnimGraphLayerBlending
// 0x0060 (0x0060 - 0x0000)
struct FALSAnimGraphLayerBlending final
{
public:
	int32                                         OverlayOverrideState;                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnableAimOffset;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BasePose_N;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BasePose_CLF;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Arm_L;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Arm_L_Add;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Arm_L_LS;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Arm_L_MS;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Arm_R;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Arm_R_Add;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Arm_R_LS;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Arm_R_MS;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hand_L;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hand_R;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Legs;                                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Legs_Add;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pelvis;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pelvis_Add;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Spine;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Spine_Add;                                         // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Head;                                              // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Head_Add;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnableHandIK_L;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnableHandIK_R;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSAnimGraphLayerBlending) == 0x000004, "Wrong alignment on FALSAnimGraphLayerBlending");
static_assert(sizeof(FALSAnimGraphLayerBlending) == 0x000060, "Wrong size on FALSAnimGraphLayerBlending");
static_assert(offsetof(FALSAnimGraphLayerBlending, OverlayOverrideState) == 0x000000, "Member 'FALSAnimGraphLayerBlending::OverlayOverrideState' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, EnableAimOffset) == 0x000004, "Member 'FALSAnimGraphLayerBlending::EnableAimOffset' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, BasePose_N) == 0x000008, "Member 'FALSAnimGraphLayerBlending::BasePose_N' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, BasePose_CLF) == 0x00000C, "Member 'FALSAnimGraphLayerBlending::BasePose_CLF' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Arm_L) == 0x000010, "Member 'FALSAnimGraphLayerBlending::Arm_L' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Arm_L_Add) == 0x000014, "Member 'FALSAnimGraphLayerBlending::Arm_L_Add' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Arm_L_LS) == 0x000018, "Member 'FALSAnimGraphLayerBlending::Arm_L_LS' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Arm_L_MS) == 0x00001C, "Member 'FALSAnimGraphLayerBlending::Arm_L_MS' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Arm_R) == 0x000020, "Member 'FALSAnimGraphLayerBlending::Arm_R' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Arm_R_Add) == 0x000024, "Member 'FALSAnimGraphLayerBlending::Arm_R_Add' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Arm_R_LS) == 0x000028, "Member 'FALSAnimGraphLayerBlending::Arm_R_LS' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Arm_R_MS) == 0x00002C, "Member 'FALSAnimGraphLayerBlending::Arm_R_MS' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Hand_L) == 0x000030, "Member 'FALSAnimGraphLayerBlending::Hand_L' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Hand_R) == 0x000034, "Member 'FALSAnimGraphLayerBlending::Hand_R' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Legs) == 0x000038, "Member 'FALSAnimGraphLayerBlending::Legs' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Legs_Add) == 0x00003C, "Member 'FALSAnimGraphLayerBlending::Legs_Add' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Pelvis) == 0x000040, "Member 'FALSAnimGraphLayerBlending::Pelvis' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Pelvis_Add) == 0x000044, "Member 'FALSAnimGraphLayerBlending::Pelvis_Add' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Spine) == 0x000048, "Member 'FALSAnimGraphLayerBlending::Spine' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Spine_Add) == 0x00004C, "Member 'FALSAnimGraphLayerBlending::Spine_Add' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Head) == 0x000050, "Member 'FALSAnimGraphLayerBlending::Head' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, Head_Add) == 0x000054, "Member 'FALSAnimGraphLayerBlending::Head_Add' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, EnableHandIK_L) == 0x000058, "Member 'FALSAnimGraphLayerBlending::EnableHandIK_L' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphLayerBlending, EnableHandIK_R) == 0x00005C, "Member 'FALSAnimGraphLayerBlending::EnableHandIK_R' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSAnimGraphFootIK
// 0x0138 (0x0138 - 0x0000)
struct FALSAnimGraphFootIK final
{
public:
	float                                         FootLock_L_Alpha;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootLock_R_Alpha;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFootLockCurve_L;                                // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFootLockCurve_R;                                // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B17[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FootLock_L_Location;                               // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetFootLock_R_Location;                         // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FootLock_R_Location;                               // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetFootLock_L_Rotation;                         // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               FootLock_L_Rotation;                               // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               TargetFootLock_R_Rotation;                         // 0x0088(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               FootLock_R_Rotation;                               // 0x00A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                FootOffset_L_Location;                             // 0x00B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FootOffset_R_Location;                             // 0x00D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FootOffset_L_Rotation;                             // 0x00E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               FootOffset_R_Rotation;                             // 0x0100(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PelvisOffset;                                      // 0x0118(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisAlpha;                                       // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B18[0x4];                                     // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FALSAnimGraphFootIK) == 0x000008, "Wrong alignment on FALSAnimGraphFootIK");
static_assert(sizeof(FALSAnimGraphFootIK) == 0x000138, "Wrong size on FALSAnimGraphFootIK");
static_assert(offsetof(FALSAnimGraphFootIK, FootLock_L_Alpha) == 0x000000, "Member 'FALSAnimGraphFootIK::FootLock_L_Alpha' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, FootLock_R_Alpha) == 0x000004, "Member 'FALSAnimGraphFootIK::FootLock_R_Alpha' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, UseFootLockCurve_L) == 0x000008, "Member 'FALSAnimGraphFootIK::UseFootLockCurve_L' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, UseFootLockCurve_R) == 0x000009, "Member 'FALSAnimGraphFootIK::UseFootLockCurve_R' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, FootLock_L_Location) == 0x000010, "Member 'FALSAnimGraphFootIK::FootLock_L_Location' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, TargetFootLock_R_Location) == 0x000028, "Member 'FALSAnimGraphFootIK::TargetFootLock_R_Location' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, FootLock_R_Location) == 0x000040, "Member 'FALSAnimGraphFootIK::FootLock_R_Location' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, TargetFootLock_L_Rotation) == 0x000058, "Member 'FALSAnimGraphFootIK::TargetFootLock_L_Rotation' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, FootLock_L_Rotation) == 0x000070, "Member 'FALSAnimGraphFootIK::FootLock_L_Rotation' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, TargetFootLock_R_Rotation) == 0x000088, "Member 'FALSAnimGraphFootIK::TargetFootLock_R_Rotation' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, FootLock_R_Rotation) == 0x0000A0, "Member 'FALSAnimGraphFootIK::FootLock_R_Rotation' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, FootOffset_L_Location) == 0x0000B8, "Member 'FALSAnimGraphFootIK::FootOffset_L_Location' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, FootOffset_R_Location) == 0x0000D0, "Member 'FALSAnimGraphFootIK::FootOffset_R_Location' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, FootOffset_L_Rotation) == 0x0000E8, "Member 'FALSAnimGraphFootIK::FootOffset_L_Rotation' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, FootOffset_R_Rotation) == 0x000100, "Member 'FALSAnimGraphFootIK::FootOffset_R_Rotation' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, PelvisOffset) == 0x000118, "Member 'FALSAnimGraphFootIK::PelvisOffset' has a wrong offset!");
static_assert(offsetof(FALSAnimGraphFootIK, PelvisAlpha) == 0x000130, "Member 'FALSAnimGraphFootIK::PelvisAlpha' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSAnimTurnInPlace
// 0x0118 (0x0118 - 0x0000)
struct FALSAnimTurnInPlace final
{
public:
	float                                         TurnCheckMinAngle;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Turn180Threshold;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYawRateLimit;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedDelayTime;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngleDelay;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngleDelay;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FALSTurnInPlaceAsset                   N_TurnIP_L90;                                      // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSTurnInPlaceAsset                   N_TurnIP_R90;                                      // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSTurnInPlaceAsset                   N_TurnIP_L180;                                     // 0x0058(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSTurnInPlaceAsset                   N_TurnIP_R180;                                     // 0x0078(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSTurnInPlaceAsset                   CLF_TurnIP_L90;                                    // 0x0098(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSTurnInPlaceAsset                   CLF_TurnIP_R90;                                    // 0x00B8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSTurnInPlaceAsset                   CLF_TurnIP_L180;                                   // 0x00D8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSTurnInPlaceAsset                   CLF_TurnIP_R180;                                   // 0x00F8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSAnimTurnInPlace) == 0x000008, "Wrong alignment on FALSAnimTurnInPlace");
static_assert(sizeof(FALSAnimTurnInPlace) == 0x000118, "Wrong size on FALSAnimTurnInPlace");
static_assert(offsetof(FALSAnimTurnInPlace, TurnCheckMinAngle) == 0x000000, "Member 'FALSAnimTurnInPlace::TurnCheckMinAngle' has a wrong offset!");
static_assert(offsetof(FALSAnimTurnInPlace, Turn180Threshold) == 0x000004, "Member 'FALSAnimTurnInPlace::Turn180Threshold' has a wrong offset!");
static_assert(offsetof(FALSAnimTurnInPlace, AimYawRateLimit) == 0x000008, "Member 'FALSAnimTurnInPlace::AimYawRateLimit' has a wrong offset!");
static_assert(offsetof(FALSAnimTurnInPlace, ElapsedDelayTime) == 0x00000C, "Member 'FALSAnimTurnInPlace::ElapsedDelayTime' has a wrong offset!");
static_assert(offsetof(FALSAnimTurnInPlace, MinAngleDelay) == 0x000010, "Member 'FALSAnimTurnInPlace::MinAngleDelay' has a wrong offset!");
static_assert(offsetof(FALSAnimTurnInPlace, MaxAngleDelay) == 0x000014, "Member 'FALSAnimTurnInPlace::MaxAngleDelay' has a wrong offset!");
static_assert(offsetof(FALSAnimTurnInPlace, N_TurnIP_L90) == 0x000018, "Member 'FALSAnimTurnInPlace::N_TurnIP_L90' has a wrong offset!");
static_assert(offsetof(FALSAnimTurnInPlace, N_TurnIP_R90) == 0x000038, "Member 'FALSAnimTurnInPlace::N_TurnIP_R90' has a wrong offset!");
static_assert(offsetof(FALSAnimTurnInPlace, N_TurnIP_L180) == 0x000058, "Member 'FALSAnimTurnInPlace::N_TurnIP_L180' has a wrong offset!");
static_assert(offsetof(FALSAnimTurnInPlace, N_TurnIP_R180) == 0x000078, "Member 'FALSAnimTurnInPlace::N_TurnIP_R180' has a wrong offset!");
static_assert(offsetof(FALSAnimTurnInPlace, CLF_TurnIP_L90) == 0x000098, "Member 'FALSAnimTurnInPlace::CLF_TurnIP_L90' has a wrong offset!");
static_assert(offsetof(FALSAnimTurnInPlace, CLF_TurnIP_R90) == 0x0000B8, "Member 'FALSAnimTurnInPlace::CLF_TurnIP_R90' has a wrong offset!");
static_assert(offsetof(FALSAnimTurnInPlace, CLF_TurnIP_L180) == 0x0000D8, "Member 'FALSAnimTurnInPlace::CLF_TurnIP_L180' has a wrong offset!");
static_assert(offsetof(FALSAnimTurnInPlace, CLF_TurnIP_R180) == 0x0000F8, "Member 'FALSAnimTurnInPlace::CLF_TurnIP_R180' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSAnimRotateInPlace
// 0x0018 (0x0018 - 0x0000)
struct FALSAnimRotateInPlace final
{
public:
	float                                         RotateMinThreshold;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateMaxThreshold;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYawRateMinRange;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYawRateMaxRange;                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPlayRate;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPlayRate;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSAnimRotateInPlace) == 0x000004, "Wrong alignment on FALSAnimRotateInPlace");
static_assert(sizeof(FALSAnimRotateInPlace) == 0x000018, "Wrong size on FALSAnimRotateInPlace");
static_assert(offsetof(FALSAnimRotateInPlace, RotateMinThreshold) == 0x000000, "Member 'FALSAnimRotateInPlace::RotateMinThreshold' has a wrong offset!");
static_assert(offsetof(FALSAnimRotateInPlace, RotateMaxThreshold) == 0x000004, "Member 'FALSAnimRotateInPlace::RotateMaxThreshold' has a wrong offset!");
static_assert(offsetof(FALSAnimRotateInPlace, AimYawRateMinRange) == 0x000008, "Member 'FALSAnimRotateInPlace::AimYawRateMinRange' has a wrong offset!");
static_assert(offsetof(FALSAnimRotateInPlace, AimYawRateMaxRange) == 0x00000C, "Member 'FALSAnimRotateInPlace::AimYawRateMaxRange' has a wrong offset!");
static_assert(offsetof(FALSAnimRotateInPlace, MinPlayRate) == 0x000010, "Member 'FALSAnimRotateInPlace::MinPlayRate' has a wrong offset!");
static_assert(offsetof(FALSAnimRotateInPlace, MaxPlayRate) == 0x000014, "Member 'FALSAnimRotateInPlace::MaxPlayRate' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSAnimConfiguration
// 0x0038 (0x0038 - 0x0000)
struct FALSAnimConfiguration final
{
public:
	float                                         AnimatedWalkSpeed;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimatedRunSpeed;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimatedSprintSpeed;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimatedCrouchSpeed;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityBlendInterpSpeed;                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundedLeanInterpSpeed;                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAirLeanInterpSpeed;                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothedAimingRotationInterpSpeed;                 // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputYawOffsetInterpSpeed;                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggerPivotSpeedLimit;                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootHeight;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicTransitionThreshold;                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IK_TraceDistanceAboveFoot;                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IK_TraceDistanceBelowFoot;                         // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSAnimConfiguration) == 0x000004, "Wrong alignment on FALSAnimConfiguration");
static_assert(sizeof(FALSAnimConfiguration) == 0x000038, "Wrong size on FALSAnimConfiguration");
static_assert(offsetof(FALSAnimConfiguration, AnimatedWalkSpeed) == 0x000000, "Member 'FALSAnimConfiguration::AnimatedWalkSpeed' has a wrong offset!");
static_assert(offsetof(FALSAnimConfiguration, AnimatedRunSpeed) == 0x000004, "Member 'FALSAnimConfiguration::AnimatedRunSpeed' has a wrong offset!");
static_assert(offsetof(FALSAnimConfiguration, AnimatedSprintSpeed) == 0x000008, "Member 'FALSAnimConfiguration::AnimatedSprintSpeed' has a wrong offset!");
static_assert(offsetof(FALSAnimConfiguration, AnimatedCrouchSpeed) == 0x00000C, "Member 'FALSAnimConfiguration::AnimatedCrouchSpeed' has a wrong offset!");
static_assert(offsetof(FALSAnimConfiguration, VelocityBlendInterpSpeed) == 0x000010, "Member 'FALSAnimConfiguration::VelocityBlendInterpSpeed' has a wrong offset!");
static_assert(offsetof(FALSAnimConfiguration, GroundedLeanInterpSpeed) == 0x000014, "Member 'FALSAnimConfiguration::GroundedLeanInterpSpeed' has a wrong offset!");
static_assert(offsetof(FALSAnimConfiguration, InAirLeanInterpSpeed) == 0x000018, "Member 'FALSAnimConfiguration::InAirLeanInterpSpeed' has a wrong offset!");
static_assert(offsetof(FALSAnimConfiguration, SmoothedAimingRotationInterpSpeed) == 0x00001C, "Member 'FALSAnimConfiguration::SmoothedAimingRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FALSAnimConfiguration, InputYawOffsetInterpSpeed) == 0x000020, "Member 'FALSAnimConfiguration::InputYawOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(FALSAnimConfiguration, TriggerPivotSpeedLimit) == 0x000024, "Member 'FALSAnimConfiguration::TriggerPivotSpeedLimit' has a wrong offset!");
static_assert(offsetof(FALSAnimConfiguration, FootHeight) == 0x000028, "Member 'FALSAnimConfiguration::FootHeight' has a wrong offset!");
static_assert(offsetof(FALSAnimConfiguration, DynamicTransitionThreshold) == 0x00002C, "Member 'FALSAnimConfiguration::DynamicTransitionThreshold' has a wrong offset!");
static_assert(offsetof(FALSAnimConfiguration, IK_TraceDistanceAboveFoot) == 0x000030, "Member 'FALSAnimConfiguration::IK_TraceDistanceAboveFoot' has a wrong offset!");
static_assert(offsetof(FALSAnimConfiguration, IK_TraceDistanceBelowFoot) == 0x000034, "Member 'FALSAnimConfiguration::IK_TraceDistanceBelowFoot' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSComponentAndTransform
// 0x0070 (0x0070 - 0x0000)
struct FALSComponentAndTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    Component;                                         // 0x0060(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B19[0x8];                                     // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FALSComponentAndTransform) == 0x000010, "Wrong alignment on FALSComponentAndTransform");
static_assert(sizeof(FALSComponentAndTransform) == 0x000070, "Wrong size on FALSComponentAndTransform");
static_assert(offsetof(FALSComponentAndTransform, Transform) == 0x000000, "Member 'FALSComponentAndTransform::Transform' has a wrong offset!");
static_assert(offsetof(FALSComponentAndTransform, Component) == 0x000060, "Member 'FALSComponentAndTransform::Component' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSCameraSettings
// 0x0030 (0x0030 - 0x0000)
struct FALSCameraSettings final
{
public:
	float                                         TargetArmLength;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SocketOffset;                                      // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LagSpeed;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationLagSpeed;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoCollisionTest;                                  // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1B[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FALSCameraSettings) == 0x000008, "Wrong alignment on FALSCameraSettings");
static_assert(sizeof(FALSCameraSettings) == 0x000030, "Wrong size on FALSCameraSettings");
static_assert(offsetof(FALSCameraSettings, TargetArmLength) == 0x000000, "Member 'FALSCameraSettings::TargetArmLength' has a wrong offset!");
static_assert(offsetof(FALSCameraSettings, SocketOffset) == 0x000008, "Member 'FALSCameraSettings::SocketOffset' has a wrong offset!");
static_assert(offsetof(FALSCameraSettings, LagSpeed) == 0x000020, "Member 'FALSCameraSettings::LagSpeed' has a wrong offset!");
static_assert(offsetof(FALSCameraSettings, RotationLagSpeed) == 0x000024, "Member 'FALSCameraSettings::RotationLagSpeed' has a wrong offset!");
static_assert(offsetof(FALSCameraSettings, bDoCollisionTest) == 0x000028, "Member 'FALSCameraSettings::bDoCollisionTest' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSCameraGaitSettings
// 0x00C0 (0x00C0 - 0x0000)
struct FALSCameraGaitSettings final
{
public:
	struct FALSCameraSettings                     Walking;                                           // 0x0000(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSCameraSettings                     Running;                                           // 0x0030(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSCameraSettings                     Sprinting;                                         // 0x0060(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSCameraSettings                     Crouching;                                         // 0x0090(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSCameraGaitSettings) == 0x000008, "Wrong alignment on FALSCameraGaitSettings");
static_assert(sizeof(FALSCameraGaitSettings) == 0x0000C0, "Wrong size on FALSCameraGaitSettings");
static_assert(offsetof(FALSCameraGaitSettings, Walking) == 0x000000, "Member 'FALSCameraGaitSettings::Walking' has a wrong offset!");
static_assert(offsetof(FALSCameraGaitSettings, Running) == 0x000030, "Member 'FALSCameraGaitSettings::Running' has a wrong offset!");
static_assert(offsetof(FALSCameraGaitSettings, Sprinting) == 0x000060, "Member 'FALSCameraGaitSettings::Sprinting' has a wrong offset!");
static_assert(offsetof(FALSCameraGaitSettings, Crouching) == 0x000090, "Member 'FALSCameraGaitSettings::Crouching' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSCameraStateSettings
// 0x0240 (0x0240 - 0x0000)
struct FALSCameraStateSettings final
{
public:
	struct FALSCameraGaitSettings                 VelocityDirection;                                 // 0x0000(0x00C0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSCameraGaitSettings                 LookingDirection;                                  // 0x00C0(0x00C0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSCameraGaitSettings                 Aiming;                                            // 0x0180(0x00C0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSCameraStateSettings) == 0x000008, "Wrong alignment on FALSCameraStateSettings");
static_assert(sizeof(FALSCameraStateSettings) == 0x000240, "Wrong size on FALSCameraStateSettings");
static_assert(offsetof(FALSCameraStateSettings, VelocityDirection) == 0x000000, "Member 'FALSCameraStateSettings::VelocityDirection' has a wrong offset!");
static_assert(offsetof(FALSCameraStateSettings, LookingDirection) == 0x0000C0, "Member 'FALSCameraStateSettings::LookingDirection' has a wrong offset!");
static_assert(offsetof(FALSCameraStateSettings, Aiming) == 0x000180, "Member 'FALSCameraStateSettings::Aiming' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSMantleAsset
// 0x0040 (0x0040 - 0x0000)
struct FALSMantleAsset final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           PositionCorrectionCurve;                           // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartingOffset;                                    // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowHeight;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowPlayRate;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowStartPosition;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighHeight;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighPlayRate;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighStartPosition;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSMantleAsset) == 0x000008, "Wrong alignment on FALSMantleAsset");
static_assert(sizeof(FALSMantleAsset) == 0x000040, "Wrong size on FALSMantleAsset");
static_assert(offsetof(FALSMantleAsset, AnimMontage) == 0x000000, "Member 'FALSMantleAsset::AnimMontage' has a wrong offset!");
static_assert(offsetof(FALSMantleAsset, PositionCorrectionCurve) == 0x000008, "Member 'FALSMantleAsset::PositionCorrectionCurve' has a wrong offset!");
static_assert(offsetof(FALSMantleAsset, StartingOffset) == 0x000010, "Member 'FALSMantleAsset::StartingOffset' has a wrong offset!");
static_assert(offsetof(FALSMantleAsset, LowHeight) == 0x000028, "Member 'FALSMantleAsset::LowHeight' has a wrong offset!");
static_assert(offsetof(FALSMantleAsset, LowPlayRate) == 0x00002C, "Member 'FALSMantleAsset::LowPlayRate' has a wrong offset!");
static_assert(offsetof(FALSMantleAsset, LowStartPosition) == 0x000030, "Member 'FALSMantleAsset::LowStartPosition' has a wrong offset!");
static_assert(offsetof(FALSMantleAsset, HighHeight) == 0x000034, "Member 'FALSMantleAsset::HighHeight' has a wrong offset!");
static_assert(offsetof(FALSMantleAsset, HighPlayRate) == 0x000038, "Member 'FALSMantleAsset::HighPlayRate' has a wrong offset!");
static_assert(offsetof(FALSMantleAsset, HighStartPosition) == 0x00003C, "Member 'FALSMantleAsset::HighStartPosition' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSMantleParams
// 0x0030 (0x0030 - 0x0000)
struct FALSMantleParams final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           PositionCorrectionCurve;                           // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingPosition;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartingOffset;                                    // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSMantleParams) == 0x000008, "Wrong alignment on FALSMantleParams");
static_assert(sizeof(FALSMantleParams) == 0x000030, "Wrong size on FALSMantleParams");
static_assert(offsetof(FALSMantleParams, AnimMontage) == 0x000000, "Member 'FALSMantleParams::AnimMontage' has a wrong offset!");
static_assert(offsetof(FALSMantleParams, PositionCorrectionCurve) == 0x000008, "Member 'FALSMantleParams::PositionCorrectionCurve' has a wrong offset!");
static_assert(offsetof(FALSMantleParams, StartingPosition) == 0x000010, "Member 'FALSMantleParams::StartingPosition' has a wrong offset!");
static_assert(offsetof(FALSMantleParams, PlayRate) == 0x000014, "Member 'FALSMantleParams::PlayRate' has a wrong offset!");
static_assert(offsetof(FALSMantleParams, StartingOffset) == 0x000018, "Member 'FALSMantleParams::StartingOffset' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSMantleTraceSettings
// 0x0014 (0x0014 - 0x0000)
struct FALSMantleTraceSettings final
{
public:
	float                                         MaxLedgeHeight;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLedgeHeight;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachDistance;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardTraceRadius;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownwardTraceRadius;                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSMantleTraceSettings) == 0x000004, "Wrong alignment on FALSMantleTraceSettings");
static_assert(sizeof(FALSMantleTraceSettings) == 0x000014, "Wrong size on FALSMantleTraceSettings");
static_assert(offsetof(FALSMantleTraceSettings, MaxLedgeHeight) == 0x000000, "Member 'FALSMantleTraceSettings::MaxLedgeHeight' has a wrong offset!");
static_assert(offsetof(FALSMantleTraceSettings, MinLedgeHeight) == 0x000004, "Member 'FALSMantleTraceSettings::MinLedgeHeight' has a wrong offset!");
static_assert(offsetof(FALSMantleTraceSettings, ReachDistance) == 0x000008, "Member 'FALSMantleTraceSettings::ReachDistance' has a wrong offset!");
static_assert(offsetof(FALSMantleTraceSettings, ForwardTraceRadius) == 0x00000C, "Member 'FALSMantleTraceSettings::ForwardTraceRadius' has a wrong offset!");
static_assert(offsetof(FALSMantleTraceSettings, DownwardTraceRadius) == 0x000010, "Member 'FALSMantleTraceSettings::DownwardTraceRadius' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSMovementSettings
// 0x0020 (0x0020 - 0x0000)
struct FALSMovementSettings final
{
public:
	float                                         WalkSpeed;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunSpeed;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintSpeed;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1C[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           MovementCurve;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RotationRateCurve;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSMovementSettings) == 0x000008, "Wrong alignment on FALSMovementSettings");
static_assert(sizeof(FALSMovementSettings) == 0x000020, "Wrong size on FALSMovementSettings");
static_assert(offsetof(FALSMovementSettings, WalkSpeed) == 0x000000, "Member 'FALSMovementSettings::WalkSpeed' has a wrong offset!");
static_assert(offsetof(FALSMovementSettings, RunSpeed) == 0x000004, "Member 'FALSMovementSettings::RunSpeed' has a wrong offset!");
static_assert(offsetof(FALSMovementSettings, SprintSpeed) == 0x000008, "Member 'FALSMovementSettings::SprintSpeed' has a wrong offset!");
static_assert(offsetof(FALSMovementSettings, MovementCurve) == 0x000010, "Member 'FALSMovementSettings::MovementCurve' has a wrong offset!");
static_assert(offsetof(FALSMovementSettings, RotationRateCurve) == 0x000018, "Member 'FALSMovementSettings::RotationRateCurve' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSMovementStanceSettings
// 0x0040 (0x0040 - 0x0000)
struct FALSMovementStanceSettings final
{
public:
	struct FALSMovementSettings                   Standing;                                          // 0x0000(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSMovementSettings                   Crouching;                                         // 0x0020(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSMovementStanceSettings) == 0x000008, "Wrong alignment on FALSMovementStanceSettings");
static_assert(sizeof(FALSMovementStanceSettings) == 0x000040, "Wrong size on FALSMovementStanceSettings");
static_assert(offsetof(FALSMovementStanceSettings, Standing) == 0x000000, "Member 'FALSMovementStanceSettings::Standing' has a wrong offset!");
static_assert(offsetof(FALSMovementStanceSettings, Crouching) == 0x000020, "Member 'FALSMovementStanceSettings::Crouching' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSMovementStateSettings
// 0x00C0 (0x00C8 - 0x0008)
struct FALSMovementStateSettings final : public FTableRowBase
{
public:
	struct FALSMovementStanceSettings             VelocityDirection;                                 // 0x0008(0x0040)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSMovementStanceSettings             LookingDirection;                                  // 0x0048(0x0040)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSMovementStanceSettings             Aiming;                                            // 0x0088(0x0040)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSMovementStateSettings) == 0x000008, "Wrong alignment on FALSMovementStateSettings");
static_assert(sizeof(FALSMovementStateSettings) == 0x0000C8, "Wrong size on FALSMovementStateSettings");
static_assert(offsetof(FALSMovementStateSettings, VelocityDirection) == 0x000008, "Member 'FALSMovementStateSettings::VelocityDirection' has a wrong offset!");
static_assert(offsetof(FALSMovementStateSettings, LookingDirection) == 0x000048, "Member 'FALSMovementStateSettings::LookingDirection' has a wrong offset!");
static_assert(offsetof(FALSMovementStateSettings, Aiming) == 0x000088, "Member 'FALSMovementStateSettings::Aiming' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSRotateInPlaceAsset
// 0x0020 (0x0020 - 0x0000)
struct FALSRotateInPlaceAsset final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowTurnRate;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastTurnRate;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowPlayRate;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastPlayRate;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSRotateInPlaceAsset) == 0x000008, "Wrong alignment on FALSRotateInPlaceAsset");
static_assert(sizeof(FALSRotateInPlaceAsset) == 0x000020, "Wrong size on FALSRotateInPlaceAsset");
static_assert(offsetof(FALSRotateInPlaceAsset, Animation) == 0x000000, "Member 'FALSRotateInPlaceAsset::Animation' has a wrong offset!");
static_assert(offsetof(FALSRotateInPlaceAsset, SlotName) == 0x000008, "Member 'FALSRotateInPlaceAsset::SlotName' has a wrong offset!");
static_assert(offsetof(FALSRotateInPlaceAsset, SlowTurnRate) == 0x000010, "Member 'FALSRotateInPlaceAsset::SlowTurnRate' has a wrong offset!");
static_assert(offsetof(FALSRotateInPlaceAsset, FastTurnRate) == 0x000014, "Member 'FALSRotateInPlaceAsset::FastTurnRate' has a wrong offset!");
static_assert(offsetof(FALSRotateInPlaceAsset, SlowPlayRate) == 0x000018, "Member 'FALSRotateInPlaceAsset::SlowPlayRate' has a wrong offset!");
static_assert(offsetof(FALSRotateInPlaceAsset, FastPlayRate) == 0x00001C, "Member 'FALSRotateInPlaceAsset::FastPlayRate' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSHitFX
// 0x0158 (0x0160 - 0x0008)
struct FALSHitFX final : public FTableRowBase
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundBase>              Sound;                                             // 0x0010(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSSpawnType                                 SoundSpawnType;                                    // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               SoundAttachmentType;                               // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1E[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SoundLocationOffset;                               // 0x0048(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SoundRotationOffset;                               // 0x0060(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      DecalMaterial;                                     // 0x0078(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSSpawnType                                 DecalSpawnType;                                    // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               DecalAttachmentType;                               // 0x00A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1F[0x2];                                     // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DecalLifeSpan;                                     // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DecalSize;                                         // 0x00B0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DecalLocationOffset;                               // 0x00C8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DecalRotationOffset;                               // 0x00E0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          NiagaraSystem;                                     // 0x00F8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSSpawnType                                 NiagaraSpawnType;                                  // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               NiagaraAttachmentType;                             // 0x0129(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B20[0x6];                                     // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NiagaraLocationOffset;                             // 0x0130(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NiagaraRotationOffset;                             // 0x0148(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FALSHitFX) == 0x000008, "Wrong alignment on FALSHitFX");
static_assert(sizeof(FALSHitFX) == 0x000160, "Wrong size on FALSHitFX");
static_assert(offsetof(FALSHitFX, SurfaceType) == 0x000008, "Member 'FALSHitFX::SurfaceType' has a wrong offset!");
static_assert(offsetof(FALSHitFX, Sound) == 0x000010, "Member 'FALSHitFX::Sound' has a wrong offset!");
static_assert(offsetof(FALSHitFX, SoundSpawnType) == 0x000040, "Member 'FALSHitFX::SoundSpawnType' has a wrong offset!");
static_assert(offsetof(FALSHitFX, SoundAttachmentType) == 0x000041, "Member 'FALSHitFX::SoundAttachmentType' has a wrong offset!");
static_assert(offsetof(FALSHitFX, SoundLocationOffset) == 0x000048, "Member 'FALSHitFX::SoundLocationOffset' has a wrong offset!");
static_assert(offsetof(FALSHitFX, SoundRotationOffset) == 0x000060, "Member 'FALSHitFX::SoundRotationOffset' has a wrong offset!");
static_assert(offsetof(FALSHitFX, DecalMaterial) == 0x000078, "Member 'FALSHitFX::DecalMaterial' has a wrong offset!");
static_assert(offsetof(FALSHitFX, DecalSpawnType) == 0x0000A8, "Member 'FALSHitFX::DecalSpawnType' has a wrong offset!");
static_assert(offsetof(FALSHitFX, DecalAttachmentType) == 0x0000A9, "Member 'FALSHitFX::DecalAttachmentType' has a wrong offset!");
static_assert(offsetof(FALSHitFX, DecalLifeSpan) == 0x0000AC, "Member 'FALSHitFX::DecalLifeSpan' has a wrong offset!");
static_assert(offsetof(FALSHitFX, DecalSize) == 0x0000B0, "Member 'FALSHitFX::DecalSize' has a wrong offset!");
static_assert(offsetof(FALSHitFX, DecalLocationOffset) == 0x0000C8, "Member 'FALSHitFX::DecalLocationOffset' has a wrong offset!");
static_assert(offsetof(FALSHitFX, DecalRotationOffset) == 0x0000E0, "Member 'FALSHitFX::DecalRotationOffset' has a wrong offset!");
static_assert(offsetof(FALSHitFX, NiagaraSystem) == 0x0000F8, "Member 'FALSHitFX::NiagaraSystem' has a wrong offset!");
static_assert(offsetof(FALSHitFX, NiagaraSpawnType) == 0x000128, "Member 'FALSHitFX::NiagaraSpawnType' has a wrong offset!");
static_assert(offsetof(FALSHitFX, NiagaraAttachmentType) == 0x000129, "Member 'FALSHitFX::NiagaraAttachmentType' has a wrong offset!");
static_assert(offsetof(FALSHitFX, NiagaraLocationOffset) == 0x000130, "Member 'FALSHitFX::NiagaraLocationOffset' has a wrong offset!");
static_assert(offsetof(FALSHitFX, NiagaraRotationOffset) == 0x000148, "Member 'FALSHitFX::NiagaraRotationOffset' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSMovementState
// 0x0006 (0x0006 - 0x0000)
struct FALSMovementState final
{
public:
	EALSMovementState                             State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          None_;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Grounded_;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          InAir_;                                            // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Mantling_;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Ragdoll_;                                          // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FALSMovementState) == 0x000001, "Wrong alignment on FALSMovementState");
static_assert(sizeof(FALSMovementState) == 0x000006, "Wrong size on FALSMovementState");
static_assert(offsetof(FALSMovementState, State) == 0x000000, "Member 'FALSMovementState::State' has a wrong offset!");
static_assert(offsetof(FALSMovementState, None_) == 0x000001, "Member 'FALSMovementState::None_' has a wrong offset!");
static_assert(offsetof(FALSMovementState, Grounded_) == 0x000002, "Member 'FALSMovementState::Grounded_' has a wrong offset!");
static_assert(offsetof(FALSMovementState, InAir_) == 0x000003, "Member 'FALSMovementState::InAir_' has a wrong offset!");
static_assert(offsetof(FALSMovementState, Mantling_) == 0x000004, "Member 'FALSMovementState::Mantling_' has a wrong offset!");
static_assert(offsetof(FALSMovementState, Ragdoll_) == 0x000005, "Member 'FALSMovementState::Ragdoll_' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSStance
// 0x0003 (0x0003 - 0x0000)
struct FALSStance final
{
public:
	EALSStance                                    Stance;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Standing_;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Crouching_;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FALSStance) == 0x000001, "Wrong alignment on FALSStance");
static_assert(sizeof(FALSStance) == 0x000003, "Wrong size on FALSStance");
static_assert(offsetof(FALSStance, Stance) == 0x000000, "Member 'FALSStance::Stance' has a wrong offset!");
static_assert(offsetof(FALSStance, Standing_) == 0x000001, "Member 'FALSStance::Standing_' has a wrong offset!");
static_assert(offsetof(FALSStance, Crouching_) == 0x000002, "Member 'FALSStance::Crouching_' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSRotationMode
// 0x0004 (0x0004 - 0x0000)
struct FALSRotationMode final
{
public:
	EALSRotationMode                              RotationMode;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          VelocityDirection_;                                // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          LookingDirection_;                                 // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Aiming_;                                           // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FALSRotationMode) == 0x000001, "Wrong alignment on FALSRotationMode");
static_assert(sizeof(FALSRotationMode) == 0x000004, "Wrong size on FALSRotationMode");
static_assert(offsetof(FALSRotationMode, RotationMode) == 0x000000, "Member 'FALSRotationMode::RotationMode' has a wrong offset!");
static_assert(offsetof(FALSRotationMode, VelocityDirection_) == 0x000001, "Member 'FALSRotationMode::VelocityDirection_' has a wrong offset!");
static_assert(offsetof(FALSRotationMode, LookingDirection_) == 0x000002, "Member 'FALSRotationMode::LookingDirection_' has a wrong offset!");
static_assert(offsetof(FALSRotationMode, Aiming_) == 0x000003, "Member 'FALSRotationMode::Aiming_' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSMovementDirection
// 0x0005 (0x0005 - 0x0000)
struct FALSMovementDirection final
{
public:
	EALSMovementDirection                         MovementDirection;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Forward_;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Right_;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Left_;                                             // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Backward_;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FALSMovementDirection) == 0x000001, "Wrong alignment on FALSMovementDirection");
static_assert(sizeof(FALSMovementDirection) == 0x000005, "Wrong size on FALSMovementDirection");
static_assert(offsetof(FALSMovementDirection, MovementDirection) == 0x000000, "Member 'FALSMovementDirection::MovementDirection' has a wrong offset!");
static_assert(offsetof(FALSMovementDirection, Forward_) == 0x000001, "Member 'FALSMovementDirection::Forward_' has a wrong offset!");
static_assert(offsetof(FALSMovementDirection, Right_) == 0x000002, "Member 'FALSMovementDirection::Right_' has a wrong offset!");
static_assert(offsetof(FALSMovementDirection, Left_) == 0x000003, "Member 'FALSMovementDirection::Left_' has a wrong offset!");
static_assert(offsetof(FALSMovementDirection, Backward_) == 0x000004, "Member 'FALSMovementDirection::Backward_' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSMovementAction
// 0x0006 (0x0006 - 0x0000)
struct FALSMovementAction final
{
public:
	EALSMovementAction                            Action;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          None_;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          LowMantle_;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          HighMantle_;                                       // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Rolling_;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          GettingUp_;                                        // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FALSMovementAction) == 0x000001, "Wrong alignment on FALSMovementAction");
static_assert(sizeof(FALSMovementAction) == 0x000006, "Wrong size on FALSMovementAction");
static_assert(offsetof(FALSMovementAction, Action) == 0x000000, "Member 'FALSMovementAction::Action' has a wrong offset!");
static_assert(offsetof(FALSMovementAction, None_) == 0x000001, "Member 'FALSMovementAction::None_' has a wrong offset!");
static_assert(offsetof(FALSMovementAction, LowMantle_) == 0x000002, "Member 'FALSMovementAction::LowMantle_' has a wrong offset!");
static_assert(offsetof(FALSMovementAction, HighMantle_) == 0x000003, "Member 'FALSMovementAction::HighMantle_' has a wrong offset!");
static_assert(offsetof(FALSMovementAction, Rolling_) == 0x000004, "Member 'FALSMovementAction::Rolling_' has a wrong offset!");
static_assert(offsetof(FALSMovementAction, GettingUp_) == 0x000005, "Member 'FALSMovementAction::GettingUp_' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSGait
// 0x0004 (0x0004 - 0x0000)
struct FALSGait final
{
public:
	EALSGait                                      Gait;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Walking_;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Running_;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Sprinting_;                                        // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FALSGait) == 0x000001, "Wrong alignment on FALSGait");
static_assert(sizeof(FALSGait) == 0x000004, "Wrong size on FALSGait");
static_assert(offsetof(FALSGait, Gait) == 0x000000, "Member 'FALSGait::Gait' has a wrong offset!");
static_assert(offsetof(FALSGait, Walking_) == 0x000001, "Member 'FALSGait::Walking_' has a wrong offset!");
static_assert(offsetof(FALSGait, Running_) == 0x000002, "Member 'FALSGait::Running_' has a wrong offset!");
static_assert(offsetof(FALSGait, Sprinting_) == 0x000003, "Member 'FALSGait::Sprinting_' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSOverlayState
// 0x000E (0x000E - 0x0000)
struct FALSOverlayState final
{
public:
	EALSOverlayState                              State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Default_;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Masculine_;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Feminine_;                                         // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Injured_;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          HandsTied_;                                        // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Rifle_;                                            // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          PistolOneHanded_;                                  // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          PistolTwoHanded_;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Bow_;                                              // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Torch_;                                            // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Binoculars_;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Box_;                                              // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Barrel_;                                           // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FALSOverlayState) == 0x000001, "Wrong alignment on FALSOverlayState");
static_assert(sizeof(FALSOverlayState) == 0x00000E, "Wrong size on FALSOverlayState");
static_assert(offsetof(FALSOverlayState, State) == 0x000000, "Member 'FALSOverlayState::State' has a wrong offset!");
static_assert(offsetof(FALSOverlayState, Default_) == 0x000001, "Member 'FALSOverlayState::Default_' has a wrong offset!");
static_assert(offsetof(FALSOverlayState, Masculine_) == 0x000002, "Member 'FALSOverlayState::Masculine_' has a wrong offset!");
static_assert(offsetof(FALSOverlayState, Feminine_) == 0x000003, "Member 'FALSOverlayState::Feminine_' has a wrong offset!");
static_assert(offsetof(FALSOverlayState, Injured_) == 0x000004, "Member 'FALSOverlayState::Injured_' has a wrong offset!");
static_assert(offsetof(FALSOverlayState, HandsTied_) == 0x000005, "Member 'FALSOverlayState::HandsTied_' has a wrong offset!");
static_assert(offsetof(FALSOverlayState, Rifle_) == 0x000006, "Member 'FALSOverlayState::Rifle_' has a wrong offset!");
static_assert(offsetof(FALSOverlayState, PistolOneHanded_) == 0x000007, "Member 'FALSOverlayState::PistolOneHanded_' has a wrong offset!");
static_assert(offsetof(FALSOverlayState, PistolTwoHanded_) == 0x000008, "Member 'FALSOverlayState::PistolTwoHanded_' has a wrong offset!");
static_assert(offsetof(FALSOverlayState, Bow_) == 0x000009, "Member 'FALSOverlayState::Bow_' has a wrong offset!");
static_assert(offsetof(FALSOverlayState, Torch_) == 0x00000A, "Member 'FALSOverlayState::Torch_' has a wrong offset!");
static_assert(offsetof(FALSOverlayState, Binoculars_) == 0x00000B, "Member 'FALSOverlayState::Binoculars_' has a wrong offset!");
static_assert(offsetof(FALSOverlayState, Box_) == 0x00000C, "Member 'FALSOverlayState::Box_' has a wrong offset!");
static_assert(offsetof(FALSOverlayState, Barrel_) == 0x00000D, "Member 'FALSOverlayState::Barrel_' has a wrong offset!");

// ScriptStruct ALSV4_CPP.ALSGroundedEntryState
// 0x0003 (0x0003 - 0x0000)
struct FALSGroundedEntryState final
{
public:
	EALSGroundedEntryState                        State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          None_;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Roll_;                                             // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FALSGroundedEntryState) == 0x000001, "Wrong alignment on FALSGroundedEntryState");
static_assert(sizeof(FALSGroundedEntryState) == 0x000003, "Wrong size on FALSGroundedEntryState");
static_assert(offsetof(FALSGroundedEntryState, State) == 0x000000, "Member 'FALSGroundedEntryState::State' has a wrong offset!");
static_assert(offsetof(FALSGroundedEntryState, None_) == 0x000001, "Member 'FALSGroundedEntryState::None_' has a wrong offset!");
static_assert(offsetof(FALSGroundedEntryState, Roll_) == 0x000002, "Member 'FALSGroundedEntryState::Roll_' has a wrong offset!");

}

