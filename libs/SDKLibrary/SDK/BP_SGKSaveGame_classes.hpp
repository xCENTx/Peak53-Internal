#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SGKSaveGame

#include "Basic.hpp"

#include "S_PlayerSave_structs.hpp"
#include "Engine_classes.hpp"
#include "S_LevelSaveData_structs.hpp"
#include "E_WeaponSlots_structs.hpp"
#include "S_MasterItemSave_structs.hpp"
#include "E_EquipmentType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SGKSaveGame.BP_SGKSaveGame_C
// 0x0040 (0x0068 - 0x0028)
class UBP_SGKSaveGame_C final : public USaveGame
{
public:
	TArray<struct FS_PlayerSave>                  PlayerSaves;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<struct FS_LevelSaveData>               LevelSaveData;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<struct FS_MasterItemSave>              TempItemSaveData;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	FMulticastInlineDelegateProperty_             SaveInventory;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ClearLevelSaveData(const class FString& LevelName);
	void DeletePlayerSave(const class FText& PlayerName, const class FText& RespawnName);
	void FindCookingSaveData(const struct FTransform& Transform, const class FString& LevelName, bool* SaveFound, struct FS_CookingSave* Array_Element);
	void FindCraftingSaveData(const struct FTransform& Transform, const class FString& LevelName, bool* SaveFound, struct FS_CraftingSave* Array_Element);
	void FindEquipmentSaveData(const struct FTransform& Transform, const class FString& LevelName, bool* SaveFound, struct FS_EquipmentInvSave* Array_Element);
	bool FindItemSpawnerSaveData(class ABP_MasterItemSpawner_C* ItemSpawner, TArray<struct FS_ItemSpawnerSave>& ItemSpawnerSaves, struct FS_MasterItemSave* Item);
	bool FindPlayerSave(const class FText& PlayerName, struct FS_PlayerSave* PlayerSave);
	void FindResourceSaveData(const class FString& LevelName, bool* SaveFound, TArray<struct FS_ResourcesSaves>* RemovedResources);
	void FindSpecificResourceSaveData(const struct FVector& ResourceLocation, const class FString& LevelName, bool* ResourceRemoved, int32* ResourceAmount);
	void FindStorageSaveData(const struct FTransform& Transform, const class FString& LevelName, bool* SaveFound, struct FS_StorageSave* Array_Element);
	void FindVenderSaveData(const struct FTransform& Transform, const class FString& LevelName, bool* SaveFound, struct FS_VendorSave* Array_Element);
	void GatherAttachmentData(class UBP_WeaponInventory_C* WeaponInventory, TArray<struct FS_InvSave>& OtherInventorySaves, TArray<struct FS_InvSave>* OtherInventorySavesL1, TArray<struct FS_AttachmentSaveSlot>* AttachmentSaveSlotsL1);
	void GatherInventoryData(TArray<struct FS_InvSlot>& Inventory, TArray<struct FS_InvSave>& Otherinventories, TArray<struct FS_InvSaveSlot>* InventorySaveData, TArray<struct FS_InvSave>* NewOtherInventories);
	void PrepareCookingSaveData(class UBP_MasterInventory_C* Inventory, const struct FS_LevelSaveData& Param_LevelSaveData, int32* ExtraDataIndex, struct FS_LevelSaveData* NewLevelSaveData);
	void PrepareCraftingSaveData(class UBP_MasterInventory_C* Inventory, const struct FS_LevelSaveData& Param_LevelSaveData, int32* ExtraDataIndex, struct FS_LevelSaveData* NewLevelSaveData);
	void PrepareEquipmentSaveData(class UBP_EquipmentInventory_C* EquipmentInventory, const struct FS_LevelSaveData& Param_LevelSaveData, int32* ExtraDataIndex, struct FS_LevelSaveData* NewLevelSaveData);
	void PrepareRespawnNameData(const class FText& Param_Name, const struct FS_LevelSaveData& LevelData, struct FS_LevelSaveData* SaveData, int32* SaveIndex);
	void PrepareStorageSaveData(class UBP_MasterInventory_C* Inventory, const struct FS_LevelSaveData& Param_LevelSaveData, int32* ExtraDataIndex, struct FS_LevelSaveData* NewLevelSaveData);
	void PrepareVenderSaveData(class UBP_MasterInventory_C* Inventory, const struct FS_LevelSaveData& Param_LevelSaveData, int32* ExtraDataIndex, struct FS_LevelSaveData* NewLevelSaveData);
	void SaveEquipmentSlots(class UBP_EquipmentInventory_C* EquipmentInventory, TArray<struct FS_InvSave>& OtherInventorySaves, TArray<struct FS_EquipmentSlotSave>* EquipmentSaveSlots, TArray<struct FS_InvSave>* NewOtherInventories);
	void SaveInventory__DelegateSignature();
	void SaveItem(const struct FTransform& Transform, const struct FS_InvItem& Item, const class FString& LevelName);
	void SaveItemSpawners(class ABP_MasterItemSpawner_C* ItemSpawner, const class FString& LevelName);
	void SavePlayerInventory(class UBP_PlayerInventory_C* PlayerInventory, const class FString& Level);
	void SaveResourceInstanceData(const struct FVector& RemovedInstances, int32 Amount, const class FString& LevelName);
	void SaveWeaponSlots(class UBP_EquipmentInventory_C* EquipmentInventory, TArray<struct FS_InvSave>& OtherInventorySaves, TArray<struct FS_WeaponSlotSave>* WeaponSaveSlots, TArray<struct FS_InvSave>* NewOtherInventories);
	void SelectLevelSaveData(const class FString& LevelName, bool* SaveFound, struct FS_LevelSaveData* Param_LevelSaveData);
	void SetLevelData(const struct FS_LevelSaveData& SaveData);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SGKSaveGame_C">();
	}
	static class UBP_SGKSaveGame_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SGKSaveGame_C>();
	}
};
static_assert(alignof(UBP_SGKSaveGame_C) == 0x000008, "Wrong alignment on UBP_SGKSaveGame_C");
static_assert(sizeof(UBP_SGKSaveGame_C) == 0x000068, "Wrong size on UBP_SGKSaveGame_C");
static_assert(offsetof(UBP_SGKSaveGame_C, PlayerSaves) == 0x000028, "Member 'UBP_SGKSaveGame_C::PlayerSaves' has a wrong offset!");
static_assert(offsetof(UBP_SGKSaveGame_C, LevelSaveData) == 0x000038, "Member 'UBP_SGKSaveGame_C::LevelSaveData' has a wrong offset!");
static_assert(offsetof(UBP_SGKSaveGame_C, TempItemSaveData) == 0x000048, "Member 'UBP_SGKSaveGame_C::TempItemSaveData' has a wrong offset!");
static_assert(offsetof(UBP_SGKSaveGame_C, SaveInventory) == 0x000058, "Member 'UBP_SGKSaveGame_C::SaveInventory' has a wrong offset!");

}

