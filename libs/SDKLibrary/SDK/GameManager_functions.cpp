#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameManager

#include "Basic.hpp"

#include "GameManager_classes.hpp"
#include "GameManager_parameters.hpp"


namespace SDK
{

// Function GameManager.GameManager_C.BeginRoundServer
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AGameManager_C::BeginRoundServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "BeginRoundServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GameManager.GameManager_C.BombDefusedManagerMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SealsTrue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bExploded_                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::BombDefusedManagerMulticast(bool SealsTrue, bool bExploded_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "BombDefusedManagerMulticast");

	Params::GameManager_C_BombDefusedManagerMulticast Parms{};

	Parms.SealsTrue = SealsTrue;
	Parms.bExploded_ = bExploded_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameManager.GameManager_C.BombDefusedManagerServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SealsTrue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bExploded_                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::BombDefusedManagerServer(bool SealsTrue, bool bExploded_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "BombDefusedManagerServer");

	Params::GameManager_C_BombDefusedManagerServer Parms{};

	Parms.SealsTrue = SealsTrue;
	Parms.bExploded_ = bExploded_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameManager.GameManager_C.CheckFFA
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    FFA_                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::CheckFFA(bool* FFA_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "CheckFFA");

	Params::GameManager_C_CheckFFA Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FFA_ != nullptr)
		*FFA_ = Parms.FFA_;
}


// Function GameManager.GameManager_C.CheckRoundFinishMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AGameManager_C::CheckRoundFinishMulticast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "CheckRoundFinishMulticast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GameManager.GameManager_C.CheckRoundFinishServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AGameManager_C::CheckRoundFinishServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "CheckRoundFinishServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GameManager.GameManager_C.ExecuteUbergraph_GameManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::ExecuteUbergraph_GameManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "ExecuteUbergraph_GameManager");

	Params::GameManager_C_ExecuteUbergraph_GameManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameManager.GameManager_C.FlagVictoryMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SealsTrue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::FlagVictoryMulticast(bool SealsTrue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "FlagVictoryMulticast");

	Params::GameManager_C_FlagVictoryMulticast Parms{};

	Parms.SealsTrue = SealsTrue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameManager.GameManager_C.FlagVictoryServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SealsTrue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::FlagVictoryServer(bool SealsTrue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "FlagVictoryServer");

	Params::GameManager_C_FlagVictoryServer Parms{};

	Parms.SealsTrue = SealsTrue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameManager.GameManager_C.GameEnd
// (BlueprintCallable, BlueprintEvent)

void AGameManager_C::GameEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "GameEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GameManager.GameManager_C.GetBombPlantedState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    BombState                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::GetBombPlantedState(bool* BombState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "GetBombPlantedState");

	Params::GameManager_C_GetBombPlantedState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BombState != nullptr)
		*BombState = Parms.BombState;
}


// Function GameManager.GameManager_C.GetGameEndMVP
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             MVPName1                                               (Parm, OutParm)
// int32                                   CurrentHightScore1                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Currentkills1                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Currentdeaths1                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::GetGameEndMVP(class FText* MVPName1, int32* CurrentHightScore1, int32* Currentkills1, int32* Currentdeaths1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "GetGameEndMVP");

	Params::GameManager_C_GetGameEndMVP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MVPName1 != nullptr)
		*MVPName1 = std::move(Parms.MVPName1);

	if (CurrentHightScore1 != nullptr)
		*CurrentHightScore1 = Parms.CurrentHightScore1;

	if (Currentkills1 != nullptr)
		*Currentkills1 = Parms.Currentkills1;

	if (Currentdeaths1 != nullptr)
		*Currentdeaths1 = Parms.Currentdeaths1;
}


// Function GameManager.GameManager_C.GetTeamStats
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPeak53Teams                            B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CurrentHightScore1                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Currentkills1                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Currentdeaths1                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::GetTeamStats(EPeak53Teams B, int32* CurrentHightScore1, int32* Currentkills1, int32* Currentdeaths1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "GetTeamStats");

	Params::GameManager_C_GetTeamStats Parms{};

	Parms.B = B;

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentHightScore1 != nullptr)
		*CurrentHightScore1 = Parms.CurrentHightScore1;

	if (Currentkills1 != nullptr)
		*Currentkills1 = Parms.Currentkills1;

	if (Currentdeaths1 != nullptr)
		*Currentdeaths1 = Parms.Currentdeaths1;
}


// Function GameManager.GameManager_C.LateJoiners
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AGameManager_C::LateJoiners()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "LateJoiners");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GameManager.GameManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AGameManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GameManager.GameManager_C.ResetBombsMC
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AGameManager_C::ResetBombsMC(TArray<struct FVector>& Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "ResetBombsMC");

	Params::GameManager_C_ResetBombsMC Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
}


// Function GameManager.GameManager_C.ResetBombsSV
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AGameManager_C::ResetBombsSV(TArray<struct FVector>& Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "ResetBombsSV");

	Params::GameManager_C_ResetBombsSV Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
}


// Function GameManager.GameManager_C.ResetDoOnce
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AGameManager_C::ResetDoOnce()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "ResetDoOnce");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GameManager.GameManager_C.ResetFlagMC
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   RandomInt                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::ResetFlagMC(TArray<struct FVector>& Array, int32 RandomInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "ResetFlagMC");

	Params::GameManager_C_ResetFlagMC Parms{};

	Parms.Array = std::move(Array);
	Parms.RandomInt = RandomInt;

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
}


// Function GameManager.GameManager_C.SendFeedMessage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             MessageFeedVar                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// ETextJustify                            Justification                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      In_Color_and_Opacity                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   In_Font_Info_Size                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::SendFeedMessage(const class FText& MessageFeedVar, ETextJustify Justification, const struct FSlateColor& In_Color_and_Opacity, int32 In_Font_Info_Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "SendFeedMessage");

	Params::GameManager_C_SendFeedMessage Parms{};

	Parms.MessageFeedVar = std::move(MessageFeedVar);
	Parms.Justification = Justification;
	Parms.In_Color_and_Opacity = std::move(In_Color_and_Opacity);
	Parms.In_Font_Info_Size = In_Font_Info_Size;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameManager.GameManager_C.SendFeedMessageMC
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             MessageFeedVar                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// ETextJustify                            Justification                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      In_Color_and_Opacity                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   In_Font_Info_Size                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::SendFeedMessageMC(const class FText& MessageFeedVar, ETextJustify Justification, const struct FSlateColor& In_Color_and_Opacity, int32 In_Font_Info_Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "SendFeedMessageMC");

	Params::GameManager_C_SendFeedMessageMC Parms{};

	Parms.MessageFeedVar = std::move(MessageFeedVar);
	Parms.Justification = Justification;
	Parms.In_Color_and_Opacity = std::move(In_Color_and_Opacity);
	Parms.In_Font_Info_Size = In_Font_Info_Size;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameManager.GameManager_C.SetBombPlantedState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBombPlanted                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::SetBombPlantedState(bool IsBombPlanted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "SetBombPlantedState");

	Params::GameManager_C_SetBombPlantedState Parms{};

	Parms.IsBombPlanted = IsBombPlanted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameManager.GameManager_C.SetFlagVictoryServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bFlagVictory                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::SetFlagVictoryServer(bool Param_bFlagVictory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "SetFlagVictoryServer");

	Params::GameManager_C_SetFlagVictoryServer Parms{};

	Parms.Param_bFlagVictory = Param_bFlagVictory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameManager.GameManager_C.SetRoundEndCheckServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_PauseRoundEndChecks                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::SetRoundEndCheckServer(bool Param_PauseRoundEndChecks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "SetRoundEndCheckServer");

	Params::GameManager_C_SetRoundEndCheckServer Parms{};

	Parms.Param_PauseRoundEndChecks = Param_PauseRoundEndChecks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameManager.GameManager_C.SetRoundEndChecksMC
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_PauseRoundEndChecks                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::SetRoundEndChecksMC(bool Param_PauseRoundEndChecks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "SetRoundEndChecksMC");

	Params::GameManager_C_SetRoundEndChecksMC Parms{};

	Parms.Param_PauseRoundEndChecks = Param_PauseRoundEndChecks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameManager.GameManager_C.SetRoundTimerClients
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_CurrentRoundTimer                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGameManager_C::SetRoundTimerClients(double Param_CurrentRoundTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManager_C", "SetRoundTimerClients");

	Params::GameManager_C_SetRoundTimerClients Parms{};

	Parms.Param_CurrentRoundTimer = Param_CurrentRoundTimer;

	UObject::ProcessEvent(Func, &Parms);
}

}

