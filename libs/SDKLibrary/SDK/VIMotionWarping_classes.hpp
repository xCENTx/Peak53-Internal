#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VIMotionWarping

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "VIMotionWarping_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class VIMotionWarping.VIAnimNotifyState_MotionWarping
// 0x0008 (0x0038 - 0x0030)
class UVIAnimNotifyState_MotionWarping final : public UAnimNotifyState
{
public:
	class UVIRootMotionModifierConfig*            VIRootMotionModifierConfig;                        // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddVIRootMotionModifier(class UVIMotionWarpingComponent* VIMotionWarpingComp, class UAnimSequenceBase* Animation, float StartTime, float EndTime) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VIAnimNotifyState_MotionWarping">();
	}
	static class UVIAnimNotifyState_MotionWarping* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVIAnimNotifyState_MotionWarping>();
	}
};
static_assert(alignof(UVIAnimNotifyState_MotionWarping) == 0x000008, "Wrong alignment on UVIAnimNotifyState_MotionWarping");
static_assert(sizeof(UVIAnimNotifyState_MotionWarping) == 0x000038, "Wrong size on UVIAnimNotifyState_MotionWarping");
static_assert(offsetof(UVIAnimNotifyState_MotionWarping, VIRootMotionModifierConfig) == 0x000030, "Member 'UVIAnimNotifyState_MotionWarping::VIRootMotionModifierConfig' has a wrong offset!");

// Class VIMotionWarping.VIMotionWarpingUtilities
// 0x0000 (0x0028 - 0x0028)
class UVIMotionWarpingUtilities final : public UBlueprintFunctionLibrary
{
public:
	static void BreakVIMotionWarpingSyncPoint(const struct FVIMotionWarpingSyncPoint& SyncPoint, struct FVector* Location, struct FRotator* Rotation);
	static struct FTransform ExtractVIRootMotionFromAnimation(const class UAnimSequenceBase* Animation, float StartTime, float EndTime);
	static void GetVIMotionWarpingWindowsForSyncPointFromAnimation(const class UAnimSequenceBase* Animation, class FName SyncPointName, TArray<struct FVIMotionWarpingWindowData>* OutWindows);
	static void GetVIMotionWarpingWindowsFromAnimation(const class UAnimSequenceBase* Animation, TArray<struct FVIMotionWarpingWindowData>* OutWindows);
	static struct FVIMotionWarpingSyncPoint MakeVIMotionWarpingSyncPoint(const struct FVector& Location, const struct FRotator& Rotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VIMotionWarpingUtilities">();
	}
	static class UVIMotionWarpingUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVIMotionWarpingUtilities>();
	}
};
static_assert(alignof(UVIMotionWarpingUtilities) == 0x000008, "Wrong alignment on UVIMotionWarpingUtilities");
static_assert(sizeof(UVIMotionWarpingUtilities) == 0x000028, "Wrong size on UVIMotionWarpingUtilities");

// Class VIMotionWarping.VIMotionWarpingComponent
// 0x0080 (0x0120 - 0x00A0)
class UVIMotionWarpingComponent final : public UActorComponent
{
public:
	bool                                          bSearchForWindowsInAnimsWithinMontages;            // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B24[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPreUpdate;                                       // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ACharacter>              CharacterOwner;                                    // 0x00B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B25[0x10];                                    // 0x00C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FVIMotionWarpingSyncPoint> SyncPoints;                                        // 0x00D0(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	void AddOrUpdateSyncPoint(class FName Param_Name, const struct FVIMotionWarpingSyncPoint& SyncPoint);
	int32 RemoveSyncPoint(class FName Param_Name);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VIMotionWarpingComponent">();
	}
	static class UVIMotionWarpingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVIMotionWarpingComponent>();
	}
};
static_assert(alignof(UVIMotionWarpingComponent) == 0x000008, "Wrong alignment on UVIMotionWarpingComponent");
static_assert(sizeof(UVIMotionWarpingComponent) == 0x000120, "Wrong size on UVIMotionWarpingComponent");
static_assert(offsetof(UVIMotionWarpingComponent, bSearchForWindowsInAnimsWithinMontages) == 0x0000A0, "Member 'UVIMotionWarpingComponent::bSearchForWindowsInAnimsWithinMontages' has a wrong offset!");
static_assert(offsetof(UVIMotionWarpingComponent, OnPreUpdate) == 0x0000A8, "Member 'UVIMotionWarpingComponent::OnPreUpdate' has a wrong offset!");
static_assert(offsetof(UVIMotionWarpingComponent, CharacterOwner) == 0x0000B8, "Member 'UVIMotionWarpingComponent::CharacterOwner' has a wrong offset!");
static_assert(offsetof(UVIMotionWarpingComponent, SyncPoints) == 0x0000D0, "Member 'UVIMotionWarpingComponent::SyncPoints' has a wrong offset!");

// Class VIMotionWarping.VIRootMotionModifierConfig
// 0x0000 (0x0028 - 0x0028)
class UVIRootMotionModifierConfig : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VIRootMotionModifierConfig">();
	}
	static class UVIRootMotionModifierConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVIRootMotionModifierConfig>();
	}
};
static_assert(alignof(UVIRootMotionModifierConfig) == 0x000008, "Wrong alignment on UVIRootMotionModifierConfig");
static_assert(sizeof(UVIRootMotionModifierConfig) == 0x000028, "Wrong size on UVIRootMotionModifierConfig");

// Class VIMotionWarping.VIRootMotionModifierConfig_Warp
// 0x0010 (0x0038 - 0x0028)
class UVIRootMotionModifierConfig_Warp : public UVIRootMotionModifierConfig
{
public:
	class FName                                   SyncPointName;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpTranslation;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreZAxis;                                      // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpRotation;                                     // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVIMotionWarpRotationType                     RotationType;                                      // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarpRotationTimeMultiplier;                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static void AddVIRootMotionModifierSimpleWarp(class UVIMotionWarpingComponent* InVIMotionWarpingComp, const class UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, class FName InSyncPointName, bool bInWarpTranslation, bool bInIgnoreZAxis, bool bInWarpRotation, EVIMotionWarpRotationType InRotationType, float InWarpRotationTimeMultiplier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VIRootMotionModifierConfig_Warp">();
	}
	static class UVIRootMotionModifierConfig_Warp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVIRootMotionModifierConfig_Warp>();
	}
};
static_assert(alignof(UVIRootMotionModifierConfig_Warp) == 0x000008, "Wrong alignment on UVIRootMotionModifierConfig_Warp");
static_assert(sizeof(UVIRootMotionModifierConfig_Warp) == 0x000038, "Wrong size on UVIRootMotionModifierConfig_Warp");
static_assert(offsetof(UVIRootMotionModifierConfig_Warp, SyncPointName) == 0x000028, "Member 'UVIRootMotionModifierConfig_Warp::SyncPointName' has a wrong offset!");
static_assert(offsetof(UVIRootMotionModifierConfig_Warp, bWarpTranslation) == 0x000030, "Member 'UVIRootMotionModifierConfig_Warp::bWarpTranslation' has a wrong offset!");
static_assert(offsetof(UVIRootMotionModifierConfig_Warp, bIgnoreZAxis) == 0x000031, "Member 'UVIRootMotionModifierConfig_Warp::bIgnoreZAxis' has a wrong offset!");
static_assert(offsetof(UVIRootMotionModifierConfig_Warp, bWarpRotation) == 0x000032, "Member 'UVIRootMotionModifierConfig_Warp::bWarpRotation' has a wrong offset!");
static_assert(offsetof(UVIRootMotionModifierConfig_Warp, RotationType) == 0x000033, "Member 'UVIRootMotionModifierConfig_Warp::RotationType' has a wrong offset!");
static_assert(offsetof(UVIRootMotionModifierConfig_Warp, WarpRotationTimeMultiplier) == 0x000034, "Member 'UVIRootMotionModifierConfig_Warp::WarpRotationTimeMultiplier' has a wrong offset!");

// Class VIMotionWarping.VIRootMotionModifierConfig_VaultWarp
// 0x0000 (0x0038 - 0x0038)
class UVIRootMotionModifierConfig_VaultWarp final : public UVIRootMotionModifierConfig_Warp
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VIRootMotionModifierConfig_VaultWarp">();
	}
	static class UVIRootMotionModifierConfig_VaultWarp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVIRootMotionModifierConfig_VaultWarp>();
	}
};
static_assert(alignof(UVIRootMotionModifierConfig_VaultWarp) == 0x000008, "Wrong alignment on UVIRootMotionModifierConfig_VaultWarp");
static_assert(sizeof(UVIRootMotionModifierConfig_VaultWarp) == 0x000038, "Wrong size on UVIRootMotionModifierConfig_VaultWarp");

// Class VIMotionWarping.VIRootMotionModifierConfig_Scale
// 0x0018 (0x0040 - 0x0028)
class UVIRootMotionModifierConfig_Scale final : public UVIRootMotionModifierConfig
{
public:
	struct FVector                                Scale;                                             // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static void AddVIRootMotionModifierScale(class UVIMotionWarpingComponent* InVIMotionWarpingComp, const class UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, const struct FVector& InScale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VIRootMotionModifierConfig_Scale">();
	}
	static class UVIRootMotionModifierConfig_Scale* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVIRootMotionModifierConfig_Scale>();
	}
};
static_assert(alignof(UVIRootMotionModifierConfig_Scale) == 0x000008, "Wrong alignment on UVIRootMotionModifierConfig_Scale");
static_assert(sizeof(UVIRootMotionModifierConfig_Scale) == 0x000040, "Wrong size on UVIRootMotionModifierConfig_Scale");
static_assert(offsetof(UVIRootMotionModifierConfig_Scale, Scale) == 0x000028, "Member 'UVIRootMotionModifierConfig_Scale::Scale' has a wrong offset!");

// Class VIMotionWarping.VIRootMotionModifierConfig_AdjustmentBlendWarp
// 0x0018 (0x0050 - 0x0038)
class UVIRootMotionModifierConfig_AdjustmentBlendWarp final : public UVIRootMotionModifierConfig_Warp
{
public:
	bool                                          bWarpIKBones;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B27[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IKBones;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static void AddVIRootMotionModifierAdjustmentBlendWarp(class UVIMotionWarpingComponent* InVIMotionWarpingComp, const class UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, class FName InSyncPointName, bool bInWarpTranslation, bool bInIgnoreZAxis, bool bInWarpRotation, bool bInWarpIKBones, const TArray<class FName>& InIKBones);
	static void GetIKBoneTransformAndAlpha(class ACharacter* Character, class FName BoneName, struct FTransform* OutTransform, float* OutAlpha);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VIRootMotionModifierConfig_AdjustmentBlendWarp">();
	}
	static class UVIRootMotionModifierConfig_AdjustmentBlendWarp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVIRootMotionModifierConfig_AdjustmentBlendWarp>();
	}
};
static_assert(alignof(UVIRootMotionModifierConfig_AdjustmentBlendWarp) == 0x000008, "Wrong alignment on UVIRootMotionModifierConfig_AdjustmentBlendWarp");
static_assert(sizeof(UVIRootMotionModifierConfig_AdjustmentBlendWarp) == 0x000050, "Wrong size on UVIRootMotionModifierConfig_AdjustmentBlendWarp");
static_assert(offsetof(UVIRootMotionModifierConfig_AdjustmentBlendWarp, bWarpIKBones) == 0x000038, "Member 'UVIRootMotionModifierConfig_AdjustmentBlendWarp::bWarpIKBones' has a wrong offset!");
static_assert(offsetof(UVIRootMotionModifierConfig_AdjustmentBlendWarp, IKBones) == 0x000040, "Member 'UVIRootMotionModifierConfig_AdjustmentBlendWarp::IKBones' has a wrong offset!");

// Class VIMotionWarping.VIRootMotionModifierConfig_SkewWarp
// 0x0000 (0x0038 - 0x0038)
class UVIRootMotionModifierConfig_SkewWarp final : public UVIRootMotionModifierConfig_Warp
{
public:
	static void AddVIRootMotionModifierSkewWarp(class UVIMotionWarpingComponent* InVIMotionWarpingComp, const class UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, class FName InSyncPointName, bool bInWarpTranslation, bool bInIgnoreZAxis, bool bInWarpRotation, EVIMotionWarpRotationType InRotationType, float InWarpRotationTimeMultiplier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VIRootMotionModifierConfig_SkewWarp">();
	}
	static class UVIRootMotionModifierConfig_SkewWarp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVIRootMotionModifierConfig_SkewWarp>();
	}
};
static_assert(alignof(UVIRootMotionModifierConfig_SkewWarp) == 0x000008, "Wrong alignment on UVIRootMotionModifierConfig_SkewWarp");
static_assert(sizeof(UVIRootMotionModifierConfig_SkewWarp) == 0x000038, "Wrong size on UVIRootMotionModifierConfig_SkewWarp");

}

