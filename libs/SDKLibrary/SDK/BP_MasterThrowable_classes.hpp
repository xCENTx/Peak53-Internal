#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterThrowable

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_MasterHoldable_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterThrowable.BP_MasterThrowable_C
// 0x0120 (0x07D0 - 0x06B0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_MasterThrowable_C : public ABP_MasterHoldable_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MasterThrowable_C;               // 0x06B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       ArcSpline;                                         // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TL_GrenadeCharge_Alpha_662B01CC4900ABD159559A8DD01B1605; // 0x06C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_GrenadeCharge__Direction_662B01CC4900ABD159559A8DD01B1605; // 0x06CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CAE[0x3];                                     // 0x06CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_GrenadeCharge;                                  // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_DrawTrajectory__Direction_7FC593DE42ABA03A0BDFD391EF051503; // 0x06D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CAF[0x7];                                     // 0x06D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_DrawTrajectory;                                 // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Thrown;                                            // 0x06E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Charged;                                           // 0x06E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB0[0x6];                                     // 0x06EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MasterThrowableProjectile_C*        ThrownProjectile;                                  // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PrimaryKeyDown;                                    // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB1[0x7];                                     // 0x06F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ThrowMontage;                                      // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ThrowProjectile;                                   // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMode;                                         // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB2[0x3];                                     // 0x0711(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuickSlotIndex;                                    // 0x0714(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineMeshComponent*>           ArcMeshes;                                         // 0x0718(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class USceneComponent*                        ThrowSocket;                                       // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ArcStaysDuration;                                  // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB3[0x4];                                     // 0x0734(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Angle_MaxDegrees;                                  // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Angle_HorizontalDeviation;                         // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Angle_VerticalDeviation;                           // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Velocity_HorizontalMin;                            // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Velocity_VerticalMin;                              // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Velocity_HorizontalMax;                            // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Velocity_VerticalMax;                              // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity_Current;                                  // 0x0770(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThrowHeight;                                       // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrenadeThrowTimer;                                 // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimSelect;                                        // 0x0794(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCooldown;                                         // 0x0798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB4[0x7];                                     // 0x0799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   Projectile_Hit_Component;                          // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Projectile_Spline_Component;                       // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineMeshComponent*>           Projectile_Spline_Mesh_Components;                 // 0x07B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        TemporaryVelMax;                                   // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimNotify(class FName Notify);
	void CancelThrow();
	void CharacterFalling();
	void CharacterSprinting(bool Sprinting);
	void Clear_All_Components();
	void ClearPreviousArc();
	void DetermineAnimationSelection();
	void Do_Predictable_Path(const struct FVector& StartPos, const struct FVector& LaunchVelocity, const TArray<EObjectTypeQuery>& ObjectTypes, const TArray<class AActor*>& ActorsToIgnore, double SimFrequency, double MaxSimTime, class UMaterialInterface* Hit_Mesh_Material, class UMaterialInterface* Prediction_Mesh_Material);
	void ExecuteUbergraph_BP_MasterThrowable(int32 EntryPoint);
	void InitializeThrowProjectile();
	void JustCharge();
	void JustThrow();
	void PlayThrowAnim();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SGK_ClientSecondaryAction(bool KeyDown);
	void SGK_HoldableMesh(class UPrimitiveComponent** Mesh);
	void SGK_NewHeld(bool Held);
	void SGK_ServerPrimaryAction(bool KeyDown);
	void SGK_ServerSecondaryAction(bool KeyDown);
	void StartGrenadeCharging();
	void StartThrowArc();
	void StopGrenadeCharging();
	void StopThrowArc();
	void ThrowBlockCheck(bool* AllowThrow);
	void ThrowGrenade();
	void TL_DrawTrajectory__FinishedFunc();
	void TL_DrawTrajectory__RefreshLine__EventFunc();
	void TL_DrawTrajectory__UpdateFunc();
	void TL_GrenadeCharge__FinishedFunc();
	void TL_GrenadeCharge__UpdateFunc();
	void TraceLineHeight(double Alpha);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterThrowable_C">();
	}
	static class ABP_MasterThrowable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MasterThrowable_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_MasterThrowable_C) == 0x000010, "Wrong alignment on ABP_MasterThrowable_C");
static_assert(sizeof(ABP_MasterThrowable_C) == 0x0007D0, "Wrong size on ABP_MasterThrowable_C");
static_assert(offsetof(ABP_MasterThrowable_C, UberGraphFrame_BP_MasterThrowable_C) == 0x0006B0, "Member 'ABP_MasterThrowable_C::UberGraphFrame_BP_MasterThrowable_C' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, ArcSpline) == 0x0006B8, "Member 'ABP_MasterThrowable_C::ArcSpline' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, StaticMesh) == 0x0006C0, "Member 'ABP_MasterThrowable_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, TL_GrenadeCharge_Alpha_662B01CC4900ABD159559A8DD01B1605) == 0x0006C8, "Member 'ABP_MasterThrowable_C::TL_GrenadeCharge_Alpha_662B01CC4900ABD159559A8DD01B1605' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, TL_GrenadeCharge__Direction_662B01CC4900ABD159559A8DD01B1605) == 0x0006CC, "Member 'ABP_MasterThrowable_C::TL_GrenadeCharge__Direction_662B01CC4900ABD159559A8DD01B1605' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, TL_GrenadeCharge) == 0x0006D0, "Member 'ABP_MasterThrowable_C::TL_GrenadeCharge' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, TL_DrawTrajectory__Direction_7FC593DE42ABA03A0BDFD391EF051503) == 0x0006D8, "Member 'ABP_MasterThrowable_C::TL_DrawTrajectory__Direction_7FC593DE42ABA03A0BDFD391EF051503' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, TL_DrawTrajectory) == 0x0006E0, "Member 'ABP_MasterThrowable_C::TL_DrawTrajectory' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, Thrown) == 0x0006E8, "Member 'ABP_MasterThrowable_C::Thrown' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, Charged) == 0x0006E9, "Member 'ABP_MasterThrowable_C::Charged' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, ThrownProjectile) == 0x0006F0, "Member 'ABP_MasterThrowable_C::ThrownProjectile' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, PrimaryKeyDown) == 0x0006F8, "Member 'ABP_MasterThrowable_C::PrimaryKeyDown' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, ThrowMontage) == 0x000700, "Member 'ABP_MasterThrowable_C::ThrowMontage' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, ThrowProjectile) == 0x000708, "Member 'ABP_MasterThrowable_C::ThrowProjectile' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, DebugMode) == 0x000710, "Member 'ABP_MasterThrowable_C::DebugMode' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, QuickSlotIndex) == 0x000714, "Member 'ABP_MasterThrowable_C::QuickSlotIndex' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, ArcMeshes) == 0x000718, "Member 'ABP_MasterThrowable_C::ArcMeshes' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, ThrowSocket) == 0x000728, "Member 'ABP_MasterThrowable_C::ThrowSocket' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, ArcStaysDuration) == 0x000730, "Member 'ABP_MasterThrowable_C::ArcStaysDuration' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, Angle_MaxDegrees) == 0x000738, "Member 'ABP_MasterThrowable_C::Angle_MaxDegrees' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, Angle_HorizontalDeviation) == 0x000740, "Member 'ABP_MasterThrowable_C::Angle_HorizontalDeviation' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, Angle_VerticalDeviation) == 0x000748, "Member 'ABP_MasterThrowable_C::Angle_VerticalDeviation' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, Velocity_HorizontalMin) == 0x000750, "Member 'ABP_MasterThrowable_C::Velocity_HorizontalMin' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, Velocity_VerticalMin) == 0x000758, "Member 'ABP_MasterThrowable_C::Velocity_VerticalMin' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, Velocity_HorizontalMax) == 0x000760, "Member 'ABP_MasterThrowable_C::Velocity_HorizontalMax' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, Velocity_VerticalMax) == 0x000768, "Member 'ABP_MasterThrowable_C::Velocity_VerticalMax' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, Velocity_Current) == 0x000770, "Member 'ABP_MasterThrowable_C::Velocity_Current' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, ThrowHeight) == 0x000788, "Member 'ABP_MasterThrowable_C::ThrowHeight' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, GrenadeThrowTimer) == 0x000790, "Member 'ABP_MasterThrowable_C::GrenadeThrowTimer' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, AnimSelect) == 0x000794, "Member 'ABP_MasterThrowable_C::AnimSelect' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, bCooldown) == 0x000798, "Member 'ABP_MasterThrowable_C::bCooldown' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, Projectile_Hit_Component) == 0x0007A0, "Member 'ABP_MasterThrowable_C::Projectile_Hit_Component' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, Projectile_Spline_Component) == 0x0007A8, "Member 'ABP_MasterThrowable_C::Projectile_Spline_Component' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, Projectile_Spline_Mesh_Components) == 0x0007B0, "Member 'ABP_MasterThrowable_C::Projectile_Spline_Mesh_Components' has a wrong offset!");
static_assert(offsetof(ABP_MasterThrowable_C, TemporaryVelMax) == 0x0007C0, "Member 'ABP_MasterThrowable_C::TemporaryVelMax' has a wrong offset!");

}

