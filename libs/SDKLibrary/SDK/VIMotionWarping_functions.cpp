#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VIMotionWarping

#include "Basic.hpp"

#include "VIMotionWarping_classes.hpp"
#include "VIMotionWarping_parameters.hpp"


namespace SDK
{

// Function VIMotionWarping.VIAnimNotifyState_MotionWarping.AddVIRootMotionModifier
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UVIMotionWarpingComponent*        VIMotionWarpingComp                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                Animation                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVIAnimNotifyState_MotionWarping::AddVIRootMotionModifier(class UVIMotionWarpingComponent* VIMotionWarpingComp, class UAnimSequenceBase* Animation, float StartTime, float EndTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VIAnimNotifyState_MotionWarping", "AddVIRootMotionModifier");

	Params::VIAnimNotifyState_MotionWarping_AddVIRootMotionModifier Parms{};

	Parms.VIMotionWarpingComp = VIMotionWarpingComp;
	Parms.Animation = Animation;
	Parms.StartTime = StartTime;
	Parms.EndTime = EndTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VIMotionWarping.VIMotionWarpingUtilities.BreakVIMotionWarpingSyncPoint
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVIMotionWarpingSyncPoint        SyncPoint                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UVIMotionWarpingUtilities::BreakVIMotionWarpingSyncPoint(const struct FVIMotionWarpingSyncPoint& SyncPoint, struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VIMotionWarpingUtilities", "BreakVIMotionWarpingSyncPoint");

	Params::VIMotionWarpingUtilities_BreakVIMotionWarpingSyncPoint Parms{};

	Parms.SyncPoint = std::move(SyncPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function VIMotionWarping.VIMotionWarpingUtilities.ExtractVIRootMotionFromAnimation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                Animation                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UVIMotionWarpingUtilities::ExtractVIRootMotionFromAnimation(const class UAnimSequenceBase* Animation, float StartTime, float EndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VIMotionWarpingUtilities", "ExtractVIRootMotionFromAnimation");

	Params::VIMotionWarpingUtilities_ExtractVIRootMotionFromAnimation Parms{};

	Parms.Animation = Animation;
	Parms.StartTime = StartTime;
	Parms.EndTime = EndTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VIMotionWarping.VIMotionWarpingUtilities.GetVIMotionWarpingWindowsForSyncPointFromAnimation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                Animation                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SyncPointName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVIMotionWarpingWindowData>OutWindows                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVIMotionWarpingUtilities::GetVIMotionWarpingWindowsForSyncPointFromAnimation(const class UAnimSequenceBase* Animation, class FName SyncPointName, TArray<struct FVIMotionWarpingWindowData>* OutWindows)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VIMotionWarpingUtilities", "GetVIMotionWarpingWindowsForSyncPointFromAnimation");

	Params::VIMotionWarpingUtilities_GetVIMotionWarpingWindowsForSyncPointFromAnimation Parms{};

	Parms.Animation = Animation;
	Parms.SyncPointName = SyncPointName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWindows != nullptr)
		*OutWindows = std::move(Parms.OutWindows);
}


// Function VIMotionWarping.VIMotionWarpingUtilities.GetVIMotionWarpingWindowsFromAnimation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                Animation                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVIMotionWarpingWindowData>OutWindows                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVIMotionWarpingUtilities::GetVIMotionWarpingWindowsFromAnimation(const class UAnimSequenceBase* Animation, TArray<struct FVIMotionWarpingWindowData>* OutWindows)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VIMotionWarpingUtilities", "GetVIMotionWarpingWindowsFromAnimation");

	Params::VIMotionWarpingUtilities_GetVIMotionWarpingWindowsFromAnimation Parms{};

	Parms.Animation = Animation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWindows != nullptr)
		*OutWindows = std::move(Parms.OutWindows);
}


// Function VIMotionWarping.VIMotionWarpingUtilities.MakeVIMotionWarpingSyncPoint
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVIMotionWarpingSyncPoint        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FVIMotionWarpingSyncPoint UVIMotionWarpingUtilities::MakeVIMotionWarpingSyncPoint(const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VIMotionWarpingUtilities", "MakeVIMotionWarpingSyncPoint");

	Params::VIMotionWarpingUtilities_MakeVIMotionWarpingSyncPoint Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VIMotionWarping.VIMotionWarpingComponent.AddOrUpdateSyncPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Param_Name                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVIMotionWarpingSyncPoint        SyncPoint                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVIMotionWarpingComponent::AddOrUpdateSyncPoint(class FName Param_Name, const struct FVIMotionWarpingSyncPoint& SyncPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VIMotionWarpingComponent", "AddOrUpdateSyncPoint");

	Params::VIMotionWarpingComponent_AddOrUpdateSyncPoint Parms{};

	Parms.Param_Name = Param_Name;
	Parms.SyncPoint = std::move(SyncPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VIMotionWarping.VIMotionWarpingComponent.RemoveSyncPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Param_Name                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVIMotionWarpingComponent::RemoveSyncPoint(class FName Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VIMotionWarpingComponent", "RemoveSyncPoint");

	Params::VIMotionWarpingComponent_RemoveSyncPoint Parms{};

	Parms.Param_Name = Param_Name;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VIMotionWarping.VIRootMotionModifierConfig_Warp.AddVIRootMotionModifierSimpleWarp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVIMotionWarpingComponent*        InVIMotionWarpingComp                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                InAnimation                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InStartTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InEndTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InSyncPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInWarpTranslation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIgnoreZAxis                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInWarpRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVIMotionWarpRotationType               InRotationType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InWarpRotationTimeMultiplier                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVIRootMotionModifierConfig_Warp::AddVIRootMotionModifierSimpleWarp(class UVIMotionWarpingComponent* InVIMotionWarpingComp, const class UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, class FName InSyncPointName, bool bInWarpTranslation, bool bInIgnoreZAxis, bool bInWarpRotation, EVIMotionWarpRotationType InRotationType, float InWarpRotationTimeMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VIRootMotionModifierConfig_Warp", "AddVIRootMotionModifierSimpleWarp");

	Params::VIRootMotionModifierConfig_Warp_AddVIRootMotionModifierSimpleWarp Parms{};

	Parms.InVIMotionWarpingComp = InVIMotionWarpingComp;
	Parms.InAnimation = InAnimation;
	Parms.InStartTime = InStartTime;
	Parms.InEndTime = InEndTime;
	Parms.InSyncPointName = InSyncPointName;
	Parms.bInWarpTranslation = bInWarpTranslation;
	Parms.bInIgnoreZAxis = bInIgnoreZAxis;
	Parms.bInWarpRotation = bInWarpRotation;
	Parms.InRotationType = InRotationType;
	Parms.InWarpRotationTimeMultiplier = InWarpRotationTimeMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VIMotionWarping.VIRootMotionModifierConfig_Scale.AddVIRootMotionModifierScale
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UVIMotionWarpingComponent*        InVIMotionWarpingComp                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                InAnimation                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InStartTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InEndTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVIRootMotionModifierConfig_Scale::AddVIRootMotionModifierScale(class UVIMotionWarpingComponent* InVIMotionWarpingComp, const class UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, const struct FVector& InScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VIRootMotionModifierConfig_Scale", "AddVIRootMotionModifierScale");

	Params::VIRootMotionModifierConfig_Scale_AddVIRootMotionModifierScale Parms{};

	Parms.InVIMotionWarpingComp = InVIMotionWarpingComp;
	Parms.InAnimation = InAnimation;
	Parms.InStartTime = InStartTime;
	Parms.InEndTime = InEndTime;
	Parms.InScale = std::move(InScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VIMotionWarping.VIRootMotionModifierConfig_AdjustmentBlendWarp.AddVIRootMotionModifierAdjustmentBlendWarp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UVIMotionWarpingComponent*        InVIMotionWarpingComp                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                InAnimation                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InStartTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InEndTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InSyncPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInWarpTranslation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIgnoreZAxis                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInWarpRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInWarpIKBones                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     InIKBones                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVIRootMotionModifierConfig_AdjustmentBlendWarp::AddVIRootMotionModifierAdjustmentBlendWarp(class UVIMotionWarpingComponent* InVIMotionWarpingComp, const class UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, class FName InSyncPointName, bool bInWarpTranslation, bool bInIgnoreZAxis, bool bInWarpRotation, bool bInWarpIKBones, const TArray<class FName>& InIKBones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VIRootMotionModifierConfig_AdjustmentBlendWarp", "AddVIRootMotionModifierAdjustmentBlendWarp");

	Params::VIRootMotionModifierConfig_AdjustmentBlendWarp_AddVIRootMotionModifierAdjustmentBlendWarp Parms{};

	Parms.InVIMotionWarpingComp = InVIMotionWarpingComp;
	Parms.InAnimation = InAnimation;
	Parms.InStartTime = InStartTime;
	Parms.InEndTime = InEndTime;
	Parms.InSyncPointName = InSyncPointName;
	Parms.bInWarpTranslation = bInWarpTranslation;
	Parms.bInIgnoreZAxis = bInIgnoreZAxis;
	Parms.bInWarpRotation = bInWarpRotation;
	Parms.bInWarpIKBones = bInWarpIKBones;
	Parms.InIKBones = std::move(InIKBones);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VIMotionWarping.VIRootMotionModifierConfig_AdjustmentBlendWarp.GetIKBoneTransformAndAlpha
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       OutTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutAlpha                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVIRootMotionModifierConfig_AdjustmentBlendWarp::GetIKBoneTransformAndAlpha(class ACharacter* Character, class FName BoneName, struct FTransform* OutTransform, float* OutAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VIRootMotionModifierConfig_AdjustmentBlendWarp", "GetIKBoneTransformAndAlpha");

	Params::VIRootMotionModifierConfig_AdjustmentBlendWarp_GetIKBoneTransformAndAlpha Parms{};

	Parms.Character = Character;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTransform != nullptr)
		*OutTransform = std::move(Parms.OutTransform);

	if (OutAlpha != nullptr)
		*OutAlpha = Parms.OutAlpha;
}


// Function VIMotionWarping.VIRootMotionModifierConfig_SkewWarp.AddVIRootMotionModifierSkewWarp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVIMotionWarpingComponent*        InVIMotionWarpingComp                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                InAnimation                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InStartTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InEndTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InSyncPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInWarpTranslation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIgnoreZAxis                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInWarpRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVIMotionWarpRotationType               InRotationType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InWarpRotationTimeMultiplier                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVIRootMotionModifierConfig_SkewWarp::AddVIRootMotionModifierSkewWarp(class UVIMotionWarpingComponent* InVIMotionWarpingComp, const class UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, class FName InSyncPointName, bool bInWarpTranslation, bool bInIgnoreZAxis, bool bInWarpRotation, EVIMotionWarpRotationType InRotationType, float InWarpRotationTimeMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VIRootMotionModifierConfig_SkewWarp", "AddVIRootMotionModifierSkewWarp");

	Params::VIRootMotionModifierConfig_SkewWarp_AddVIRootMotionModifierSkewWarp Parms{};

	Parms.InVIMotionWarpingComp = InVIMotionWarpingComp;
	Parms.InAnimation = InAnimation;
	Parms.InStartTime = InStartTime;
	Parms.InEndTime = InEndTime;
	Parms.InSyncPointName = InSyncPointName;
	Parms.bInWarpTranslation = bInWarpTranslation;
	Parms.bInIgnoreZAxis = bInIgnoreZAxis;
	Parms.bInWarpRotation = bInWarpRotation;
	Parms.InRotationType = InRotationType;
	Parms.InWarpRotationTimeMultiplier = InWarpRotationTimeMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

