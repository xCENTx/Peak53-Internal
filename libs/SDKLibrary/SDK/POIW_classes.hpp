#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: POIW

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass POIW.POIW_C
// 0x0170 (0x03E8 - 0x0278)
class UPOIW_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       BlinkAnim;                                         // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 DownArrow;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                MainBorder;                                        // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TheImage;                                          // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ToolTipTxt;                                        // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UpArrow;                                           // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VBox;                                              // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSlateColor                            ColorX;                                            // 0x02B8(0x0014)(Edit, BlueprintVisible, ExposeOnSpawn)
	uint8                                         Pad_3D57[0x4];                                     // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorX;                                            // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsMinimapPersistent;                              // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          FollowActorRotation;                               // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3D58[0x6];                                     // 0x02DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           MyOverlaySlot;                                     // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              TextureSize;                                       // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             OutOfMapTexture;                                   // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsOut;                                            // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D59[0x7];                                     // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  PlayerOwner;                                       // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          RemoveIfActorDestroyed;                            // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bKeepImageStraight;                                // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3D5A[0x6];                                     // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TempAngle;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOnlyShowOnOutOfMinimap;                           // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3D5B[0x7];                                     // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastKnownLoc;                                      // 0x0330(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastKnownRot;                                      // 0x0348(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsLocation;                                       // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3D5C[0x7];                                     // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0368(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bShowHeightIndicator;                              // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3D5D[0x7];                                     // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TempLookAt;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AcceptableHeightDiff;                              // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   Tooltip;                                           // 0x0398(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FVector2D                              OffScreenTexSize;                                  // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Blink;                                             // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3D5E[0x7];                                     // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlinkSpeed;                                        // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          BlinkOffMinimap;                                   // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3D5F[0x7];                                     // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MinimapOffset;                                     // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void AdjustPadding(bool Param_bIsOut, bool bMinimapRotates);
	void bLinkEnabled(bool Enabled);
	void ChangeColor(const struct FSlateColor& Tint);
	void ChangeHeightIndicSettings(class UTexture2D* Texture1, class UTexture2D* Texture2, const struct FSlateColor& Color1, const struct FSlateColor& Color2, const struct FVector2D& Size, double AccepDiff);
	void ChangeTexture(class UObject* Image, const struct FVector2D& Image_Size);
	void Construct();
	void ExecuteUbergraph_POIW(int32 EntryPoint);
	void GetLookAtRot(double* Result);
	void HandleHeightIndic(bool bIsOffMinimap, bool MinimapRotates);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OutOfMap(bool IsOut, bool bMinimapRotates, const struct FVector& LastKnownLocation, const struct FRotator& LastKnowRotation);
	void SetRotation(bool bMinimapRotates, bool Param_bIsOut);
	void UpdateBlinkSpeed(double PlaybackSpeed);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"POIW_C">();
	}
	static class UPOIW_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPOIW_C>();
	}
};
static_assert(alignof(UPOIW_C) == 0x000008, "Wrong alignment on UPOIW_C");
static_assert(sizeof(UPOIW_C) == 0x0003E8, "Wrong size on UPOIW_C");
static_assert(offsetof(UPOIW_C, UberGraphFrame) == 0x000278, "Member 'UPOIW_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPOIW_C, BlinkAnim) == 0x000280, "Member 'UPOIW_C::BlinkAnim' has a wrong offset!");
static_assert(offsetof(UPOIW_C, DownArrow) == 0x000288, "Member 'UPOIW_C::DownArrow' has a wrong offset!");
static_assert(offsetof(UPOIW_C, MainBorder) == 0x000290, "Member 'UPOIW_C::MainBorder' has a wrong offset!");
static_assert(offsetof(UPOIW_C, TheImage) == 0x000298, "Member 'UPOIW_C::TheImage' has a wrong offset!");
static_assert(offsetof(UPOIW_C, ToolTipTxt) == 0x0002A0, "Member 'UPOIW_C::ToolTipTxt' has a wrong offset!");
static_assert(offsetof(UPOIW_C, UpArrow) == 0x0002A8, "Member 'UPOIW_C::UpArrow' has a wrong offset!");
static_assert(offsetof(UPOIW_C, VBox) == 0x0002B0, "Member 'UPOIW_C::VBox' has a wrong offset!");
static_assert(offsetof(UPOIW_C, ColorX) == 0x0002B8, "Member 'UPOIW_C::ColorX' has a wrong offset!");
static_assert(offsetof(UPOIW_C, ActorX) == 0x0002D0, "Member 'UPOIW_C::ActorX' has a wrong offset!");
static_assert(offsetof(UPOIW_C, bIsMinimapPersistent) == 0x0002D8, "Member 'UPOIW_C::bIsMinimapPersistent' has a wrong offset!");
static_assert(offsetof(UPOIW_C, FollowActorRotation) == 0x0002D9, "Member 'UPOIW_C::FollowActorRotation' has a wrong offset!");
static_assert(offsetof(UPOIW_C, MyOverlaySlot) == 0x0002E0, "Member 'UPOIW_C::MyOverlaySlot' has a wrong offset!");
static_assert(offsetof(UPOIW_C, Texture) == 0x0002E8, "Member 'UPOIW_C::Texture' has a wrong offset!");
static_assert(offsetof(UPOIW_C, TextureSize) == 0x0002F0, "Member 'UPOIW_C::TextureSize' has a wrong offset!");
static_assert(offsetof(UPOIW_C, OutOfMapTexture) == 0x000300, "Member 'UPOIW_C::OutOfMapTexture' has a wrong offset!");
static_assert(offsetof(UPOIW_C, bIsOut) == 0x000308, "Member 'UPOIW_C::bIsOut' has a wrong offset!");
static_assert(offsetof(UPOIW_C, PlayerOwner) == 0x000310, "Member 'UPOIW_C::PlayerOwner' has a wrong offset!");
static_assert(offsetof(UPOIW_C, RemoveIfActorDestroyed) == 0x000318, "Member 'UPOIW_C::RemoveIfActorDestroyed' has a wrong offset!");
static_assert(offsetof(UPOIW_C, bKeepImageStraight) == 0x000319, "Member 'UPOIW_C::bKeepImageStraight' has a wrong offset!");
static_assert(offsetof(UPOIW_C, TempAngle) == 0x000320, "Member 'UPOIW_C::TempAngle' has a wrong offset!");
static_assert(offsetof(UPOIW_C, bOnlyShowOnOutOfMinimap) == 0x000328, "Member 'UPOIW_C::bOnlyShowOnOutOfMinimap' has a wrong offset!");
static_assert(offsetof(UPOIW_C, LastKnownLoc) == 0x000330, "Member 'UPOIW_C::LastKnownLoc' has a wrong offset!");
static_assert(offsetof(UPOIW_C, LastKnownRot) == 0x000348, "Member 'UPOIW_C::LastKnownRot' has a wrong offset!");
static_assert(offsetof(UPOIW_C, bIsLocation) == 0x000360, "Member 'UPOIW_C::bIsLocation' has a wrong offset!");
static_assert(offsetof(UPOIW_C, Location) == 0x000368, "Member 'UPOIW_C::Location' has a wrong offset!");
static_assert(offsetof(UPOIW_C, bShowHeightIndicator) == 0x000380, "Member 'UPOIW_C::bShowHeightIndicator' has a wrong offset!");
static_assert(offsetof(UPOIW_C, TempLookAt) == 0x000388, "Member 'UPOIW_C::TempLookAt' has a wrong offset!");
static_assert(offsetof(UPOIW_C, AcceptableHeightDiff) == 0x000390, "Member 'UPOIW_C::AcceptableHeightDiff' has a wrong offset!");
static_assert(offsetof(UPOIW_C, Tooltip) == 0x000398, "Member 'UPOIW_C::Tooltip' has a wrong offset!");
static_assert(offsetof(UPOIW_C, OffScreenTexSize) == 0x0003B0, "Member 'UPOIW_C::OffScreenTexSize' has a wrong offset!");
static_assert(offsetof(UPOIW_C, Blink) == 0x0003C0, "Member 'UPOIW_C::Blink' has a wrong offset!");
static_assert(offsetof(UPOIW_C, BlinkSpeed) == 0x0003C8, "Member 'UPOIW_C::BlinkSpeed' has a wrong offset!");
static_assert(offsetof(UPOIW_C, BlinkOffMinimap) == 0x0003D0, "Member 'UPOIW_C::BlinkOffMinimap' has a wrong offset!");
static_assert(offsetof(UPOIW_C, MinimapOffset) == 0x0003D8, "Member 'UPOIW_C::MinimapOffset' has a wrong offset!");

}

