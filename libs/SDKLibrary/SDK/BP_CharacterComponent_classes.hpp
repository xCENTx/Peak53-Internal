#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterComponent

#include "Basic.hpp"

#include "E_Lean_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_CameraType_structs.hpp"
#include "E_AnimationState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterComponent.BP_CharacterComponent_C
// 0x0220 (0x02C0 - 0x00A0)
class UBP_CharacterComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	E_CameraType                                  Camera_View;                                       // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowCameraToggle;                                 // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLootableOnDeath;                                 // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EA4[0x5];                                     // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MasterHoldable_C*                   HoldingItem;                                       // 0x00B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CurrentMontage;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CurrentReloadMontage;                              // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         DeathAnimaton;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CharacterDead;                                     // 0x00CC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AnimationState                              CharacterStance;                                   // 0x00CD(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          InAction;                                          // 0x00CE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EA5[0x1];                                     // 0x00CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Down;                                              // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Turn;                                              // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lean;                                              // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Lean                                        LeanDirection;                                     // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClippingBlock;                                     // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EA6[0x6];                                     // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ClippingCameraAlpha;                               // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartedFalling;                                    // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Damage_Velocity_Reached;                           // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EA7[0x6];                                     // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Start_Fall_Time;                                   // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        End_Fall_Time;                                     // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sprinting;                                         // 0x0110(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EA8[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Forward;                                           // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Backward;                                          // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Right;                                             // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Left;                                              // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StandardLerp;                                      // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LastDummy;                                         // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_ShadowDummy_C*                      ShadowDummyActor;                                  // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         InProximityActors;                                 // 0x0150(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class AActor*                                 ProximityActor;                                    // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MovementSpeed;                                     // 0x0168(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             SGKCharacter;                                      // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_EquipmentInventory_C*               EquipmentInventory;                                // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               ClippingTraceChannel;                              // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClippingDebugMode;                                 // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EA9[0x6];                                     // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerInventory_C*                  PlayerInventory;                                   // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CharacterSprint;                                   // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             CharacterFalling;                                  // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             AnimationNotify;                                   // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          EnableCameraShake;                                 // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EAA[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 IdleCameraShake;                                   // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WalkCameraShake;                                   // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SprintCameraShake;                                 // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        StartSprintShakeSpeed;                             // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxWalkSpeed;                                      // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             FPCameraStart;                                     // 0x01F0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableTurnInPlace;                                // 0x0250(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EAB[0x7];                                     // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ProximityTimer;                                    // 0x0258(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimSequenceBase*>              DeathAnimations;                                   // 0x0260(0x0010)(Edit, BlueprintVisible)
	class UBP_InventoryHUD_C*                     PlayerHUD;                                         // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                Target;                                            // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimSequenceBase*>              KnifeDeathAnimations;                              // 0x0280(0x0010)(Edit, BlueprintVisible)
	int32                                         Anim_Index;                                        // 0x0290(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Melee;                                          // 0x0294(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EAC[0x3];                                     // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MeleeAnimaton;                                     // 0x0298(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EAD[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   KnifeVictimAnimations;                             // 0x02A0(0x0010)(Edit, BlueprintVisible)
	TArray<class UAnimMontage*>                   MeleeVictimAnimations;                             // 0x02B0(0x0010)(Edit, BlueprintVisible)

public:
	void AnimationNotify__DelegateSignature(class FName Notify);
	void BackwardAxis(double* Param_Forward);
	void CameraMovementShake();
	void ChangeLeanDirection(E_Lean Param_LeanDirection, bool Param_Lean);
	void CharacterFalling__DelegateSignature();
	void CharacterLanded();
	void CharacterSprint__DelegateSignature(bool Param_Sprinting);
	void CharComponentBeginPlay();
	void ClientEnterCombatMode();
	void ClientEnterStandardMode();
	void ClientHideFPClothing(bool Hide);
	void ClientLean(E_Lean Param_LeanDirection, bool Param_Lean);
	void ClientNewEquipment();
	void ClientNewWeapon();
	void ClientPlayFPMontage(class UAnimMontage* Montage);
	void ClientRecoil(const struct FS_WeaponRecoil& WeaponRecoil);
	void ClientRemoveShadowDummy();
	void ClientSetupShadowDummy();
	void ClientStartingCamera();
	void ClientStopLean();
	void ClientToggleCombatMode();
	void ClippingChecks();
	void DestroyDeadCharacter();
	void EnterCombatMode(bool Override, bool* Finished1);
	void EnterFirstpersonCamera();
	void EnterStandardMode(bool Override);
	void EnterThirdpersonCamera();
	void ExecuteUbergraph_BP_CharacterComponent(int32 EntryPoint);
	void ForceResetClientFOV();
	void ForwardAxis(double* Param_Forward);
	void GetLookSensitivity(bool bAiming, double* Multiplier);
	void HideTagCheck(const class FString& Tag, class AActor* Ignore, bool* Found);
	void LeftAxis(double* Param_Forward);
	void MCMeleeDeadPlayer(int32 Param_MeleeAnimaton, bool IsKnife);
	void MulticastAttachWeapon(class USceneComponent* Param_Target, class USceneComponent* Parent, class FName Socket);
	void MulticastDeadPlayer(int32 Param_DeathAnimaton);
	void MulticastEndChamber(class UAnimMontage* Montage, class UAnimMontage* FPMontage);
	void MulticastPlayMontage(class UAnimMontage* Montage, class UAnimMontage* FPMontage);
	void MulticastPlaySound(class USoundBase* Sound);
	void MulticastReloadMontage(class UAnimMontage* Montage, class UAnimMontage* FPMontage);
	void MulticastSetInAction(bool Param_InAction);
	void MulticastSetLean(double Param_Lean, bool L, bool R, bool N);
	void MulticastSetMontageSection(class FName SectionNameToChange, class FName NextSection, const class UAnimMontage* Montage, class UAnimMontage* FPMontage);
	void MulticastStopMontage(double InBlendOutTime, class UAnimMontage* Montage, class UAnimMontage* FPMontage);
	void MulticastTurnInPlace(class UAnimMontage* Montage);
	void MulticastUpdateYaw(double NewParam);
	void OnBlendOut_1F26CAB645C987F5E926D9AFD253C5F1(class FName NotifyName);
	void OnBlendOut_6572A72E475C576CB8F3ACA59E9F673C(class FName NotifyName);
	void OnBlendOut_A635F28646B619AC465AF69C75EE4C5A(class FName NotifyName);
	void OnBlendOut_BB99084C468BCDC04E75B0A4E53CA764(class FName NotifyName);
	void OnBlendOut_E21A53A44B1314781951C5BC1C234890(class FName NotifyName);
	void OnBlendOut_E59F28A94FFD1E9B798C7BAA1AAE0122(class FName NotifyName);
	void OnBlendOut_EFE74C344CF0C8844136BF8ED1F8C309(class FName NotifyName);
	void OnBlendOut_F79FC23D477B36EA35BE2D85636FA9C5(class FName NotifyName);
	void OnCompleted_1F26CAB645C987F5E926D9AFD253C5F1(class FName NotifyName);
	void OnCompleted_6572A72E475C576CB8F3ACA59E9F673C(class FName NotifyName);
	void OnCompleted_A635F28646B619AC465AF69C75EE4C5A(class FName NotifyName);
	void OnCompleted_BB99084C468BCDC04E75B0A4E53CA764(class FName NotifyName);
	void OnCompleted_E21A53A44B1314781951C5BC1C234890(class FName NotifyName);
	void OnCompleted_E59F28A94FFD1E9B798C7BAA1AAE0122(class FName NotifyName);
	void OnCompleted_EFE74C344CF0C8844136BF8ED1F8C309(class FName NotifyName);
	void OnCompleted_F79FC23D477B36EA35BE2D85636FA9C5(class FName NotifyName);
	void OnInterrupted_1F26CAB645C987F5E926D9AFD253C5F1(class FName NotifyName);
	void OnInterrupted_6572A72E475C576CB8F3ACA59E9F673C(class FName NotifyName);
	void OnInterrupted_A635F28646B619AC465AF69C75EE4C5A(class FName NotifyName);
	void OnInterrupted_BB99084C468BCDC04E75B0A4E53CA764(class FName NotifyName);
	void OnInterrupted_E21A53A44B1314781951C5BC1C234890(class FName NotifyName);
	void OnInterrupted_E59F28A94FFD1E9B798C7BAA1AAE0122(class FName NotifyName);
	void OnInterrupted_EFE74C344CF0C8844136BF8ED1F8C309(class FName NotifyName);
	void OnInterrupted_F79FC23D477B36EA35BE2D85636FA9C5(class FName NotifyName);
	void OnNotifyBegin_1F26CAB645C987F5E926D9AFD253C5F1(class FName NotifyName);
	void OnNotifyBegin_6572A72E475C576CB8F3ACA59E9F673C(class FName NotifyName);
	void OnNotifyBegin_A635F28646B619AC465AF69C75EE4C5A(class FName NotifyName);
	void OnNotifyBegin_BB99084C468BCDC04E75B0A4E53CA764(class FName NotifyName);
	void OnNotifyBegin_E21A53A44B1314781951C5BC1C234890(class FName NotifyName);
	void OnNotifyBegin_E59F28A94FFD1E9B798C7BAA1AAE0122(class FName NotifyName);
	void OnNotifyBegin_EFE74C344CF0C8844136BF8ED1F8C309(class FName NotifyName);
	void OnNotifyBegin_F79FC23D477B36EA35BE2D85636FA9C5(class FName NotifyName);
	void OnNotifyEnd_1F26CAB645C987F5E926D9AFD253C5F1(class FName NotifyName);
	void OnNotifyEnd_6572A72E475C576CB8F3ACA59E9F673C(class FName NotifyName);
	void OnNotifyEnd_A635F28646B619AC465AF69C75EE4C5A(class FName NotifyName);
	void OnNotifyEnd_BB99084C468BCDC04E75B0A4E53CA764(class FName NotifyName);
	void OnNotifyEnd_E21A53A44B1314781951C5BC1C234890(class FName NotifyName);
	void OnNotifyEnd_E59F28A94FFD1E9B798C7BAA1AAE0122(class FName NotifyName);
	void OnNotifyEnd_EFE74C344CF0C8844136BF8ED1F8C309(class FName NotifyName);
	void OnNotifyEnd_F79FC23D477B36EA35BE2D85636FA9C5(class FName NotifyName);
	void OnRep_CharacterStance();
	void OnRep_DisableTurnInPlace();
	void OnRep_HoldingItem();
	void OnRep_Sprinting();
	void ProximityItemReplicationChecks();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RemoveShadowDummy();
	void Reset_Fall_Damage();
	void ResetAttachTimer();
	void RightAxis(double* Param_Forward);
	void ServerPlayDeathAnimation(bool IsMelee, bool IsKnife, int32 MeleeAnim);
	void ServerPlayMontage(class UAnimMontage* Montage, class UAnimMontage* FPMontage);
	void ServerPlaySound(class USoundBase* Sound);
	void ServerReloadMontage(class UAnimMontage* Montage, class UAnimMontage* FPMontage);
	void ServerSetCameraView(E_CameraType Camera);
	void ServerSetInAction(bool Param_InAction);
	void ServerSetLean(double Param_Lean, bool L, bool R, bool N);
	void ServerSetMontageSection(class FName SectionNameToChange, class FName NextSection, class UAnimMontage* Montage, class UAnimMontage* FPMontage);
	void ServerStopMontage(double InBlendOutTime, class UAnimMontage* Montage);
	void ServerToggleCombatMode();
	void ServerTurnInPlace(class UAnimMontage* Montage);
	void ServerUpdateYaw();
	void ShadowDummySetup();
	void StartDestroyDeadCharacterTimer(double Time);
	void ToggleCamera();
	void ToggleCombatMode();
	void UpdateAnimBPsStances();
	void UpdateOwnerVisibility(bool Hide);
	void Weapon_For_VisibilityForOwner(class AActor* Actor, bool Hide);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterComponent_C">();
	}
	static class UBP_CharacterComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterComponent_C>();
	}
};
static_assert(alignof(UBP_CharacterComponent_C) == 0x000010, "Wrong alignment on UBP_CharacterComponent_C");
static_assert(sizeof(UBP_CharacterComponent_C) == 0x0002C0, "Wrong size on UBP_CharacterComponent_C");
static_assert(offsetof(UBP_CharacterComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_CharacterComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Camera_View) == 0x0000A8, "Member 'UBP_CharacterComponent_C::Camera_View' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, AllowCameraToggle) == 0x0000A9, "Member 'UBP_CharacterComponent_C::AllowCameraToggle' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, IsLootableOnDeath) == 0x0000AA, "Member 'UBP_CharacterComponent_C::IsLootableOnDeath' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, HoldingItem) == 0x0000B0, "Member 'UBP_CharacterComponent_C::HoldingItem' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, CurrentMontage) == 0x0000B8, "Member 'UBP_CharacterComponent_C::CurrentMontage' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, CurrentReloadMontage) == 0x0000C0, "Member 'UBP_CharacterComponent_C::CurrentReloadMontage' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, DeathAnimaton) == 0x0000C8, "Member 'UBP_CharacterComponent_C::DeathAnimaton' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, CharacterDead) == 0x0000CC, "Member 'UBP_CharacterComponent_C::CharacterDead' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, CharacterStance) == 0x0000CD, "Member 'UBP_CharacterComponent_C::CharacterStance' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, InAction) == 0x0000CE, "Member 'UBP_CharacterComponent_C::InAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Down) == 0x0000D0, "Member 'UBP_CharacterComponent_C::Down' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Turn) == 0x0000D8, "Member 'UBP_CharacterComponent_C::Turn' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Lean) == 0x0000E0, "Member 'UBP_CharacterComponent_C::Lean' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, LeanDirection) == 0x0000E8, "Member 'UBP_CharacterComponent_C::LeanDirection' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, ClippingBlock) == 0x0000E9, "Member 'UBP_CharacterComponent_C::ClippingBlock' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, ClippingCameraAlpha) == 0x0000F0, "Member 'UBP_CharacterComponent_C::ClippingCameraAlpha' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, StartedFalling) == 0x0000F8, "Member 'UBP_CharacterComponent_C::StartedFalling' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Damage_Velocity_Reached) == 0x0000F9, "Member 'UBP_CharacterComponent_C::Damage_Velocity_Reached' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Start_Fall_Time) == 0x000100, "Member 'UBP_CharacterComponent_C::Start_Fall_Time' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, End_Fall_Time) == 0x000108, "Member 'UBP_CharacterComponent_C::End_Fall_Time' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Sprinting) == 0x000110, "Member 'UBP_CharacterComponent_C::Sprinting' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Forward) == 0x000118, "Member 'UBP_CharacterComponent_C::Forward' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Backward) == 0x000120, "Member 'UBP_CharacterComponent_C::Backward' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Right) == 0x000128, "Member 'UBP_CharacterComponent_C::Right' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Left) == 0x000130, "Member 'UBP_CharacterComponent_C::Left' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, StandardLerp) == 0x000138, "Member 'UBP_CharacterComponent_C::StandardLerp' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, LastDummy) == 0x000140, "Member 'UBP_CharacterComponent_C::LastDummy' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, ShadowDummyActor) == 0x000148, "Member 'UBP_CharacterComponent_C::ShadowDummyActor' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, InProximityActors) == 0x000150, "Member 'UBP_CharacterComponent_C::InProximityActors' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, ProximityActor) == 0x000160, "Member 'UBP_CharacterComponent_C::ProximityActor' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, MovementSpeed) == 0x000168, "Member 'UBP_CharacterComponent_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, SGKCharacter) == 0x000170, "Member 'UBP_CharacterComponent_C::SGKCharacter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, EquipmentInventory) == 0x000178, "Member 'UBP_CharacterComponent_C::EquipmentInventory' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, ClippingTraceChannel) == 0x000180, "Member 'UBP_CharacterComponent_C::ClippingTraceChannel' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, ClippingDebugMode) == 0x000181, "Member 'UBP_CharacterComponent_C::ClippingDebugMode' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, PlayerInventory) == 0x000188, "Member 'UBP_CharacterComponent_C::PlayerInventory' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, CharacterSprint) == 0x000190, "Member 'UBP_CharacterComponent_C::CharacterSprint' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, CharacterFalling) == 0x0001A0, "Member 'UBP_CharacterComponent_C::CharacterFalling' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, AnimationNotify) == 0x0001B0, "Member 'UBP_CharacterComponent_C::AnimationNotify' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, EnableCameraShake) == 0x0001C0, "Member 'UBP_CharacterComponent_C::EnableCameraShake' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, IdleCameraShake) == 0x0001C8, "Member 'UBP_CharacterComponent_C::IdleCameraShake' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, WalkCameraShake) == 0x0001D0, "Member 'UBP_CharacterComponent_C::WalkCameraShake' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, SprintCameraShake) == 0x0001D8, "Member 'UBP_CharacterComponent_C::SprintCameraShake' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, StartSprintShakeSpeed) == 0x0001E0, "Member 'UBP_CharacterComponent_C::StartSprintShakeSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, MaxWalkSpeed) == 0x0001E8, "Member 'UBP_CharacterComponent_C::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, FPCameraStart) == 0x0001F0, "Member 'UBP_CharacterComponent_C::FPCameraStart' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, DisableTurnInPlace) == 0x000250, "Member 'UBP_CharacterComponent_C::DisableTurnInPlace' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, ProximityTimer) == 0x000258, "Member 'UBP_CharacterComponent_C::ProximityTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, DeathAnimations) == 0x000260, "Member 'UBP_CharacterComponent_C::DeathAnimations' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, PlayerHUD) == 0x000270, "Member 'UBP_CharacterComponent_C::PlayerHUD' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Target) == 0x000278, "Member 'UBP_CharacterComponent_C::Target' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, KnifeDeathAnimations) == 0x000280, "Member 'UBP_CharacterComponent_C::KnifeDeathAnimations' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Anim_Index) == 0x000290, "Member 'UBP_CharacterComponent_C::Anim_Index' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, Is_Melee) == 0x000294, "Member 'UBP_CharacterComponent_C::Is_Melee' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, MeleeAnimaton) == 0x000298, "Member 'UBP_CharacterComponent_C::MeleeAnimaton' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, KnifeVictimAnimations) == 0x0002A0, "Member 'UBP_CharacterComponent_C::KnifeVictimAnimations' has a wrong offset!");
static_assert(offsetof(UBP_CharacterComponent_C, MeleeVictimAnimations) == 0x0002B0, "Member 'UBP_CharacterComponent_C::MeleeVictimAnimations' has a wrong offset!");

}

