#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CompassIndicatorComponent

#include "Basic.hpp"

#include "E_CI_PositionMode_structs.hpp"
#include "E_C_CalculateDistanceFrom_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "STR_CI_VisibilityByDistance_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_CI_IndicatorVisibility_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CompassIndicatorComponent.BP_CompassIndicatorComponent_C
// 0x0048 (0x00E8 - 0x00A0)
class UBP_CompassIndicatorComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTexture2D*                             IconTexture;                                       // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           IconColor;                                         // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FSlateColor                            DistanceTextColor;                                 // 0x00C0(0x0014)(Edit, BlueprintVisible, ExposeOnSpawn)
	E_C_CalculateDistanceFrom                     CaalculateDistanceFrom;                            // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2FBA[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTR_CI_VisibilityByDistance           IndicatorVisibilityByDistance;                     // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_CI_PositionMode                             IndicatorPositionMode;                             // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_CI_IndicatorVisibility                      IconVisibility;                                    // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_CI_IndicatorVisibility                      DistanceTextVisibility;                            // 0x00E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CompassIndicatorComponent(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CompassIndicatorComponent_C">();
	}
	static class UBP_CompassIndicatorComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CompassIndicatorComponent_C>();
	}
};
static_assert(alignof(UBP_CompassIndicatorComponent_C) == 0x000008, "Wrong alignment on UBP_CompassIndicatorComponent_C");
static_assert(sizeof(UBP_CompassIndicatorComponent_C) == 0x0000E8, "Wrong size on UBP_CompassIndicatorComponent_C");
static_assert(offsetof(UBP_CompassIndicatorComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_CompassIndicatorComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CompassIndicatorComponent_C, IconTexture) == 0x0000A8, "Member 'UBP_CompassIndicatorComponent_C::IconTexture' has a wrong offset!");
static_assert(offsetof(UBP_CompassIndicatorComponent_C, IconColor) == 0x0000B0, "Member 'UBP_CompassIndicatorComponent_C::IconColor' has a wrong offset!");
static_assert(offsetof(UBP_CompassIndicatorComponent_C, DistanceTextColor) == 0x0000C0, "Member 'UBP_CompassIndicatorComponent_C::DistanceTextColor' has a wrong offset!");
static_assert(offsetof(UBP_CompassIndicatorComponent_C, CaalculateDistanceFrom) == 0x0000D4, "Member 'UBP_CompassIndicatorComponent_C::CaalculateDistanceFrom' has a wrong offset!");
static_assert(offsetof(UBP_CompassIndicatorComponent_C, IndicatorVisibilityByDistance) == 0x0000D8, "Member 'UBP_CompassIndicatorComponent_C::IndicatorVisibilityByDistance' has a wrong offset!");
static_assert(offsetof(UBP_CompassIndicatorComponent_C, IndicatorPositionMode) == 0x0000E0, "Member 'UBP_CompassIndicatorComponent_C::IndicatorPositionMode' has a wrong offset!");
static_assert(offsetof(UBP_CompassIndicatorComponent_C, IconVisibility) == 0x0000E1, "Member 'UBP_CompassIndicatorComponent_C::IconVisibility' has a wrong offset!");
static_assert(offsetof(UBP_CompassIndicatorComponent_C, DistanceTextVisibility) == 0x0000E2, "Member 'UBP_CompassIndicatorComponent_C::DistanceTextVisibility' has a wrong offset!");

}

