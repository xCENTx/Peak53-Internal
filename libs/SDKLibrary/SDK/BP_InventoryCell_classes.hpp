#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InventoryCell

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_InvSlot_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_InventoryCell.BP_InventoryCell_C
// 0x0080 (0x02F8 - 0x0278)
class UBP_InventoryCell_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USizeBox*                               CellSizeBox;                                       // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CellTint;                                          // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DebugText;                                         // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         CellIndex;                                         // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CellChunk;                                         // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDebugText;                                     // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_148D[0x7];                                     // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ParentInvGrid;                                     // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CellsOccupied;                                     // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_148E[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_InvSlot>                     FoundSlots;                                        // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UBP_PlayerInventory_C*                  PlayerInventory;                                   // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CreateDone;                                        // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UBP_MasterInventory_C*                  GridInv;                                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CellSize;                                          // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void CellDebugText();
	void Construct();
	void CreateDone__DelegateSignature();
	void Deactivate();
	void DragOverLayCheck(class UBP_MoveIcon_C* Move_Widget);
	void ExecuteUbergraph_BP_InventoryCell(int32 EntryPoint);
	void FuelItemChecks(class FName ID, bool* Allow);
	void HideCheckCellsOverlay();
	void HideOverlay();
	void ItemDragOver(class UDragDropOperation* DragOperation);
	void OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void ParentGridCreated();
	void ShowCheckCellsOverlay(TArray<struct FS_InvSlot>& Array);
	void ShowGreenOverlay();
	void ShowRedOverlay();
	void UpdateOverLay(class UBP_MoveIcon_C* Move_Widget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InventoryCell_C">();
	}
	static class UBP_InventoryCell_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_InventoryCell_C>();
	}
};
static_assert(alignof(UBP_InventoryCell_C) == 0x000008, "Wrong alignment on UBP_InventoryCell_C");
static_assert(sizeof(UBP_InventoryCell_C) == 0x0002F8, "Wrong size on UBP_InventoryCell_C");
static_assert(offsetof(UBP_InventoryCell_C, UberGraphFrame) == 0x000278, "Member 'UBP_InventoryCell_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_InventoryCell_C, CellSizeBox) == 0x000280, "Member 'UBP_InventoryCell_C::CellSizeBox' has a wrong offset!");
static_assert(offsetof(UBP_InventoryCell_C, CellTint) == 0x000288, "Member 'UBP_InventoryCell_C::CellTint' has a wrong offset!");
static_assert(offsetof(UBP_InventoryCell_C, DebugText) == 0x000290, "Member 'UBP_InventoryCell_C::DebugText' has a wrong offset!");
static_assert(offsetof(UBP_InventoryCell_C, CellIndex) == 0x000298, "Member 'UBP_InventoryCell_C::CellIndex' has a wrong offset!");
static_assert(offsetof(UBP_InventoryCell_C, CellChunk) == 0x00029C, "Member 'UBP_InventoryCell_C::CellChunk' has a wrong offset!");
static_assert(offsetof(UBP_InventoryCell_C, ShowDebugText) == 0x0002A0, "Member 'UBP_InventoryCell_C::ShowDebugText' has a wrong offset!");
static_assert(offsetof(UBP_InventoryCell_C, ParentInvGrid) == 0x0002A8, "Member 'UBP_InventoryCell_C::ParentInvGrid' has a wrong offset!");
static_assert(offsetof(UBP_InventoryCell_C, CellsOccupied) == 0x0002B0, "Member 'UBP_InventoryCell_C::CellsOccupied' has a wrong offset!");
static_assert(offsetof(UBP_InventoryCell_C, FoundSlots) == 0x0002B8, "Member 'UBP_InventoryCell_C::FoundSlots' has a wrong offset!");
static_assert(offsetof(UBP_InventoryCell_C, PlayerInventory) == 0x0002C8, "Member 'UBP_InventoryCell_C::PlayerInventory' has a wrong offset!");
static_assert(offsetof(UBP_InventoryCell_C, CreateDone) == 0x0002D0, "Member 'UBP_InventoryCell_C::CreateDone' has a wrong offset!");
static_assert(offsetof(UBP_InventoryCell_C, GridInv) == 0x0002E0, "Member 'UBP_InventoryCell_C::GridInv' has a wrong offset!");
static_assert(offsetof(UBP_InventoryCell_C, CellSize) == 0x0002E8, "Member 'UBP_InventoryCell_C::CellSize' has a wrong offset!");

}

