#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EquipmentCharacter

#include "Basic.hpp"

#include "BP_SGKMasterCharacter_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_AttachmentSlot_structs.hpp"
#include "ST_LoadoutData_structs.hpp"
#include "Peak53Teams_structs.hpp"
#include "E_EquipmentSlots_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EquipmentCharacter.BP_EquipmentCharacter_C
// 0x03C0 (0x1FC0 - 0x1C00)
class ABP_EquipmentCharacter_C : public ABP_SGKMasterCharacter_C
{
public:
	uint8                                         Pad_309B[0x2];                                     // 0x1BF6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_EquipmentCharacter_C;            // 0x1BF8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 Weapon;                                            // 0x1C00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       ThirdPersonREFCam;                                 // 0x1C08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       ThirdPersonCameraProne;                            // 0x1C10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULODSyncComponent*                      LODSync;                                           // 0x1C18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMantleComponent_C*                     MantleComponent1;                                  // 0x1C20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Head;                                              // 0x1C28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Equipment_Cam;                                     // 0x1C30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Legs;                                              // 0x1C38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Boot;                                              // 0x1C40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Vest;                                              // 0x1C48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Backpack;                                          // 0x1C50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Torso;                                             // 0x1C58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Arms;                                              // 0x1C60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Leg_R;                                             // 0x1C68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Leg_L;                                             // 0x1C70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Kneepad;                                           // 0x1C78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Shemag;                                            // 0x1C80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Helmet;                                            // 0x1C88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Belt;                                              // 0x1C90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CameraChange_TPP_camera_change_to_prone_8A7AA3B2474B3A534487B482A31976C4; // 0x1C98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CameraChange_TPP__Direction_8A7AA3B2474B3A534487B482A31976C4; // 0x1C9C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309C[0x3];                                     // 0x1C9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CameraChange_TPP;                                  // 0x1CA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CameraChangeProne_camera_change_to_prone_7602B4C941643246AD4661B20DEAF443; // 0x1CA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CameraChangeProne__Direction_7602B4C941643246AD4661B20DEAF443; // 0x1CAC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309D[0x3];                                     // 0x1CAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CameraChangeProne;                                 // 0x1CB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FST_LoadoutData                        Current_Loadout;                                   // 0x1CB8(0x0030)(Edit, BlueprintVisible, Net, SaveGame, HasGetValueTypeHash)
	TArray<struct FST_LoadoutData>                Saved_Loadouts;                                    // 0x1CE8(0x0010)(Edit, BlueprintVisible, Net)
	TArray<class USkeletalMesh*>                  M_Arms;                                            // 0x1CF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  M_Backpack;                                        // 0x1D08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  M_Belt;                                            // 0x1D18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  M_Boots;                                           // 0x1D28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  M_Helmet;                                          // 0x1D38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  M_Kneepads;                                        // 0x1D48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  M_Leg_L;                                           // 0x1D58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  M_Leg_R;                                           // 0x1D68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  M_Legs;                                            // 0x1D78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  M_Shemag;                                          // 0x1D88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  M_Torso;                                           // 0x1D98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  M_Vest;                                            // 0x1DA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMeshComponent*>         Equipment_Mesh_Slots;                              // 0x1DB8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMaterialInstanceDynamic*>       Camo_Material_Instances;                           // 0x1DC8(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 Camo_Index;                                        // 0x1DD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Save_Version;                                      // 0x1DE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Active_Loadout;                                    // 0x1DE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309E[0x2];                                     // 0x1DEA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DEBUG_Slot_Number;                                 // 0x1DEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Unlocked_Equipment;                                // 0x1DF0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<class FName>                           Unlocked_Equipment_Defaults;                       // 0x1E00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWB_EquipmetScreen_C*                   Equipment_Screen;                                  // 0x1E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UTexture>>        Camo_List;                                         // 0x1E18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         Preload_Actors;                                    // 0x1E28(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class USoundBase*                             Open_Equipment_Sound_Cue;                          // 0x1E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Active_Cam;                                        // 0x1E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 CurrentEquipment;                                  // 0x1E48(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bIsSeal;                                           // 0x1E58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsMenuCharacter;                                  // 0x1E59(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309F[0x6];                                     // 0x1E5A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   BeginPlayMontage;                                  // 0x1E60(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bCanVault;                                         // 0x1E70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVaultUP_;                                         // 0x1E71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Top_Box;                                        // 0x1E72(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30A0[0x5];                                     // 0x1E73(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_MeleeInteract_C*                    MeleeWid;                                          // 0x1E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ThirdPersonCamLoc;                                 // 0x1E80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ProneCameraLoc;                                    // 0x1E98(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                REFCameraLoc;                                      // 0x1EB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DirectionBackward;                                 // 0x1EC8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bproning;                                          // 0x1EC9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bgettingup_;                                       // 0x1ECA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30A1[0x5];                                     // 0x1ECB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ProneCameraLocWhileCrouch;                         // 0x1ED0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ProneReload;                                       // 0x1EE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bdelay;                                            // 0x1EE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewThrow;                                          // 0x1EEA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewThrow2;                                         // 0x1EEB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThrowAnim;                                         // 0x1EEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UnDetectedReloadWepon;                             // 0x1EED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30A2[0x2];                                     // 0x1EEE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_AttachmentSlot                      MagazineItem;                                      // 0x1EF0(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Reloadwait;                                        // 0x1F38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnMyLadder;                                        // 0x1F39(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          MyClimbingUpGettingOff_;                           // 0x1F3A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MyladderGettingOffDown;                            // 0x1F3B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DelayGetOffClimb;                                  // 0x1F3C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Forwardpress;                                      // 0x1F3D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x1F3E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          backwardpress;                                     // 0x1F3F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Noshoot;                                           // 0x1F40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          JumpPress;                                         // 0x1F41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Youareatthetop;                                    // 0x1F42(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LadderRange;                                       // 0x1F43(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LadderShift;                                       // 0x1F44(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30A3[0x3];                                     // 0x1F45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Testfloat;                                         // 0x1F48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartPosProneCol;                                  // 0x1F50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndPosProneCol;                                    // 0x1F68(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StandRadius;                                       // 0x1F80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StandHeight;                                       // 0x1F88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ProneSize;                                         // 0x1F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CapsuleCheck;                                      // 0x1F98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30A4[0x7];                                     // 0x1F99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ScopeZoom;                                         // 0x1FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScopeZoomDistance;                                 // 0x1FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoFly;                                           // 0x1FB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pause;                                             // 0x1FB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LadderOnPressed;                                   // 0x1FB2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InLadderSystem;                                    // 0x1FB3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LadderWidget;                                      // 0x1FB4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GoingdowncodeExe;                                  // 0x1FB5(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void AutoLadderClimbVault();
	void Bind_Meshes_to_Master_Component();
	void CameraChange_TPP__FinishedFunc();
	void CameraChange_TPP__UpdateFunc();
	void CameraChangeProne__FinishedFunc();
	void CameraChangeProne__UpdateFunc();
	void CL_Load_Loadout_Data();
	void CL_Load_Loadout_from_Slot(int32 Slot_Index);
	void CL_Save_Loadout_Data();
	void CL_Save_Loadout_to_Slot(int32 Slot_Index, class FName Loadout_Name);
	void CMDUpdateEquipmentForAllClients(const class FString& Param_CurrentEquipment);
	void Create_Camo_DMI();
	void CustomEvent();
	void CustomEvent_0();
	void CustomEvent_R();
	void CustomEvent_RS();
	void DisableCollisionMulticast();
	void DisableCollisionSv();
	void EquipCharRef_INT(class ABP_EquipmentCharacter_C** Param_EquipCharRef_INT);
	void ExecuteUbergraph_BP_EquipmentCharacter(int32 EntryPoint);
	void GetisInTopBox(bool* IsTopBox);
	void GetisOnLadder(bool* Param_IsOnladder);
	void InpActEvt_Four_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_LeftShift_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_LeftShift_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_One_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Prone_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Three_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_Two_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void Load_Loadout_Data();
	void Load_Loadout_from_Slot(int32 Slot_Index);
	void Make_Equipment_Array();
	void MC_Change_Equipment_Mesh(class USkeletalMeshComponent* Target, class USkeletalMesh* NewMesh);
	void MC_Equip_Item(class FName Item_ID);
	void MLT_PlayEnterExitMontage(class UAnimMontage* MontageToPlay);
	void Multicast_Sound(class USoundBase* Sound);
	void MulticastEquipItem(class FName Item_ID);
	void NewEquipmentAddItem(const class FString& NewEquipment);
	void NewEquipmentClearItems();
	void NewEquipmentGetTargetSlot(E_EquipmentSlots Slot, class USkeletalMeshComponent** TargetMesh);
	void NewEquipmentResetToDefault(EPeak53Teams Team);
	void NewEquipmentResetToOutfit(const class FString& NewEquipment, bool UpdateVisual);
	void NewEquipmentUpdateVisuals(const class FString& NewParam);
	void OnBlendOut_BCAA89434B5A978F4970D9A3D52B6521(class FName NotifyName);
	void OnCompleted_BCAA89434B5A978F4970D9A3D52B6521(class FName NotifyName);
	void OnInterrupted_BCAA89434B5A978F4970D9A3D52B6521(class FName NotifyName);
	void OnNotifyBegin_BCAA89434B5A978F4970D9A3D52B6521(class FName NotifyName);
	void OnNotifyEnd_BCAA89434B5A978F4970D9A3D52B6521(class FName NotifyName);
	void OnPossessed_Client();
	void OnRep_bgettingup_();
	void OnRep_bproning();
	void OnRep_goingdowncodeExe();
	void OnRep_InLadderSystem();
	void OnRep_LadderOnPressed();
	void OnRep_MyClimbingUpGettingOff_();
	void OnRep_OnMyLadder();
	void OnRep_youareatthetop();
	void Open_Equipment_Screen();
	void Open_Equipment_Sound(class USoundBase* Sound);
	void Peak_GetTeam(EPeak53Teams* Param_CharacterTeam);
	void PlayEnterExitMontage(class UAnimMontage* MontageToPlay);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void Register_with_Weapon_Hot_System();
	void RPCUpdateEquipment(const class FString& NewParam);
	void Save_Current_Loadout_to_Slot(int32 Slot_Index, class FName Loadout_Name);
	void Save_Loadout_Data();
	void Select_Next_Camo();
	void SetisInTopBox(bool IsTopBox);
	void SetOnLadderBool(bool Param_IsOnladder);
	void SRV_PlayEnterExitMontage(class UAnimMontage* MontageToPlay);
	void SV_Equip_Loadout(const struct FST_LoadoutData& ST_LoadoutData);
	void TellClinetProneToStand(bool P, bool G);
	void TellClinetStandToProne(bool P, bool G);
	void TellServerProneToStand(bool P, bool G);
	void TellServerStandToProne(bool P, bool G);
	void UnDetectedRifleCheck();
	void Update_All_Players();
	void Update_Current_Loadout(int32 Param_Index, const class FName& Item);
	void UserConstructionScript();
	void VaultMC();
	void VaultSv();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EquipmentCharacter_C">();
	}
	static class ABP_EquipmentCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EquipmentCharacter_C>();
	}
};
static_assert(alignof(ABP_EquipmentCharacter_C) == 0x000010, "Wrong alignment on ABP_EquipmentCharacter_C");
static_assert(sizeof(ABP_EquipmentCharacter_C) == 0x001FC0, "Wrong size on ABP_EquipmentCharacter_C");
static_assert(offsetof(ABP_EquipmentCharacter_C, UberGraphFrame_BP_EquipmentCharacter_C) == 0x001BF8, "Member 'ABP_EquipmentCharacter_C::UberGraphFrame_BP_EquipmentCharacter_C' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Weapon) == 0x001C00, "Member 'ABP_EquipmentCharacter_C::Weapon' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, ThirdPersonREFCam) == 0x001C08, "Member 'ABP_EquipmentCharacter_C::ThirdPersonREFCam' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, ThirdPersonCameraProne) == 0x001C10, "Member 'ABP_EquipmentCharacter_C::ThirdPersonCameraProne' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, LODSync) == 0x001C18, "Member 'ABP_EquipmentCharacter_C::LODSync' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, MantleComponent1) == 0x001C20, "Member 'ABP_EquipmentCharacter_C::MantleComponent1' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Head) == 0x001C28, "Member 'ABP_EquipmentCharacter_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Equipment_Cam) == 0x001C30, "Member 'ABP_EquipmentCharacter_C::Equipment_Cam' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Legs) == 0x001C38, "Member 'ABP_EquipmentCharacter_C::Legs' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Boot) == 0x001C40, "Member 'ABP_EquipmentCharacter_C::Boot' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Vest) == 0x001C48, "Member 'ABP_EquipmentCharacter_C::Vest' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Backpack) == 0x001C50, "Member 'ABP_EquipmentCharacter_C::Backpack' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Torso) == 0x001C58, "Member 'ABP_EquipmentCharacter_C::Torso' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Arms) == 0x001C60, "Member 'ABP_EquipmentCharacter_C::Arms' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Leg_R) == 0x001C68, "Member 'ABP_EquipmentCharacter_C::Leg_R' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Leg_L) == 0x001C70, "Member 'ABP_EquipmentCharacter_C::Leg_L' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Kneepad) == 0x001C78, "Member 'ABP_EquipmentCharacter_C::Kneepad' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Shemag) == 0x001C80, "Member 'ABP_EquipmentCharacter_C::Shemag' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Helmet) == 0x001C88, "Member 'ABP_EquipmentCharacter_C::Helmet' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Belt) == 0x001C90, "Member 'ABP_EquipmentCharacter_C::Belt' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, CameraChange_TPP_camera_change_to_prone_8A7AA3B2474B3A534487B482A31976C4) == 0x001C98, "Member 'ABP_EquipmentCharacter_C::CameraChange_TPP_camera_change_to_prone_8A7AA3B2474B3A534487B482A31976C4' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, CameraChange_TPP__Direction_8A7AA3B2474B3A534487B482A31976C4) == 0x001C9C, "Member 'ABP_EquipmentCharacter_C::CameraChange_TPP__Direction_8A7AA3B2474B3A534487B482A31976C4' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, CameraChange_TPP) == 0x001CA0, "Member 'ABP_EquipmentCharacter_C::CameraChange_TPP' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, CameraChangeProne_camera_change_to_prone_7602B4C941643246AD4661B20DEAF443) == 0x001CA8, "Member 'ABP_EquipmentCharacter_C::CameraChangeProne_camera_change_to_prone_7602B4C941643246AD4661B20DEAF443' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, CameraChangeProne__Direction_7602B4C941643246AD4661B20DEAF443) == 0x001CAC, "Member 'ABP_EquipmentCharacter_C::CameraChangeProne__Direction_7602B4C941643246AD4661B20DEAF443' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, CameraChangeProne) == 0x001CB0, "Member 'ABP_EquipmentCharacter_C::CameraChangeProne' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Current_Loadout) == 0x001CB8, "Member 'ABP_EquipmentCharacter_C::Current_Loadout' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Saved_Loadouts) == 0x001CE8, "Member 'ABP_EquipmentCharacter_C::Saved_Loadouts' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, M_Arms) == 0x001CF8, "Member 'ABP_EquipmentCharacter_C::M_Arms' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, M_Backpack) == 0x001D08, "Member 'ABP_EquipmentCharacter_C::M_Backpack' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, M_Belt) == 0x001D18, "Member 'ABP_EquipmentCharacter_C::M_Belt' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, M_Boots) == 0x001D28, "Member 'ABP_EquipmentCharacter_C::M_Boots' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, M_Helmet) == 0x001D38, "Member 'ABP_EquipmentCharacter_C::M_Helmet' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, M_Kneepads) == 0x001D48, "Member 'ABP_EquipmentCharacter_C::M_Kneepads' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, M_Leg_L) == 0x001D58, "Member 'ABP_EquipmentCharacter_C::M_Leg_L' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, M_Leg_R) == 0x001D68, "Member 'ABP_EquipmentCharacter_C::M_Leg_R' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, M_Legs) == 0x001D78, "Member 'ABP_EquipmentCharacter_C::M_Legs' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, M_Shemag) == 0x001D88, "Member 'ABP_EquipmentCharacter_C::M_Shemag' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, M_Torso) == 0x001D98, "Member 'ABP_EquipmentCharacter_C::M_Torso' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, M_Vest) == 0x001DA8, "Member 'ABP_EquipmentCharacter_C::M_Vest' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Equipment_Mesh_Slots) == 0x001DB8, "Member 'ABP_EquipmentCharacter_C::Equipment_Mesh_Slots' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Camo_Material_Instances) == 0x001DC8, "Member 'ABP_EquipmentCharacter_C::Camo_Material_Instances' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Camo_Index) == 0x001DD8, "Member 'ABP_EquipmentCharacter_C::Camo_Index' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Save_Version) == 0x001DE8, "Member 'ABP_EquipmentCharacter_C::Save_Version' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Active_Loadout) == 0x001DE9, "Member 'ABP_EquipmentCharacter_C::Active_Loadout' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, DEBUG_Slot_Number) == 0x001DEC, "Member 'ABP_EquipmentCharacter_C::DEBUG_Slot_Number' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Unlocked_Equipment) == 0x001DF0, "Member 'ABP_EquipmentCharacter_C::Unlocked_Equipment' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Unlocked_Equipment_Defaults) == 0x001E00, "Member 'ABP_EquipmentCharacter_C::Unlocked_Equipment_Defaults' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Equipment_Screen) == 0x001E10, "Member 'ABP_EquipmentCharacter_C::Equipment_Screen' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Camo_List) == 0x001E18, "Member 'ABP_EquipmentCharacter_C::Camo_List' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Preload_Actors) == 0x001E28, "Member 'ABP_EquipmentCharacter_C::Preload_Actors' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Open_Equipment_Sound_Cue) == 0x001E38, "Member 'ABP_EquipmentCharacter_C::Open_Equipment_Sound_Cue' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Active_Cam) == 0x001E40, "Member 'ABP_EquipmentCharacter_C::Active_Cam' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, CurrentEquipment) == 0x001E48, "Member 'ABP_EquipmentCharacter_C::CurrentEquipment' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, bIsSeal) == 0x001E58, "Member 'ABP_EquipmentCharacter_C::bIsSeal' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, bIsMenuCharacter) == 0x001E59, "Member 'ABP_EquipmentCharacter_C::bIsMenuCharacter' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, BeginPlayMontage) == 0x001E60, "Member 'ABP_EquipmentCharacter_C::BeginPlayMontage' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, bCanVault) == 0x001E70, "Member 'ABP_EquipmentCharacter_C::bCanVault' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, bVaultUP_) == 0x001E71, "Member 'ABP_EquipmentCharacter_C::bVaultUP_' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Is_Top_Box) == 0x001E72, "Member 'ABP_EquipmentCharacter_C::Is_Top_Box' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, MeleeWid) == 0x001E78, "Member 'ABP_EquipmentCharacter_C::MeleeWid' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, ThirdPersonCamLoc) == 0x001E80, "Member 'ABP_EquipmentCharacter_C::ThirdPersonCamLoc' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, ProneCameraLoc) == 0x001E98, "Member 'ABP_EquipmentCharacter_C::ProneCameraLoc' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, REFCameraLoc) == 0x001EB0, "Member 'ABP_EquipmentCharacter_C::REFCameraLoc' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, DirectionBackward) == 0x001EC8, "Member 'ABP_EquipmentCharacter_C::DirectionBackward' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, bproning) == 0x001EC9, "Member 'ABP_EquipmentCharacter_C::bproning' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, bgettingup_) == 0x001ECA, "Member 'ABP_EquipmentCharacter_C::bgettingup_' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, ProneCameraLocWhileCrouch) == 0x001ED0, "Member 'ABP_EquipmentCharacter_C::ProneCameraLocWhileCrouch' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, ProneReload) == 0x001EE8, "Member 'ABP_EquipmentCharacter_C::ProneReload' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, bdelay) == 0x001EE9, "Member 'ABP_EquipmentCharacter_C::bdelay' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, NewThrow) == 0x001EEA, "Member 'ABP_EquipmentCharacter_C::NewThrow' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, NewThrow2) == 0x001EEB, "Member 'ABP_EquipmentCharacter_C::NewThrow2' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, ThrowAnim) == 0x001EEC, "Member 'ABP_EquipmentCharacter_C::ThrowAnim' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, UnDetectedReloadWepon) == 0x001EED, "Member 'ABP_EquipmentCharacter_C::UnDetectedReloadWepon' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, MagazineItem) == 0x001EF0, "Member 'ABP_EquipmentCharacter_C::MagazineItem' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Reloadwait) == 0x001F38, "Member 'ABP_EquipmentCharacter_C::Reloadwait' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, OnMyLadder) == 0x001F39, "Member 'ABP_EquipmentCharacter_C::OnMyLadder' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, MyClimbingUpGettingOff_) == 0x001F3A, "Member 'ABP_EquipmentCharacter_C::MyClimbingUpGettingOff_' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, MyladderGettingOffDown) == 0x001F3B, "Member 'ABP_EquipmentCharacter_C::MyladderGettingOffDown' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, DelayGetOffClimb) == 0x001F3C, "Member 'ABP_EquipmentCharacter_C::DelayGetOffClimb' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Forwardpress) == 0x001F3D, "Member 'ABP_EquipmentCharacter_C::Forwardpress' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, PlayAnim) == 0x001F3E, "Member 'ABP_EquipmentCharacter_C::PlayAnim' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, backwardpress) == 0x001F3F, "Member 'ABP_EquipmentCharacter_C::backwardpress' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Noshoot) == 0x001F40, "Member 'ABP_EquipmentCharacter_C::Noshoot' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, JumpPress) == 0x001F41, "Member 'ABP_EquipmentCharacter_C::JumpPress' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Youareatthetop) == 0x001F42, "Member 'ABP_EquipmentCharacter_C::Youareatthetop' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, LadderRange) == 0x001F43, "Member 'ABP_EquipmentCharacter_C::LadderRange' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, LadderShift) == 0x001F44, "Member 'ABP_EquipmentCharacter_C::LadderShift' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Testfloat) == 0x001F48, "Member 'ABP_EquipmentCharacter_C::Testfloat' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, StartPosProneCol) == 0x001F50, "Member 'ABP_EquipmentCharacter_C::StartPosProneCol' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, EndPosProneCol) == 0x001F68, "Member 'ABP_EquipmentCharacter_C::EndPosProneCol' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, StandRadius) == 0x001F80, "Member 'ABP_EquipmentCharacter_C::StandRadius' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, StandHeight) == 0x001F88, "Member 'ABP_EquipmentCharacter_C::StandHeight' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, ProneSize) == 0x001F90, "Member 'ABP_EquipmentCharacter_C::ProneSize' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, CapsuleCheck) == 0x001F98, "Member 'ABP_EquipmentCharacter_C::CapsuleCheck' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, ScopeZoom) == 0x001FA0, "Member 'ABP_EquipmentCharacter_C::ScopeZoom' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, ScopeZoomDistance) == 0x001FA8, "Member 'ABP_EquipmentCharacter_C::ScopeZoomDistance' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, AutoFly) == 0x001FB0, "Member 'ABP_EquipmentCharacter_C::AutoFly' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, Pause) == 0x001FB1, "Member 'ABP_EquipmentCharacter_C::Pause' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, LadderOnPressed) == 0x001FB2, "Member 'ABP_EquipmentCharacter_C::LadderOnPressed' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, InLadderSystem) == 0x001FB3, "Member 'ABP_EquipmentCharacter_C::InLadderSystem' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, LadderWidget) == 0x001FB4, "Member 'ABP_EquipmentCharacter_C::LadderWidget' has a wrong offset!");
static_assert(offsetof(ABP_EquipmentCharacter_C, GoingdowncodeExe) == 0x001FB5, "Member 'ABP_EquipmentCharacter_C::GoingdowncodeExe' has a wrong offset!");

}

