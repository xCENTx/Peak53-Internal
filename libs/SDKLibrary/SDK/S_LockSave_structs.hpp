#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: S_LockSave

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// UserDefinedStruct S_LockSave.S_LockSave
// 0x0048 (0x0048 - 0x0000)
struct FS_LockSave final
{
public:
	TArray<class FText>                           Verified_3_B1D84F4A4D704ABC2EF5A7BB11A1EA3A;       // 0x0000(0x0010)(Edit, BlueprintVisible)
	bool                                          Locked_7_711F2E914D61F31CCF0F7CB916F5CFB8;         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_358B[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Code_10_682C395F404A042EE6E492BF3DFCBEAC;          // 0x0018(0x0018)(Edit, BlueprintVisible)
	struct FVector                                OwnerLocation_16_CB98FB2F442D120068CF5282559F1729; // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FS_LockSave) == 0x000008, "Wrong alignment on FS_LockSave");
static_assert(sizeof(FS_LockSave) == 0x000048, "Wrong size on FS_LockSave");
static_assert(offsetof(FS_LockSave, Verified_3_B1D84F4A4D704ABC2EF5A7BB11A1EA3A) == 0x000000, "Member 'FS_LockSave::Verified_3_B1D84F4A4D704ABC2EF5A7BB11A1EA3A' has a wrong offset!");
static_assert(offsetof(FS_LockSave, Locked_7_711F2E914D61F31CCF0F7CB916F5CFB8) == 0x000010, "Member 'FS_LockSave::Locked_7_711F2E914D61F31CCF0F7CB916F5CFB8' has a wrong offset!");
static_assert(offsetof(FS_LockSave, Code_10_682C395F404A042EE6E492BF3DFCBEAC) == 0x000018, "Member 'FS_LockSave::Code_10_682C395F404A042EE6E492BF3DFCBEAC' has a wrong offset!");
static_assert(offsetof(FS_LockSave, OwnerLocation_16_CB98FB2F442D120068CF5282559F1729) == 0x000030, "Member 'FS_LockSave::OwnerLocation_16_CB98FB2F442D120068CF5282559F1729' has a wrong offset!");

}

