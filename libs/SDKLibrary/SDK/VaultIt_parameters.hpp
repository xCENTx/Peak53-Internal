#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VaultIt

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "VaultIt_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function VaultIt.VIGameplayAbility.GetCurrentPredictionKeyStatus
// 0x0010 (0x0010 - 0x0000)
struct VIGameplayAbility_GetCurrentPredictionKeyStatus final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIGameplayAbility_GetCurrentPredictionKeyStatus) == 0x000008, "Wrong alignment on VIGameplayAbility_GetCurrentPredictionKeyStatus");
static_assert(sizeof(VIGameplayAbility_GetCurrentPredictionKeyStatus) == 0x000010, "Wrong size on VIGameplayAbility_GetCurrentPredictionKeyStatus");
static_assert(offsetof(VIGameplayAbility_GetCurrentPredictionKeyStatus, ReturnValue) == 0x000000, "Member 'VIGameplayAbility_GetCurrentPredictionKeyStatus::ReturnValue' has a wrong offset!");

// Function VaultIt.VIGameplayAbility.IsPredictionKeyValidForMorePrediction
// 0x0001 (0x0001 - 0x0000)
struct VIGameplayAbility_IsPredictionKeyValidForMorePrediction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIGameplayAbility_IsPredictionKeyValidForMorePrediction) == 0x000001, "Wrong alignment on VIGameplayAbility_IsPredictionKeyValidForMorePrediction");
static_assert(sizeof(VIGameplayAbility_IsPredictionKeyValidForMorePrediction) == 0x000001, "Wrong size on VIGameplayAbility_IsPredictionKeyValidForMorePrediction");
static_assert(offsetof(VIGameplayAbility_IsPredictionKeyValidForMorePrediction, ReturnValue) == 0x000000, "Member 'VIGameplayAbility_IsPredictionKeyValidForMorePrediction::ReturnValue' has a wrong offset!");

// Function VaultIt.VIAnimationInterface.SetBoneFBIK
// 0x0028 (0x0028 - 0x0000)
struct VIAnimationInterface_SetBoneFBIK final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoneLocation;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AE4[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIAnimationInterface_SetBoneFBIK) == 0x000008, "Wrong alignment on VIAnimationInterface_SetBoneFBIK");
static_assert(sizeof(VIAnimationInterface_SetBoneFBIK) == 0x000028, "Wrong size on VIAnimationInterface_SetBoneFBIK");
static_assert(offsetof(VIAnimationInterface_SetBoneFBIK, BoneName) == 0x000000, "Member 'VIAnimationInterface_SetBoneFBIK::BoneName' has a wrong offset!");
static_assert(offsetof(VIAnimationInterface_SetBoneFBIK, BoneLocation) == 0x000008, "Member 'VIAnimationInterface_SetBoneFBIK::BoneLocation' has a wrong offset!");
static_assert(offsetof(VIAnimationInterface_SetBoneFBIK, bEnabled) == 0x000020, "Member 'VIAnimationInterface_SetBoneFBIK::bEnabled' has a wrong offset!");

// Function VaultIt.VIAnimInstance.SetBoneFBIK
// 0x0028 (0x0028 - 0x0000)
struct VIAnimInstance_SetBoneFBIK final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoneLocation;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AE9[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIAnimInstance_SetBoneFBIK) == 0x000008, "Wrong alignment on VIAnimInstance_SetBoneFBIK");
static_assert(sizeof(VIAnimInstance_SetBoneFBIK) == 0x000028, "Wrong size on VIAnimInstance_SetBoneFBIK");
static_assert(offsetof(VIAnimInstance_SetBoneFBIK, BoneName) == 0x000000, "Member 'VIAnimInstance_SetBoneFBIK::BoneName' has a wrong offset!");
static_assert(offsetof(VIAnimInstance_SetBoneFBIK, BoneLocation) == 0x000008, "Member 'VIAnimInstance_SetBoneFBIK::BoneLocation' has a wrong offset!");
static_assert(offsetof(VIAnimInstance_SetBoneFBIK, bEnabled) == 0x000020, "Member 'VIAnimInstance_SetBoneFBIK::bEnabled' has a wrong offset!");

// Function VaultIt.PlayMontageForMeshAndWait.PlayMontageForMeshAndWait
// 0x0048 (0x0048 - 0x0000)
struct PlayMontageForMeshAndWait_PlayMontageForMeshAndWait final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 Param_Mesh;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Param_MontageToPlay;                               // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Rate;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Param_StartSection;                                // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bStopWhenAbilityEnds;                        // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AED[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_AnimRootMotionTranslationScale;              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bReplicateMontage;                           // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AEE[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_OverrideBlendOutTimeForCancelAbility;        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_OverrideBlendOutTimeForStopWhenEndAbility;   // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayMontageForMeshAndWait*             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait) == 0x000008, "Wrong alignment on PlayMontageForMeshAndWait_PlayMontageForMeshAndWait");
static_assert(sizeof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait) == 0x000048, "Wrong size on PlayMontageForMeshAndWait_PlayMontageForMeshAndWait");
static_assert(offsetof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait, OwningAbility) == 0x000000, "Member 'PlayMontageForMeshAndWait_PlayMontageForMeshAndWait::OwningAbility' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait, TaskInstanceName) == 0x000008, "Member 'PlayMontageForMeshAndWait_PlayMontageForMeshAndWait::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait, Param_Mesh) == 0x000010, "Member 'PlayMontageForMeshAndWait_PlayMontageForMeshAndWait::Param_Mesh' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait, Param_MontageToPlay) == 0x000018, "Member 'PlayMontageForMeshAndWait_PlayMontageForMeshAndWait::Param_MontageToPlay' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait, Param_Rate) == 0x000020, "Member 'PlayMontageForMeshAndWait_PlayMontageForMeshAndWait::Param_Rate' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait, Param_StartSection) == 0x000024, "Member 'PlayMontageForMeshAndWait_PlayMontageForMeshAndWait::Param_StartSection' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait, Param_bStopWhenAbilityEnds) == 0x00002C, "Member 'PlayMontageForMeshAndWait_PlayMontageForMeshAndWait::Param_bStopWhenAbilityEnds' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait, Param_AnimRootMotionTranslationScale) == 0x000030, "Member 'PlayMontageForMeshAndWait_PlayMontageForMeshAndWait::Param_AnimRootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait, Param_bReplicateMontage) == 0x000034, "Member 'PlayMontageForMeshAndWait_PlayMontageForMeshAndWait::Param_bReplicateMontage' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait, Param_OverrideBlendOutTimeForCancelAbility) == 0x000038, "Member 'PlayMontageForMeshAndWait_PlayMontageForMeshAndWait::Param_OverrideBlendOutTimeForCancelAbility' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait, Param_OverrideBlendOutTimeForStopWhenEndAbility) == 0x00003C, "Member 'PlayMontageForMeshAndWait_PlayMontageForMeshAndWait::Param_OverrideBlendOutTimeForStopWhenEndAbility' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWait_PlayMontageForMeshAndWait, ReturnValue) == 0x000040, "Member 'PlayMontageForMeshAndWait_PlayMontageForMeshAndWait::ReturnValue' has a wrong offset!");

// Function VaultIt.VIBlueprintFunctionLibrary.ActorIsAscending
// 0x0010 (0x0010 - 0x0000)
struct VIBlueprintFunctionLibrary_ActorIsAscending final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWorldUpIsZ;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF0[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIBlueprintFunctionLibrary_ActorIsAscending) == 0x000008, "Wrong alignment on VIBlueprintFunctionLibrary_ActorIsAscending");
static_assert(sizeof(VIBlueprintFunctionLibrary_ActorIsAscending) == 0x000010, "Wrong size on VIBlueprintFunctionLibrary_ActorIsAscending");
static_assert(offsetof(VIBlueprintFunctionLibrary_ActorIsAscending, InActor) == 0x000000, "Member 'VIBlueprintFunctionLibrary_ActorIsAscending::InActor' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_ActorIsAscending, bWorldUpIsZ) == 0x000008, "Member 'VIBlueprintFunctionLibrary_ActorIsAscending::bWorldUpIsZ' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_ActorIsAscending, ReturnValue) == 0x000009, "Member 'VIBlueprintFunctionLibrary_ActorIsAscending::ReturnValue' has a wrong offset!");

// Function VaultIt.VIBlueprintFunctionLibrary.ComputeAnimationPlayRateFromDuration
// 0x0010 (0x0010 - 0x0000)
struct VIBlueprintFunctionLibrary_ComputeAnimationPlayRateFromDuration final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIBlueprintFunctionLibrary_ComputeAnimationPlayRateFromDuration) == 0x000008, "Wrong alignment on VIBlueprintFunctionLibrary_ComputeAnimationPlayRateFromDuration");
static_assert(sizeof(VIBlueprintFunctionLibrary_ComputeAnimationPlayRateFromDuration) == 0x000010, "Wrong size on VIBlueprintFunctionLibrary_ComputeAnimationPlayRateFromDuration");
static_assert(offsetof(VIBlueprintFunctionLibrary_ComputeAnimationPlayRateFromDuration, Animation) == 0x000000, "Member 'VIBlueprintFunctionLibrary_ComputeAnimationPlayRateFromDuration::Animation' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_ComputeAnimationPlayRateFromDuration, Duration) == 0x000008, "Member 'VIBlueprintFunctionLibrary_ComputeAnimationPlayRateFromDuration::Duration' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_ComputeAnimationPlayRateFromDuration, ReturnValue) == 0x00000C, "Member 'VIBlueprintFunctionLibrary_ComputeAnimationPlayRateFromDuration::ReturnValue' has a wrong offset!");

// Function VaultIt.VIBlueprintFunctionLibrary.GetMaxHeightFromGround
// 0x0010 (0x0010 - 0x0000)
struct VIBlueprintFunctionLibrary_GetMaxHeightFromGround final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF1[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIBlueprintFunctionLibrary_GetMaxHeightFromGround) == 0x000008, "Wrong alignment on VIBlueprintFunctionLibrary_GetMaxHeightFromGround");
static_assert(sizeof(VIBlueprintFunctionLibrary_GetMaxHeightFromGround) == 0x000010, "Wrong size on VIBlueprintFunctionLibrary_GetMaxHeightFromGround");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetMaxHeightFromGround, Character) == 0x000000, "Member 'VIBlueprintFunctionLibrary_GetMaxHeightFromGround::Character' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetMaxHeightFromGround, ReturnValue) == 0x000008, "Member 'VIBlueprintFunctionLibrary_GetMaxHeightFromGround::ReturnValue' has a wrong offset!");

// Function VaultIt.VIBlueprintFunctionLibrary.GetMaxHeightFromGroundForPawn
// 0x0018 (0x0018 - 0x0000)
struct VIBlueprintFunctionLibrary_GetMaxHeightFromGroundForPawn final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gravity;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpZVelocity;                                     // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF2[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIBlueprintFunctionLibrary_GetMaxHeightFromGroundForPawn) == 0x000008, "Wrong alignment on VIBlueprintFunctionLibrary_GetMaxHeightFromGroundForPawn");
static_assert(sizeof(VIBlueprintFunctionLibrary_GetMaxHeightFromGroundForPawn) == 0x000018, "Wrong size on VIBlueprintFunctionLibrary_GetMaxHeightFromGroundForPawn");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetMaxHeightFromGroundForPawn, Pawn) == 0x000000, "Member 'VIBlueprintFunctionLibrary_GetMaxHeightFromGroundForPawn::Pawn' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetMaxHeightFromGroundForPawn, Gravity) == 0x000008, "Member 'VIBlueprintFunctionLibrary_GetMaxHeightFromGroundForPawn::Gravity' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetMaxHeightFromGroundForPawn, JumpZVelocity) == 0x00000C, "Member 'VIBlueprintFunctionLibrary_GetMaxHeightFromGroundForPawn::JumpZVelocity' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetMaxHeightFromGroundForPawn, ReturnValue) == 0x000010, "Member 'VIBlueprintFunctionLibrary_GetMaxHeightFromGroundForPawn::ReturnValue' has a wrong offset!");

// Function VaultIt.VIBlueprintFunctionLibrary.GetMaxJumpHeight
// 0x000C (0x000C - 0x0000)
struct VIBlueprintFunctionLibrary_GetMaxJumpHeight final
{
public:
	float                                         Gravity;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpZVelocity;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIBlueprintFunctionLibrary_GetMaxJumpHeight) == 0x000004, "Wrong alignment on VIBlueprintFunctionLibrary_GetMaxJumpHeight");
static_assert(sizeof(VIBlueprintFunctionLibrary_GetMaxJumpHeight) == 0x00000C, "Wrong size on VIBlueprintFunctionLibrary_GetMaxJumpHeight");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetMaxJumpHeight, Gravity) == 0x000000, "Member 'VIBlueprintFunctionLibrary_GetMaxJumpHeight::Gravity' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetMaxJumpHeight, JumpZVelocity) == 0x000004, "Member 'VIBlueprintFunctionLibrary_GetMaxJumpHeight::JumpZVelocity' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetMaxJumpHeight, ReturnValue) == 0x000008, "Member 'VIBlueprintFunctionLibrary_GetMaxJumpHeight::ReturnValue' has a wrong offset!");

// Function VaultIt.VIBlueprintFunctionLibrary.GetMaxJumpHeightForCharacter
// 0x0010 (0x0010 - 0x0000)
struct VIBlueprintFunctionLibrary_GetMaxJumpHeightForCharacter final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF3[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIBlueprintFunctionLibrary_GetMaxJumpHeightForCharacter) == 0x000008, "Wrong alignment on VIBlueprintFunctionLibrary_GetMaxJumpHeightForCharacter");
static_assert(sizeof(VIBlueprintFunctionLibrary_GetMaxJumpHeightForCharacter) == 0x000010, "Wrong size on VIBlueprintFunctionLibrary_GetMaxJumpHeightForCharacter");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetMaxJumpHeightForCharacter, Character) == 0x000000, "Member 'VIBlueprintFunctionLibrary_GetMaxJumpHeightForCharacter::Character' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetMaxJumpHeightForCharacter, ReturnValue) == 0x000008, "Member 'VIBlueprintFunctionLibrary_GetMaxJumpHeightForCharacter::ReturnValue' has a wrong offset!");

// Function VaultIt.VIBlueprintFunctionLibrary.GetMaxVaultHeight
// 0x0010 (0x0010 - 0x0000)
struct VIBlueprintFunctionLibrary_GetMaxVaultHeight final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF4[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIBlueprintFunctionLibrary_GetMaxVaultHeight) == 0x000008, "Wrong alignment on VIBlueprintFunctionLibrary_GetMaxVaultHeight");
static_assert(sizeof(VIBlueprintFunctionLibrary_GetMaxVaultHeight) == 0x000010, "Wrong size on VIBlueprintFunctionLibrary_GetMaxVaultHeight");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetMaxVaultHeight, Pawn) == 0x000000, "Member 'VIBlueprintFunctionLibrary_GetMaxVaultHeight::Pawn' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetMaxVaultHeight, ReturnValue) == 0x000008, "Member 'VIBlueprintFunctionLibrary_GetMaxVaultHeight::ReturnValue' has a wrong offset!");

// Function VaultIt.VIBlueprintFunctionLibrary.GetVaultInfoFromTargetData
// 0x0060 (0x0060 - 0x0000)
struct VIBlueprintFunctionLibrary_GetVaultInfoFromTargetData final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVIVaultInfo                           ReturnValue;                                       // 0x0028(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIBlueprintFunctionLibrary_GetVaultInfoFromTargetData) == 0x000008, "Wrong alignment on VIBlueprintFunctionLibrary_GetVaultInfoFromTargetData");
static_assert(sizeof(VIBlueprintFunctionLibrary_GetVaultInfoFromTargetData) == 0x000060, "Wrong size on VIBlueprintFunctionLibrary_GetVaultInfoFromTargetData");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetVaultInfoFromTargetData, TargetData) == 0x000000, "Member 'VIBlueprintFunctionLibrary_GetVaultInfoFromTargetData::TargetData' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_GetVaultInfoFromTargetData, ReturnValue) == 0x000028, "Member 'VIBlueprintFunctionLibrary_GetVaultInfoFromTargetData::ReturnValue' has a wrong offset!");

// Function VaultIt.VIBlueprintFunctionLibrary.InterpolateFBIK
// 0x0018 (0x0018 - 0x0000)
struct VIBlueprintFunctionLibrary_InterpolateFBIK final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVIBoneFBIKData>                Bones;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIBlueprintFunctionLibrary_InterpolateFBIK) == 0x000008, "Wrong alignment on VIBlueprintFunctionLibrary_InterpolateFBIK");
static_assert(sizeof(VIBlueprintFunctionLibrary_InterpolateFBIK) == 0x000018, "Wrong size on VIBlueprintFunctionLibrary_InterpolateFBIK");
static_assert(offsetof(VIBlueprintFunctionLibrary_InterpolateFBIK, DeltaTime) == 0x000000, "Member 'VIBlueprintFunctionLibrary_InterpolateFBIK::DeltaTime' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_InterpolateFBIK, Bones) == 0x000008, "Member 'VIBlueprintFunctionLibrary_InterpolateFBIK::Bones' has a wrong offset!");

// Function VaultIt.VIBlueprintFunctionLibrary.IsRunningOnServer
// 0x0010 (0x0010 - 0x0000)
struct VIBlueprintFunctionLibrary_IsRunningOnServer final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIBlueprintFunctionLibrary_IsRunningOnServer) == 0x000008, "Wrong alignment on VIBlueprintFunctionLibrary_IsRunningOnServer");
static_assert(sizeof(VIBlueprintFunctionLibrary_IsRunningOnServer) == 0x000010, "Wrong size on VIBlueprintFunctionLibrary_IsRunningOnServer");
static_assert(offsetof(VIBlueprintFunctionLibrary_IsRunningOnServer, Actor) == 0x000000, "Member 'VIBlueprintFunctionLibrary_IsRunningOnServer::Actor' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_IsRunningOnServer, ReturnValue) == 0x000008, "Member 'VIBlueprintFunctionLibrary_IsRunningOnServer::ReturnValue' has a wrong offset!");

// Function VaultIt.VIBlueprintFunctionLibrary.K2_GetBoneForFBIK
// 0x0060 (0x0060 - 0x0000)
struct VIBlueprintFunctionLibrary_K2_GetBoneForFBIK final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVIBoneFBIKData>                Bones;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVIBoneFBIKData                        ReturnValue;                                       // 0x0018(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIBlueprintFunctionLibrary_K2_GetBoneForFBIK) == 0x000008, "Wrong alignment on VIBlueprintFunctionLibrary_K2_GetBoneForFBIK");
static_assert(sizeof(VIBlueprintFunctionLibrary_K2_GetBoneForFBIK) == 0x000060, "Wrong size on VIBlueprintFunctionLibrary_K2_GetBoneForFBIK");
static_assert(offsetof(VIBlueprintFunctionLibrary_K2_GetBoneForFBIK, BoneName) == 0x000000, "Member 'VIBlueprintFunctionLibrary_K2_GetBoneForFBIK::BoneName' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_K2_GetBoneForFBIK, Bones) == 0x000008, "Member 'VIBlueprintFunctionLibrary_K2_GetBoneForFBIK::Bones' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_K2_GetBoneForFBIK, ReturnValue) == 0x000018, "Member 'VIBlueprintFunctionLibrary_K2_GetBoneForFBIK::ReturnValue' has a wrong offset!");

// Function VaultIt.VIBlueprintFunctionLibrary.ToggleBoneFBIK
// 0x0038 (0x0038 - 0x0000)
struct VIBlueprintFunctionLibrary_ToggleBoneFBIK final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLocation;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF7[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVIBoneFBIKData>                Bones;                                             // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIBlueprintFunctionLibrary_ToggleBoneFBIK) == 0x000008, "Wrong alignment on VIBlueprintFunctionLibrary_ToggleBoneFBIK");
static_assert(sizeof(VIBlueprintFunctionLibrary_ToggleBoneFBIK) == 0x000038, "Wrong size on VIBlueprintFunctionLibrary_ToggleBoneFBIK");
static_assert(offsetof(VIBlueprintFunctionLibrary_ToggleBoneFBIK, BoneName) == 0x000000, "Member 'VIBlueprintFunctionLibrary_ToggleBoneFBIK::BoneName' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_ToggleBoneFBIK, NewLocation) == 0x000008, "Member 'VIBlueprintFunctionLibrary_ToggleBoneFBIK::NewLocation' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_ToggleBoneFBIK, bEnable) == 0x000020, "Member 'VIBlueprintFunctionLibrary_ToggleBoneFBIK::bEnable' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_ToggleBoneFBIK, Bones) == 0x000028, "Member 'VIBlueprintFunctionLibrary_ToggleBoneFBIK::Bones' has a wrong offset!");

// Function VaultIt.VIBlueprintFunctionLibrary.VaultAnimSetIsValid
// 0x0058 (0x0058 - 0x0000)
struct VIBlueprintFunctionLibrary_VaultAnimSetIsValid final
{
public:
	struct FVIAnimSet                             AnimSet;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF8[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIBlueprintFunctionLibrary_VaultAnimSetIsValid) == 0x000008, "Wrong alignment on VIBlueprintFunctionLibrary_VaultAnimSetIsValid");
static_assert(sizeof(VIBlueprintFunctionLibrary_VaultAnimSetIsValid) == 0x000058, "Wrong size on VIBlueprintFunctionLibrary_VaultAnimSetIsValid");
static_assert(offsetof(VIBlueprintFunctionLibrary_VaultAnimSetIsValid, AnimSet) == 0x000000, "Member 'VIBlueprintFunctionLibrary_VaultAnimSetIsValid::AnimSet' has a wrong offset!");
static_assert(offsetof(VIBlueprintFunctionLibrary_VaultAnimSetIsValid, ReturnValue) == 0x000050, "Member 'VIBlueprintFunctionLibrary_VaultAnimSetIsValid::ReturnValue' has a wrong offset!");

// Function VaultIt.VICharacterBase.IsVaulting
// 0x0001 (0x0001 - 0x0000)
struct VICharacterBase_IsVaulting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VICharacterBase_IsVaulting) == 0x000001, "Wrong alignment on VICharacterBase_IsVaulting");
static_assert(sizeof(VICharacterBase_IsVaulting) == 0x000001, "Wrong size on VICharacterBase_IsVaulting");
static_assert(offsetof(VICharacterBase_IsVaulting, ReturnValue) == 0x000000, "Member 'VICharacterBase_IsVaulting::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnInterface.OnLocalPlayerVault
// 0x0030 (0x0030 - 0x0000)
struct VIPawnInterface_OnLocalPlayerVault final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnInterface_OnLocalPlayerVault) == 0x000008, "Wrong alignment on VIPawnInterface_OnLocalPlayerVault");
static_assert(sizeof(VIPawnInterface_OnLocalPlayerVault) == 0x000030, "Wrong size on VIPawnInterface_OnLocalPlayerVault");
static_assert(offsetof(VIPawnInterface_OnLocalPlayerVault, Location) == 0x000000, "Member 'VIPawnInterface_OnLocalPlayerVault::Location' has a wrong offset!");
static_assert(offsetof(VIPawnInterface_OnLocalPlayerVault, Direction) == 0x000018, "Member 'VIPawnInterface_OnLocalPlayerVault::Direction' has a wrong offset!");

// Function VaultIt.VIPawnInterface.ReplicateMotionMatch
// 0x0030 (0x0030 - 0x0000)
struct VIPawnInterface_ReplicateMotionMatch final
{
public:
	struct FVIRepMotionMatch                      MotionMatch;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnInterface_ReplicateMotionMatch) == 0x000008, "Wrong alignment on VIPawnInterface_ReplicateMotionMatch");
static_assert(sizeof(VIPawnInterface_ReplicateMotionMatch) == 0x000030, "Wrong size on VIPawnInterface_ReplicateMotionMatch");
static_assert(offsetof(VIPawnInterface_ReplicateMotionMatch, MotionMatch) == 0x000000, "Member 'VIPawnInterface_ReplicateMotionMatch::MotionMatch' has a wrong offset!");

// Function VaultIt.VIPawnInterface.CanAutoVaultInCustomMovementMode
// 0x0001 (0x0001 - 0x0000)
struct VIPawnInterface_CanAutoVaultInCustomMovementMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnInterface_CanAutoVaultInCustomMovementMode) == 0x000001, "Wrong alignment on VIPawnInterface_CanAutoVaultInCustomMovementMode");
static_assert(sizeof(VIPawnInterface_CanAutoVaultInCustomMovementMode) == 0x000001, "Wrong size on VIPawnInterface_CanAutoVaultInCustomMovementMode");
static_assert(offsetof(VIPawnInterface_CanAutoVaultInCustomMovementMode, ReturnValue) == 0x000000, "Member 'VIPawnInterface_CanAutoVaultInCustomMovementMode::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnInterface.CanVault
// 0x0001 (0x0001 - 0x0000)
struct VIPawnInterface_CanVault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnInterface_CanVault) == 0x000001, "Wrong alignment on VIPawnInterface_CanVault");
static_assert(sizeof(VIPawnInterface_CanVault) == 0x000001, "Wrong size on VIPawnInterface_CanVault");
static_assert(offsetof(VIPawnInterface_CanVault, ReturnValue) == 0x000000, "Member 'VIPawnInterface_CanVault::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnInterface.GetMeshForVaultMontage
// 0x0008 (0x0008 - 0x0000)
struct VIPawnInterface_GetMeshForVaultMontage final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnInterface_GetMeshForVaultMontage) == 0x000008, "Wrong alignment on VIPawnInterface_GetMeshForVaultMontage");
static_assert(sizeof(VIPawnInterface_GetMeshForVaultMontage) == 0x000008, "Wrong size on VIPawnInterface_GetMeshForVaultMontage");
static_assert(offsetof(VIPawnInterface_GetMeshForVaultMontage, ReturnValue) == 0x000000, "Member 'VIPawnInterface_GetMeshForVaultMontage::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnInterface.GetMotionWarpingComponent
// 0x0008 (0x0008 - 0x0000)
struct VIPawnInterface_GetMotionWarpingComponent final
{
public:
	class UVIMotionWarpingComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnInterface_GetMotionWarpingComponent) == 0x000008, "Wrong alignment on VIPawnInterface_GetMotionWarpingComponent");
static_assert(sizeof(VIPawnInterface_GetMotionWarpingComponent) == 0x000008, "Wrong size on VIPawnInterface_GetMotionWarpingComponent");
static_assert(offsetof(VIPawnInterface_GetMotionWarpingComponent, ReturnValue) == 0x000000, "Member 'VIPawnInterface_GetMotionWarpingComponent::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnInterface.GetPawnVaultComponent
// 0x0008 (0x0008 - 0x0000)
struct VIPawnInterface_GetPawnVaultComponent final
{
public:
	class UVIPawnVaultComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnInterface_GetPawnVaultComponent) == 0x000008, "Wrong alignment on VIPawnInterface_GetPawnVaultComponent");
static_assert(sizeof(VIPawnInterface_GetPawnVaultComponent) == 0x000008, "Wrong size on VIPawnInterface_GetPawnVaultComponent");
static_assert(offsetof(VIPawnInterface_GetPawnVaultComponent, ReturnValue) == 0x000000, "Member 'VIPawnInterface_GetPawnVaultComponent::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnInterface.GetVaultAnimSet
// 0x0050 (0x0050 - 0x0000)
struct VIPawnInterface_GetVaultAnimSet final
{
public:
	struct FVIAnimSet                             ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnInterface_GetVaultAnimSet) == 0x000008, "Wrong alignment on VIPawnInterface_GetVaultAnimSet");
static_assert(sizeof(VIPawnInterface_GetVaultAnimSet) == 0x000050, "Wrong size on VIPawnInterface_GetVaultAnimSet");
static_assert(offsetof(VIPawnInterface_GetVaultAnimSet, ReturnValue) == 0x000000, "Member 'VIPawnInterface_GetVaultAnimSet::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnInterface.GetVaultDirection
// 0x0018 (0x0018 - 0x0000)
struct VIPawnInterface_GetVaultDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnInterface_GetVaultDirection) == 0x000008, "Wrong alignment on VIPawnInterface_GetVaultDirection");
static_assert(sizeof(VIPawnInterface_GetVaultDirection) == 0x000018, "Wrong size on VIPawnInterface_GetVaultDirection");
static_assert(offsetof(VIPawnInterface_GetVaultDirection, ReturnValue) == 0x000000, "Member 'VIPawnInterface_GetVaultDirection::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnInterface.GetVaultLocationAndDirection
// 0x0030 (0x0030 - 0x0000)
struct VIPawnInterface_GetVaultLocationAndDirection final
{
public:
	struct FVector                                OutLocation;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutDirection;                                      // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnInterface_GetVaultLocationAndDirection) == 0x000008, "Wrong alignment on VIPawnInterface_GetVaultLocationAndDirection");
static_assert(sizeof(VIPawnInterface_GetVaultLocationAndDirection) == 0x000030, "Wrong size on VIPawnInterface_GetVaultLocationAndDirection");
static_assert(offsetof(VIPawnInterface_GetVaultLocationAndDirection, OutLocation) == 0x000000, "Member 'VIPawnInterface_GetVaultLocationAndDirection::OutLocation' has a wrong offset!");
static_assert(offsetof(VIPawnInterface_GetVaultLocationAndDirection, OutDirection) == 0x000018, "Member 'VIPawnInterface_GetVaultLocationAndDirection::OutDirection' has a wrong offset!");

// Function VaultIt.VIPawnInterface.GetVaultTraceSettings
// 0x0038 (0x0038 - 0x0000)
struct VIPawnInterface_GetVaultTraceSettings final
{
public:
	struct FVITraceSettings                       ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnInterface_GetVaultTraceSettings) == 0x000008, "Wrong alignment on VIPawnInterface_GetVaultTraceSettings");
static_assert(sizeof(VIPawnInterface_GetVaultTraceSettings) == 0x000038, "Wrong size on VIPawnInterface_GetVaultTraceSettings");
static_assert(offsetof(VIPawnInterface_GetVaultTraceSettings, ReturnValue) == 0x000000, "Member 'VIPawnInterface_GetVaultTraceSettings::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnInterface.IsWalkable
// 0x00F0 (0x00F0 - 0x0000)
struct VIPawnInterface_IsWalkable final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AFE[0x7];                                     // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIPawnInterface_IsWalkable) == 0x000008, "Wrong alignment on VIPawnInterface_IsWalkable");
static_assert(sizeof(VIPawnInterface_IsWalkable) == 0x0000F0, "Wrong size on VIPawnInterface_IsWalkable");
static_assert(offsetof(VIPawnInterface_IsWalkable, HitResult) == 0x000000, "Member 'VIPawnInterface_IsWalkable::HitResult' has a wrong offset!");
static_assert(offsetof(VIPawnInterface_IsWalkable, ReturnValue) == 0x0000E8, "Member 'VIPawnInterface_IsWalkable::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnVaultComponent.CheckVaultInput
// 0x0008 (0x0008 - 0x0000)
struct VIPawnVaultComponent_CheckVaultInput final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 MovementMode;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B03[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIPawnVaultComponent_CheckVaultInput) == 0x000004, "Wrong alignment on VIPawnVaultComponent_CheckVaultInput");
static_assert(sizeof(VIPawnVaultComponent_CheckVaultInput) == 0x000008, "Wrong size on VIPawnVaultComponent_CheckVaultInput");
static_assert(offsetof(VIPawnVaultComponent_CheckVaultInput, DeltaTime) == 0x000000, "Member 'VIPawnVaultComponent_CheckVaultInput::DeltaTime' has a wrong offset!");
static_assert(offsetof(VIPawnVaultComponent_CheckVaultInput, MovementMode) == 0x000004, "Member 'VIPawnVaultComponent_CheckVaultInput::MovementMode' has a wrong offset!");

// Function VaultIt.VIPawnVaultComponent.ComputeShouldAutoVault
// 0x0001 (0x0001 - 0x0000)
struct VIPawnVaultComponent_ComputeShouldAutoVault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnVaultComponent_ComputeShouldAutoVault) == 0x000001, "Wrong alignment on VIPawnVaultComponent_ComputeShouldAutoVault");
static_assert(sizeof(VIPawnVaultComponent_ComputeShouldAutoVault) == 0x000001, "Wrong size on VIPawnVaultComponent_ComputeShouldAutoVault");
static_assert(offsetof(VIPawnVaultComponent_ComputeShouldAutoVault, ReturnValue) == 0x000000, "Member 'VIPawnVaultComponent_ComputeShouldAutoVault::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnVaultComponent.Jump
// 0x0008 (0x0008 - 0x0000)
struct VIPawnVaultComponent_Jump final
{
public:
	float                                         GravityZ;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanJump;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFalling;                                        // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B04[0x1];                                     // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIPawnVaultComponent_Jump) == 0x000004, "Wrong alignment on VIPawnVaultComponent_Jump");
static_assert(sizeof(VIPawnVaultComponent_Jump) == 0x000008, "Wrong size on VIPawnVaultComponent_Jump");
static_assert(offsetof(VIPawnVaultComponent_Jump, GravityZ) == 0x000000, "Member 'VIPawnVaultComponent_Jump::GravityZ' has a wrong offset!");
static_assert(offsetof(VIPawnVaultComponent_Jump, bCanJump) == 0x000004, "Member 'VIPawnVaultComponent_Jump::bCanJump' has a wrong offset!");
static_assert(offsetof(VIPawnVaultComponent_Jump, bIsFalling) == 0x000005, "Member 'VIPawnVaultComponent_Jump::bIsFalling' has a wrong offset!");
static_assert(offsetof(VIPawnVaultComponent_Jump, ReturnValue) == 0x000006, "Member 'VIPawnVaultComponent_Jump::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnVaultComponent.ComputeAntiCheatResult
// 0x0040 (0x0040 - 0x0000)
struct VIPawnVaultComponent_ComputeAntiCheatResult final
{
public:
	struct FVIVaultInfo                           VaultInfo;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B05[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIPawnVaultComponent_ComputeAntiCheatResult) == 0x000008, "Wrong alignment on VIPawnVaultComponent_ComputeAntiCheatResult");
static_assert(sizeof(VIPawnVaultComponent_ComputeAntiCheatResult) == 0x000040, "Wrong size on VIPawnVaultComponent_ComputeAntiCheatResult");
static_assert(offsetof(VIPawnVaultComponent_ComputeAntiCheatResult, VaultInfo) == 0x000000, "Member 'VIPawnVaultComponent_ComputeAntiCheatResult::VaultInfo' has a wrong offset!");
static_assert(offsetof(VIPawnVaultComponent_ComputeAntiCheatResult, ReturnValue) == 0x000038, "Member 'VIPawnVaultComponent_ComputeAntiCheatResult::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnVaultComponent.ComputeCustomAntiCheat
// 0x0040 (0x0040 - 0x0000)
struct VIPawnVaultComponent_ComputeCustomAntiCheat final
{
public:
	struct FVIVaultInfo                           ClientVaultInfo;                                   // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B06[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIPawnVaultComponent_ComputeCustomAntiCheat) == 0x000008, "Wrong alignment on VIPawnVaultComponent_ComputeCustomAntiCheat");
static_assert(sizeof(VIPawnVaultComponent_ComputeCustomAntiCheat) == 0x000040, "Wrong size on VIPawnVaultComponent_ComputeCustomAntiCheat");
static_assert(offsetof(VIPawnVaultComponent_ComputeCustomAntiCheat, ClientVaultInfo) == 0x000000, "Member 'VIPawnVaultComponent_ComputeCustomAntiCheat::ClientVaultInfo' has a wrong offset!");
static_assert(offsetof(VIPawnVaultComponent_ComputeCustomAntiCheat, ReturnValue) == 0x000038, "Member 'VIPawnVaultComponent_ComputeCustomAntiCheat::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnVaultComponent.ComputeDefaultAntiCheat
// 0x0080 (0x0080 - 0x0000)
struct VIPawnVaultComponent_ComputeDefaultAntiCheat final
{
public:
	struct FVIVaultInfo                           ClientVaultInfo;                                   // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVIVaultResult                         ServerVaultResult;                                 // 0x0038(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B07[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VIPawnVaultComponent_ComputeDefaultAntiCheat) == 0x000008, "Wrong alignment on VIPawnVaultComponent_ComputeDefaultAntiCheat");
static_assert(sizeof(VIPawnVaultComponent_ComputeDefaultAntiCheat) == 0x000080, "Wrong size on VIPawnVaultComponent_ComputeDefaultAntiCheat");
static_assert(offsetof(VIPawnVaultComponent_ComputeDefaultAntiCheat, ClientVaultInfo) == 0x000000, "Member 'VIPawnVaultComponent_ComputeDefaultAntiCheat::ClientVaultInfo' has a wrong offset!");
static_assert(offsetof(VIPawnVaultComponent_ComputeDefaultAntiCheat, ServerVaultResult) == 0x000038, "Member 'VIPawnVaultComponent_ComputeDefaultAntiCheat::ServerVaultResult' has a wrong offset!");
static_assert(offsetof(VIPawnVaultComponent_ComputeDefaultAntiCheat, ReturnValue) == 0x000078, "Member 'VIPawnVaultComponent_ComputeDefaultAntiCheat::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnVaultComponent.ComputeVault
// 0x0040 (0x0040 - 0x0000)
struct VIPawnVaultComponent_ComputeVault final
{
public:
	struct FVIVaultResult                         ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnVaultComponent_ComputeVault) == 0x000008, "Wrong alignment on VIPawnVaultComponent_ComputeVault");
static_assert(sizeof(VIPawnVaultComponent_ComputeVault) == 0x000040, "Wrong size on VIPawnVaultComponent_ComputeVault");
static_assert(offsetof(VIPawnVaultComponent_ComputeVault, ReturnValue) == 0x000000, "Member 'VIPawnVaultComponent_ComputeVault::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnVaultComponent.ComputeVaultInfoFromResult
// 0x0070 (0x0070 - 0x0000)
struct VIPawnVaultComponent_ComputeVaultInfoFromResult final
{
public:
	struct FVIVaultInfo                           VaultResult;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVIVaultInfo                           ReturnValue;                                       // 0x0038(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnVaultComponent_ComputeVaultInfoFromResult) == 0x000008, "Wrong alignment on VIPawnVaultComponent_ComputeVaultInfoFromResult");
static_assert(sizeof(VIPawnVaultComponent_ComputeVaultInfoFromResult) == 0x000070, "Wrong size on VIPawnVaultComponent_ComputeVaultInfoFromResult");
static_assert(offsetof(VIPawnVaultComponent_ComputeVaultInfoFromResult, VaultResult) == 0x000000, "Member 'VIPawnVaultComponent_ComputeVaultInfoFromResult::VaultResult' has a wrong offset!");
static_assert(offsetof(VIPawnVaultComponent_ComputeVaultInfoFromResult, ReturnValue) == 0x000038, "Member 'VIPawnVaultComponent_ComputeVaultInfoFromResult::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnVaultComponent.GetCapsuleInfo
// 0x0008 (0x0008 - 0x0000)
struct VIPawnVaultComponent_GetCapsuleInfo final
{
public:
	struct FVICapsuleInfo                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnVaultComponent_GetCapsuleInfo) == 0x000004, "Wrong alignment on VIPawnVaultComponent_GetCapsuleInfo");
static_assert(sizeof(VIPawnVaultComponent_GetCapsuleInfo) == 0x000008, "Wrong size on VIPawnVaultComponent_GetCapsuleInfo");
static_assert(offsetof(VIPawnVaultComponent_GetCapsuleInfo, ReturnValue) == 0x000000, "Member 'VIPawnVaultComponent_GetCapsuleInfo::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnVaultComponent.IsCapsuleInfoValid
// 0x0001 (0x0001 - 0x0000)
struct VIPawnVaultComponent_IsCapsuleInfoValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnVaultComponent_IsCapsuleInfoValid) == 0x000001, "Wrong alignment on VIPawnVaultComponent_IsCapsuleInfoValid");
static_assert(sizeof(VIPawnVaultComponent_IsCapsuleInfoValid) == 0x000001, "Wrong size on VIPawnVaultComponent_IsCapsuleInfoValid");
static_assert(offsetof(VIPawnVaultComponent_IsCapsuleInfoValid, ReturnValue) == 0x000000, "Member 'VIPawnVaultComponent_IsCapsuleInfoValid::ReturnValue' has a wrong offset!");

// Function VaultIt.VIPawnVaultComponent.IsVaulting
// 0x0001 (0x0001 - 0x0000)
struct VIPawnVaultComponent_IsVaulting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VIPawnVaultComponent_IsVaulting) == 0x000001, "Wrong alignment on VIPawnVaultComponent_IsVaulting");
static_assert(sizeof(VIPawnVaultComponent_IsVaulting) == 0x000001, "Wrong size on VIPawnVaultComponent_IsVaulting");
static_assert(offsetof(VIPawnVaultComponent_IsVaulting, ReturnValue) == 0x000000, "Member 'VIPawnVaultComponent_IsVaulting::ReturnValue' has a wrong offset!");

}

