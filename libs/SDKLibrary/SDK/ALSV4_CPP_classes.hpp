#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALSV4_CPP

#include "Basic.hpp"

#include "ALSV4_CPP_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AIModule_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class ALSV4_CPP.ALSAIController
// 0x0008 (0x03C0 - 0x03B8)
class AALSAIController final : public AAIController
{
public:
	class UBehaviorTree*                          Behaviour;                                         // 0x03B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSAIController">();
	}
	static class AALSAIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALSAIController>();
	}
};
static_assert(alignof(AALSAIController) == 0x000008, "Wrong alignment on AALSAIController");
static_assert(sizeof(AALSAIController) == 0x0003C0, "Wrong size on AALSAIController");
static_assert(offsetof(AALSAIController, Behaviour) == 0x0003B8, "Member 'AALSAIController::Behaviour' has a wrong offset!");

// Class ALSV4_CPP.ALSAnimNotifyCameraShake
// 0x0010 (0x0048 - 0x0038)
class UALSAnimNotifyCameraShake final : public UAnimNotify
{
public:
	TSubclassOf<class UCameraShakeBase>           ShakeClass;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B21[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSAnimNotifyCameraShake">();
	}
	static class UALSAnimNotifyCameraShake* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSAnimNotifyCameraShake>();
	}
};
static_assert(alignof(UALSAnimNotifyCameraShake) == 0x000008, "Wrong alignment on UALSAnimNotifyCameraShake");
static_assert(sizeof(UALSAnimNotifyCameraShake) == 0x000048, "Wrong size on UALSAnimNotifyCameraShake");
static_assert(offsetof(UALSAnimNotifyCameraShake, ShakeClass) == 0x000038, "Member 'UALSAnimNotifyCameraShake::ShakeClass' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyCameraShake, Scale) == 0x000040, "Member 'UALSAnimNotifyCameraShake::Scale' has a wrong offset!");

// Class ALSV4_CPP.ALSAnimNotifyFootstep
// 0x0038 (0x0070 - 0x0038)
class UALSAnimNotifyFootstep final : public UAnimNotify
{
public:
	class UDataTable*                             HitDataTable;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootSocketName;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B22[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceLength;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnDecal;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrorDecalX;                                     // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrorDecalY;                                     // 0x0052(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrorDecalZ;                                     // 0x0053(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnSound;                                       // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B23[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SoundParameterName;                                // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSFootstepType                              FootstepType;                                      // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideMaskCurve;                                // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B24[0x2];                                     // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnNiagara;                                     // 0x006C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B25[0x3];                                     // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSAnimNotifyFootstep">();
	}
	static class UALSAnimNotifyFootstep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSAnimNotifyFootstep>();
	}
};
static_assert(alignof(UALSAnimNotifyFootstep) == 0x000008, "Wrong alignment on UALSAnimNotifyFootstep");
static_assert(sizeof(UALSAnimNotifyFootstep) == 0x000070, "Wrong size on UALSAnimNotifyFootstep");
static_assert(offsetof(UALSAnimNotifyFootstep, HitDataTable) == 0x000038, "Member 'UALSAnimNotifyFootstep::HitDataTable' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, FootSocketName) == 0x000040, "Member 'UALSAnimNotifyFootstep::FootSocketName' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, TraceChannel) == 0x000048, "Member 'UALSAnimNotifyFootstep::TraceChannel' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, DrawDebugType) == 0x000049, "Member 'UALSAnimNotifyFootstep::DrawDebugType' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, TraceLength) == 0x00004C, "Member 'UALSAnimNotifyFootstep::TraceLength' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, bSpawnDecal) == 0x000050, "Member 'UALSAnimNotifyFootstep::bSpawnDecal' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, bMirrorDecalX) == 0x000051, "Member 'UALSAnimNotifyFootstep::bMirrorDecalX' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, bMirrorDecalY) == 0x000052, "Member 'UALSAnimNotifyFootstep::bMirrorDecalY' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, bMirrorDecalZ) == 0x000053, "Member 'UALSAnimNotifyFootstep::bMirrorDecalZ' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, bSpawnSound) == 0x000054, "Member 'UALSAnimNotifyFootstep::bSpawnSound' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, SoundParameterName) == 0x000058, "Member 'UALSAnimNotifyFootstep::SoundParameterName' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, FootstepType) == 0x000060, "Member 'UALSAnimNotifyFootstep::FootstepType' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, bOverrideMaskCurve) == 0x000061, "Member 'UALSAnimNotifyFootstep::bOverrideMaskCurve' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, VolumeMultiplier) == 0x000064, "Member 'UALSAnimNotifyFootstep::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, PitchMultiplier) == 0x000068, "Member 'UALSAnimNotifyFootstep::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, bSpawnNiagara) == 0x00006C, "Member 'UALSAnimNotifyFootstep::bSpawnNiagara' has a wrong offset!");

// Class ALSV4_CPP.ALSCharacterMovementComponent
// 0x0020 (0x0F20 - 0x0F00)
class UALSCharacterMovementComponent : public UCharacterMovementComponent
{
public:
	uint8                                         bRequestMovementSettingsChange;                    // 0x0EF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSGait                                      AllowedGait;                                       // 0x0EF9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B26[0x6];                                     // 0x0EFA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSMovementSettings                   CurrentMovementSettings;                           // 0x0F00(0x0020)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void Server_SetAllowedGait(EALSGait NewAllowedGait);
	void SetAllowedGait(EALSGait NewAllowedGait);
	void SetMovementSettings(const struct FALSMovementSettings& NewMovementSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSCharacterMovementComponent">();
	}
	static class UALSCharacterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSCharacterMovementComponent>();
	}
};
static_assert(alignof(UALSCharacterMovementComponent) == 0x000010, "Wrong alignment on UALSCharacterMovementComponent");
static_assert(sizeof(UALSCharacterMovementComponent) == 0x000F20, "Wrong size on UALSCharacterMovementComponent");
static_assert(offsetof(UALSCharacterMovementComponent, bRequestMovementSettingsChange) == 0x000EF8, "Member 'UALSCharacterMovementComponent::bRequestMovementSettingsChange' has a wrong offset!");
static_assert(offsetof(UALSCharacterMovementComponent, AllowedGait) == 0x000EF9, "Member 'UALSCharacterMovementComponent::AllowedGait' has a wrong offset!");
static_assert(offsetof(UALSCharacterMovementComponent, CurrentMovementSettings) == 0x000F00, "Member 'UALSCharacterMovementComponent::CurrentMovementSettings' has a wrong offset!");

// Class ALSV4_CPP.ALSAnimNotifyGroundedEntryState
// 0x0008 (0x0040 - 0x0038)
class UALSAnimNotifyGroundedEntryState final : public UAnimNotify
{
public:
	EALSGroundedEntryState                        GroundedEntryState;                                // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B27[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSAnimNotifyGroundedEntryState">();
	}
	static class UALSAnimNotifyGroundedEntryState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSAnimNotifyGroundedEntryState>();
	}
};
static_assert(alignof(UALSAnimNotifyGroundedEntryState) == 0x000008, "Wrong alignment on UALSAnimNotifyGroundedEntryState");
static_assert(sizeof(UALSAnimNotifyGroundedEntryState) == 0x000040, "Wrong size on UALSAnimNotifyGroundedEntryState");
static_assert(offsetof(UALSAnimNotifyGroundedEntryState, GroundedEntryState) == 0x000038, "Member 'UALSAnimNotifyGroundedEntryState::GroundedEntryState' has a wrong offset!");

// Class ALSV4_CPP.ALSBaseCharacter
// 0x02B0 (0x08D0 - 0x0620)
class AALSBaseCharacter : public ACharacter
{
public:
	FMulticastInlineDelegateProperty_             JumpPressedDelegate;                               // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnJumpedDelegate;                                  // 0x0628(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RagdollStateChangedDelegate;                       // 0x0638(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UALSCharacterMovementComponent*         MyCharacterMovementComponent;                      // 0x0648(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSRotationMode                              DesiredRotationMode;                               // 0x0650(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSGait                                      DesiredGait;                                       // 0x0651(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSStance                                    DesiredStance;                                     // 0x0652(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B28[0x1];                                     // 0x0653(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookUpDownRate;                                    // 0x0654(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LookLeftRightRate;                                 // 0x0658(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RollDoubleTapTimeout;                              // 0x065C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBreakFall;                                        // 0x0660(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSprintHeld;                                       // 0x0661(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B29[0x2];                                     // 0x0662(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThirdPersonFOV;                                    // 0x0664(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FirstPersonFOV;                                    // 0x0668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRightShoulder;                                    // 0x066C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B2A[0x3];                                     // 0x066D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    MovementModel;                                     // 0x0670(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                Acceleration;                                      // 0x0680(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMoving;                                         // 0x0698(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasMovementInput;                                 // 0x0699(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B2B[0x6];                                     // 0x069A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LastVelocityRotation;                              // 0x06A0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               LastMovementInputRotation;                         // 0x06B8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         Speed;                                             // 0x06D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MovementInputAmount;                               // 0x06D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimYawRate;                                        // 0x06D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EasedMaxAcceleration;                              // 0x06DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ReplicatedCurrentAcceleration;                     // 0x06E0(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               ReplicatedControlRotation;                         // 0x06F8(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class USkeletalMesh*                          VisibleMesh;                                       // 0x0710(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSOverlayState                              OverlayState;                                      // 0x0718(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSGroundedEntryState                        GroundedEntryState;                                // 0x0719(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSMovementState                             MovementState;                                     // 0x071A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSMovementState                             PrevMovementState;                                 // 0x071B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSMovementAction                            MovementAction;                                    // 0x071C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSRotationMode                              RotationMode;                                      // 0x071D(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSGait                                      Gait;                                              // 0x071E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSStance                                    Stance;                                            // 0x071F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSViewMode                                  ViewMode;                                          // 0x0720(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B2C[0x3];                                     // 0x0721(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverlayOverrideState;                              // 0x0724(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FALSMovementStateSettings              MovementData;                                      // 0x0728(0x00C8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               TargetRotation;                                    // 0x07F0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               InAirRotation;                                     // 0x0808(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         YawOffset;                                         // 0x0820(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBreakfallOnLand;                                  // 0x0824(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B2D[0x3];                                     // 0x0825(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BreakfallOnLandVelocity;                           // 0x0828(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReversedPelvis;                                   // 0x082C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRagdollOnLand;                                    // 0x082D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B2E[0x2];                                     // 0x082E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RagdollOnLandVelocity;                             // 0x0830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRagdollOnGround;                                  // 0x0834(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRagdollFaceUp;                                    // 0x0835(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B2F[0x2];                                     // 0x0836(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastRagdollVelocity;                               // 0x0838(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetRagdollLocation;                             // 0x0850(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B30[0x28];                                    // 0x0868(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UALSPlayerCameraBehavior*               CameraBehavior;                                    // 0x0890(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B31[0x30];                                    // 0x0898(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UALSDebugComponent*                     ALSDebugComponent;                                 // 0x08C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AimAction(bool bValue);
	void CameraHeldAction();
	void CameraRightAction(float Value);
	void CameraTapAction();
	void CameraUpAction(float Value);
	void EventOnJumped();
	void EventOnLanded();
	void ForwardMovementAction(float Value);
	struct FVector GetFirstPersonCameraTarget();
	class UAnimMontage* GetGetUpAnimation(bool bRagdollFaceUpState);
	class UAnimMontage* GetRollAnimation();
	struct FTransform GetThirdPersonPivotTarget();
	ECollisionChannel GetThirdPersonTraceParams(struct FVector* TraceOrigin, float* TraceRadius);
	void JumpAction(bool bValue);
	void LookingDirectionAction();
	void Multicast_OnJumped();
	void Multicast_OnLanded();
	void Multicast_PlayMontage(class UAnimMontage* Montage, float PlayRate);
	void Multicast_RagdollEnd(const struct FVector& CharacterLocation);
	void Multicast_RagdollStart();
	void OnBreakfall();
	void OnRep_OverlayState(EALSOverlayState PrevOverlayState);
	void OnRep_RotationMode(EALSRotationMode PrevRotMode);
	void OnRep_ViewMode(EALSViewMode PrevViewMode);
	void OnRep_VisibleMesh(const class USkeletalMesh* PreviousSkeletalMesh);
	void RagdollAction();
	void RagdollEnd();
	void RagdollStart();
	void Replicated_PlayMontage(class UAnimMontage* Montage, float PlayRate);
	void ReplicatedRagdollEnd();
	void ReplicatedRagdollStart();
	void RightMovementAction(float Value);
	void Server_PlayMontage(class UAnimMontage* Montage, float PlayRate);
	void Server_RagdollEnd(const struct FVector& CharacterLocation);
	void Server_RagdollStart();
	void Server_SetDesiredGait(EALSGait NewGait);
	void Server_SetDesiredRotationMode(EALSRotationMode NewRotMode);
	void Server_SetDesiredStance(EALSStance NewStance);
	void Server_SetMeshLocationDuringRagdoll(const struct FVector& MeshLocation);
	void Server_SetOverlayState(EALSOverlayState NewState, bool bForce);
	void Server_SetRotationMode(EALSRotationMode NewRotationMode, bool bForce);
	void Server_SetViewMode(EALSViewMode NewViewMode, bool bForce);
	void Server_SetVisibleMesh(class USkeletalMesh* NewSkeletalMesh);
	void SetActorLocationAndTargetRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetCameraBehavior(class UALSPlayerCameraBehavior* CamBeh);
	void SetDesiredGait(EALSGait NewGait);
	void SetDesiredRotationMode(EALSRotationMode NewRotMode);
	void SetDesiredStance(EALSStance NewStance);
	void SetGait(EALSGait NewGait, bool bForce);
	void SetGroundedEntryState(EALSGroundedEntryState NewState);
	void SetMovementAction(EALSMovementAction NewAction, bool bForce);
	void SetMovementState(EALSMovementState NewState, bool bForce);
	void SetOverlayOverrideState(int32 NewState);
	void SetOverlayState(EALSOverlayState NewState, bool bForce);
	void SetRightShoulder(bool bNewRightShoulder);
	void SetRotationMode(EALSRotationMode NewRotationMode, bool bForce);
	void SetStance(EALSStance NewStance, bool bForce);
	void SetViewMode(EALSViewMode NewViewMode, bool bForce);
	void SetVisibleMesh(class USkeletalMesh* NewSkeletalMesh);
	void SprintAction(bool bValue);
	void StanceAction();
	void VelocityDirectionAction();
	void WalkAction();

	bool CanSprint() const;
	struct FVector GetAcceleration() const;
	EALSGait GetActualGait(EALSGait AllowedGait) const;
	struct FRotator GetAimingRotation() const;
	float GetAimYawRate() const;
	EALSGait GetAllowedGait() const;
	float GetAnimCurveValue(class FName CurveName) const;
	void GetCameraParameters(float* TPFOVOut, float* FPFOVOut, bool* bRightShoulderOut) const;
	EALSGait GetDesiredGait() const;
	EALSRotationMode GetDesiredRotationMode() const;
	EALSStance GetDesiredStance() const;
	EALSGait GetGait() const;
	EALSGroundedEntryState GetGroundedEntryState() const;
	EALSMovementAction GetMovementAction() const;
	struct FVector GetMovementInput() const;
	float GetMovementInputAmount() const;
	EALSMovementState GetMovementState() const;
	class UALSCharacterMovementComponent* GetMyMovementComponent() const;
	int32 GetOverlayOverrideState() const;
	EALSOverlayState GetOverlayState() const;
	EALSMovementState GetPrevMovementState() const;
	EALSRotationMode GetRotationMode() const;
	float GetSpeed() const;
	EALSStance GetStance() const;
	struct FALSMovementSettings GetTargetMovementSettings() const;
	EALSViewMode GetViewMode() const;
	bool HasMovementInput() const;
	bool IsMoving() const;
	bool IsRightShoulder() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSBaseCharacter">();
	}
	static class AALSBaseCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALSBaseCharacter>();
	}
};
static_assert(alignof(AALSBaseCharacter) == 0x000010, "Wrong alignment on AALSBaseCharacter");
static_assert(sizeof(AALSBaseCharacter) == 0x0008D0, "Wrong size on AALSBaseCharacter");
static_assert(offsetof(AALSBaseCharacter, JumpPressedDelegate) == 0x000618, "Member 'AALSBaseCharacter::JumpPressedDelegate' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, OnJumpedDelegate) == 0x000628, "Member 'AALSBaseCharacter::OnJumpedDelegate' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, RagdollStateChangedDelegate) == 0x000638, "Member 'AALSBaseCharacter::RagdollStateChangedDelegate' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MyCharacterMovementComponent) == 0x000648, "Member 'AALSBaseCharacter::MyCharacterMovementComponent' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, DesiredRotationMode) == 0x000650, "Member 'AALSBaseCharacter::DesiredRotationMode' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, DesiredGait) == 0x000651, "Member 'AALSBaseCharacter::DesiredGait' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, DesiredStance) == 0x000652, "Member 'AALSBaseCharacter::DesiredStance' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, LookUpDownRate) == 0x000654, "Member 'AALSBaseCharacter::LookUpDownRate' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, LookLeftRightRate) == 0x000658, "Member 'AALSBaseCharacter::LookLeftRightRate' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, RollDoubleTapTimeout) == 0x00065C, "Member 'AALSBaseCharacter::RollDoubleTapTimeout' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bBreakFall) == 0x000660, "Member 'AALSBaseCharacter::bBreakFall' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bSprintHeld) == 0x000661, "Member 'AALSBaseCharacter::bSprintHeld' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, ThirdPersonFOV) == 0x000664, "Member 'AALSBaseCharacter::ThirdPersonFOV' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, FirstPersonFOV) == 0x000668, "Member 'AALSBaseCharacter::FirstPersonFOV' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bRightShoulder) == 0x00066C, "Member 'AALSBaseCharacter::bRightShoulder' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MovementModel) == 0x000670, "Member 'AALSBaseCharacter::MovementModel' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, Acceleration) == 0x000680, "Member 'AALSBaseCharacter::Acceleration' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bIsMoving) == 0x000698, "Member 'AALSBaseCharacter::bIsMoving' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bHasMovementInput) == 0x000699, "Member 'AALSBaseCharacter::bHasMovementInput' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, LastVelocityRotation) == 0x0006A0, "Member 'AALSBaseCharacter::LastVelocityRotation' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, LastMovementInputRotation) == 0x0006B8, "Member 'AALSBaseCharacter::LastMovementInputRotation' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, Speed) == 0x0006D0, "Member 'AALSBaseCharacter::Speed' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MovementInputAmount) == 0x0006D4, "Member 'AALSBaseCharacter::MovementInputAmount' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, AimYawRate) == 0x0006D8, "Member 'AALSBaseCharacter::AimYawRate' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, EasedMaxAcceleration) == 0x0006DC, "Member 'AALSBaseCharacter::EasedMaxAcceleration' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, ReplicatedCurrentAcceleration) == 0x0006E0, "Member 'AALSBaseCharacter::ReplicatedCurrentAcceleration' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, ReplicatedControlRotation) == 0x0006F8, "Member 'AALSBaseCharacter::ReplicatedControlRotation' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, VisibleMesh) == 0x000710, "Member 'AALSBaseCharacter::VisibleMesh' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, OverlayState) == 0x000718, "Member 'AALSBaseCharacter::OverlayState' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, GroundedEntryState) == 0x000719, "Member 'AALSBaseCharacter::GroundedEntryState' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MovementState) == 0x00071A, "Member 'AALSBaseCharacter::MovementState' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, PrevMovementState) == 0x00071B, "Member 'AALSBaseCharacter::PrevMovementState' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MovementAction) == 0x00071C, "Member 'AALSBaseCharacter::MovementAction' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, RotationMode) == 0x00071D, "Member 'AALSBaseCharacter::RotationMode' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, Gait) == 0x00071E, "Member 'AALSBaseCharacter::Gait' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, Stance) == 0x00071F, "Member 'AALSBaseCharacter::Stance' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, ViewMode) == 0x000720, "Member 'AALSBaseCharacter::ViewMode' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, OverlayOverrideState) == 0x000724, "Member 'AALSBaseCharacter::OverlayOverrideState' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MovementData) == 0x000728, "Member 'AALSBaseCharacter::MovementData' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, TargetRotation) == 0x0007F0, "Member 'AALSBaseCharacter::TargetRotation' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, InAirRotation) == 0x000808, "Member 'AALSBaseCharacter::InAirRotation' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, YawOffset) == 0x000820, "Member 'AALSBaseCharacter::YawOffset' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bBreakfallOnLand) == 0x000824, "Member 'AALSBaseCharacter::bBreakfallOnLand' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, BreakfallOnLandVelocity) == 0x000828, "Member 'AALSBaseCharacter::BreakfallOnLandVelocity' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bReversedPelvis) == 0x00082C, "Member 'AALSBaseCharacter::bReversedPelvis' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bRagdollOnLand) == 0x00082D, "Member 'AALSBaseCharacter::bRagdollOnLand' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, RagdollOnLandVelocity) == 0x000830, "Member 'AALSBaseCharacter::RagdollOnLandVelocity' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bRagdollOnGround) == 0x000834, "Member 'AALSBaseCharacter::bRagdollOnGround' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bRagdollFaceUp) == 0x000835, "Member 'AALSBaseCharacter::bRagdollFaceUp' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, LastRagdollVelocity) == 0x000838, "Member 'AALSBaseCharacter::LastRagdollVelocity' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, TargetRagdollLocation) == 0x000850, "Member 'AALSBaseCharacter::TargetRagdollLocation' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, CameraBehavior) == 0x000890, "Member 'AALSBaseCharacter::CameraBehavior' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, ALSDebugComponent) == 0x0008C8, "Member 'AALSBaseCharacter::ALSDebugComponent' has a wrong offset!");

// Class ALSV4_CPP.ALSCharacter
// 0x0020 (0x08F0 - 0x08D0)
class AALSCharacter final : public AALSBaseCharacter
{
public:
	class USceneComponent*                        HeldObjectRoot;                                    // 0x08D0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x08D8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x08E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B38[0x8];                                     // 0x08E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AttachToHand(class UStaticMesh* NewStaticMesh, class USkeletalMesh* NewSkeletalMesh, class UClass* NewAnimClass, bool bLeftHand, const struct FVector& Offset);
	void ClearHeldObject();
	void UpdateHeldObject();
	void UpdateHeldObjectAnimations();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSCharacter">();
	}
	static class AALSCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALSCharacter>();
	}
};
static_assert(alignof(AALSCharacter) == 0x000010, "Wrong alignment on AALSCharacter");
static_assert(sizeof(AALSCharacter) == 0x0008F0, "Wrong size on AALSCharacter");
static_assert(offsetof(AALSCharacter, HeldObjectRoot) == 0x0008D0, "Member 'AALSCharacter::HeldObjectRoot' has a wrong offset!");
static_assert(offsetof(AALSCharacter, SkeletalMesh) == 0x0008D8, "Member 'AALSCharacter::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AALSCharacter, StaticMesh) == 0x0008E0, "Member 'AALSCharacter::StaticMesh' has a wrong offset!");

// Class ALSV4_CPP.ALSCharacterAnimInstance
// 0x0550 (0x08A0 - 0x0350)
class UALSCharacterAnimInstance : public UAnimInstance
{
public:
	class AALSBaseCharacter*                      Character;                                         // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FALSAnimCharacterInformation           CharacterInformation;                              // 0x0350(0x00A8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSMovementState                      MovementState;                                     // 0x03F8(0x0006)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSMovementAction                     MovementAction;                                    // 0x03FE(0x0006)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSRotationMode                       RotationMode;                                      // 0x0404(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSGait                               Gait;                                              // 0x0408(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSStance                             Stance;                                            // 0x040C(0x0003)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSOverlayState                       OverlayState;                                      // 0x040F(0x000E)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B3A[0x3];                                     // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSAnimGraphGrounded                  Grounded;                                          // 0x0420(0x0034)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSVelocityBlend                      VelocityBlend;                                     // 0x0454(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSLeanAmount                         LeanAmount;                                        // 0x0464(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B3B[0x4];                                     // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeAccelerationAmount;                        // 0x0470(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FALSGroundedEntryState                 GroundedEntryState;                                // 0x0488(0x0003)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSMovementDirection                  MovementDirection;                                 // 0x048B(0x0005)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSAnimGraphInAir                     InAir;                                             // 0x0490(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSAnimGraphAimingValues              AimingValues;                                      // 0x04A0(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              SmoothedAimingAngle;                               // 0x04F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlailRate;                                         // 0x0508(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FALSAnimGraphLayerBlending             LayerBlendingValues;                               // 0x050C(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B3C[0x4];                                     // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSAnimGraphFootIK                    FootIKValues;                                      // 0x0570(0x0138)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSAnimTurnInPlace                    TurnInPlaceValues;                                 // 0x06A8(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSAnimRotateInPlace                  RotateInPlace;                                     // 0x07C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FALSAnimConfiguration                  Config;                                            // 0x07D8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DiagonalScaleAmountCurve;                          // 0x0810(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StrideBlend_N_Walk;                                // 0x0818(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StrideBlend_N_Run;                                 // 0x0820(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StrideBlend_C_Walk;                                // 0x0828(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LandPredictionCurve;                               // 0x0830(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LeanInAirCurve;                                    // 0x0838(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           YawOffset_FB;                                      // 0x0840(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           YawOffset_LR;                                      // 0x0848(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      TransitionAnim_R;                                  // 0x0850(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      TransitionAnim_L;                                  // 0x0858(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IkFootL_BoneName;                                  // 0x0860(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IkFootR_BoneName;                                  // 0x0868(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B3D[0x20];                                    // 0x0870(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UALSDebugComponent*                     ALSDebugComponent;                                 // 0x0890(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B3E[0x8];                                     // 0x0898(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnJumped();
	void OnPivot();
	void PlayDynamicTransition(float ReTriggerDelay, const struct FALSDynamicMontageParams& Parameters);
	void PlayTransition(const struct FALSDynamicMontageParams& Parameters);
	void PlayTransitionChecked(const struct FALSDynamicMontageParams& Parameters);
	void SetGroundedEntryState(EALSGroundedEntryState NewState);
	void SetTrackedHipsDirection(EALSHipsDirection HipsDirection);

	bool CanDynamicTransition() const;
	bool CanRotateInPlace() const;
	bool CanTurnInPlace() const;
	bool ShouldMoveCheck() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSCharacterAnimInstance">();
	}
	static class UALSCharacterAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSCharacterAnimInstance>();
	}
};
static_assert(alignof(UALSCharacterAnimInstance) == 0x000010, "Wrong alignment on UALSCharacterAnimInstance");
static_assert(sizeof(UALSCharacterAnimInstance) == 0x0008A0, "Wrong size on UALSCharacterAnimInstance");
static_assert(offsetof(UALSCharacterAnimInstance, Character) == 0x000348, "Member 'UALSCharacterAnimInstance::Character' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, CharacterInformation) == 0x000350, "Member 'UALSCharacterAnimInstance::CharacterInformation' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, MovementState) == 0x0003F8, "Member 'UALSCharacterAnimInstance::MovementState' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, MovementAction) == 0x0003FE, "Member 'UALSCharacterAnimInstance::MovementAction' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, RotationMode) == 0x000404, "Member 'UALSCharacterAnimInstance::RotationMode' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, Gait) == 0x000408, "Member 'UALSCharacterAnimInstance::Gait' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, Stance) == 0x00040C, "Member 'UALSCharacterAnimInstance::Stance' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, OverlayState) == 0x00040F, "Member 'UALSCharacterAnimInstance::OverlayState' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, Grounded) == 0x000420, "Member 'UALSCharacterAnimInstance::Grounded' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, VelocityBlend) == 0x000454, "Member 'UALSCharacterAnimInstance::VelocityBlend' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, LeanAmount) == 0x000464, "Member 'UALSCharacterAnimInstance::LeanAmount' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, RelativeAccelerationAmount) == 0x000470, "Member 'UALSCharacterAnimInstance::RelativeAccelerationAmount' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, GroundedEntryState) == 0x000488, "Member 'UALSCharacterAnimInstance::GroundedEntryState' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, MovementDirection) == 0x00048B, "Member 'UALSCharacterAnimInstance::MovementDirection' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, InAir) == 0x000490, "Member 'UALSCharacterAnimInstance::InAir' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, AimingValues) == 0x0004A0, "Member 'UALSCharacterAnimInstance::AimingValues' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, SmoothedAimingAngle) == 0x0004F8, "Member 'UALSCharacterAnimInstance::SmoothedAimingAngle' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, FlailRate) == 0x000508, "Member 'UALSCharacterAnimInstance::FlailRate' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, LayerBlendingValues) == 0x00050C, "Member 'UALSCharacterAnimInstance::LayerBlendingValues' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, FootIKValues) == 0x000570, "Member 'UALSCharacterAnimInstance::FootIKValues' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, TurnInPlaceValues) == 0x0006A8, "Member 'UALSCharacterAnimInstance::TurnInPlaceValues' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, RotateInPlace) == 0x0007C0, "Member 'UALSCharacterAnimInstance::RotateInPlace' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, Config) == 0x0007D8, "Member 'UALSCharacterAnimInstance::Config' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, DiagonalScaleAmountCurve) == 0x000810, "Member 'UALSCharacterAnimInstance::DiagonalScaleAmountCurve' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, StrideBlend_N_Walk) == 0x000818, "Member 'UALSCharacterAnimInstance::StrideBlend_N_Walk' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, StrideBlend_N_Run) == 0x000820, "Member 'UALSCharacterAnimInstance::StrideBlend_N_Run' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, StrideBlend_C_Walk) == 0x000828, "Member 'UALSCharacterAnimInstance::StrideBlend_C_Walk' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, LandPredictionCurve) == 0x000830, "Member 'UALSCharacterAnimInstance::LandPredictionCurve' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, LeanInAirCurve) == 0x000838, "Member 'UALSCharacterAnimInstance::LeanInAirCurve' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, YawOffset_FB) == 0x000840, "Member 'UALSCharacterAnimInstance::YawOffset_FB' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, YawOffset_LR) == 0x000848, "Member 'UALSCharacterAnimInstance::YawOffset_LR' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, TransitionAnim_R) == 0x000850, "Member 'UALSCharacterAnimInstance::TransitionAnim_R' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, TransitionAnim_L) == 0x000858, "Member 'UALSCharacterAnimInstance::TransitionAnim_L' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, IkFootL_BoneName) == 0x000860, "Member 'UALSCharacterAnimInstance::IkFootL_BoneName' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, IkFootR_BoneName) == 0x000868, "Member 'UALSCharacterAnimInstance::IkFootR_BoneName' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, ALSDebugComponent) == 0x000890, "Member 'UALSCharacterAnimInstance::ALSDebugComponent' has a wrong offset!");

// Class ALSV4_CPP.ALSDebugComponent
// 0x0048 (0x00E8 - 0x00A0)
class UALSDebugComponent : public UActorComponent
{
public:
	class AALSBaseCharacter*                      OwnerCharacter;                                    // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlomo;                                            // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowHUD;                                          // 0x00A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCharacterInfo;                                // 0x00AA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B40[0x5];                                     // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          DebugSkeletalMesh;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AALSBaseCharacter*>              AvailableDebugCharacters;                          // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class AALSBaseCharacter*                      DebugFocusCharacter;                               // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B41[0x8];                                     // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          DefaultSkeletalMesh;                               // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B42[0x8];                                     // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DrawDebugSpheres();
	void FocusedDebugCharacterCycle(bool bValue);
	bool GetDebugView();
	bool GetShowDebugShapes();
	bool GetShowLayerColors();
	bool GetShowTraces();
	void OnPlayerControllerInitialized(class APlayerController* Controller);
	void OpenOverlayMenu(bool bValue);
	void OverlayMenuCycle(bool bValue);
	void SetDynamicMaterials();
	void SetResetColors();
	void ToggleCharacterInfo();
	void ToggleDebugMesh();
	void ToggleDebugShapes();
	void ToggleDebugView();
	void ToggleGlobalTimeDilationLocal(float TimeDilation);
	void ToggleHud();
	void ToggleLayerColors();
	void ToggleSlomo();
	void ToggleTraces();
	void UpdateColoringSystem();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSDebugComponent">();
	}
	static class UALSDebugComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSDebugComponent>();
	}
};
static_assert(alignof(UALSDebugComponent) == 0x000008, "Wrong alignment on UALSDebugComponent");
static_assert(sizeof(UALSDebugComponent) == 0x0000E8, "Wrong size on UALSDebugComponent");
static_assert(offsetof(UALSDebugComponent, OwnerCharacter) == 0x0000A0, "Member 'UALSDebugComponent::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UALSDebugComponent, bSlomo) == 0x0000A8, "Member 'UALSDebugComponent::bSlomo' has a wrong offset!");
static_assert(offsetof(UALSDebugComponent, bShowHUD) == 0x0000A9, "Member 'UALSDebugComponent::bShowHUD' has a wrong offset!");
static_assert(offsetof(UALSDebugComponent, bShowCharacterInfo) == 0x0000AA, "Member 'UALSDebugComponent::bShowCharacterInfo' has a wrong offset!");
static_assert(offsetof(UALSDebugComponent, DebugSkeletalMesh) == 0x0000B0, "Member 'UALSDebugComponent::DebugSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UALSDebugComponent, AvailableDebugCharacters) == 0x0000B8, "Member 'UALSDebugComponent::AvailableDebugCharacters' has a wrong offset!");
static_assert(offsetof(UALSDebugComponent, DebugFocusCharacter) == 0x0000C8, "Member 'UALSDebugComponent::DebugFocusCharacter' has a wrong offset!");
static_assert(offsetof(UALSDebugComponent, DefaultSkeletalMesh) == 0x0000D8, "Member 'UALSDebugComponent::DefaultSkeletalMesh' has a wrong offset!");

// Class ALSV4_CPP.ALSMantleComponent
// 0x0240 (0x02E0 - 0x00A0)
class UALSMantleComponent : public UActorComponent
{
public:
	class UTimelineComponent*                     MantleTimeline;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FALSMantleTraceSettings                GroundedTraceSettings;                             // 0x00A8(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FALSMantleTraceSettings                AutomaticTraceSettings;                            // 0x00BC(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FALSMantleTraceSettings                FallingTraceSettings;                              // 0x00D0(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B43[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            MantleTimelineCurve;                               // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             MantleCollisionChannel;                            // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             WalkableSurfaceDetectionChannel;                   // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B44[0x6];                                     // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSMantleParams                       MantleParams;                                      // 0x00F8(0x0030)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B45[0x8];                                     // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSComponentAndTransform              MantleLedgeLS;                                     // 0x0130(0x0070)(BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FTransform                             MantleTarget;                                      // 0x01A0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTransform                             MantleActualStartOffset;                           // 0x0200(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTransform                             MantleAnimatedStartOffset;                         // 0x0260(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AcceptableVelocityWhileMantling;                   // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B46[0x4];                                     // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AALSBaseCharacter*                      OwnerCharacter;                                    // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UALSDebugComponent*                     ALSDebugComponent;                                 // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B47[0x8];                                     // 0x02D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FALSMantleAsset GetMantleAsset(EALSMantleType MantleType, EALSOverlayState CurrentOverlayState);
	bool MantleCheck(const struct FALSMantleTraceSettings& TraceSettings, EDrawDebugTrace DebugType, bool bDoMantle);
	void MantleEnd();
	void MantleStart(float MantleHeight, const struct FALSComponentAndTransform& MantleLedgeWS, EALSMantleType MantleType);
	void MantleUpdate(float BlendIn);
	void Multicast_MantleStart(float MantleHeight, const struct FALSComponentAndTransform& MantleLedgeWS, EALSMantleType MantleType);
	void OnOwnerJumpInput();
	void OnOwnerRagdollStateChanged(bool bRagdollState);
	void Server_MantleStart(float MantleHeight, const struct FALSComponentAndTransform& MantleLedgeWS, EALSMantleType MantleType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSMantleComponent">();
	}
	static class UALSMantleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSMantleComponent>();
	}
};
static_assert(alignof(UALSMantleComponent) == 0x000010, "Wrong alignment on UALSMantleComponent");
static_assert(sizeof(UALSMantleComponent) == 0x0002E0, "Wrong size on UALSMantleComponent");
static_assert(offsetof(UALSMantleComponent, MantleTimeline) == 0x0000A0, "Member 'UALSMantleComponent::MantleTimeline' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, GroundedTraceSettings) == 0x0000A8, "Member 'UALSMantleComponent::GroundedTraceSettings' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, AutomaticTraceSettings) == 0x0000BC, "Member 'UALSMantleComponent::AutomaticTraceSettings' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, FallingTraceSettings) == 0x0000D0, "Member 'UALSMantleComponent::FallingTraceSettings' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, MantleTimelineCurve) == 0x0000E8, "Member 'UALSMantleComponent::MantleTimelineCurve' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, MantleCollisionChannel) == 0x0000F0, "Member 'UALSMantleComponent::MantleCollisionChannel' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, WalkableSurfaceDetectionChannel) == 0x0000F1, "Member 'UALSMantleComponent::WalkableSurfaceDetectionChannel' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, MantleParams) == 0x0000F8, "Member 'UALSMantleComponent::MantleParams' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, MantleLedgeLS) == 0x000130, "Member 'UALSMantleComponent::MantleLedgeLS' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, MantleTarget) == 0x0001A0, "Member 'UALSMantleComponent::MantleTarget' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, MantleActualStartOffset) == 0x000200, "Member 'UALSMantleComponent::MantleActualStartOffset' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, MantleAnimatedStartOffset) == 0x000260, "Member 'UALSMantleComponent::MantleAnimatedStartOffset' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, AcceptableVelocityWhileMantling) == 0x0002C0, "Member 'UALSMantleComponent::AcceptableVelocityWhileMantling' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, OwnerCharacter) == 0x0002C8, "Member 'UALSMantleComponent::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UALSMantleComponent, ALSDebugComponent) == 0x0002D0, "Member 'UALSMantleComponent::ALSDebugComponent' has a wrong offset!");

// Class ALSV4_CPP.ALSMathLibrary
// 0x0000 (0x0028 - 0x0028)
class UALSMathLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AngleInRange(float Angle, float MinAngle, float MaxAngle, float Buffer, bool IncreaseBuffer);
	static EALSMovementDirection CalculateQuadrant(EALSMovementDirection Current, float FRThreshold, float FLThreshold, float BRThreshold, float BLThreshold, float Buffer, float Angle);
	static bool CapsuleHasRoomCheck(class UCapsuleComponent* Capsule, const struct FVector& TargetLocation, float HeightOffset, float RadiusOffset, EDrawDebugTrace DebugType, bool DrawDebugTrace);
	static struct FVector GetCapsuleBaseLocation(float ZOffset, class UCapsuleComponent* Capsule);
	static struct FVector GetCapsuleLocationFromBase(const struct FVector& BaseLocation, float ZOffset, class UCapsuleComponent* Capsule);
	static struct FTransform MantleComponentLocalToWorld(const struct FALSComponentAndTransform& CompAndTransform);
	static struct FTransform TransformAdd(const struct FTransform& T1, const struct FTransform& T2);
	static struct FTransform TransformSub(const struct FTransform& T1, const struct FTransform& T2);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSMathLibrary">();
	}
	static class UALSMathLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSMathLibrary>();
	}
};
static_assert(alignof(UALSMathLibrary) == 0x000008, "Wrong alignment on UALSMathLibrary");
static_assert(sizeof(UALSMathLibrary) == 0x000028, "Wrong size on UALSMathLibrary");

// Class ALSV4_CPP.ALSNotifyStateEarlyBlendOut
// 0x0018 (0x0048 - 0x0030)
class UALSNotifyStateEarlyBlendOut final : public UAnimNotifyState
{
public:
	class UAnimMontage*                           ThisMontage;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckMovementState;                               // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSMovementState                             MovementStateEquals;                               // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckStance;                                      // 0x003E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSStance                                    StanceEquals;                                      // 0x003F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckMovementInput;                               // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B56[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSNotifyStateEarlyBlendOut">();
	}
	static class UALSNotifyStateEarlyBlendOut* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSNotifyStateEarlyBlendOut>();
	}
};
static_assert(alignof(UALSNotifyStateEarlyBlendOut) == 0x000008, "Wrong alignment on UALSNotifyStateEarlyBlendOut");
static_assert(sizeof(UALSNotifyStateEarlyBlendOut) == 0x000048, "Wrong size on UALSNotifyStateEarlyBlendOut");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, ThisMontage) == 0x000030, "Member 'UALSNotifyStateEarlyBlendOut::ThisMontage' has a wrong offset!");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, BlendOutTime) == 0x000038, "Member 'UALSNotifyStateEarlyBlendOut::BlendOutTime' has a wrong offset!");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, bCheckMovementState) == 0x00003C, "Member 'UALSNotifyStateEarlyBlendOut::bCheckMovementState' has a wrong offset!");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, MovementStateEquals) == 0x00003D, "Member 'UALSNotifyStateEarlyBlendOut::MovementStateEquals' has a wrong offset!");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, bCheckStance) == 0x00003E, "Member 'UALSNotifyStateEarlyBlendOut::bCheckStance' has a wrong offset!");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, StanceEquals) == 0x00003F, "Member 'UALSNotifyStateEarlyBlendOut::StanceEquals' has a wrong offset!");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, bCheckMovementInput) == 0x000040, "Member 'UALSNotifyStateEarlyBlendOut::bCheckMovementInput' has a wrong offset!");

// Class ALSV4_CPP.ALSNotifyStateMovementAction
// 0x0008 (0x0038 - 0x0030)
class UALSNotifyStateMovementAction final : public UAnimNotifyState
{
public:
	EALSMovementAction                            MovementAction;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B57[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSNotifyStateMovementAction">();
	}
	static class UALSNotifyStateMovementAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSNotifyStateMovementAction>();
	}
};
static_assert(alignof(UALSNotifyStateMovementAction) == 0x000008, "Wrong alignment on UALSNotifyStateMovementAction");
static_assert(sizeof(UALSNotifyStateMovementAction) == 0x000038, "Wrong size on UALSNotifyStateMovementAction");
static_assert(offsetof(UALSNotifyStateMovementAction, MovementAction) == 0x000030, "Member 'UALSNotifyStateMovementAction::MovementAction' has a wrong offset!");

// Class ALSV4_CPP.ALSNotifyStateOverlayOverride
// 0x0008 (0x0038 - 0x0030)
class UALSNotifyStateOverlayOverride final : public UAnimNotifyState
{
public:
	int32                                         OverlayOverrideState;                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B58[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSNotifyStateOverlayOverride">();
	}
	static class UALSNotifyStateOverlayOverride* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSNotifyStateOverlayOverride>();
	}
};
static_assert(alignof(UALSNotifyStateOverlayOverride) == 0x000008, "Wrong alignment on UALSNotifyStateOverlayOverride");
static_assert(sizeof(UALSNotifyStateOverlayOverride) == 0x000038, "Wrong size on UALSNotifyStateOverlayOverride");
static_assert(offsetof(UALSNotifyStateOverlayOverride, OverlayOverrideState) == 0x000030, "Member 'UALSNotifyStateOverlayOverride::OverlayOverrideState' has a wrong offset!");

// Class ALSV4_CPP.ALSPlayerCameraBehavior
// 0x0010 (0x0360 - 0x0350)
class UALSPlayerCameraBehavior : public UAnimInstance
{
public:
	EALSMovementState                             MovementState;                                     // 0x0348(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSMovementAction                            MovementAction;                                    // 0x0349(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookingDirection;                                 // 0x034A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVelocityDirection;                                // 0x034B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAiming;                                           // 0x034C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSGait                                      Gait;                                              // 0x034D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSStance                                    Stance;                                            // 0x034E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSViewMode                                  ViewMode;                                          // 0x034F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRightShoulder;                                    // 0x0350(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugView;                                        // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B59[0xE];                                     // 0x0352(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSPlayerCameraBehavior">();
	}
	static class UALSPlayerCameraBehavior* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSPlayerCameraBehavior>();
	}
};
static_assert(alignof(UALSPlayerCameraBehavior) == 0x000010, "Wrong alignment on UALSPlayerCameraBehavior");
static_assert(sizeof(UALSPlayerCameraBehavior) == 0x000360, "Wrong size on UALSPlayerCameraBehavior");
static_assert(offsetof(UALSPlayerCameraBehavior, MovementState) == 0x000348, "Member 'UALSPlayerCameraBehavior::MovementState' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, MovementAction) == 0x000349, "Member 'UALSPlayerCameraBehavior::MovementAction' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, bLookingDirection) == 0x00034A, "Member 'UALSPlayerCameraBehavior::bLookingDirection' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, bVelocityDirection) == 0x00034B, "Member 'UALSPlayerCameraBehavior::bVelocityDirection' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, bAiming) == 0x00034C, "Member 'UALSPlayerCameraBehavior::bAiming' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, Gait) == 0x00034D, "Member 'UALSPlayerCameraBehavior::Gait' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, Stance) == 0x00034E, "Member 'UALSPlayerCameraBehavior::Stance' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, ViewMode) == 0x00034F, "Member 'UALSPlayerCameraBehavior::ViewMode' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, bRightShoulder) == 0x000350, "Member 'UALSPlayerCameraBehavior::bRightShoulder' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, bDebugView) == 0x000351, "Member 'UALSPlayerCameraBehavior::bDebugView' has a wrong offset!");

// Class ALSV4_CPP.ALSPlayerCameraManager
// 0x0110 (0x3450 - 0x3340)
class AALSPlayerCameraManager : public APlayerCameraManager
{
public:
	class AALSBaseCharacter*                      ControlledCharacter;                               // 0x3340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 CameraBehavior;                                    // 0x3348(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RootLocation;                                      // 0x3350(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B5A[0x8];                                     // 0x3368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SmoothedPivotTarget;                               // 0x3370(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PivotLocation;                                     // 0x33D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetCameraLocation;                              // 0x33E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               TargetCameraRotation;                              // 0x3400(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               DebugViewRotation;                                 // 0x3418(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                DebugViewOffset;                                   // 0x3430(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UALSDebugComponent*                     ALSDebugComponent;                                 // 0x3448(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static struct FVector CalculateAxisIndependentLag(const struct FVector& CurrentLocation, const struct FVector& TargetLocation, const struct FRotator& CameraRotation, const struct FVector& LagSpeeds, float DeltaTime);

	bool CustomCameraBehavior(float DeltaTime, struct FVector* Location, struct FRotator* Rotation, float* FOV);
	void DrawDebugTargets(const struct FVector& PivotTargetLocation);
	void OnPossess(class AALSBaseCharacter* NewCharacter);

	float GetCameraBehaviorParam(class FName CurveName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSPlayerCameraManager">();
	}
	static class AALSPlayerCameraManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALSPlayerCameraManager>();
	}
};
static_assert(alignof(AALSPlayerCameraManager) == 0x000010, "Wrong alignment on AALSPlayerCameraManager");
static_assert(sizeof(AALSPlayerCameraManager) == 0x003450, "Wrong size on AALSPlayerCameraManager");
static_assert(offsetof(AALSPlayerCameraManager, ControlledCharacter) == 0x003340, "Member 'AALSPlayerCameraManager::ControlledCharacter' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, CameraBehavior) == 0x003348, "Member 'AALSPlayerCameraManager::CameraBehavior' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, RootLocation) == 0x003350, "Member 'AALSPlayerCameraManager::RootLocation' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, SmoothedPivotTarget) == 0x003370, "Member 'AALSPlayerCameraManager::SmoothedPivotTarget' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, PivotLocation) == 0x0033D0, "Member 'AALSPlayerCameraManager::PivotLocation' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, TargetCameraLocation) == 0x0033E8, "Member 'AALSPlayerCameraManager::TargetCameraLocation' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, TargetCameraRotation) == 0x003400, "Member 'AALSPlayerCameraManager::TargetCameraRotation' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, DebugViewRotation) == 0x003418, "Member 'AALSPlayerCameraManager::DebugViewRotation' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, DebugViewOffset) == 0x003430, "Member 'AALSPlayerCameraManager::DebugViewOffset' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, ALSDebugComponent) == 0x003448, "Member 'AALSPlayerCameraManager::ALSDebugComponent' has a wrong offset!");

// Class ALSV4_CPP.ALSPlayerController
// 0x0018 (0x0868 - 0x0850)
class AALSPlayerController : public APlayerController
{
public:
	class AALSBaseCharacter*                      PossessedCharacter;                                // 0x0850(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputMappingContext*                   DefaultInputMappingContext;                        // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputMappingContext*                   DebugInputMappingContext;                          // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AimAction(const struct FInputActionValue& Value);
	void CameraHeldAction(const struct FInputActionValue& Value);
	void CameraRightAction(const struct FInputActionValue& Value);
	void CameraTapAction(const struct FInputActionValue& Value);
	void CameraUpAction(const struct FInputActionValue& Value);
	void DebugFocusedCharacterCycleAction(const struct FInputActionValue& Value);
	void DebugOpenOverlayMenuAction(const struct FInputActionValue& Value);
	void DebugOverlayMenuCycleAction(const struct FInputActionValue& Value);
	void DebugToggleCharacterInfoAction(const struct FInputActionValue& Value);
	void DebugToggleDebugViewAction(const struct FInputActionValue& Value);
	void DebugToggleHudAction(const struct FInputActionValue& Value);
	void DebugToggleLayerColorsAction(const struct FInputActionValue& Value);
	void DebugToggleMeshAction(const struct FInputActionValue& Value);
	void DebugToggleShapesAction(const struct FInputActionValue& Value);
	void DebugToggleSlomoAction(const struct FInputActionValue& Value);
	void DebugToggleTracesAction(const struct FInputActionValue& Value);
	void ForwardMovementAction(const struct FInputActionValue& Value);
	void JumpAction(const struct FInputActionValue& Value);
	void LookingDirectionAction(const struct FInputActionValue& Value);
	void RagdollAction(const struct FInputActionValue& Value);
	void RightMovementAction(const struct FInputActionValue& Value);
	void SprintAction(const struct FInputActionValue& Value);
	void StanceAction(const struct FInputActionValue& Value);
	void VelocityDirectionAction(const struct FInputActionValue& Value);
	void WalkAction(const struct FInputActionValue& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSPlayerController">();
	}
	static class AALSPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALSPlayerController>();
	}
};
static_assert(alignof(AALSPlayerController) == 0x000008, "Wrong alignment on AALSPlayerController");
static_assert(sizeof(AALSPlayerController) == 0x000868, "Wrong size on AALSPlayerController");
static_assert(offsetof(AALSPlayerController, PossessedCharacter) == 0x000850, "Member 'AALSPlayerController::PossessedCharacter' has a wrong offset!");
static_assert(offsetof(AALSPlayerController, DefaultInputMappingContext) == 0x000858, "Member 'AALSPlayerController::DefaultInputMappingContext' has a wrong offset!");
static_assert(offsetof(AALSPlayerController, DebugInputMappingContext) == 0x000860, "Member 'AALSPlayerController::DebugInputMappingContext' has a wrong offset!");

// Class ALSV4_CPP.ALS_BTTask_GetRandomLocation
// 0x0010 (0x00A8 - 0x0098)
class UALS_BTTask_GetRandomLocation final : public UBTTask_BlackboardBase
{
public:
	float                                         MaxDistance;                                       // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B5E[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavigationQueryFilter>     Filter;                                            // 0x00A0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALS_BTTask_GetRandomLocation">();
	}
	static class UALS_BTTask_GetRandomLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALS_BTTask_GetRandomLocation>();
	}
};
static_assert(alignof(UALS_BTTask_GetRandomLocation) == 0x000008, "Wrong alignment on UALS_BTTask_GetRandomLocation");
static_assert(sizeof(UALS_BTTask_GetRandomLocation) == 0x0000A8, "Wrong size on UALS_BTTask_GetRandomLocation");
static_assert(offsetof(UALS_BTTask_GetRandomLocation, MaxDistance) == 0x000098, "Member 'UALS_BTTask_GetRandomLocation::MaxDistance' has a wrong offset!");
static_assert(offsetof(UALS_BTTask_GetRandomLocation, Filter) == 0x0000A0, "Member 'UALS_BTTask_GetRandomLocation::Filter' has a wrong offset!");

// Class ALSV4_CPP.ALS_BTTask_SetFocusToPlayer
// 0x0000 (0x0070 - 0x0070)
class UALS_BTTask_SetFocusToPlayer final : public UBTTaskNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALS_BTTask_SetFocusToPlayer">();
	}
	static class UALS_BTTask_SetFocusToPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALS_BTTask_SetFocusToPlayer>();
	}
};
static_assert(alignof(UALS_BTTask_SetFocusToPlayer) == 0x000008, "Wrong alignment on UALS_BTTask_SetFocusToPlayer");
static_assert(sizeof(UALS_BTTask_SetFocusToPlayer) == 0x000070, "Wrong size on UALS_BTTask_SetFocusToPlayer");

}

