#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SGKMenuGameState

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Peak53Teams_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SGKMenuGameState.BP_SGKMenuGameState_C
// 0x0070 (0x0350 - 0x02E0)
class ABP_SGKMenuGameState_C final : public AGameStateBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 MapName;                                           // 0x02F0(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ServerName;                                        // 0x0300(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_SGKMenuController_C*>        Seals;                                             // 0x0310(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_SGKMenuController_C*>        Insurgents;                                        // 0x0320(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_SGKMenuController_C*>        ReadyList;                                         // 0x0330(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsStartingMatch;                                   // 0x0340(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D72[0x3];                                     // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Countdown;                                         // 0x0344(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           StartTimer;                                        // 0x0348(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddPlayerToReadyList(const class ABP_SGKMenuController_C*& NewItem);
	void AddToInsurgents(const class ABP_SGKMenuController_C*& NewItem);
	void AddToSeals(const class ABP_SGKMenuController_C*& Player);
	void AllPlayersReady();
	void AutoTeam(const class ABP_SGKMenuController_C*& Player);
	void CheckIfAllPlayersAreReady();
	void CustomEvent();
	void ExecuteUbergraph_BP_SGKMenuGameState(int32 EntryPoint);
	void F_Set_Player_Lodout(int32 Lodout, class APlayerController* Controller);
	void FindPlayerIndex(TArray<class ABP_SGKMenuController_C*>& Array, class ABP_SGKMenuController_C* Controller, int32* Param_Index, bool* Sucess);
	void ForcePlayerReady(class ABP_SGKMenuController_C* Object);
	void ForcePlayerReadyState();
	void Remove_Lobby_Screen_for_All_Players();
	void RemovePlayer(class ABP_SGKMenuController_C* Controller);
	void RemovePlayerFromReadyList(const class ABP_SGKMenuController_C*& NewItem);
	void SetServerMapName(const class FString& Param_MapName);
	void SetServerName(const class FString& Param_ServerName);
	void SwitchTeams(const class ABP_SGKMenuController_C*& ItemToFind);
	void TogglePlayerReady(const class ABP_SGKMenuController_C*& ItemToFind);
	void Update_Lobby_for_All_Clients();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SGKMenuGameState_C">();
	}
	static class ABP_SGKMenuGameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SGKMenuGameState_C>();
	}
};
static_assert(alignof(ABP_SGKMenuGameState_C) == 0x000008, "Wrong alignment on ABP_SGKMenuGameState_C");
static_assert(sizeof(ABP_SGKMenuGameState_C) == 0x000350, "Wrong size on ABP_SGKMenuGameState_C");
static_assert(offsetof(ABP_SGKMenuGameState_C, UberGraphFrame) == 0x0002E0, "Member 'ABP_SGKMenuGameState_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SGKMenuGameState_C, DefaultSceneRoot) == 0x0002E8, "Member 'ABP_SGKMenuGameState_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SGKMenuGameState_C, MapName) == 0x0002F0, "Member 'ABP_SGKMenuGameState_C::MapName' has a wrong offset!");
static_assert(offsetof(ABP_SGKMenuGameState_C, ServerName) == 0x000300, "Member 'ABP_SGKMenuGameState_C::ServerName' has a wrong offset!");
static_assert(offsetof(ABP_SGKMenuGameState_C, Seals) == 0x000310, "Member 'ABP_SGKMenuGameState_C::Seals' has a wrong offset!");
static_assert(offsetof(ABP_SGKMenuGameState_C, Insurgents) == 0x000320, "Member 'ABP_SGKMenuGameState_C::Insurgents' has a wrong offset!");
static_assert(offsetof(ABP_SGKMenuGameState_C, ReadyList) == 0x000330, "Member 'ABP_SGKMenuGameState_C::ReadyList' has a wrong offset!");
static_assert(offsetof(ABP_SGKMenuGameState_C, IsStartingMatch) == 0x000340, "Member 'ABP_SGKMenuGameState_C::IsStartingMatch' has a wrong offset!");
static_assert(offsetof(ABP_SGKMenuGameState_C, Countdown) == 0x000344, "Member 'ABP_SGKMenuGameState_C::Countdown' has a wrong offset!");
static_assert(offsetof(ABP_SGKMenuGameState_C, StartTimer) == 0x000348, "Member 'ABP_SGKMenuGameState_C::StartTimer' has a wrong offset!");

}

