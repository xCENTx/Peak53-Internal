#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AutoSettingsInput

#include "Basic.hpp"

#include "AutoSettingsInput_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function AutoSettingsInput.InputLabel.MappingsChanged
// 0x0008 (0x0008 - 0x0000)
struct InputLabel_MappingsChanged final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputLabel_MappingsChanged) == 0x000008, "Wrong alignment on InputLabel_MappingsChanged");
static_assert(sizeof(InputLabel_MappingsChanged) == 0x000008, "Wrong size on InputLabel_MappingsChanged");
static_assert(offsetof(InputLabel_MappingsChanged, Player) == 0x000000, "Member 'InputLabel_MappingsChanged::Player' has a wrong offset!");

// Function AutoSettingsInput.InputMapping.BindChord
// 0x0028 (0x0028 - 0x0000)
struct InputMapping_BindChord final
{
public:
	struct FCapturedInput                         CapturedInput;                                     // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMapping_BindChord) == 0x000008, "Wrong alignment on InputMapping_BindChord");
static_assert(sizeof(InputMapping_BindChord) == 0x000028, "Wrong size on InputMapping_BindChord");
static_assert(offsetof(InputMapping_BindChord, CapturedInput) == 0x000000, "Member 'InputMapping_BindChord::CapturedInput' has a wrong offset!");

// Function AutoSettingsInput.InputMapping.ChordCaptured
// 0x0028 (0x0028 - 0x0000)
struct InputMapping_ChordCaptured final
{
public:
	struct FCapturedInput                         CapturedInput;                                     // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMapping_ChordCaptured) == 0x000008, "Wrong alignment on InputMapping_ChordCaptured");
static_assert(sizeof(InputMapping_ChordCaptured) == 0x000028, "Wrong size on InputMapping_ChordCaptured");
static_assert(offsetof(InputMapping_ChordCaptured, CapturedInput) == 0x000000, "Member 'InputMapping_ChordCaptured::CapturedInput' has a wrong offset!");

// Function AutoSettingsInput.AutoSettingsInputProjectConfig.GetKeyFriendlyNameStatic
// 0x0030 (0x0030 - 0x0000)
struct AutoSettingsInputProjectConfig_GetKeyFriendlyNameStatic final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingsInputProjectConfig_GetKeyFriendlyNameStatic) == 0x000008, "Wrong alignment on AutoSettingsInputProjectConfig_GetKeyFriendlyNameStatic");
static_assert(sizeof(AutoSettingsInputProjectConfig_GetKeyFriendlyNameStatic) == 0x000030, "Wrong size on AutoSettingsInputProjectConfig_GetKeyFriendlyNameStatic");
static_assert(offsetof(AutoSettingsInputProjectConfig_GetKeyFriendlyNameStatic, Key) == 0x000000, "Member 'AutoSettingsInputProjectConfig_GetKeyFriendlyNameStatic::Key' has a wrong offset!");
static_assert(offsetof(AutoSettingsInputProjectConfig_GetKeyFriendlyNameStatic, ReturnValue) == 0x000018, "Member 'AutoSettingsInputProjectConfig_GetKeyFriendlyNameStatic::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.AutoSettingsInputProjectConfig.GetKeyGroupStatic
// 0x0020 (0x0020 - 0x0000)
struct AutoSettingsInputProjectConfig_GetKeyGroupStatic final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingsInputProjectConfig_GetKeyGroupStatic) == 0x000008, "Wrong alignment on AutoSettingsInputProjectConfig_GetKeyGroupStatic");
static_assert(sizeof(AutoSettingsInputProjectConfig_GetKeyGroupStatic) == 0x000020, "Wrong size on AutoSettingsInputProjectConfig_GetKeyGroupStatic");
static_assert(offsetof(AutoSettingsInputProjectConfig_GetKeyGroupStatic, Key) == 0x000000, "Member 'AutoSettingsInputProjectConfig_GetKeyGroupStatic::Key' has a wrong offset!");
static_assert(offsetof(AutoSettingsInputProjectConfig_GetKeyGroupStatic, ReturnValue) == 0x000018, "Member 'AutoSettingsInputProjectConfig_GetKeyGroupStatic::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.AutoSettingsInputProjectConfig.LoadKeyIcons
// 0x0030 (0x0030 - 0x0000)
struct AutoSettingsInputProjectConfig_LoadKeyIcons final
{
public:
	struct FGameplayTagContainer                  KeyIconTags;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<class UTexture*>                       ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingsInputProjectConfig_LoadKeyIcons) == 0x000008, "Wrong alignment on AutoSettingsInputProjectConfig_LoadKeyIcons");
static_assert(sizeof(AutoSettingsInputProjectConfig_LoadKeyIcons) == 0x000030, "Wrong size on AutoSettingsInputProjectConfig_LoadKeyIcons");
static_assert(offsetof(AutoSettingsInputProjectConfig_LoadKeyIcons, KeyIconTags) == 0x000000, "Member 'AutoSettingsInputProjectConfig_LoadKeyIcons::KeyIconTags' has a wrong offset!");
static_assert(offsetof(AutoSettingsInputProjectConfig_LoadKeyIcons, ReturnValue) == 0x000020, "Member 'AutoSettingsInputProjectConfig_LoadKeyIcons::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.AutoSettingsPlayer.SaveInputMappings
// 0x00A0 (0x00A0 - 0x0000)
struct AutoSettingsPlayer_SaveInputMappings final
{
public:
	struct FPlayerInputMappings                   InputMappings;                                     // 0x0000(0x00A0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingsPlayer_SaveInputMappings) == 0x000008, "Wrong alignment on AutoSettingsPlayer_SaveInputMappings");
static_assert(sizeof(AutoSettingsPlayer_SaveInputMappings) == 0x0000A0, "Wrong size on AutoSettingsPlayer_SaveInputMappings");
static_assert(offsetof(AutoSettingsPlayer_SaveInputMappings, InputMappings) == 0x000000, "Member 'AutoSettingsPlayer_SaveInputMappings::InputMappings' has a wrong offset!");

// Function AutoSettingsInput.AutoSettingsPlayer.GetDefaultInputMappingPreset
// 0x0040 (0x0040 - 0x0000)
struct AutoSettingsPlayer_GetDefaultInputMappingPreset final
{
public:
	struct FInputMappingPreset                    ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingsPlayer_GetDefaultInputMappingPreset) == 0x000008, "Wrong alignment on AutoSettingsPlayer_GetDefaultInputMappingPreset");
static_assert(sizeof(AutoSettingsPlayer_GetDefaultInputMappingPreset) == 0x000040, "Wrong size on AutoSettingsPlayer_GetDefaultInputMappingPreset");
static_assert(offsetof(AutoSettingsPlayer_GetDefaultInputMappingPreset, ReturnValue) == 0x000000, "Member 'AutoSettingsPlayer_GetDefaultInputMappingPreset::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.AutoSettingsPlayer.GetInputMappings
// 0x00A8 (0x00A8 - 0x0000)
struct AutoSettingsPlayer_GetInputMappings final
{
public:
	struct FPlayerInputMappings                   InputMappings;                                     // 0x0000(0x00A0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AFD[0x7];                                     // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoSettingsPlayer_GetInputMappings) == 0x000008, "Wrong alignment on AutoSettingsPlayer_GetInputMappings");
static_assert(sizeof(AutoSettingsPlayer_GetInputMappings) == 0x0000A8, "Wrong size on AutoSettingsPlayer_GetInputMappings");
static_assert(offsetof(AutoSettingsPlayer_GetInputMappings, InputMappings) == 0x000000, "Member 'AutoSettingsPlayer_GetInputMappings::InputMappings' has a wrong offset!");
static_assert(offsetof(AutoSettingsPlayer_GetInputMappings, ReturnValue) == 0x0000A0, "Member 'AutoSettingsPlayer_GetInputMappings::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.AutoSettingsPlayer.GetUniquePlayerIdentifier
// 0x0010 (0x0010 - 0x0000)
struct AutoSettingsPlayer_GetUniquePlayerIdentifier final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingsPlayer_GetUniquePlayerIdentifier) == 0x000008, "Wrong alignment on AutoSettingsPlayer_GetUniquePlayerIdentifier");
static_assert(sizeof(AutoSettingsPlayer_GetUniquePlayerIdentifier) == 0x000010, "Wrong size on AutoSettingsPlayer_GetUniquePlayerIdentifier");
static_assert(offsetof(AutoSettingsPlayer_GetUniquePlayerIdentifier, ReturnValue) == 0x000000, "Member 'AutoSettingsPlayer_GetUniquePlayerIdentifier::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.BindCaptureButton.ChordCaptured
// 0x0028 (0x0028 - 0x0000)
struct BindCaptureButton_ChordCaptured final
{
public:
	struct FCapturedInput                         CapturedInput;                                     // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BindCaptureButton_ChordCaptured) == 0x000008, "Wrong alignment on BindCaptureButton_ChordCaptured");
static_assert(sizeof(BindCaptureButton_ChordCaptured) == 0x000028, "Wrong size on BindCaptureButton_ChordCaptured");
static_assert(offsetof(BindCaptureButton_ChordCaptured, CapturedInput) == 0x000000, "Member 'BindCaptureButton_ChordCaptured::CapturedInput' has a wrong offset!");

// Function AutoSettingsInput.BindCaptureButton.InitializePrompt
// 0x0008 (0x0008 - 0x0000)
struct BindCaptureButton_InitializePrompt final
{
public:
	class UBindCapturePrompt*                     PromptWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BindCaptureButton_InitializePrompt) == 0x000008, "Wrong alignment on BindCaptureButton_InitializePrompt");
static_assert(sizeof(BindCaptureButton_InitializePrompt) == 0x000008, "Wrong size on BindCaptureButton_InitializePrompt");
static_assert(offsetof(BindCaptureButton_InitializePrompt, PromptWidget) == 0x000000, "Member 'BindCaptureButton_InitializePrompt::PromptWidget' has a wrong offset!");

// Function AutoSettingsInput.BindCaptureButton.StartCapture
// 0x0008 (0x0008 - 0x0000)
struct BindCaptureButton_StartCapture final
{
public:
	class UBindCapturePrompt*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BindCaptureButton_StartCapture) == 0x000008, "Wrong alignment on BindCaptureButton_StartCapture");
static_assert(sizeof(BindCaptureButton_StartCapture) == 0x000008, "Wrong size on BindCaptureButton_StartCapture");
static_assert(offsetof(BindCaptureButton_StartCapture, ReturnValue) == 0x000000, "Member 'BindCaptureButton_StartCapture::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.BindCapturePrompt.IsKeyAllowed
// 0x0020 (0x0020 - 0x0000)
struct BindCapturePrompt_IsKeyAllowed final
{
public:
	struct FKey                                   PrimaryKey;                                        // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B04[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BindCapturePrompt_IsKeyAllowed) == 0x000008, "Wrong alignment on BindCapturePrompt_IsKeyAllowed");
static_assert(sizeof(BindCapturePrompt_IsKeyAllowed) == 0x000020, "Wrong size on BindCapturePrompt_IsKeyAllowed");
static_assert(offsetof(BindCapturePrompt_IsKeyAllowed, PrimaryKey) == 0x000000, "Member 'BindCapturePrompt_IsKeyAllowed::PrimaryKey' has a wrong offset!");
static_assert(offsetof(BindCapturePrompt_IsKeyAllowed, ReturnValue) == 0x000018, "Member 'BindCapturePrompt_IsKeyAllowed::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.BindCapturePrompt.GetKeyGroup
// 0x0008 (0x0008 - 0x0000)
struct BindCapturePrompt_GetKeyGroup final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BindCapturePrompt_GetKeyGroup) == 0x000004, "Wrong alignment on BindCapturePrompt_GetKeyGroup");
static_assert(sizeof(BindCapturePrompt_GetKeyGroup) == 0x000008, "Wrong size on BindCapturePrompt_GetKeyGroup");
static_assert(offsetof(BindCapturePrompt_GetKeyGroup, ReturnValue) == 0x000000, "Member 'BindCapturePrompt_GetKeyGroup::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.GlobalKeyIconTagManager.GetIconForKey
// 0x0048 (0x0048 - 0x0000)
struct GlobalKeyIconTagManager_GetIconForKey final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IconTags;                                          // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         AxisScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B05[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalKeyIconTagManager_GetIconForKey) == 0x000008, "Wrong alignment on GlobalKeyIconTagManager_GetIconForKey");
static_assert(sizeof(GlobalKeyIconTagManager_GetIconForKey) == 0x000048, "Wrong size on GlobalKeyIconTagManager_GetIconForKey");
static_assert(offsetof(GlobalKeyIconTagManager_GetIconForKey, InKey) == 0x000000, "Member 'GlobalKeyIconTagManager_GetIconForKey::InKey' has a wrong offset!");
static_assert(offsetof(GlobalKeyIconTagManager_GetIconForKey, IconTags) == 0x000018, "Member 'GlobalKeyIconTagManager_GetIconForKey::IconTags' has a wrong offset!");
static_assert(offsetof(GlobalKeyIconTagManager_GetIconForKey, AxisScale) == 0x000038, "Member 'GlobalKeyIconTagManager_GetIconForKey::AxisScale' has a wrong offset!");
static_assert(offsetof(GlobalKeyIconTagManager_GetIconForKey, ReturnValue) == 0x000040, "Member 'GlobalKeyIconTagManager_GetIconForKey::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.GlobalKeyIconTagManager.SetGlobalKeyIconTags
// 0x0020 (0x0020 - 0x0000)
struct GlobalKeyIconTagManager_SetGlobalKeyIconTags final
{
public:
	struct FGameplayTagContainer                  InGlobalIconTags;                                  // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalKeyIconTagManager_SetGlobalKeyIconTags) == 0x000008, "Wrong alignment on GlobalKeyIconTagManager_SetGlobalKeyIconTags");
static_assert(sizeof(GlobalKeyIconTagManager_SetGlobalKeyIconTags) == 0x000020, "Wrong size on GlobalKeyIconTagManager_SetGlobalKeyIconTags");
static_assert(offsetof(GlobalKeyIconTagManager_SetGlobalKeyIconTags, InGlobalIconTags) == 0x000000, "Member 'GlobalKeyIconTagManager_SetGlobalKeyIconTags::InGlobalIconTags' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.AddPlayerActionOverrideStatic
// 0x0038 (0x0038 - 0x0000)
struct InputMappingManager_AddPlayerActionOverrideStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionKeyMapping                 NewMapping;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyKeyGroup;                                      // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B06[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputMappingManager_AddPlayerActionOverrideStatic) == 0x000008, "Wrong alignment on InputMappingManager_AddPlayerActionOverrideStatic");
static_assert(sizeof(InputMappingManager_AddPlayerActionOverrideStatic) == 0x000038, "Wrong size on InputMappingManager_AddPlayerActionOverrideStatic");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverrideStatic, Player) == 0x000000, "Member 'InputMappingManager_AddPlayerActionOverrideStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverrideStatic, NewMapping) == 0x000008, "Member 'InputMappingManager_AddPlayerActionOverrideStatic::NewMapping' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverrideStatic, MappingGroup) == 0x000030, "Member 'InputMappingManager_AddPlayerActionOverrideStatic::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverrideStatic, bAnyKeyGroup) == 0x000034, "Member 'InputMappingManager_AddPlayerActionOverrideStatic::bAnyKeyGroup' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.AddPlayerAxisOverrideStatic
// 0x0038 (0x0038 - 0x0000)
struct InputMappingManager_AddPlayerAxisOverrideStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAxisKeyMapping                   NewMapping;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyKeyGroup;                                      // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B07[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputMappingManager_AddPlayerAxisOverrideStatic) == 0x000008, "Wrong alignment on InputMappingManager_AddPlayerAxisOverrideStatic");
static_assert(sizeof(InputMappingManager_AddPlayerAxisOverrideStatic) == 0x000038, "Wrong size on InputMappingManager_AddPlayerAxisOverrideStatic");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverrideStatic, Player) == 0x000000, "Member 'InputMappingManager_AddPlayerAxisOverrideStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverrideStatic, NewMapping) == 0x000008, "Member 'InputMappingManager_AddPlayerAxisOverrideStatic::NewMapping' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverrideStatic, MappingGroup) == 0x000030, "Member 'InputMappingManager_AddPlayerAxisOverrideStatic::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverrideStatic, bAnyKeyGroup) == 0x000034, "Member 'InputMappingManager_AddPlayerAxisOverrideStatic::bAnyKeyGroup' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.GetDefaultInputPresets
// 0x0010 (0x0010 - 0x0000)
struct InputMappingManager_GetDefaultInputPresets final
{
public:
	TArray<struct FInputMappingPreset>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetDefaultInputPresets) == 0x000008, "Wrong alignment on InputMappingManager_GetDefaultInputPresets");
static_assert(sizeof(InputMappingManager_GetDefaultInputPresets) == 0x000010, "Wrong size on InputMappingManager_GetDefaultInputPresets");
static_assert(offsetof(InputMappingManager_GetDefaultInputPresets, ReturnValue) == 0x000000, "Member 'InputMappingManager_GetDefaultInputPresets::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.GetPlayerActionMappingStatic
// 0x0040 (0x0040 - 0x0000)
struct InputMappingManager_GetPlayerActionMappingStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B08[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputActionKeyMapping                 ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetPlayerActionMappingStatic) == 0x000008, "Wrong alignment on InputMappingManager_GetPlayerActionMappingStatic");
static_assert(sizeof(InputMappingManager_GetPlayerActionMappingStatic) == 0x000040, "Wrong size on InputMappingManager_GetPlayerActionMappingStatic");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappingStatic, Player) == 0x000000, "Member 'InputMappingManager_GetPlayerActionMappingStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappingStatic, ActionName) == 0x000008, "Member 'InputMappingManager_GetPlayerActionMappingStatic::ActionName' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappingStatic, MappingGroup) == 0x000010, "Member 'InputMappingManager_GetPlayerActionMappingStatic::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappingStatic, ReturnValue) == 0x000018, "Member 'InputMappingManager_GetPlayerActionMappingStatic::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.GetPlayerAxisMappingStatic
// 0x0040 (0x0040 - 0x0000)
struct InputMappingManager_GetPlayerAxisMappingStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAxisKeyMapping                   ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetPlayerAxisMappingStatic) == 0x000008, "Wrong alignment on InputMappingManager_GetPlayerAxisMappingStatic");
static_assert(sizeof(InputMappingManager_GetPlayerAxisMappingStatic) == 0x000040, "Wrong size on InputMappingManager_GetPlayerAxisMappingStatic");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappingStatic, Player) == 0x000000, "Member 'InputMappingManager_GetPlayerAxisMappingStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappingStatic, AxisName) == 0x000008, "Member 'InputMappingManager_GetPlayerAxisMappingStatic::AxisName' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappingStatic, Scale) == 0x000010, "Member 'InputMappingManager_GetPlayerAxisMappingStatic::Scale' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappingStatic, MappingGroup) == 0x000014, "Member 'InputMappingManager_GetPlayerAxisMappingStatic::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappingStatic, ReturnValue) == 0x000018, "Member 'InputMappingManager_GetPlayerAxisMappingStatic::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.GetPlayerInputMappingsStatic
// 0x00A8 (0x00A8 - 0x0000)
struct InputMappingManager_GetPlayerInputMappingsStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerInputMappings                   ReturnValue;                                       // 0x0008(0x00A0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetPlayerInputMappingsStatic) == 0x000008, "Wrong alignment on InputMappingManager_GetPlayerInputMappingsStatic");
static_assert(sizeof(InputMappingManager_GetPlayerInputMappingsStatic) == 0x0000A8, "Wrong size on InputMappingManager_GetPlayerInputMappingsStatic");
static_assert(offsetof(InputMappingManager_GetPlayerInputMappingsStatic, Player) == 0x000000, "Member 'InputMappingManager_GetPlayerInputMappingsStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerInputMappingsStatic, ReturnValue) == 0x000008, "Member 'InputMappingManager_GetPlayerInputMappingsStatic::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.InitializePlayerInputOverridesStatic
// 0x0010 (0x0010 - 0x0000)
struct InputMappingManager_InitializePlayerInputOverridesStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B09[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputMappingManager_InitializePlayerInputOverridesStatic) == 0x000008, "Wrong alignment on InputMappingManager_InitializePlayerInputOverridesStatic");
static_assert(sizeof(InputMappingManager_InitializePlayerInputOverridesStatic) == 0x000010, "Wrong size on InputMappingManager_InitializePlayerInputOverridesStatic");
static_assert(offsetof(InputMappingManager_InitializePlayerInputOverridesStatic, Player) == 0x000000, "Member 'InputMappingManager_InitializePlayerInputOverridesStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_InitializePlayerInputOverridesStatic, ReturnValue) == 0x000008, "Member 'InputMappingManager_InitializePlayerInputOverridesStatic::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.SetPlayerInputPresetByTag
// 0x0010 (0x0010 - 0x0000)
struct InputMappingManager_SetPlayerInputPresetByTag final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PresetTag;                                         // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_SetPlayerInputPresetByTag) == 0x000008, "Wrong alignment on InputMappingManager_SetPlayerInputPresetByTag");
static_assert(sizeof(InputMappingManager_SetPlayerInputPresetByTag) == 0x000010, "Wrong size on InputMappingManager_SetPlayerInputPresetByTag");
static_assert(offsetof(InputMappingManager_SetPlayerInputPresetByTag, Player) == 0x000000, "Member 'InputMappingManager_SetPlayerInputPresetByTag::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_SetPlayerInputPresetByTag, PresetTag) == 0x000008, "Member 'InputMappingManager_SetPlayerInputPresetByTag::PresetTag' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.SetPlayerInputPresetStatic
// 0x0048 (0x0048 - 0x0000)
struct InputMappingManager_SetPlayerInputPresetStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputMappingPreset                    Preset;                                            // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_SetPlayerInputPresetStatic) == 0x000008, "Wrong alignment on InputMappingManager_SetPlayerInputPresetStatic");
static_assert(sizeof(InputMappingManager_SetPlayerInputPresetStatic) == 0x000048, "Wrong size on InputMappingManager_SetPlayerInputPresetStatic");
static_assert(offsetof(InputMappingManager_SetPlayerInputPresetStatic, Player) == 0x000000, "Member 'InputMappingManager_SetPlayerInputPresetStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_SetPlayerInputPresetStatic, Preset) == 0x000008, "Member 'InputMappingManager_SetPlayerInputPresetStatic::Preset' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.SetPlayerKeyGroupStatic
// 0x0010 (0x0010 - 0x0000)
struct InputMappingManager_SetPlayerKeyGroupStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KeyGroup;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_SetPlayerKeyGroupStatic) == 0x000008, "Wrong alignment on InputMappingManager_SetPlayerKeyGroupStatic");
static_assert(sizeof(InputMappingManager_SetPlayerKeyGroupStatic) == 0x000010, "Wrong size on InputMappingManager_SetPlayerKeyGroupStatic");
static_assert(offsetof(InputMappingManager_SetPlayerKeyGroupStatic, Player) == 0x000000, "Member 'InputMappingManager_SetPlayerKeyGroupStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_SetPlayerKeyGroupStatic, KeyGroup) == 0x000008, "Member 'InputMappingManager_SetPlayerKeyGroupStatic::KeyGroup' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.AddPlayerActionOverride
// 0x0038 (0x0038 - 0x0000)
struct InputMappingManager_AddPlayerActionOverride final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionKeyMapping                 NewMapping;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyKeyGroup;                                      // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0A[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputMappingManager_AddPlayerActionOverride) == 0x000008, "Wrong alignment on InputMappingManager_AddPlayerActionOverride");
static_assert(sizeof(InputMappingManager_AddPlayerActionOverride) == 0x000038, "Wrong size on InputMappingManager_AddPlayerActionOverride");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverride, Player) == 0x000000, "Member 'InputMappingManager_AddPlayerActionOverride::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverride, NewMapping) == 0x000008, "Member 'InputMappingManager_AddPlayerActionOverride::NewMapping' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverride, MappingGroup) == 0x000030, "Member 'InputMappingManager_AddPlayerActionOverride::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverride, bAnyKeyGroup) == 0x000034, "Member 'InputMappingManager_AddPlayerActionOverride::bAnyKeyGroup' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.AddPlayerAxisOverride
// 0x0038 (0x0038 - 0x0000)
struct InputMappingManager_AddPlayerAxisOverride final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAxisKeyMapping                   NewMapping;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyKeyGroup;                                      // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0B[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputMappingManager_AddPlayerAxisOverride) == 0x000008, "Wrong alignment on InputMappingManager_AddPlayerAxisOverride");
static_assert(sizeof(InputMappingManager_AddPlayerAxisOverride) == 0x000038, "Wrong size on InputMappingManager_AddPlayerAxisOverride");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverride, Player) == 0x000000, "Member 'InputMappingManager_AddPlayerAxisOverride::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverride, NewMapping) == 0x000008, "Member 'InputMappingManager_AddPlayerAxisOverride::NewMapping' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverride, MappingGroup) == 0x000030, "Member 'InputMappingManager_AddPlayerAxisOverride::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverride, bAnyKeyGroup) == 0x000034, "Member 'InputMappingManager_AddPlayerAxisOverride::bAnyKeyGroup' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.OnRegisteredPlayerControllerDestroyed
// 0x0008 (0x0008 - 0x0000)
struct InputMappingManager_OnRegisteredPlayerControllerDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_OnRegisteredPlayerControllerDestroyed) == 0x000008, "Wrong alignment on InputMappingManager_OnRegisteredPlayerControllerDestroyed");
static_assert(sizeof(InputMappingManager_OnRegisteredPlayerControllerDestroyed) == 0x000008, "Wrong size on InputMappingManager_OnRegisteredPlayerControllerDestroyed");
static_assert(offsetof(InputMappingManager_OnRegisteredPlayerControllerDestroyed, DestroyedActor) == 0x000000, "Member 'InputMappingManager_OnRegisteredPlayerControllerDestroyed::DestroyedActor' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.GetPlayerActionMapping
// 0x0048 (0x0048 - 0x0000)
struct InputMappingManager_GetPlayerActionMapping final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KeyGroup;                                          // 0x0014(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePlayerKeyGroup;                                // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0C[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputActionKeyMapping                 ReturnValue;                                       // 0x0020(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetPlayerActionMapping) == 0x000008, "Wrong alignment on InputMappingManager_GetPlayerActionMapping");
static_assert(sizeof(InputMappingManager_GetPlayerActionMapping) == 0x000048, "Wrong size on InputMappingManager_GetPlayerActionMapping");
static_assert(offsetof(InputMappingManager_GetPlayerActionMapping, Player) == 0x000000, "Member 'InputMappingManager_GetPlayerActionMapping::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMapping, ActionName) == 0x000008, "Member 'InputMappingManager_GetPlayerActionMapping::ActionName' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMapping, MappingGroup) == 0x000010, "Member 'InputMappingManager_GetPlayerActionMapping::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMapping, KeyGroup) == 0x000014, "Member 'InputMappingManager_GetPlayerActionMapping::KeyGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMapping, bUsePlayerKeyGroup) == 0x00001C, "Member 'InputMappingManager_GetPlayerActionMapping::bUsePlayerKeyGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMapping, ReturnValue) == 0x000020, "Member 'InputMappingManager_GetPlayerActionMapping::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.GetPlayerActionMappings
// 0x0030 (0x0030 - 0x0000)
struct InputMappingManager_GetPlayerActionMappings final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KeyGroup;                                          // 0x0014(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePlayerKeyGroup;                                // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0D[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInputActionKeyMapping>         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetPlayerActionMappings) == 0x000008, "Wrong alignment on InputMappingManager_GetPlayerActionMappings");
static_assert(sizeof(InputMappingManager_GetPlayerActionMappings) == 0x000030, "Wrong size on InputMappingManager_GetPlayerActionMappings");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappings, Player) == 0x000000, "Member 'InputMappingManager_GetPlayerActionMappings::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappings, ActionName) == 0x000008, "Member 'InputMappingManager_GetPlayerActionMappings::ActionName' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappings, MappingGroup) == 0x000010, "Member 'InputMappingManager_GetPlayerActionMappings::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappings, KeyGroup) == 0x000014, "Member 'InputMappingManager_GetPlayerActionMappings::KeyGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappings, bUsePlayerKeyGroup) == 0x00001C, "Member 'InputMappingManager_GetPlayerActionMappings::bUsePlayerKeyGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappings, ReturnValue) == 0x000020, "Member 'InputMappingManager_GetPlayerActionMappings::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.GetPlayerAxisMapping
// 0x0050 (0x0050 - 0x0000)
struct InputMappingManager_GetPlayerAxisMapping final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KeyGroup;                                          // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePlayerKeyGroup;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputAxisKeyMapping                   ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetPlayerAxisMapping) == 0x000008, "Wrong alignment on InputMappingManager_GetPlayerAxisMapping");
static_assert(sizeof(InputMappingManager_GetPlayerAxisMapping) == 0x000050, "Wrong size on InputMappingManager_GetPlayerAxisMapping");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMapping, Player) == 0x000000, "Member 'InputMappingManager_GetPlayerAxisMapping::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMapping, AxisName) == 0x000008, "Member 'InputMappingManager_GetPlayerAxisMapping::AxisName' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMapping, Scale) == 0x000010, "Member 'InputMappingManager_GetPlayerAxisMapping::Scale' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMapping, MappingGroup) == 0x000014, "Member 'InputMappingManager_GetPlayerAxisMapping::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMapping, KeyGroup) == 0x000018, "Member 'InputMappingManager_GetPlayerAxisMapping::KeyGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMapping, bUsePlayerKeyGroup) == 0x000020, "Member 'InputMappingManager_GetPlayerAxisMapping::bUsePlayerKeyGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMapping, ReturnValue) == 0x000028, "Member 'InputMappingManager_GetPlayerAxisMapping::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.GetPlayerAxisMappings
// 0x0038 (0x0038 - 0x0000)
struct InputMappingManager_GetPlayerAxisMappings final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KeyGroup;                                          // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePlayerKeyGroup;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0F[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInputAxisKeyMapping>           ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetPlayerAxisMappings) == 0x000008, "Wrong alignment on InputMappingManager_GetPlayerAxisMappings");
static_assert(sizeof(InputMappingManager_GetPlayerAxisMappings) == 0x000038, "Wrong size on InputMappingManager_GetPlayerAxisMappings");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappings, Player) == 0x000000, "Member 'InputMappingManager_GetPlayerAxisMappings::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappings, AxisName) == 0x000008, "Member 'InputMappingManager_GetPlayerAxisMappings::AxisName' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappings, Scale) == 0x000010, "Member 'InputMappingManager_GetPlayerAxisMappings::Scale' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappings, MappingGroup) == 0x000014, "Member 'InputMappingManager_GetPlayerAxisMappings::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappings, KeyGroup) == 0x000018, "Member 'InputMappingManager_GetPlayerAxisMappings::KeyGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappings, bUsePlayerKeyGroup) == 0x000020, "Member 'InputMappingManager_GetPlayerAxisMappings::bUsePlayerKeyGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappings, ReturnValue) == 0x000028, "Member 'InputMappingManager_GetPlayerAxisMappings::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.InputMappingManager.GetPlayerMappingsByKey
// 0x0040 (0x0040 - 0x0000)
struct InputMappingManager_GetPlayerMappingsByKey final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInputActionKeyMapping>         Actions;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInputAxisKeyMapping>           Axes;                                              // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetPlayerMappingsByKey) == 0x000008, "Wrong alignment on InputMappingManager_GetPlayerMappingsByKey");
static_assert(sizeof(InputMappingManager_GetPlayerMappingsByKey) == 0x000040, "Wrong size on InputMappingManager_GetPlayerMappingsByKey");
static_assert(offsetof(InputMappingManager_GetPlayerMappingsByKey, Player) == 0x000000, "Member 'InputMappingManager_GetPlayerMappingsByKey::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerMappingsByKey, Key) == 0x000008, "Member 'InputMappingManager_GetPlayerMappingsByKey::Key' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerMappingsByKey, Actions) == 0x000020, "Member 'InputMappingManager_GetPlayerMappingsByKey::Actions' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerMappingsByKey, Axes) == 0x000030, "Member 'InputMappingManager_GetPlayerMappingsByKey::Axes' has a wrong offset!");

// Function AutoSettingsInput.KeyLabel.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct KeyLabel_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_GetDisplayName) == 0x000008, "Wrong alignment on KeyLabel_GetDisplayName");
static_assert(sizeof(KeyLabel_GetDisplayName) == 0x000018, "Wrong size on KeyLabel_GetDisplayName");
static_assert(offsetof(KeyLabel_GetDisplayName, ReturnValue) == 0x000000, "Member 'KeyLabel_GetDisplayName::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.KeyLabel.GetDisplayNameVisibility
// 0x0001 (0x0001 - 0x0000)
struct KeyLabel_GetDisplayNameVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_GetDisplayNameVisibility) == 0x000001, "Wrong alignment on KeyLabel_GetDisplayNameVisibility");
static_assert(sizeof(KeyLabel_GetDisplayNameVisibility) == 0x000001, "Wrong size on KeyLabel_GetDisplayNameVisibility");
static_assert(offsetof(KeyLabel_GetDisplayNameVisibility, ReturnValue) == 0x000000, "Member 'KeyLabel_GetDisplayNameVisibility::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.KeyLabel.GetIcon
// 0x0008 (0x0008 - 0x0000)
struct KeyLabel_GetIcon final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_GetIcon) == 0x000008, "Wrong alignment on KeyLabel_GetIcon");
static_assert(sizeof(KeyLabel_GetIcon) == 0x000008, "Wrong size on KeyLabel_GetIcon");
static_assert(offsetof(KeyLabel_GetIcon, ReturnValue) == 0x000000, "Member 'KeyLabel_GetIcon::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.KeyLabel.GetIconBrush
// 0x00D0 (0x00D0 - 0x0000)
struct KeyLabel_GetIconBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_GetIconBrush) == 0x000010, "Wrong alignment on KeyLabel_GetIconBrush");
static_assert(sizeof(KeyLabel_GetIconBrush) == 0x0000D0, "Wrong size on KeyLabel_GetIconBrush");
static_assert(offsetof(KeyLabel_GetIconBrush, ReturnValue) == 0x000000, "Member 'KeyLabel_GetIconBrush::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.KeyLabel.GetIconVisibility
// 0x0001 (0x0001 - 0x0000)
struct KeyLabel_GetIconVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_GetIconVisibility) == 0x000001, "Wrong alignment on KeyLabel_GetIconVisibility");
static_assert(sizeof(KeyLabel_GetIconVisibility) == 0x000001, "Wrong size on KeyLabel_GetIconVisibility");
static_assert(offsetof(KeyLabel_GetIconVisibility, ReturnValue) == 0x000000, "Member 'KeyLabel_GetIconVisibility::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.KeyLabel.HasIcon
// 0x0001 (0x0001 - 0x0000)
struct KeyLabel_HasIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_HasIcon) == 0x000001, "Wrong alignment on KeyLabel_HasIcon");
static_assert(sizeof(KeyLabel_HasIcon) == 0x000001, "Wrong size on KeyLabel_HasIcon");
static_assert(offsetof(KeyLabel_HasIcon, ReturnValue) == 0x000000, "Member 'KeyLabel_HasIcon::ReturnValue' has a wrong offset!");

// Function AutoSettingsInput.KeyLabel.HasValidKey
// 0x0001 (0x0001 - 0x0000)
struct KeyLabel_HasValidKey final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_HasValidKey) == 0x000001, "Wrong alignment on KeyLabel_HasValidKey");
static_assert(sizeof(KeyLabel_HasValidKey) == 0x000001, "Wrong size on KeyLabel_HasValidKey");
static_assert(offsetof(KeyLabel_HasValidKey, ReturnValue) == 0x000000, "Member 'KeyLabel_HasValidKey::ReturnValue' has a wrong offset!");

}

