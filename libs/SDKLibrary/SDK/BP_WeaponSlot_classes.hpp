#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeaponSlot

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "S_WeaponSlot_structs.hpp"
#include "E_AttachmentType_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_WeaponSlots_structs.hpp"
#include "S_InvItem_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_WeaponSlot.BP_WeaponSlot_C
// 0x0150 (0x03C8 - 0x0278)
class UBP_WeaponSlot_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextBlock*                             AmountText;                                        // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_QuickSlotKey_C*                     BP_QuickSlotKey;                                   // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemBackround;                                     // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemIcon;                                          // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ItemNameText;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                SlotIconBorder;                                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SlotIconSizeBox;                                   // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SlotNameText;                                      // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Tint;                                              // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             SlotImage;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        SlotImageOpacity;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             SlotOccupiedImage;                                 // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          UseItemBackroundColor;                             // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DD1[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IconRotation;                                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShortNameCutOff;                                   // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DD2[0x4];                                     // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SlotIconSize;                                      // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WeaponSlots                                 WeaponSlotType;                                    // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DD3[0x7];                                     // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SlotName;                                          // 0x0310(0x0018)(Edit, BlueprintVisible)
	struct FS_InvItem                             LastWeaponItem;                                    // 0x0328(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	class UBP_ItemTooltip_C*                      Tooltip;                                           // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          MouseOver;                                         // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DD4[0x7];                                     // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SGKSettingsSaveData_C*              OptionsSave;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_WeaponSlot                          WeaponSlot;                                        // 0x0370(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	class UBP_PlayerInventory_C*                  PlayerInventory;                                   // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_BP_WeaponSlot(int32 EntryPoint);
	class FText GetItemName();
	void HideOverlay();
	void IsItemValid(bool* ItemValid);
	void LoadGameSettings();
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	struct FEventReply OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void PreConstruct(bool IsDesignTime);
	void SetBrush(class UTexture2D* Icon);
	void ShowGreenOverlay();
	void ShowRedOverlay();
	void UpdateCount();
	void UpdateCountBind();
	void UpdateWeaponItem(const struct FS_WeaponSlot& Param_WeaponSlot);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WeaponSlot_C">();
	}
	static class UBP_WeaponSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_WeaponSlot_C>();
	}
};
static_assert(alignof(UBP_WeaponSlot_C) == 0x000008, "Wrong alignment on UBP_WeaponSlot_C");
static_assert(sizeof(UBP_WeaponSlot_C) == 0x0003C8, "Wrong size on UBP_WeaponSlot_C");
static_assert(offsetof(UBP_WeaponSlot_C, UberGraphFrame) == 0x000278, "Member 'UBP_WeaponSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, AmountText) == 0x000280, "Member 'UBP_WeaponSlot_C::AmountText' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, BP_QuickSlotKey) == 0x000288, "Member 'UBP_WeaponSlot_C::BP_QuickSlotKey' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, ItemBackround) == 0x000290, "Member 'UBP_WeaponSlot_C::ItemBackround' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, ItemIcon) == 0x000298, "Member 'UBP_WeaponSlot_C::ItemIcon' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, ItemNameText) == 0x0002A0, "Member 'UBP_WeaponSlot_C::ItemNameText' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, SlotIconBorder) == 0x0002A8, "Member 'UBP_WeaponSlot_C::SlotIconBorder' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, SlotIconSizeBox) == 0x0002B0, "Member 'UBP_WeaponSlot_C::SlotIconSizeBox' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, SlotNameText) == 0x0002B8, "Member 'UBP_WeaponSlot_C::SlotNameText' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, Tint) == 0x0002C0, "Member 'UBP_WeaponSlot_C::Tint' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, SlotImage) == 0x0002C8, "Member 'UBP_WeaponSlot_C::SlotImage' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, SlotImageOpacity) == 0x0002D0, "Member 'UBP_WeaponSlot_C::SlotImageOpacity' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, SlotOccupiedImage) == 0x0002D8, "Member 'UBP_WeaponSlot_C::SlotOccupiedImage' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, UseItemBackroundColor) == 0x0002E0, "Member 'UBP_WeaponSlot_C::UseItemBackroundColor' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, IconRotation) == 0x0002E8, "Member 'UBP_WeaponSlot_C::IconRotation' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, ShortNameCutOff) == 0x0002F0, "Member 'UBP_WeaponSlot_C::ShortNameCutOff' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, SlotIconSize) == 0x0002F8, "Member 'UBP_WeaponSlot_C::SlotIconSize' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, WeaponSlotType) == 0x000308, "Member 'UBP_WeaponSlot_C::WeaponSlotType' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, SlotName) == 0x000310, "Member 'UBP_WeaponSlot_C::SlotName' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, LastWeaponItem) == 0x000328, "Member 'UBP_WeaponSlot_C::LastWeaponItem' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, Tooltip) == 0x000358, "Member 'UBP_WeaponSlot_C::Tooltip' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, MouseOver) == 0x000360, "Member 'UBP_WeaponSlot_C::MouseOver' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, OptionsSave) == 0x000368, "Member 'UBP_WeaponSlot_C::OptionsSave' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, WeaponSlot) == 0x000370, "Member 'UBP_WeaponSlot_C::WeaponSlot' has a wrong offset!");
static_assert(offsetof(UBP_WeaponSlot_C, PlayerInventory) == 0x0003C0, "Member 'UBP_WeaponSlot_C::PlayerInventory' has a wrong offset!");

}

