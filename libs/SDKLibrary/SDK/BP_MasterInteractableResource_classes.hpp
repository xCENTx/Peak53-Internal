#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterInteractableResource

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_WorldActions_structs.hpp"
#include "BP_MasterResource_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterInteractableResource.BP_MasterInteractableResource_C
// 0x0040 (0x0388 - 0x0348)
class ABP_MasterInteractableResource_C final : public ABP_MasterResource_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MasterInteractableResource_C;    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FText                                   ActionText;                                        // 0x0350(0x0018)(Edit, BlueprintVisible)
	class FText                                   InteractName;                                      // 0x0368(0x0018)(Edit, BlueprintVisible)
	class UAnimMontage*                           InteractAnimation;                                 // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MasterInteractableResource(int32 EntryPoint);
	void SGK_AllowInteraction(bool* AllowInteraction);
	void SGK_CodeCheck(const class FText& Code, bool* CodeAccepted);
	bool SGK_DropItem(const struct FS_InvItem& InvItem, bool Dropped, bool Spawned, bool SaveLoaded);
	bool SGK_EndInteraction(class UBP_PlayerInventory_C* PlayerInventory);
	void SGK_GetVerifiedPlayers(TArray<class FText>* VerifiedPlayers);
	bool SGK_Interact(class UBP_PlayerInventory_C* PlayerInventory, E_WorldActions Action);
	void SGK_InteractName(class FText* Param_InteractName);
	void SGK_InvItem(bool* IsItem, struct FS_InvItem* InvItem);
	void SGK_ItemAmount(int32* Amount);
	void SGK_Mesh(class UPrimitiveComponent** Mesh);
	void SGK_PlayerInProximity();
	void SGK_PlayerOutProximity();
	void SGK_PossibleActions(class UBP_PlayerInventory_C* PlayerInventory, bool* ActionsFound, TArray<struct FS_WorldAction>* PossibleActions);
	void SGK_SetVerifiedPlayers(TArray<class FText>& VerifiedPlayers);
	void SGK_TurnedOnEffect(bool TurnedOn);
	bool SGK_UpdateCode(const class FText& Code);
	bool SGK_VerifyPlayer(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterInteractableResource_C">();
	}
	static class ABP_MasterInteractableResource_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MasterInteractableResource_C>();
	}
};
static_assert(alignof(ABP_MasterInteractableResource_C) == 0x000008, "Wrong alignment on ABP_MasterInteractableResource_C");
static_assert(sizeof(ABP_MasterInteractableResource_C) == 0x000388, "Wrong size on ABP_MasterInteractableResource_C");
static_assert(offsetof(ABP_MasterInteractableResource_C, UberGraphFrame_BP_MasterInteractableResource_C) == 0x000348, "Member 'ABP_MasterInteractableResource_C::UberGraphFrame_BP_MasterInteractableResource_C' has a wrong offset!");
static_assert(offsetof(ABP_MasterInteractableResource_C, ActionText) == 0x000350, "Member 'ABP_MasterInteractableResource_C::ActionText' has a wrong offset!");
static_assert(offsetof(ABP_MasterInteractableResource_C, InteractName) == 0x000368, "Member 'ABP_MasterInteractableResource_C::InteractName' has a wrong offset!");
static_assert(offsetof(ABP_MasterInteractableResource_C, InteractAnimation) == 0x000380, "Member 'ABP_MasterInteractableResource_C::InteractAnimation' has a wrong offset!");

}

