#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AmmoCounter

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "E_FireModes_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_AmmoCounter.BP_AmmoCounter_C
// 0x02D8 (0x0550 - 0x0278)
class UBP_AmmoCounter_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                Backround;                                         // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_41;                                          // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Name_BP_AmmoCounter_C;                             // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock;                                         // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_1;                                       // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_PlayerInventory_C*                  PlayerInventory;                                   // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_MasterRangeWeapon_C*                CurrentHoldable;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BackroundColor;                                    // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B5F[0x8];                                     // 0x02C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            SingleFireBrush;                                   // 0x02D0(0x00D0)(Edit, BlueprintVisible)
	struct FSlateBrush                            BurstFireBrush;                                    // 0x03A0(0x00D0)(Edit, BlueprintVisible)
	struct FSlateBrush                            AutoFireBrush;                                     // 0x0470(0x00D0)(Edit, BlueprintVisible)
	bool                                          NewVar_0;                                          // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_BP_AmmoCounter(int32 EntryPoint);
	ESlateVisibility GetVisibility_0();
	void PreConstruct(bool IsDesignTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AmmoCounter_C">();
	}
	static class UBP_AmmoCounter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AmmoCounter_C>();
	}
};
static_assert(alignof(UBP_AmmoCounter_C) == 0x000010, "Wrong alignment on UBP_AmmoCounter_C");
static_assert(sizeof(UBP_AmmoCounter_C) == 0x000550, "Wrong size on UBP_AmmoCounter_C");
static_assert(offsetof(UBP_AmmoCounter_C, UberGraphFrame) == 0x000278, "Member 'UBP_AmmoCounter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AmmoCounter_C, Backround) == 0x000280, "Member 'UBP_AmmoCounter_C::Backround' has a wrong offset!");
static_assert(offsetof(UBP_AmmoCounter_C, Image_41) == 0x000288, "Member 'UBP_AmmoCounter_C::Image_41' has a wrong offset!");
static_assert(offsetof(UBP_AmmoCounter_C, Name_BP_AmmoCounter_C) == 0x000290, "Member 'UBP_AmmoCounter_C::Name_BP_AmmoCounter_C' has a wrong offset!");
static_assert(offsetof(UBP_AmmoCounter_C, TextBlock) == 0x000298, "Member 'UBP_AmmoCounter_C::TextBlock' has a wrong offset!");
static_assert(offsetof(UBP_AmmoCounter_C, TextBlock_1) == 0x0002A0, "Member 'UBP_AmmoCounter_C::TextBlock_1' has a wrong offset!");
static_assert(offsetof(UBP_AmmoCounter_C, PlayerInventory) == 0x0002A8, "Member 'UBP_AmmoCounter_C::PlayerInventory' has a wrong offset!");
static_assert(offsetof(UBP_AmmoCounter_C, CurrentHoldable) == 0x0002B0, "Member 'UBP_AmmoCounter_C::CurrentHoldable' has a wrong offset!");
static_assert(offsetof(UBP_AmmoCounter_C, BackroundColor) == 0x0002B8, "Member 'UBP_AmmoCounter_C::BackroundColor' has a wrong offset!");
static_assert(offsetof(UBP_AmmoCounter_C, SingleFireBrush) == 0x0002D0, "Member 'UBP_AmmoCounter_C::SingleFireBrush' has a wrong offset!");
static_assert(offsetof(UBP_AmmoCounter_C, BurstFireBrush) == 0x0003A0, "Member 'UBP_AmmoCounter_C::BurstFireBrush' has a wrong offset!");
static_assert(offsetof(UBP_AmmoCounter_C, AutoFireBrush) == 0x000470, "Member 'UBP_AmmoCounter_C::AutoFireBrush' has a wrong offset!");
static_assert(offsetof(UBP_AmmoCounter_C, NewVar_0) == 0x000540, "Member 'UBP_AmmoCounter_C::NewVar_0' has a wrong offset!");

}

