#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AutoSettings

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "UMG_classes.hpp"
#include "AutoSettings_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class AutoSettings.AutoSettingsConfig
// 0x0020 (0x0058 - 0x0038)
class UAutoSettingsConfig final : public UDeveloperSettings
{
public:
	class FString                                 SettingsIniName;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SettingsSectionName;                               // 0x0048(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutoSettingsConfig">();
	}
	static class UAutoSettingsConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutoSettingsConfig>();
	}
};
static_assert(alignof(UAutoSettingsConfig) == 0x000008, "Wrong alignment on UAutoSettingsConfig");
static_assert(sizeof(UAutoSettingsConfig) == 0x000058, "Wrong size on UAutoSettingsConfig");
static_assert(offsetof(UAutoSettingsConfig, SettingsIniName) == 0x000038, "Member 'UAutoSettingsConfig::SettingsIniName' has a wrong offset!");
static_assert(offsetof(UAutoSettingsConfig, SettingsSectionName) == 0x000048, "Member 'UAutoSettingsConfig::SettingsSectionName' has a wrong offset!");

// Class AutoSettings.AutoSettingWidget
// 0x0050 (0x02C8 - 0x0278)
class UAutoSettingWidget : public UUserWidget
{
public:
	class FName                                   CVarName;                                          // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USettingValueMask>          ValueMask;                                         // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSave;                                         // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoApply;                                        // 0x0289(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ACC[0x6];                                     // 0x028A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SettingTags;                                       // 0x0290(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 CurrentValue;                                      // 0x02B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasUnappliedChange;                               // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasUnsavedChange;                                 // 0x02C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUpdatingSettingSelection;                         // 0x02C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2ACD[0x5];                                     // 0x02C3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Apply();
	void ApplySettingValue(const class FString& Value, bool bSaveIfPossible);
	void Cancel();
	void Save();
	void UpdateSelection(const class FString& Value);

	bool HasUnappliedChange() const;
	bool HasUnsavedChange() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutoSettingWidget">();
	}
	static class UAutoSettingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutoSettingWidget>();
	}
};
static_assert(alignof(UAutoSettingWidget) == 0x000008, "Wrong alignment on UAutoSettingWidget");
static_assert(sizeof(UAutoSettingWidget) == 0x0002C8, "Wrong size on UAutoSettingWidget");
static_assert(offsetof(UAutoSettingWidget, CVarName) == 0x000278, "Member 'UAutoSettingWidget::CVarName' has a wrong offset!");
static_assert(offsetof(UAutoSettingWidget, ValueMask) == 0x000280, "Member 'UAutoSettingWidget::ValueMask' has a wrong offset!");
static_assert(offsetof(UAutoSettingWidget, bAutoSave) == 0x000288, "Member 'UAutoSettingWidget::bAutoSave' has a wrong offset!");
static_assert(offsetof(UAutoSettingWidget, bAutoApply) == 0x000289, "Member 'UAutoSettingWidget::bAutoApply' has a wrong offset!");
static_assert(offsetof(UAutoSettingWidget, SettingTags) == 0x000290, "Member 'UAutoSettingWidget::SettingTags' has a wrong offset!");
static_assert(offsetof(UAutoSettingWidget, CurrentValue) == 0x0002B0, "Member 'UAutoSettingWidget::CurrentValue' has a wrong offset!");
static_assert(offsetof(UAutoSettingWidget, bHasUnappliedChange) == 0x0002C0, "Member 'UAutoSettingWidget::bHasUnappliedChange' has a wrong offset!");
static_assert(offsetof(UAutoSettingWidget, bHasUnsavedChange) == 0x0002C1, "Member 'UAutoSettingWidget::bHasUnsavedChange' has a wrong offset!");
static_assert(offsetof(UAutoSettingWidget, bUpdatingSettingSelection) == 0x0002C2, "Member 'UAutoSettingWidget::bUpdatingSettingSelection' has a wrong offset!");

// Class AutoSettings.ToggleSetting
// 0x0000 (0x02C8 - 0x02C8)
class UToggleSetting : public UAutoSettingWidget
{
public:
	void ToggleStateUpdated(bool State);
	void UpdateToggleState(bool State);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ToggleSetting">();
	}
	static class UToggleSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UToggleSetting>();
	}
};
static_assert(alignof(UToggleSetting) == 0x000008, "Wrong alignment on UToggleSetting");
static_assert(sizeof(UToggleSetting) == 0x0002C8, "Wrong size on UToggleSetting");

// Class AutoSettings.CheckBoxSetting
// 0x0008 (0x02D0 - 0x02C8)
class UCheckBoxSetting : public UToggleSetting
{
public:
	class UCheckBox*                              CheckBox;                                          // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CheckBoxStateChanged(bool IsChecked);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheckBoxSetting">();
	}
	static class UCheckBoxSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheckBoxSetting>();
	}
};
static_assert(alignof(UCheckBoxSetting) == 0x000008, "Wrong alignment on UCheckBoxSetting");
static_assert(sizeof(UCheckBoxSetting) == 0x0002D0, "Wrong size on UCheckBoxSetting");
static_assert(offsetof(UCheckBoxSetting, CheckBox) == 0x0002C8, "Member 'UCheckBoxSetting::CheckBox' has a wrong offset!");

// Class AutoSettings.SelectSetting
// 0x0020 (0x02E8 - 0x02C8)
class USelectSetting : public UAutoSettingWidget
{
public:
	TArray<struct FSettingOption>                 Options;                                           // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class USettingOptionFactory>      OptionFactory;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdatingSettingOptions;                           // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2ACF[0x7];                                     // 0x02E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RegenerateOptions();
	void UpdateOptions(const TArray<struct FSettingOption>& InOptions);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SelectSetting">();
	}
	static class USelectSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<USelectSetting>();
	}
};
static_assert(alignof(USelectSetting) == 0x000008, "Wrong alignment on USelectSetting");
static_assert(sizeof(USelectSetting) == 0x0002E8, "Wrong size on USelectSetting");
static_assert(offsetof(USelectSetting, Options) == 0x0002C8, "Member 'USelectSetting::Options' has a wrong offset!");
static_assert(offsetof(USelectSetting, OptionFactory) == 0x0002D8, "Member 'USelectSetting::OptionFactory' has a wrong offset!");
static_assert(offsetof(USelectSetting, bUpdatingSettingOptions) == 0x0002E0, "Member 'USelectSetting::bUpdatingSettingOptions' has a wrong offset!");

// Class AutoSettings.ComboBoxSetting
// 0x0008 (0x02F0 - 0x02E8)
class UComboBoxSetting : public USelectSetting
{
public:
	class UComboBoxString*                        ComboBox;                                          // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ComboBoxSelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ComboBoxSetting">();
	}
	static class UComboBoxSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComboBoxSetting>();
	}
};
static_assert(alignof(UComboBoxSetting) == 0x000008, "Wrong alignment on UComboBoxSetting");
static_assert(sizeof(UComboBoxSetting) == 0x0002F0, "Wrong size on UComboBoxSetting");
static_assert(offsetof(UComboBoxSetting, ComboBox) == 0x0002E8, "Member 'UComboBoxSetting::ComboBox' has a wrong offset!");

// Class AutoSettings.ConsoleUtils
// 0x0000 (0x0028 - 0x0028)
class UConsoleUtils final : public UBlueprintFunctionLibrary
{
public:
	static bool GetBoolCVar(class FName Param_Name);
	static float GetFloatCVar(class FName Param_Name);
	static int32 GetIntCVar(class FName Param_Name);
	static class FString GetStringCVar(class FName Param_Name);
	static bool IsCVarRegistered(class FName Param_Name);
	static void SetBoolCVar(class FName Param_Name, bool Value);
	static void SetFloatCVar(class FName Param_Name, float Value);
	static void SetIntCVar(class FName Param_Name, int32 Value);
	static void SetStringCVar(class FName Param_Name, const class FString& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ConsoleUtils">();
	}
	static class UConsoleUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConsoleUtils>();
	}
};
static_assert(alignof(UConsoleUtils) == 0x000008, "Wrong alignment on UConsoleUtils");
static_assert(sizeof(UConsoleUtils) == 0x000028, "Wrong size on UConsoleUtils");

// Class AutoSettings.CVarChangeListener
// 0x0058 (0x0080 - 0x0028)
class UCVarChangeListener final : public UObject
{
public:
	uint8                                         Pad_2AD4[0x58];                                    // 0x0028(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CVarChangeListener">();
	}
	static class UCVarChangeListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCVarChangeListener>();
	}
};
static_assert(alignof(UCVarChangeListener) == 0x000008, "Wrong alignment on UCVarChangeListener");
static_assert(sizeof(UCVarChangeListener) == 0x000080, "Wrong size on UCVarChangeListener");

// Class AutoSettings.CVarChangeListenerManager
// 0x0050 (0x0078 - 0x0028)
class UCVarChangeListenerManager final : public UObject
{
public:
	TMap<class FName, class UCVarChangeListener*> Listeners;                                         // 0x0028(0x0050)(NativeAccessSpecifierPrivate)

public:
	static void AddBoolCVarCallbackStatic(class FName Param_Name, TDelegate<void(bool NewValue)> ChangedCallback, bool CallbackImmediately);
	static void AddFloatCVarCallbackStatic(class FName Param_Name, TDelegate<void(float NewValue)> ChangedCallback, bool CallbackImmediately);
	static void AddIntCVarCallbackStatic(class FName Param_Name, TDelegate<void(int32 NewValue)> ChangedCallback, bool CallbackImmediately);
	static void AddStringCVarCallbackStatic(class FName Param_Name, TDelegate<void(const class FString& NewValue)> ChangedCallback, bool CallbackImmediately);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CVarChangeListenerManager">();
	}
	static class UCVarChangeListenerManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCVarChangeListenerManager>();
	}
};
static_assert(alignof(UCVarChangeListenerManager) == 0x000008, "Wrong alignment on UCVarChangeListenerManager");
static_assert(sizeof(UCVarChangeListenerManager) == 0x000078, "Wrong size on UCVarChangeListenerManager");
static_assert(offsetof(UCVarChangeListenerManager, Listeners) == 0x000028, "Member 'UCVarChangeListenerManager::Listeners' has a wrong offset!");

// Class AutoSettings.SliderSetting
// 0x0008 (0x02D0 - 0x02C8)
class USliderSetting : public UAutoSettingWidget
{
public:
	float                                         LeftValue;                                         // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightValue;                                        // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnSliderValueUpdated(float NormalizedValue, float RawValue);
	void SliderValueUpdated(float NormalizedValue);
	void UpdateSliderValue(float NormalizedValue, float RawValue);

	float ClampRawValue(float RawValue) const;
	float NormalizedValueToRaw(float NormalizedValue) const;
	float RawValueToNormalized(float RawValue) const;
	bool ShouldSaveCurrentValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SliderSetting">();
	}
	static class USliderSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<USliderSetting>();
	}
};
static_assert(alignof(USliderSetting) == 0x000008, "Wrong alignment on USliderSetting");
static_assert(sizeof(USliderSetting) == 0x0002D0, "Wrong size on USliderSetting");
static_assert(offsetof(USliderSetting, LeftValue) == 0x0002C8, "Member 'USliderSetting::LeftValue' has a wrong offset!");
static_assert(offsetof(USliderSetting, RightValue) == 0x0002CC, "Member 'USliderSetting::RightValue' has a wrong offset!");

// Class AutoSettings.NativeSliderSetting
// 0x0010 (0x02E0 - 0x02D0)
class UNativeSliderSetting : public USliderSetting
{
public:
	class USlider*                                Slider;                                            // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMouseCaptureInProgress;                           // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2AD9[0x7];                                     // 0x02D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SliderMouseCaptureBegin();
	void SliderMouseCaptureEnd();
	void SliderValueChanged(float NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NativeSliderSetting">();
	}
	static class UNativeSliderSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNativeSliderSetting>();
	}
};
static_assert(alignof(UNativeSliderSetting) == 0x000008, "Wrong alignment on UNativeSliderSetting");
static_assert(sizeof(UNativeSliderSetting) == 0x0002E0, "Wrong size on UNativeSliderSetting");
static_assert(offsetof(UNativeSliderSetting, Slider) == 0x0002D0, "Member 'UNativeSliderSetting::Slider' has a wrong offset!");
static_assert(offsetof(UNativeSliderSetting, bMouseCaptureInProgress) == 0x0002D8, "Member 'UNativeSliderSetting::bMouseCaptureInProgress' has a wrong offset!");

// Class AutoSettings.RadioButton
// 0x0040 (0x02B8 - 0x0278)
class URadioButton : public UUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnSelected;                                        // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FText                                   Label;                                             // 0x0288(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	class FString                                 Value;                                             // 0x02A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Selected;                                          // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2ADA[0x7];                                     // 0x02B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLabel(const class FText& InLabel);
	void SetSelected(bool InSelected);
	void SetValue(const class FString& InValue);
	void TriggerSelection();
	void UpdateLabel(const class FText& InLabel);
	void UpdateSelected(bool InSelected);

	class FText GetLabel() const;
	bool GetSelected() const;
	class FString GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RadioButton">();
	}
	static class URadioButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<URadioButton>();
	}
};
static_assert(alignof(URadioButton) == 0x000008, "Wrong alignment on URadioButton");
static_assert(sizeof(URadioButton) == 0x0002B8, "Wrong size on URadioButton");
static_assert(offsetof(URadioButton, OnSelected) == 0x000278, "Member 'URadioButton::OnSelected' has a wrong offset!");
static_assert(offsetof(URadioButton, Label) == 0x000288, "Member 'URadioButton::Label' has a wrong offset!");
static_assert(offsetof(URadioButton, Value) == 0x0002A0, "Member 'URadioButton::Value' has a wrong offset!");
static_assert(offsetof(URadioButton, Selected) == 0x0002B0, "Member 'URadioButton::Selected' has a wrong offset!");

// Class AutoSettings.RadioSelect
// 0x0040 (0x02B8 - 0x0278)
class URadioSelect : public UUserWidget
{
public:
	TArray<struct FSettingOption>                 Options;                                           // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class URadioButton>               RadioButtonClass;                                  // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SelectionChangedEvent;                             // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UPanelWidget*                           ButtonContainer;                                   // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class URadioButton*>                   RadioButtons;                                      // 0x02A8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void ButtonSelected(const class FString& Value);
	void OnButtonCreated(class URadioButton* Button, class UPanelSlot* NewSlot);
	void Select(const class FString& Value);
	void SetOptions(const TArray<struct FSettingOption>& InOptions);

	TArray<struct FSettingOption> GetOptions() const;
	TArray<class URadioButton*> GetRadioButtonWidgets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RadioSelect">();
	}
	static class URadioSelect* GetDefaultObj()
	{
		return GetDefaultObjImpl<URadioSelect>();
	}
};
static_assert(alignof(URadioSelect) == 0x000008, "Wrong alignment on URadioSelect");
static_assert(sizeof(URadioSelect) == 0x0002B8, "Wrong size on URadioSelect");
static_assert(offsetof(URadioSelect, Options) == 0x000278, "Member 'URadioSelect::Options' has a wrong offset!");
static_assert(offsetof(URadioSelect, RadioButtonClass) == 0x000288, "Member 'URadioSelect::RadioButtonClass' has a wrong offset!");
static_assert(offsetof(URadioSelect, SelectionChangedEvent) == 0x000290, "Member 'URadioSelect::SelectionChangedEvent' has a wrong offset!");
static_assert(offsetof(URadioSelect, ButtonContainer) == 0x0002A0, "Member 'URadioSelect::ButtonContainer' has a wrong offset!");
static_assert(offsetof(URadioSelect, RadioButtons) == 0x0002A8, "Member 'URadioSelect::RadioButtons' has a wrong offset!");

// Class AutoSettings.RadioSelectSetting
// 0x0010 (0x02F8 - 0x02E8)
class URadioSelectSetting : public USelectSetting
{
public:
	TSubclassOf<class URadioButton>               RadioButtonClass;                                  // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URadioSelect*                           RadioSelect;                                       // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void RadioSelectionChanged(const class FString& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RadioSelectSetting">();
	}
	static class URadioSelectSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<URadioSelectSetting>();
	}
};
static_assert(alignof(URadioSelectSetting) == 0x000008, "Wrong alignment on URadioSelectSetting");
static_assert(sizeof(URadioSelectSetting) == 0x0002F8, "Wrong size on URadioSelectSetting");
static_assert(offsetof(URadioSelectSetting, RadioButtonClass) == 0x0002E8, "Member 'URadioSelectSetting::RadioButtonClass' has a wrong offset!");
static_assert(offsetof(URadioSelectSetting, RadioSelect) == 0x0002F0, "Member 'URadioSelectSetting::RadioSelect' has a wrong offset!");

// Class AutoSettings.SettingOptionFactory
// 0x0000 (0x0028 - 0x0028)
class USettingOptionFactory : public UObject
{
public:
	TArray<struct FSettingOption> ConstructOptions() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingOptionFactory">();
	}
	static class USettingOptionFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingOptionFactory>();
	}
};
static_assert(alignof(USettingOptionFactory) == 0x000008, "Wrong alignment on USettingOptionFactory");
static_assert(sizeof(USettingOptionFactory) == 0x000028, "Wrong size on USettingOptionFactory");

// Class AutoSettings.ResolutionOptionFactory
// 0x0000 (0x0028 - 0x0028)
class UResolutionOptionFactory final : public USettingOptionFactory
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ResolutionOptionFactory">();
	}
	static class UResolutionOptionFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResolutionOptionFactory>();
	}
};
static_assert(alignof(UResolutionOptionFactory) == 0x000008, "Wrong alignment on UResolutionOptionFactory");
static_assert(sizeof(UResolutionOptionFactory) == 0x000028, "Wrong size on UResolutionOptionFactory");

// Class AutoSettings.ResolutionStringUtils
// 0x0000 (0x0028 - 0x0028)
class UResolutionStringUtils final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ResolutionStringUtils">();
	}
	static class UResolutionStringUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResolutionStringUtils>();
	}
};
static_assert(alignof(UResolutionStringUtils) == 0x000008, "Wrong alignment on UResolutionStringUtils");
static_assert(sizeof(UResolutionStringUtils) == 0x000028, "Wrong size on UResolutionStringUtils");

// Class AutoSettings.SettingValueMask
// 0x0000 (0x0028 - 0x0028)
class USettingValueMask : public UObject
{
public:
	class FString MaskValue(const class FString& ConsoleValue) const;
	class FString RecombineValues(const class FString& SettingValue, const class FString& ConsoleValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingValueMask">();
	}
	static class USettingValueMask* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingValueMask>();
	}
};
static_assert(alignof(USettingValueMask) == 0x000008, "Wrong alignment on USettingValueMask");
static_assert(sizeof(USettingValueMask) == 0x000028, "Wrong size on USettingValueMask");

// Class AutoSettings.ResolutionValueMask
// 0x0000 (0x0028 - 0x0028)
class UResolutionValueMask final : public USettingValueMask
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ResolutionValueMask">();
	}
	static class UResolutionValueMask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResolutionValueMask>();
	}
};
static_assert(alignof(UResolutionValueMask) == 0x000008, "Wrong alignment on UResolutionValueMask");
static_assert(sizeof(UResolutionValueMask) == 0x000028, "Wrong size on UResolutionValueMask");

// Class AutoSettings.SettingContainerUtils
// 0x0000 (0x0028 - 0x0028)
class USettingContainerUtils final : public UBlueprintFunctionLibrary
{
public:
	static void ApplyChildSettings(class UUserWidget* UserWidget, class UWidget* Parent);
	static void CancelChildSettings(class UUserWidget* UserWidget, class UWidget* Parent);
	static bool DoesAnyChildSettingHaveUnappliedChange(class UUserWidget* UserWidget, class UWidget* Parent);
	static bool DoesAnyChildSettingHaveUnsavedChange(class UUserWidget* UserWidget, class UWidget* Parent);
	static TArray<class UAutoSettingWidget*> GetChildSettings(class UUserWidget* UserWidget, class UWidget* Parent);
	static void SaveChildSettings(class UUserWidget* UserWidget, class UWidget* Parent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingContainerUtils">();
	}
	static class USettingContainerUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingContainerUtils>();
	}
};
static_assert(alignof(USettingContainerUtils) == 0x000008, "Wrong alignment on USettingContainerUtils");
static_assert(sizeof(USettingContainerUtils) == 0x000028, "Wrong size on USettingContainerUtils");

// Class AutoSettings.SettingsManager
// 0x0020 (0x0050 - 0x0030)
class USettingsManager final : public UEngineSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnSettingSaved;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 IniFilename;                                       // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static void ApplySettingStatic(const struct FAutoSettingData& SettingData);
	static void AutoDetectSettingsStatic(int32 WorkScale, float CPUMultiplier, float GPUMultiplier);
	static class FString GetValue(class FName Key, bool bPreferConfigValue);
	static void RegisterBoolCVarSetting(class FName Param_Name, bool DefaultValue, const class FString& Help);
	static void RegisterBoolCVarSettingWithCallback(class FName Param_Name, bool DefaultValue, const class FString& Help, TDelegate<void(bool NewValue)> ChangedCallback, bool CallbackImmediately);
	static void RegisterFloatCVarSetting(class FName Param_Name, float DefaultValue, const class FString& Help);
	static void RegisterFloatCVarSettingWithCallback(class FName Param_Name, float DefaultValue, const class FString& Help, TDelegate<void(float NewValue)> ChangedCallback, bool CallbackImmediately);
	static void RegisterIntCVarSetting(class FName Param_Name, int32 DefaultValue, const class FString& Help);
	static void RegisterIntCVarSettingWithCallback(class FName Param_Name, int32 DefaultValue, const class FString& Help, TDelegate<void(int32 NewValue)> ChangedCallback, bool CallbackImmediately);
	static void RegisterStringCVarSetting(class FName Param_Name, const class FString& DefaultValue, const class FString& Help);
	static void RegisterStringCVarSettingWithCallback(class FName Param_Name, const class FString& DefaultValue, const class FString& Help, TDelegate<void(const class FString& NewValue)> ChangedCallback, bool CallbackImmediately);
	static void SaveSettingStatic(const struct FAutoSettingData& SettingData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingsManager">();
	}
	static class USettingsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingsManager>();
	}
};
static_assert(alignof(USettingsManager) == 0x000008, "Wrong alignment on USettingsManager");
static_assert(sizeof(USettingsManager) == 0x000050, "Wrong size on USettingsManager");
static_assert(offsetof(USettingsManager, OnSettingSaved) == 0x000030, "Member 'USettingsManager::OnSettingSaved' has a wrong offset!");
static_assert(offsetof(USettingsManager, IniFilename) == 0x000040, "Member 'USettingsManager::IniFilename' has a wrong offset!");

// Class AutoSettings.Spinner
// 0x0030 (0x02A8 - 0x0278)
class USpinner : public UUserWidget
{
public:
	TArray<struct FSettingOption>                 Options;                                           // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAllowWrapping;                                    // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE8[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             SelectionChangedEvent;                             // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AE9[0x8];                                     // 0x02A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Next();
	void OnSelectionChanged(const struct FSettingOption& SelectedOption);
	void Previous();
	void SelectIndex(int32 Param_Index);
	void SelectValue(const class FString& Value);

	int32 GetCurrentIndex() const;
	struct FSettingOption GetCurrentOption() const;
	bool HasValidNext() const;
	bool HasValidPrevious() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Spinner">();
	}
	static class USpinner* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpinner>();
	}
};
static_assert(alignof(USpinner) == 0x000008, "Wrong alignment on USpinner");
static_assert(sizeof(USpinner) == 0x0002A8, "Wrong size on USpinner");
static_assert(offsetof(USpinner, Options) == 0x000278, "Member 'USpinner::Options' has a wrong offset!");
static_assert(offsetof(USpinner, bAllowWrapping) == 0x000288, "Member 'USpinner::bAllowWrapping' has a wrong offset!");
static_assert(offsetof(USpinner, SelectionChangedEvent) == 0x000290, "Member 'USpinner::SelectionChangedEvent' has a wrong offset!");

// Class AutoSettings.SpinnerSetting
// 0x0008 (0x02F0 - 0x02E8)
class USpinnerSetting : public USelectSetting
{
public:
	class USpinner*                               Spinner;                                           // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SpinnerSelectionChanged(const class FString& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpinnerSetting">();
	}
	static class USpinnerSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpinnerSetting>();
	}
};
static_assert(alignof(USpinnerSetting) == 0x000008, "Wrong alignment on USpinnerSetting");
static_assert(sizeof(USpinnerSetting) == 0x0002F0, "Wrong size on USpinnerSetting");
static_assert(offsetof(USpinnerSetting, Spinner) == 0x0002E8, "Member 'USpinnerSetting::Spinner' has a wrong offset!");

// Class AutoSettings.WindowModeValueMask
// 0x0000 (0x0028 - 0x0028)
class UWindowModeValueMask final : public USettingValueMask
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindowModeValueMask">();
	}
	static class UWindowModeValueMask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindowModeValueMask>();
	}
};
static_assert(alignof(UWindowModeValueMask) == 0x000008, "Wrong alignment on UWindowModeValueMask");
static_assert(sizeof(UWindowModeValueMask) == 0x000028, "Wrong size on UWindowModeValueMask");

}

