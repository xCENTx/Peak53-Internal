#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VaultIt

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum VaultIt.EVIFBIKUpdateType
// NumValues: 0x0003
enum class EVIFBIKUpdateType : uint8
{
	FUT_Single                               = 0,
	FUT_Tick                                 = 1,
	FUT_MAX                                  = 2,
};

// Enum VaultIt.EVIFBIKUpdateRole
// NumValues: 0x0004
enum class EVIFBIKUpdateRole : uint8
{
	FUR_All                                  = 0,
	FUR_LocalOnly                            = 1,
	FUR_SimulatedOnly                        = 2,
	FUR_MAX                                  = 3,
};

// Enum VaultIt.EVIFBIKTraceType
// NumValues: 0x0004
enum class EVIFBIKTraceType : uint8
{
	FTT_Simple                               = 0,
	FTT_Complex                              = 1,
	FTT_ComplexLocalOnly                     = 2,
	FTT_MAX                                  = 3,
};

// Enum VaultIt.EVIVaultInputRelease
// NumValues: 0x0004
enum class EVIVaultInputRelease : uint8
{
	VIR_Always                               = 0,
	VIR_OnSuccess                            = 1,
	VIR_Never                                = 2,
	VIR_MAX                                  = 3,
};

// Enum VaultIt.EVIAutoVault
// NumValues: 0x0007
enum class EVIAutoVault : uint8
{
	VIAV_None                                = 0,
	VIAV_Walking                             = 2,
	VIAV_Falling                             = 4,
	VIAV_Swimming                            = 8,
	VIAV_Flying                              = 16,
	VIAV_Custom                              = 32,
	VIAV_MAX                                 = 33,
};

// Enum VaultIt.EVIAntiCheatType
// NumValues: 0x0004
enum class EVIAntiCheatType : uint8
{
	VIACT_None                               = 0,
	VIACT_Enabled                            = 1,
	VIACT_Custom                             = 2,
	VIACT_MAX                                = 3,
};

// Enum VaultIt.EVIJumpKeyPriority
// NumValues: 0x0005
enum class EVIJumpKeyPriority : uint8
{
	JKP_DisableVault                         = 0,
	JKP_SelectHighestPoint                   = 1,
	JKP_AlwaysVault                          = 2,
	JKP_OnlyVaultFromAir                     = 3,
	JKP_MAX                                  = 255,
};

// Enum VaultIt.EVIGameplayEffectReplicationMode
// NumValues: 0x0004
enum class EVIGameplayEffectReplicationMode : uint8
{
	Minimal                                  = 0,
	Mixed                                    = 1,
	Full                                     = 2,
	EVIGameplayEffectReplicationMode_MAX     = 3,
};

// ScriptStruct VaultIt.VIGameplayAbilityLocalAnimMontageForMesh
// 0x0038 (0x0038 - 0x0000)
struct FVIGameplayAbilityLocalAnimMontageForMesh final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityLocalAnimMontage       LocalMontageInfo;                                  // 0x0008(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVIGameplayAbilityLocalAnimMontageForMesh) == 0x000008, "Wrong alignment on FVIGameplayAbilityLocalAnimMontageForMesh");
static_assert(sizeof(FVIGameplayAbilityLocalAnimMontageForMesh) == 0x000038, "Wrong size on FVIGameplayAbilityLocalAnimMontageForMesh");
static_assert(offsetof(FVIGameplayAbilityLocalAnimMontageForMesh, Mesh) == 0x000000, "Member 'FVIGameplayAbilityLocalAnimMontageForMesh::Mesh' has a wrong offset!");
static_assert(offsetof(FVIGameplayAbilityLocalAnimMontageForMesh, LocalMontageInfo) == 0x000008, "Member 'FVIGameplayAbilityLocalAnimMontageForMesh::LocalMontageInfo' has a wrong offset!");

// ScriptStruct VaultIt.VIGameplayAbilityRepAnimMontageForMesh
// 0x0040 (0x0040 - 0x0000)
struct FVIGameplayAbilityRepAnimMontageForMesh final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityRepAnimMontage         RepMontageInfo;                                    // 0x0008(0x0038)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVIGameplayAbilityRepAnimMontageForMesh) == 0x000008, "Wrong alignment on FVIGameplayAbilityRepAnimMontageForMesh");
static_assert(sizeof(FVIGameplayAbilityRepAnimMontageForMesh) == 0x000040, "Wrong size on FVIGameplayAbilityRepAnimMontageForMesh");
static_assert(offsetof(FVIGameplayAbilityRepAnimMontageForMesh, Mesh) == 0x000000, "Member 'FVIGameplayAbilityRepAnimMontageForMesh::Mesh' has a wrong offset!");
static_assert(offsetof(FVIGameplayAbilityRepAnimMontageForMesh, RepMontageInfo) == 0x000008, "Member 'FVIGameplayAbilityRepAnimMontageForMesh::RepMontageInfo' has a wrong offset!");

// ScriptStruct VaultIt.VIAbilityMeshMontage
// 0x0010 (0x0010 - 0x0000)
struct FVIAbilityMeshMontage final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVIAbilityMeshMontage) == 0x000008, "Wrong alignment on FVIAbilityMeshMontage");
static_assert(sizeof(FVIAbilityMeshMontage) == 0x000010, "Wrong size on FVIAbilityMeshMontage");
static_assert(offsetof(FVIAbilityMeshMontage, Mesh) == 0x000000, "Member 'FVIAbilityMeshMontage::Mesh' has a wrong offset!");
static_assert(offsetof(FVIAbilityMeshMontage, Montage) == 0x000008, "Member 'FVIAbilityMeshMontage::Montage' has a wrong offset!");

// ScriptStruct VaultIt.VIAntiCheatSettings
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FVIAntiCheatSettings final
{
public:
	uint8                                         Pad_1ADD[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocationErrorThreshold;                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionErrorThreshold;                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightErrorThreshold;                              // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ADE[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVIAntiCheatSettings) == 0x000008, "Wrong alignment on FVIAntiCheatSettings");
static_assert(sizeof(FVIAntiCheatSettings) == 0x000018, "Wrong size on FVIAntiCheatSettings");
static_assert(offsetof(FVIAntiCheatSettings, LocationErrorThreshold) == 0x000008, "Member 'FVIAntiCheatSettings::LocationErrorThreshold' has a wrong offset!");
static_assert(offsetof(FVIAntiCheatSettings, DirectionErrorThreshold) == 0x00000C, "Member 'FVIAntiCheatSettings::DirectionErrorThreshold' has a wrong offset!");
static_assert(offsetof(FVIAntiCheatSettings, HeightErrorThreshold) == 0x000010, "Member 'FVIAntiCheatSettings::HeightErrorThreshold' has a wrong offset!");

// ScriptStruct VaultIt.VICapsuleInfo
// 0x0008 (0x0008 - 0x0000)
struct FVICapsuleInfo final
{
public:
	float                                         HalfHeight;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVICapsuleInfo) == 0x000004, "Wrong alignment on FVICapsuleInfo");
static_assert(sizeof(FVICapsuleInfo) == 0x000008, "Wrong size on FVICapsuleInfo");
static_assert(offsetof(FVICapsuleInfo, HalfHeight) == 0x000000, "Member 'FVICapsuleInfo::HalfHeight' has a wrong offset!");
static_assert(offsetof(FVICapsuleInfo, Radius) == 0x000004, "Member 'FVICapsuleInfo::Radius' has a wrong offset!");

// ScriptStruct VaultIt.VIAnimations
// 0x0010 (0x0010 - 0x0000)
struct FVIAnimations final
{
public:
	TArray<class UAnimMontage*>                   Animations;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVIAnimations) == 0x000008, "Wrong alignment on FVIAnimations");
static_assert(sizeof(FVIAnimations) == 0x000010, "Wrong size on FVIAnimations");
static_assert(offsetof(FVIAnimations, Animations) == 0x000000, "Member 'FVIAnimations::Animations' has a wrong offset!");

// ScriptStruct VaultIt.VIAnimSet
// 0x0050 (0x0050 - 0x0000)
struct FVIAnimSet final
{
public:
	TMap<float, struct FVIAnimations>             Animations;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVIAnimSet) == 0x000008, "Wrong alignment on FVIAnimSet");
static_assert(sizeof(FVIAnimSet) == 0x000050, "Wrong size on FVIAnimSet");
static_assert(offsetof(FVIAnimSet, Animations) == 0x000000, "Member 'FVIAnimSet::Animations' has a wrong offset!");

// ScriptStruct VaultIt.VITraceSettings
// 0x0038 (0x0038 - 0x0000)
struct FVITraceSettings final
{
public:
	float                                         MaxLedgeHeight;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLedgeHeight;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachDistance;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardTraceRadius;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownwardTraceRadius;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionFloatHeight;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxObjectVelocity;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ADF[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECollisionChannel>                     ObjectChannels;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   TraceProfile;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVITraceSettings) == 0x000008, "Wrong alignment on FVITraceSettings");
static_assert(sizeof(FVITraceSettings) == 0x000038, "Wrong size on FVITraceSettings");
static_assert(offsetof(FVITraceSettings, MaxLedgeHeight) == 0x000000, "Member 'FVITraceSettings::MaxLedgeHeight' has a wrong offset!");
static_assert(offsetof(FVITraceSettings, MinLedgeHeight) == 0x000004, "Member 'FVITraceSettings::MinLedgeHeight' has a wrong offset!");
static_assert(offsetof(FVITraceSettings, ReachDistance) == 0x000008, "Member 'FVITraceSettings::ReachDistance' has a wrong offset!");
static_assert(offsetof(FVITraceSettings, ForwardTraceRadius) == 0x00000C, "Member 'FVITraceSettings::ForwardTraceRadius' has a wrong offset!");
static_assert(offsetof(FVITraceSettings, DownwardTraceRadius) == 0x000010, "Member 'FVITraceSettings::DownwardTraceRadius' has a wrong offset!");
static_assert(offsetof(FVITraceSettings, CollisionFloatHeight) == 0x000014, "Member 'FVITraceSettings::CollisionFloatHeight' has a wrong offset!");
static_assert(offsetof(FVITraceSettings, MaxObjectVelocity) == 0x000018, "Member 'FVITraceSettings::MaxObjectVelocity' has a wrong offset!");
static_assert(offsetof(FVITraceSettings, ObjectChannels) == 0x000020, "Member 'FVITraceSettings::ObjectChannels' has a wrong offset!");
static_assert(offsetof(FVITraceSettings, TraceProfile) == 0x000030, "Member 'FVITraceSettings::TraceProfile' has a wrong offset!");

// ScriptStruct VaultIt.VIBoneFBIKData
// 0x0048 (0x0048 - 0x0000)
struct FVIBoneFBIKData final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpRate;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AE0[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1AE1[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVIBoneFBIKData) == 0x000008, "Wrong alignment on FVIBoneFBIKData");
static_assert(sizeof(FVIBoneFBIKData) == 0x000048, "Wrong size on FVIBoneFBIKData");
static_assert(offsetof(FVIBoneFBIKData, BoneName) == 0x000000, "Member 'FVIBoneFBIKData::BoneName' has a wrong offset!");
static_assert(offsetof(FVIBoneFBIKData, InterpRate) == 0x000008, "Member 'FVIBoneFBIKData::InterpRate' has a wrong offset!");
static_assert(offsetof(FVIBoneFBIKData, bEnabled) == 0x00000C, "Member 'FVIBoneFBIKData::bEnabled' has a wrong offset!");
static_assert(offsetof(FVIBoneFBIKData, Location) == 0x000010, "Member 'FVIBoneFBIKData::Location' has a wrong offset!");
static_assert(offsetof(FVIBoneFBIKData, TargetLocation) == 0x000028, "Member 'FVIBoneFBIKData::TargetLocation' has a wrong offset!");
static_assert(offsetof(FVIBoneFBIKData, bReset) == 0x000040, "Member 'FVIBoneFBIKData::bReset' has a wrong offset!");

// ScriptStruct VaultIt.VIRepMotionMatch
// 0x0030 (0x0030 - 0x0000)
struct FVIRepMotionMatch final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVIRepMotionMatch) == 0x000008, "Wrong alignment on FVIRepMotionMatch");
static_assert(sizeof(FVIRepMotionMatch) == 0x000030, "Wrong size on FVIRepMotionMatch");
static_assert(offsetof(FVIRepMotionMatch, Location) == 0x000000, "Member 'FVIRepMotionMatch::Location' has a wrong offset!");
static_assert(offsetof(FVIRepMotionMatch, Direction) == 0x000018, "Member 'FVIRepMotionMatch::Direction' has a wrong offset!");

// ScriptStruct VaultIt.VIVaultInfo
// 0x0038 (0x0038 - 0x0000)
struct FVIVaultInfo
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RandomSeed;                                        // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AE2[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVIVaultInfo) == 0x000008, "Wrong alignment on FVIVaultInfo");
static_assert(sizeof(FVIVaultInfo) == 0x000038, "Wrong size on FVIVaultInfo");
static_assert(offsetof(FVIVaultInfo, Location) == 0x000000, "Member 'FVIVaultInfo::Location' has a wrong offset!");
static_assert(offsetof(FVIVaultInfo, Direction) == 0x000018, "Member 'FVIVaultInfo::Direction' has a wrong offset!");
static_assert(offsetof(FVIVaultInfo, Height) == 0x000030, "Member 'FVIVaultInfo::Height' has a wrong offset!");
static_assert(offsetof(FVIVaultInfo, RandomSeed) == 0x000034, "Member 'FVIVaultInfo::RandomSeed' has a wrong offset!");

// ScriptStruct VaultIt.VIVaultResult
// 0x0008 (0x0040 - 0x0038)
struct FVIVaultResult final : public FVIVaultInfo
{
public:
	bool                                          bSuccess;                                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AE3[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVIVaultResult) == 0x000008, "Wrong alignment on FVIVaultResult");
static_assert(sizeof(FVIVaultResult) == 0x000040, "Wrong size on FVIVaultResult");
static_assert(offsetof(FVIVaultResult, bSuccess) == 0x000038, "Member 'FVIVaultResult::bSuccess' has a wrong offset!");

// ScriptStruct VaultIt.VIGameplayAbilityTargetData_VaultInfo
// 0x0038 (0x0040 - 0x0008)
struct FVIGameplayAbilityTargetData_VaultInfo final : public FGameplayAbilityTargetData
{
public:
	struct FVIVaultInfo                           VaultInfo;                                         // 0x0008(0x0038)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVIGameplayAbilityTargetData_VaultInfo) == 0x000008, "Wrong alignment on FVIGameplayAbilityTargetData_VaultInfo");
static_assert(sizeof(FVIGameplayAbilityTargetData_VaultInfo) == 0x000040, "Wrong size on FVIGameplayAbilityTargetData_VaultInfo");
static_assert(offsetof(FVIGameplayAbilityTargetData_VaultInfo, VaultInfo) == 0x000008, "Member 'FVIGameplayAbilityTargetData_VaultInfo::VaultInfo' has a wrong offset!");

}

