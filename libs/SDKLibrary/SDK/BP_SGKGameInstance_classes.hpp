#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SGKGameInstance

#include "Basic.hpp"

#include "S_CraftingCost_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Peak53Teams_structs.hpp"
#include "S_StartingWeaponItem_structs.hpp"
#include "SteamCore_structs.hpp"
#include "E_SoundVolumes_structs.hpp"
#include "NetCore_structs.hpp"
#include "SteamCoreWeb_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SGKGameInstance.BP_SGKGameInstance_C
// 0x0268 (0x0428 - 0x01C0)
class UBP_SGKGameInstance_C final : public UGameInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FString                                 SaveGameSlotName;                                  // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          MenuOpenedLevel;                                   // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46D6[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SGKSettingsSaveData_C*              OptionsSave;                                       // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadSaveGame;                                      // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46D7[0x7];                                     // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             GameSettingsUpdated;                               // 0x01F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        MouseSense;                                        // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPeak53Teams                                  TeamSelection;                                     // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46D8[0x7];                                     // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                SelectedLoadout;                                   // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   PlayerName;                                        // 0x0218(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	class UClass*                                 Loadout;                                           // 0x0230(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	EPeak53Teams                                  PlayerTeam;                                        // 0x0238(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46D9[0x7];                                     // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Lobby_Name;                                        // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Map;                                               // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Max_Players;                                       // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHost;                                            // 0x0264(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInLobby;                                         // 0x0265(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46DA[0x2];                                     // 0x0266(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReadyState;                                        // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           TimerServerHearthbeat;                             // 0x0278(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowJoinInProgress;                               // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46DB[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               CurrentSteamID;                                    // 0x0288(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         WeaponSealsPrimary;                                // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         WeaponSealsSecondary;                              // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         WeaponInurgentsPrimary;                            // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         WeaponInurgentsSecondary;                          // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         WeaponTools;                                       // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FS_StartingWeaponItem>          WeaponPrimary;                                     // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FS_StartingWeaponItem>          WeaponSecondary;                                   // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FS_CraftingCost>                WeaponTool1;                                       // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FS_CraftingCost>                WeaponTool2;                                       // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   CurrentLevelName;                                  // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Aimed_Sense;                                       // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SteamGlobalRank;                                   // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJoiningSession;                                  // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDedicatedServer;                                 // 0x0335(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46DC[0x2];                                     // 0x0336(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerName;                                        // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ServerMap;                                         // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bRefreshingSteamInventory;                         // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46DD[0x7];                                     // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSteamInventoryFullUpdateFinished;                // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bRefreshingItemPrices;                             // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46DE[0x7];                                     // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamItemDetails>              CurrentSteamUserInventory;                         // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 SteamBuyItems;                                     // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EPeak53Teams                                  CurrentCustomizationTeam;                          // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46DF[0x7];                                     // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         All_Lodouts;                                       // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnGetAllLodoutsFinished;                           // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnLoadLodoutFinished;                              // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class USg_lodout_C*                           CurrentLoadedLoadout;                              // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         LocalSteamIDBanList;                               // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 URL;                                               // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FString>                         BanlistArray;                                      // 0x03F8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          FinishedList;                                      // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46E0[0x7];                                     // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerPassword;                                    // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSteamID                               CurrentLobby;                                      // 0x0420(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)

public:
	void BuyItem(int32 Item, const class FString& Price, const class FString& ItemName);
	void CreateHost(const class FString& LobbyName, const class FString& Param_Map, int32 MaxPlayers, const class FString& Param_ServerPassword);
	void DeleteOutfit(const class FString& OutfitName);
	void DestroySession();
	void ExecuteUbergraph_BP_SGKGameInstance(int32 EntryPoint);
	void GamepadIconsChanged(const class FString& NewValue);
	void GameSettingsUpdated__DelegateSignature(class UBP_SGKSettingsSaveData_C* SettingsSave);
	void GetClanServer(class ABP_SGKController_C* Controller, const class FString& E);
	void HandleNetworkError(ENetworkFailure FailureType, bool bIsServer);
	void HandleTravelError(ETravelFailure FailureType);
	void IsSteamLoggedIn(bool* NewParam);
	void LoadControls();
	void LoadSettingsSave();
	void LoadSoundVolumes();
	void MasterVolumeChanged(float NewValue);
	void MicroTxnAuthorizationResponse_Event(const struct FMicroTxnAuthorizationResponse& Data);
	void MusicVolumeChanged(float NewValue);
	void NewEquipmentSystemGetAllLodouts(TArray<class FString>* Output_Get);
	void NewEquipmentSystemLoadLodout(const class FString& SlotName);
	void NewEquipmentSystemSaveLodout(const class FString& InputPin, const class FString& Param_Name, EPeak53Teams Team, const class FString& CurrentEquipment);
	void NewEquipmentSystemSetCurrentLoadedLoadout(class USg_lodout_C* Param_CurrentLoadedLoadout);
	void OnCallback_069584F441ED12747510728B8C76FB57(const struct FSteamInventoryRequestPricesResult& Data, bool bWasSuccessful);
	void OnCallback_0ECF859444EF16DB985F5E907E8F0C73();
	void OnCallback_1231C0F74511A59F79CDB49F0BADED12(const class FString& Data, bool bWasSuccessful);
	void OnCallback_1C364D2C4A93FF1D4F3E77961B248B86(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_80E552D645B4023AB36CEC8A0F68D1A9();
	void OnCallback_90EF9AE24532E3D2476B03B876BA8C19(const class FString& Data, bool bWasSuccessful);
	void OnCallback_9111D06146DE5B2D17A2FBA5C69C4B88(const struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful);
	void OnCallback_B3258AC540506850B835529655447132(const class FString& Data, bool bWasSuccessful);
	void OnFailure_8034962C4E605A797BB8B4949077C243();
	void OnFailure_CED4DFDD4B22C3388B5C6E92B0A26220();
	void OnFailure_E70A373D4A015941F596A2B17B46C470();
	void OnGetAllLodoutsFinished__DelegateSignature(TArray<class FString>& ResultAllLodouts);
	void OnLoadLodoutFinished__DelegateSignature(class USg_lodout_C* Lodout);
	void OnMicroTxnAuthorizationResponse(const struct FMicroTxnAuthorizationResponse& Input);
	void OnRep_Loadout();
	void OnRep_PlayerName();
	void OnRep_PlayerTeam();
	void OnSteamInventoryFullUpdate(const struct FSteamInventoryFullUpdate& Data);
	void OnSteamInventoryFullUpdate_End();
	void OnSteamInventoryFullUpdateFinished__DelegateSignature(TArray<struct FSteamItemDetails>& Result);
	void OnSteamStartPurchaseResult(const struct FSteamInventoryStartPurchaseResult& Data);
	void OnSuccess_8034962C4E605A797BB8B4949077C243();
	void OnSuccess_CED4DFDD4B22C3388B5C6E92B0A26220();
	void OnSuccess_E70A373D4A015941F596A2B17B46C470();
	void ReceiveInit();
	void RefreshSteamInventory();
	void RequestSteamItemPrices();
	void ResetVariablesForNextGame();
	void ResetVarsMC();
	void Save_Settings();
	void ServerGetBanList(class ABP_SGKController_C* Controller);
	void ServerHearthbeat();
	void Set_Sensitivity(double Param_MouseSense);
	void SetGameSettings(const struct FS_GameSettings& GameSettings);
	void SetSensitivity_Aimed(double Param_Aimed_Sense);
	void SetupPlayerName();
	void SetVolume(E_SoundVolumes Sound, double Volume);
	void SFXVolumeChanged(float NewValue);
	void SGK_AimedSense(double* AimedSense);
	void SGK_GetLoadSaveGame(bool* Param_LoadSaveGame);
	void SGK_GetMenuOpenedLevel(bool* Param_MenuOpenedLevel);
	void SGK_GetSaveGameSlotName(class FString* Param_SaveGameSlotName);
	void SGK_MouseSense(double* Param_MouseSense);
	void SGK_Options_Save(class UBP_SGKSettingsSaveData_C** Settings);
	void SGK_SaveSettings();
	void SGK_SetAimedSense(double AimedSense);
	void SGK_SetLoadSaveGame(bool Param_LoadSaveGame);
	void SGK_SetMenuOpenedLevel(bool Param_MenuOpenedLevel);
	void SGK_SetMouseSense(double Param_MouseSense);
	void SGK_SetSaveGameSlotName(const class FString& Param_SaveGameSlotName);
	void SGK_SetVolume(E_SoundVolumes Sound, double Volume);
	void StartServerHearthbeat();
	void StopServerHearthbeat();
	void ToggleweaponBench();
	void UpdateSession();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SGKGameInstance_C">();
	}
	static class UBP_SGKGameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SGKGameInstance_C>();
	}
};
static_assert(alignof(UBP_SGKGameInstance_C) == 0x000008, "Wrong alignment on UBP_SGKGameInstance_C");
static_assert(sizeof(UBP_SGKGameInstance_C) == 0x000428, "Wrong size on UBP_SGKGameInstance_C");
static_assert(offsetof(UBP_SGKGameInstance_C, UberGraphFrame) == 0x0001C0, "Member 'UBP_SGKGameInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, SaveGameSlotName) == 0x0001C8, "Member 'UBP_SGKGameInstance_C::SaveGameSlotName' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, MenuOpenedLevel) == 0x0001D8, "Member 'UBP_SGKGameInstance_C::MenuOpenedLevel' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, OptionsSave) == 0x0001E0, "Member 'UBP_SGKGameInstance_C::OptionsSave' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, LoadSaveGame) == 0x0001E8, "Member 'UBP_SGKGameInstance_C::LoadSaveGame' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, GameSettingsUpdated) == 0x0001F0, "Member 'UBP_SGKGameInstance_C::GameSettingsUpdated' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, MouseSense) == 0x000200, "Member 'UBP_SGKGameInstance_C::MouseSense' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, TeamSelection) == 0x000208, "Member 'UBP_SGKGameInstance_C::TeamSelection' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, SelectedLoadout) == 0x000210, "Member 'UBP_SGKGameInstance_C::SelectedLoadout' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, PlayerName) == 0x000218, "Member 'UBP_SGKGameInstance_C::PlayerName' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, Loadout) == 0x000230, "Member 'UBP_SGKGameInstance_C::Loadout' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, PlayerTeam) == 0x000238, "Member 'UBP_SGKGameInstance_C::PlayerTeam' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, Lobby_Name) == 0x000240, "Member 'UBP_SGKGameInstance_C::Lobby_Name' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, Map) == 0x000250, "Member 'UBP_SGKGameInstance_C::Map' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, Max_Players) == 0x000260, "Member 'UBP_SGKGameInstance_C::Max_Players' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, IsHost) == 0x000264, "Member 'UBP_SGKGameInstance_C::IsHost' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, IsInLobby) == 0x000265, "Member 'UBP_SGKGameInstance_C::IsInLobby' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, ReadyState) == 0x000268, "Member 'UBP_SGKGameInstance_C::ReadyState' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, TimerServerHearthbeat) == 0x000278, "Member 'UBP_SGKGameInstance_C::TimerServerHearthbeat' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, AllowJoinInProgress) == 0x000280, "Member 'UBP_SGKGameInstance_C::AllowJoinInProgress' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, CurrentSteamID) == 0x000288, "Member 'UBP_SGKGameInstance_C::CurrentSteamID' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, WeaponSealsPrimary) == 0x000290, "Member 'UBP_SGKGameInstance_C::WeaponSealsPrimary' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, WeaponSealsSecondary) == 0x0002A0, "Member 'UBP_SGKGameInstance_C::WeaponSealsSecondary' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, WeaponInurgentsPrimary) == 0x0002B0, "Member 'UBP_SGKGameInstance_C::WeaponInurgentsPrimary' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, WeaponInurgentsSecondary) == 0x0002C0, "Member 'UBP_SGKGameInstance_C::WeaponInurgentsSecondary' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, WeaponTools) == 0x0002D0, "Member 'UBP_SGKGameInstance_C::WeaponTools' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, WeaponPrimary) == 0x0002E0, "Member 'UBP_SGKGameInstance_C::WeaponPrimary' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, WeaponSecondary) == 0x0002F0, "Member 'UBP_SGKGameInstance_C::WeaponSecondary' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, WeaponTool1) == 0x000300, "Member 'UBP_SGKGameInstance_C::WeaponTool1' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, WeaponTool2) == 0x000310, "Member 'UBP_SGKGameInstance_C::WeaponTool2' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, CurrentLevelName) == 0x000320, "Member 'UBP_SGKGameInstance_C::CurrentLevelName' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, Aimed_Sense) == 0x000328, "Member 'UBP_SGKGameInstance_C::Aimed_Sense' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, SteamGlobalRank) == 0x000330, "Member 'UBP_SGKGameInstance_C::SteamGlobalRank' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, IsJoiningSession) == 0x000334, "Member 'UBP_SGKGameInstance_C::IsJoiningSession' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, IsDedicatedServer) == 0x000335, "Member 'UBP_SGKGameInstance_C::IsDedicatedServer' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, ServerName) == 0x000338, "Member 'UBP_SGKGameInstance_C::ServerName' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, ServerMap) == 0x000348, "Member 'UBP_SGKGameInstance_C::ServerMap' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, bRefreshingSteamInventory) == 0x000358, "Member 'UBP_SGKGameInstance_C::bRefreshingSteamInventory' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, OnSteamInventoryFullUpdateFinished) == 0x000360, "Member 'UBP_SGKGameInstance_C::OnSteamInventoryFullUpdateFinished' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, bRefreshingItemPrices) == 0x000370, "Member 'UBP_SGKGameInstance_C::bRefreshingItemPrices' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, CurrentSteamUserInventory) == 0x000378, "Member 'UBP_SGKGameInstance_C::CurrentSteamUserInventory' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, SteamBuyItems) == 0x000388, "Member 'UBP_SGKGameInstance_C::SteamBuyItems' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, CurrentCustomizationTeam) == 0x000398, "Member 'UBP_SGKGameInstance_C::CurrentCustomizationTeam' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, All_Lodouts) == 0x0003A0, "Member 'UBP_SGKGameInstance_C::All_Lodouts' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, OnGetAllLodoutsFinished) == 0x0003B0, "Member 'UBP_SGKGameInstance_C::OnGetAllLodoutsFinished' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, OnLoadLodoutFinished) == 0x0003C0, "Member 'UBP_SGKGameInstance_C::OnLoadLodoutFinished' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, CurrentLoadedLoadout) == 0x0003D0, "Member 'UBP_SGKGameInstance_C::CurrentLoadedLoadout' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, LocalSteamIDBanList) == 0x0003D8, "Member 'UBP_SGKGameInstance_C::LocalSteamIDBanList' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, URL) == 0x0003E8, "Member 'UBP_SGKGameInstance_C::URL' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, BanlistArray) == 0x0003F8, "Member 'UBP_SGKGameInstance_C::BanlistArray' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, FinishedList) == 0x000408, "Member 'UBP_SGKGameInstance_C::FinishedList' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, ServerPassword) == 0x000410, "Member 'UBP_SGKGameInstance_C::ServerPassword' has a wrong offset!");
static_assert(offsetof(UBP_SGKGameInstance_C, CurrentLobby) == 0x000420, "Member 'UBP_SGKGameInstance_C::CurrentLobby' has a wrong offset!");

}

