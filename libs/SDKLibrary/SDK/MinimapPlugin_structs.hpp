#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinimapPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MinimapPlugin.EIconSizeUnit
// NumValues: 0x0003
enum class EIconSizeUnit : uint8
{
	ScreenSpace                              = 0,
	WorldSpace                               = 1,
	EIconSizeUnit_MAX                        = 2,
};

// Enum MinimapPlugin.EMapFogRevealMode
// NumValues: 0x0004
enum class EMapFogRevealMode : uint8
{
	Off                                      = 0,
	Temporary                                = 1,
	Permanent                                = 2,
	EMapFogRevealMode_MAX                    = 3,
};

// Enum MinimapPlugin.EIconFogInteraction
// NumValues: 0x0005
enum class EIconFogInteraction : uint8
{
	OnlyRenderWhenRevealing                  = 0,
	OnlyRenderWhenExplored                   = 1,
	AlwaysRenderUnderFog                     = 2,
	AlwaysRenderAboveFog                     = 3,
	EIconFogInteraction_MAX                  = 4,
};

// Enum MinimapPlugin.EIconBackgroundInteraction
// NumValues: 0x0006
enum class EIconBackgroundInteraction : uint8
{
	AlwaysRender                             = 0,
	OnlyRenderInSameVolume                   = 1,
	OnlyRenderOnSameFloor                    = 2,
	OnlyRenderInPriorityVolume               = 3,
	OnlyRenderOnPriorityFloor                = 4,
	EIconBackgroundInteraction_MAX           = 5,
};

// Enum MinimapPlugin.EMapViewSearchOption
// NumValues: 0x0006
enum class EMapViewSearchOption : uint8
{
	Any                                      = 0,
	OnPlayer                                 = 1,
	OnMapBackground                          = 2,
	OnMapFog                                 = 3,
	Disabled                                 = 4,
	EMapViewSearchOption_MAX                 = 5,
};

// Enum MinimapPlugin.EFogPostProcessVolumeOption
// NumValues: 0x0004
enum class EFogPostProcessVolumeOption : uint8
{
	AutoLocate                               = 0,
	AutoLocateOrCreate                       = 1,
	Manual                                   = 2,
	EFogPostProcessVolumeOption_MAX          = 3,
};

// Enum MinimapPlugin.EMapViewRotationMode
// NumValues: 0x0003
enum class EMapViewRotationMode : uint8
{
	UseFixedRotation                         = 0,
	InheritYaw                               = 1,
	EMapViewRotationMode_MAX                 = 2,
};

// ScriptStruct MinimapPlugin.MapBackgroundLevel
// 0x0030 (0x0030 - 0x0000)
struct FMapBackgroundLevel final
{
public:
	class UTexture2D*                             BackgroundTexture;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 Overlay;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelHeight;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24FC[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SamplingResolution;                                // 0x0020(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapBackgroundLevel) == 0x000008, "Wrong alignment on FMapBackgroundLevel");
static_assert(sizeof(FMapBackgroundLevel) == 0x000030, "Wrong size on FMapBackgroundLevel");
static_assert(offsetof(FMapBackgroundLevel, BackgroundTexture) == 0x000000, "Member 'FMapBackgroundLevel::BackgroundTexture' has a wrong offset!");
static_assert(offsetof(FMapBackgroundLevel, RenderTarget) == 0x000008, "Member 'FMapBackgroundLevel::RenderTarget' has a wrong offset!");
static_assert(offsetof(FMapBackgroundLevel, Overlay) == 0x000010, "Member 'FMapBackgroundLevel::Overlay' has a wrong offset!");
static_assert(offsetof(FMapBackgroundLevel, LevelHeight) == 0x000018, "Member 'FMapBackgroundLevel::LevelHeight' has a wrong offset!");
static_assert(offsetof(FMapBackgroundLevel, SamplingResolution) == 0x000020, "Member 'FMapBackgroundLevel::SamplingResolution' has a wrong offset!");

}

