#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_BackgroundBlur

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WB_BackgroundBlur.WB_BackgroundBlur_C.ExecuteUbergraph_WB_BackgroundBlur
// 0x0080 (0x0080 - 0x0000)
struct WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3708[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3709[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_2;                              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_3;                              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_370A[0x1];                                     // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default_2;                           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_370B[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_PlaybackSpeed_1;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_PlaybackSpeed;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_370C[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_3;                               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_3;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_370D[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast; // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast_1; // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur) == 0x000008, "Wrong alignment on WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur");
static_assert(sizeof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur) == 0x000080, "Wrong size on WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, EntryPoint) == 0x000000, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, Temp_bool_Variable) == 0x000004, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, Temp_int_Variable) == 0x000008, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, Temp_bool_Variable_1) == 0x00000C, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, Temp_byte_Variable) == 0x00000D, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, Temp_byte_Variable_1) == 0x00000E, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, Temp_bool_Variable_2) == 0x00000F, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, K2Node_Select_Default) == 0x000010, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, Temp_int_Variable_1) == 0x000014, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, Temp_int_Variable_2) == 0x000018, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, K2Node_Select_Default_1) == 0x00001C, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, Temp_bool_Variable_3) == 0x000030, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, Temp_byte_Variable_2) == 0x000031, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, Temp_byte_Variable_3) == 0x000032, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, K2Node_CreateDelegate_OutputDelegate_1) == 0x000034, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, K2Node_Select_Default_2) == 0x000044, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, K2Node_CustomEvent_PlaybackSpeed_1) == 0x000048, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::K2Node_CustomEvent_PlaybackSpeed_1' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, K2Node_CustomEvent_PlaybackSpeed) == 0x000050, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::K2Node_CustomEvent_PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, K2Node_Event_IsDesignTime) == 0x000058, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, Temp_int_Variable_3) == 0x00005C, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, CallFunc_PlayAnimation_ReturnValue) == 0x000060, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, K2Node_Select_Default_3) == 0x000068, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, CallFunc_PlayAnimation_ReturnValue_1) == 0x000070, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast) == 0x000078, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur, CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast_1) == 0x00007C, "Member 'WB_BackgroundBlur_C_ExecuteUbergraph_WB_BackgroundBlur::CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast_1' has a wrong offset!");

// Function WB_BackgroundBlur.WB_BackgroundBlur_C.FadeIn
// 0x0008 (0x0008 - 0x0000)
struct WB_BackgroundBlur_C_FadeIn final
{
public:
	double                                        PlaybackSpeed;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_BackgroundBlur_C_FadeIn) == 0x000008, "Wrong alignment on WB_BackgroundBlur_C_FadeIn");
static_assert(sizeof(WB_BackgroundBlur_C_FadeIn) == 0x000008, "Wrong size on WB_BackgroundBlur_C_FadeIn");
static_assert(offsetof(WB_BackgroundBlur_C_FadeIn, PlaybackSpeed) == 0x000000, "Member 'WB_BackgroundBlur_C_FadeIn::PlaybackSpeed' has a wrong offset!");

// Function WB_BackgroundBlur.WB_BackgroundBlur_C.FadeOut
// 0x0008 (0x0008 - 0x0000)
struct WB_BackgroundBlur_C_FadeOut final
{
public:
	double                                        PlaybackSpeed;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_BackgroundBlur_C_FadeOut) == 0x000008, "Wrong alignment on WB_BackgroundBlur_C_FadeOut");
static_assert(sizeof(WB_BackgroundBlur_C_FadeOut) == 0x000008, "Wrong size on WB_BackgroundBlur_C_FadeOut");
static_assert(offsetof(WB_BackgroundBlur_C_FadeOut, PlaybackSpeed) == 0x000000, "Member 'WB_BackgroundBlur_C_FadeOut::PlaybackSpeed' has a wrong offset!");

// Function WB_BackgroundBlur.WB_BackgroundBlur_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_BackgroundBlur_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_BackgroundBlur_C_PreConstruct) == 0x000001, "Wrong alignment on WB_BackgroundBlur_C_PreConstruct");
static_assert(sizeof(WB_BackgroundBlur_C_PreConstruct) == 0x000001, "Wrong size on WB_BackgroundBlur_C_PreConstruct");
static_assert(offsetof(WB_BackgroundBlur_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_BackgroundBlur_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

